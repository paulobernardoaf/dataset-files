<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\timestamps_filter.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_TIMESTAMPS_FILTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TIMESTAMPS_FILTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es_out.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"moving_avg.h"</cpp:file></cpp:include>



<enum>enum
<block>{
<decl><name>ES_OUT_TF_FILTER_GET_TIME</name> <init>= <expr><operator>(</operator><name>ES_OUT_PRIVATE_START</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>ES_OUT_TF_FILTER_DISCONTINUITY</name></decl>,
<decl><name>ES_OUT_TF_FILTER_RESET</name></decl>,
}</block>;</enum>

<struct>struct <name>timestamps_filter_s</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>moving_average_s</name></name></type> <name>mva</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>sequence_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>contiguous_last</name></decl>;</decl_stmt>

<struct>struct <name>name</name>
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>contiguous</name></decl>;</decl_stmt>
}</block> <decl><name>sync</name></decl>;</struct>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sequence</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tf_es_out_id_s</name>
<block>{
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timestamps_filter_s</name></name></type> <name>tf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pcrdiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pcrpacket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>contiguous</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tf_es_out_s</name>
<block>{
<decl_stmt><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>original_es_out</name></decl>;</decl_stmt>
<macro><name>DECL_ARRAY</name><argument_list>(<argument>struct tf_es_out_id_s *</argument>)</argument_list></macro> <expr_stmt><expr><name>es_list</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timestamps_filter_s</name></name></type> <name>pcrtf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_discontinuity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_t</name></type> <name>es_out</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timestamps_filter_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timestamps_filter_s</name></name> <modifier>*</modifier></type><name>tf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mva_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mva</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>sequence_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>contiguous_last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>contiguous</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>timestamps_filter_push</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timestamps_filter_s</name></name> <modifier>*</modifier></type><name>tf</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_discontinuity</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_contiguous</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_desync</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_dts</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mva_packet_s</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>mva_getLastPacket</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mva</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>dts</name></name> <operator>==</operator> <name>i_dts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>b_contiguous</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_maxdiff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>mva</name><operator>.</operator><name>i_packet</name></name> <operator>&gt;</operator> <name>MVA_PACKETS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_maxdiff</name> <operator>=</operator> <call><name>mva_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mva</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>i_maxdiff</name> <operator>&lt;</operator> <name>CLOCK_FREQ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_maxdiff</name> <operator>=</operator> <name>CLOCK_FREQ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>llabs</name><argument_list>(<argument><expr><name>i_dts</name> <operator>-</operator> <name><name>prev</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>i_maxdiff</name> <operator>||</operator> <name>b_discontinuity</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <call><name>mva_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mva</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>contiguous</name></name> <operator>=</operator> <name><name>tf</name><operator>-&gt;</operator><name>contiguous_last</name></name> <operator>+</operator> <name><name>prev</name><operator>-&gt;</operator><name>diff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>sequence_offset</name></name> <operator>=</operator> <name><name>tf</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>contiguous</name></name> <operator>-</operator> <name><name>tf</name><operator>-&gt;</operator><name>sync</name><operator>.</operator><name>stream</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TIMESTAMPS_FILTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4.4s found offset of %ld\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>prev</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name>i_dts</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>b_desync</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <name>i_dts</name> <operator>-</operator> <name><name>prev</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TIMESTAMPS_FILTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>next</name> <init>= <expr><name><name>prev</name><operator>-&gt;</operator><name>dts</name></name> <operator>+</operator> <call><name>mva_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mva</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4.4s expected %"</literal> <name>PRId64</name> <literal type="string">" / %"</literal> <name>PRId64</name> <literal type="string">" , prev %"</literal> <name>PRId64</name> <literal type="string">"+%"</literal> <name>PRId64</name>
<literal type="string">" error %lld comp %"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>i_dts</name></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><call><name>mva_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mva</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>b_contiguous</name></expr> ?</condition><then> <expr><call><name>llabs</name><argument_list>(<argument><expr><name>i_dts</name> <operator>-</operator> <name>next</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i_dts</name> <operator>+</operator> <name><name>tf</name><operator>-&gt;</operator><name>sequence_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>contiguous_last</name></name> <operator>=</operator> <name>i_dts</name> <operator>+</operator> <name><name>tf</name><operator>-&gt;</operator><name>sequence_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mva_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>mva</name></name></expr></argument>, <argument><expr><name>i_dts</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_desync</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tf_es_out_id_s</name></name> <modifier>*</modifier></type> <name>timestamps_filter_es_out_getID</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tf_es_out_s</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_id_s</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator>struct <name>tf_es_out_id_s</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<return>return <expr><name>cur</name></expr>;</return>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timestamps_filter_es_out_Reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tf_es_out_s</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>out</name><operator>-&gt;</operator><name>es_list</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_id_s</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator>struct <name>tf_es_out_id_s</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>es_list</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>timestamps_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>timestamps_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>pcrtf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>b_discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>timestamps_filter_es_out_Control</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_s</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>struct <name>tf_es_out_s</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>i_query</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>ES_OUT_SET_PCR</name></expr>:</case>
<case>case <expr><name>ES_OUT_SET_GROUP_PCR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_group</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_query</name> <operator>==</operator> <name>ES_OUT_SET_GROUP_PCR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_group</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va_list</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pcr</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va_list</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>timestamps_filter_push</name><argument_list>(<argument><expr><literal type="string">"PCR "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name></name></expr></argument>, <argument><expr><name>pcr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_discontinuity</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sequence</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>mva</name><operator>.</operator><name>i_packet</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_id_s</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator>struct <name>tf_es_out_id_s</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>contiguous</name></name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>contiguous_last</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>contiguous_last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>max</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TIMESTAMPS_FILTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"PCR no previous value, using %ld\n"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sync</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <name>pcr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sync</name><operator>.</operator><name>contiguous</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sequence_offset</name></name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>pcr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pcr</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sequence_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_query</name> <operator>==</operator> <name>ES_OUT_SET_GROUP_PCR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>original_es_out</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>i_group</name></expr></argument>, <argument><expr><name>pcr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>original_es_out</name></name></expr></argument>, <argument><expr><name>pcr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ES_OUT_RESET_PCR</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>timestamps_filter_es_out_Reset</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>ES_OUT_SET_ES_FMT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va_list</name></expr></argument>, <argument><expr><name>es_out_id_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>va_list</name></expr></argument>, <argument><expr><name>es_format_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_id_s</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>timestamps_filter_es_out_getID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>cur</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>original_es_out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES_FMT</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<case>case <expr><name>ES_OUT_TF_FILTER_GET_TIME</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>va_list</name></expr></argument>, <argument><expr><name>int64_t</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>contiguous_last</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_TF_FILTER_DISCONTINUITY</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>ES_OUT_TF_FILTER_RESET</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>timestamps_filter_es_out_Reset</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>es_out_vaControl</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>original_es_out</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>va_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>timestamps_filter_es_out_Send</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_s</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>struct <name>tf_es_out_s</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_id_s</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>timestamps_filter_es_out_getID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>timestamps_filter_push</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_discontinuity</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>contiguous</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sequence</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sequence</name></name></expr>)</condition> 
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>mva</name><operator>.</operator><name>i_packet</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>mva</name><operator>.</operator><name>i_packet</name></name> <operator>!=</operator> <name><name>cur</name><operator>-&gt;</operator><name>pcrpacket</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>pcrdiff</name></name> <operator>=</operator> <call><name>mva_getLastDTS</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>mva</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>mva_getLastDTS</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>mva</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_offsetdiff</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sequence_offset</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sequence_offset</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_offsetdiff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sequence_offset</name></name> <operator>-=</operator> <name>i_offsetdiff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TIMESTAMPS_FILTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ^ diff pcr %"</literal> <name>PRId64</name> <literal type="string">" off %"</literal> <name>PRId64</name> <literal type="string">" ********** pcrnum %u seq %u/%u\n"</literal></expr></argument>,
<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>pcrdiff</name></name></expr></argument>, <argument><expr><name>i_offsetdiff</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>mva</name><operator>.</operator><name>i_packet</name></name></expr></argument>,
<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sequence</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>mva</name><operator>.</operator><name>i_packet</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>contiguous</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sync</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sync</name><operator>.</operator><name>stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sync</name><operator>.</operator><name>contiguous</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sync</name><operator>.</operator><name>contiguous</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sequence_offset</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sync</name><operator>.</operator><name>contiguous</name></name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sync</name><operator>.</operator><name>stream</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>mva</name><operator>.</operator><name>i_packet</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>pcrpacket</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>mva</name><operator>.</operator><name>i_packet</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sequence</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pcrtf</name><operator>.</operator><name>sequence</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+=</operator> <name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sequence_offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <name><name>cur</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>sequence_offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>original_es_out</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timestamps_filter_es_out_Delete</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_s</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>struct <name>tf_es_out_s</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type><name>timestamps_filter_es_out_Add</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>input_source_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_s</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>struct <name>tf_es_out_s</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_id_s</name></name> <modifier>*</modifier></type><name>tf_es_sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tf_es_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tf_es_sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>timestamps_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf_es_sys</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_es_sys</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_es_sys</name><operator>-&gt;</operator><name>pcrdiff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_es_sys</name><operator>-&gt;</operator><name>pcrpacket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_es_sys</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_es_sys</name><operator>-&gt;</operator><name>contiguous</name></name> <operator>=</operator> <operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tf_es_sys</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>original_es_out</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>tf_es_sys</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tf_es_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name></name></expr></argument>, <argument><expr><name>tf_es_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>tf_es_sys</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timestamps_filter_es_out_Del</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_s</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>struct <name>tf_es_out_s</name></expr></argument>, <argument><expr><name>es_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>original_es_out</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_id_s</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator>struct <name>tf_es_out_id_s</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_REMOVE</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>es_out_callbacks</name></name></type> <name>timestamps_filter_es_out_cbs</name> <init>=
<expr><block>{
<expr><name>timestamps_filter_es_out_Add</name></expr>,
<expr><name>timestamps_filter_es_out_Send</name></expr>,
<expr><name>timestamps_filter_es_out_Del</name></expr>,
<expr><name>timestamps_filter_es_out_Control</name></expr>,
<expr><name>timestamps_filter_es_out_Delete</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>es_out_t</name> <modifier>*</modifier></type> <name>timestamps_filter_es_out_New</name><parameter_list>(<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tf_es_out_s</name></name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>original_es_out</name></name> <operator>=</operator> <name>orig</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>b_discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>timestamps_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>pcrtf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>es_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>es_out</name><operator>.</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>timestamps_filter_es_out_cbs</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>tf</name><operator>-&gt;</operator><name>es_out</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
