<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\voc.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"VOC demuxer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>set_callback</name><argument_list>( <argument>Open</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_block_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_block_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_loop_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_silence_countdown</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ct_header</name><index>[]</index></name> <init>= <expr><literal type="string">"Creative Voice File\x1a"</literal></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_offset</name></decl>, <decl><type ref="prev"/><name>i_version</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_buf</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">26</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>ct_header</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data_offset</name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_data_offset</name> <operator>&lt;</operator> <literal type="number">26</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_version</name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_version</name> <operator>!=</operator> <literal type="number">0x10A</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_version</name> <operator>!=</operator> <literal type="number">0x114</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetWLE</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><literal type="number">0x1234</literal> <operator>+</operator> <operator>~</operator><name>i_version</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"CT Voice file v%d.%d"</literal></expr></argument>, <argument><expr><name>i_version</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name>i_version</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_data_offset</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_data_offset</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_silence_countdown</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block_start</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block_end</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_loop_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fmtcmp</name><parameter_list>( <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>ofmt</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>nfmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ofmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>!=</operator> <name><name>nfmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>ofmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <name><name>nfmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>ofmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>!=</operator> <name><name>nfmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>fix_voc_sr</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>sr</name></expr> )</condition>
<block>{<block_content>


<case>case <expr><literal type="number">11111</literal></expr>:</case>
<return>return <expr><literal type="number">11025</literal></expr>;</return>

<case>case <expr><literal type="number">22222</literal></expr>:</case>
<return>return <expr><literal type="number">22050</literal></expr>;</return>

<case>case <expr><literal type="number">44444</literal></expr>:</case>
<return>return <expr><literal type="number">44100</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>sr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadBlockHeader</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>new_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>i_block_size</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"new block: type: %u, size: %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>i_block_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>new_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><operator>*</operator><name>buf</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<goto>goto <name>corrupt</name>;</goto>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>i_block_size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_block_size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition> 
<block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_U8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x1</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_ADPCM_SBPRO_4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_ADPCM_SBPRO_3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x3</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_ADPCM_SBPRO_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x4</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16L</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_ALAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x7</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_MULAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported compression 0x%"</literal><name>PRIx8</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>*=</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>*</operator> <literal type="number">8</literal>
<operator>/</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <call><name>fix_voc_sr</name><argument_list>( <argument><expr><literal type="number">1000000L</literal> <operator>/</operator> <operator>(</operator><literal type="number">256L</literal> <operator>-</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name>
<operator>*</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>new_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>new_fmt</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_block_size</name> <operator>!=</operator> <literal type="number">3</literal> <operator>)</operator>
<operator>||</operator> <operator>(</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_block_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_silence_countdown</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_U8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <call><name>fix_voc_sr</name><argument_list>( <argument><expr><literal type="number">1000000L</literal> <operator>/</operator> <operator>(</operator><literal type="number">256L</literal> <operator>-</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_block_size</name> <operator>!=</operator> <literal type="number">2</literal> <operator>)</operator>
<operator>||</operator> <operator>(</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_block_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_loop_count</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_loop_offset</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 
<if_stmt><if>if<condition>( <expr><name>i_block_size</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_loop_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_loop_offset</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot loop: seek failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_loop_count</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>







<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_block_size</name> <operator>!=</operator> <literal type="number">4</literal> <operator>)</operator>
<operator>||</operator> <operator>(</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported compression"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_U8</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">256000000L</literal> <operator>/</operator>
<operator>(</operator><operator>(</operator><literal type="number">65536L</literal> <operator>-</operator> <call><name>GetWLE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>i_block_size</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"new block: type: %u, size: %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>i_block_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_block_size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_block_size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported compression"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> 
<if_stmt><if>if<condition>( <expr><name>i_block_size</name> <operator>&lt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_block_size</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal> <operator>)</operator>
<operator>||</operator> <operator>(</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition> 
<block>{<block_content>
<case>case <expr><literal type="number">0x0000</literal></expr>:</case> 
<switch>switch<condition>( <expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_U8</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_U16L</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported bit res.: %u bits"</literal></expr></argument>,
<argument><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><literal type="number">0x0004</literal></expr>:</case> 
<switch>switch<condition>( <expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S8</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16L</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported bit res.: %u bits"</literal></expr></argument>,
<argument><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported compression"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"0 channels detected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name>
<operator>*</operator> <operator>(</operator><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name>
<operator>*</operator> <name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unknown block type %u - skipping block"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case> 
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>i_block_size</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_block_size</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_block_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block_start</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block_end</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block_start</name></name> <operator>+</operator> <name>i_block_size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_block_size</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_silence_countdown</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"fourcc: %4.4s, channels: %d, "</literal>
<literal type="string">"freq: %d Hz, bitrate: %dKo/s, blockalign: %d, "</literal>
<literal type="string">"bits/samples: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>new_fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>, <argument><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,
<argument><expr><name><name>new_fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">8192</literal></expr></argument>, <argument><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr></argument>,
<argument><expr><name><name>new_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>!=</operator> <name>NULL</name> <operator>)</operator> <operator>&amp;&amp;</operator> <call><name>fmtcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_fmt</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"codec change needed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_fmt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>corrupt</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"corrupted file - halting demux"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_READ_FRAME</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_read_frames</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_silence_countdown</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_offset</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block_end</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>ReadBlockHeader</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_read_frames</name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block_end</name></name> <operator>-</operator> <name>i_offset</name> <operator>)</operator>
<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read_frames</name> <operator>&gt;</operator> <name>MAX_READ_FRAME</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_read_frames</name> <operator>=</operator> <name>MAX_READ_FRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name>
<operator>*</operator> <name>i_read_frames</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot read data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<expr_stmt><expr><name>i_read_frames</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_silence_countdown</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read_frames</name> <operator>&gt;</operator> <name>MAX_READ_FRAME</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_read_frames</name> <operator>=</operator> <name>MAX_READ_FRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_read_frames</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_read_frames</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_silence_countdown</name></name> <operator>-=</operator> <name>i_read_frames</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>i_read_frames</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block_start</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block_end</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr></argument>,
<argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
