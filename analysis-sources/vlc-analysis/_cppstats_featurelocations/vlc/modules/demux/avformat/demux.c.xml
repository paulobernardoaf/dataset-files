<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\avformat\demux.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/avcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/avcodec/chroma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/avcodec/avcommon_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../xiph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vobsub.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/display.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_AVUTIL_CODEC_ATTACHMENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<struct>struct <name>avformat_track_s</name>
<block>{
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pcr</name></decl>;</decl_stmt>
}</block>;</struct>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>avformat_track_s</name></name> <modifier>*</modifier></type><name>tracks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_tracks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pcr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_ssa_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_attachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachments</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>p_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_seekpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_update</name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFORMAT_IOBUFFER_SIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define> 




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>IORead</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>IOSeek</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>BuildSsaFrame</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_order</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateSeekPoint</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResetTime</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>CodecTagToFourcc</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>codec_tag</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vlc_bswap32</name><argument_list>(<argument><expr><name>codec_tag</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>codec_tag</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>get_rotation</name><parameter_list>(<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>kRotateKey</name> <init>= <expr><literal type="string">"rotate"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>rotation</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>kRotateKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>angle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>matrix</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_DISPLAYMATRIX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>matrix</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>det</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>det</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>av_display_matrix_flip</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>angle</name> <operator>=</operator> <call><name>lround</name><argument_list>(<argument><expr><call><name>av_display_rotation_get</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>angle</name> <operator>&gt;</operator> <literal type="number">45</literal> <operator>&amp;&amp;</operator> <name>angle</name> <operator>&lt;</operator> <literal type="number">135</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_270</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>angle</name> <operator>&gt;</operator> <literal type="number">135</literal> <operator>||</operator> <name>angle</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">135</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>det</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_VFLIPPED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_180</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>angle</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">45</literal> <operator>&amp;&amp;</operator> <name>angle</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">135</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_90</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_NORMAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>det</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>angle</name> <operator>&gt;</operator> <literal type="number">135</literal> <operator>||</operator> <name>angle</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">135</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>video_transform_t</name></type> <name>transform</name> <init>= <expr><operator>(</operator><name>video_transform_t</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_HFLIPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_TransformBy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name></name></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><name>rotation</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>angle</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>rotation</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>angle</name> <operator>&gt;</operator> <literal type="number">45</literal> <operator>&amp;&amp;</operator> <name>angle</name> <operator>&lt;</operator> <literal type="number">135</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_90</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>angle</name> <operator>&gt;</operator> <literal type="number">135</literal> <operator>&amp;&amp;</operator> <name>angle</name> <operator>&lt;</operator> <literal type="number">225</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_180</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>angle</name> <operator>&gt;</operator> <literal type="number">225</literal> <operator>&amp;&amp;</operator> <name>angle</name> <operator>&lt;</operator> <literal type="number">315</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_270</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_NORMAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVDictionary</name> <modifier>*</modifier></type> <name>BuildAVOptions</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_opts</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"avformat-options"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_opts</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_av_get_options</name><argument_list>( <argument><expr><name>psz_opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_opts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>options</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeUnclaimedOptions</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dict</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><operator>*</operator><name>pp_dict</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unknown option \"%s\""</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><name>pp_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FindStreamInfo</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nb_streams</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name><name>streamsoptions</name><index>[<expr><ternary><condition><expr><name>nb_streams</name></expr> ?</condition><then> <expr><name>nb_streams</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>streamsoptions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>streamsoptions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>streamsoptions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>streamsoptions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>streamsoptions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_avcodec_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>avformat_find_stream_info</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>streamsoptions</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_avcodec_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeUnclaimedOptions</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>streamsoptions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>streamsoptions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Could not find stream info: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avformat_ProbeDemux</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>,
<parameter><decl><type><name>AVInputFormat</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVProbeData</name></type> <name>pd</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>peek</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>buf_size</name></name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>, <argument><expr><literal type="number">2048</literal> <operator>+</operator> <literal type="number">213</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>pd</name><operator>.</operator><name>buf_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot peek"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>pd</name><operator>.</operator><name>buf_size</name></name> <operator>+</operator> <name>AVPROBE_PADDING_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>pd</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>pd</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>peek</name></expr></argument>, <argument><expr><name><name>pd</name><operator>.</operator><name>buf_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>pd</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>pd</name><operator>.</operator><name>buf_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVPROBE_PADDING_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_url</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"trying url: %s"</literal></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <name>psz_url</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_init_avformat</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_format</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"avformat-format"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_format</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>pp_fmt</name> <operator>=</operator> <call><name>av_find_input_format</name><argument_list>(<argument><expr><name>psz_format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"forcing format: %s"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_fmt</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_fmt</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_fmt</name> <operator>=</operator> <call><name>av_probe_input_format</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>pd</name><operator>.</operator><name>buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_fmt</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't guess format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ppsz_blacklist</name><index>[]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"mpeg"</literal></expr>, <expr><literal type="string">"vcd"</literal></expr>, <expr><literal type="string">"vob"</literal></expr>, <expr><literal type="string">"mpegts"</literal></expr>,

<expr><literal type="string">"redir"</literal></expr>, <expr><literal type="string">"sdp"</literal></expr>,

<expr><literal type="string">"ass"</literal></expr>, <expr><literal type="string">"srt"</literal></expr>, <expr><literal type="string">"microdvd"</literal></expr>,

<expr><literal type="string">"hevc"</literal></expr>, <expr><literal type="string">"h264"</literal></expr>,
<expr><literal type="string">""</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>*</operator><name><name>ppsz_blacklist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_fmt</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ppsz_blacklist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_fmt</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"psxstr"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcasecmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name><index>[<expr><name>i_len</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".str"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name><index>[<expr><name>i_len</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".xai"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name><index>[<expr><name>i_len</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".xa"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected format: %s"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_fmt</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avformat_OpenDemux</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start_time</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_can_seek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_url</name> <operator>=</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_url</name> <operator>=</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>avformat_ProbeDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_can_seek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ssa_order</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_update</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>p_io_buffer</name> <init>= <expr><call><name>av_malloc</name><argument_list>( <argument><expr><name>AVFORMAT_IOBUFFER_SIZE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_io_buffer</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>avformat_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>( <argument><expr><name>p_io_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <call><name>avio_alloc_context</name><argument_list>( <argument><expr><name>p_io_buffer</name></expr></argument>,
<argument><expr><name>AVFORMAT_IOBUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>IORead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IOSeek</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pb</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>( <argument><expr><name>p_io_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><call><name>BuildAVOptions</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>=</operator> <ternary><condition><expr><name>b_can_seek</name></expr> ?</condition><then> <expr><name>AVIO_SEEKABLE_NORMAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>avformat_open_input</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Could not open %s: %s"</literal></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>( <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>( <argument><expr><name>pb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>FindStreamInfo</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nb_streams</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>nb_streams</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"No streams found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>nb_streams</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>avformat_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <name>nb_streams</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Could not find stream info: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>avformat_track_s</name></name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecParameters</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>es_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>disposition</name></name> <operator>==</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name> <init>= <expr><call><name>GetVlcFourcc</name><argument_list>( <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>es_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>CodecTagToFourcc</name><argument_list>( <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">"audio"</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC_LATM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>long_name</name></name> <operator>&amp;&amp;</operator>
<call><name>strstr</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"raw ADTS AAC"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>es_fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>CodecTagToFourcc</name><argument_list>( <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"raw video, pixel format: %i"</literal></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>GetVlcChroma</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"was unable to find a FourCC match for raw video"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name> <operator>==</operator> <call><name>av_find_input_format</name><argument_list>(<argument><expr><literal type="string">"flv"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name> <operator>==</operator> <call><name>av_find_input_format</name><argument_list>(<argument><expr><literal type="string">"matroska"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name> <operator>==</operator> <call><name>av_find_input_format</name><argument_list>(<argument><expr><literal type="string">"mp4"</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_rotation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>es_fmt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:warning>#<cpp:directive>warning</cpp:directive> FIXME: implement palette transmission</cpp:warning>
<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">"video"</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>rate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBAVUTIL_VERSION_MICRO</name> <operator>&lt;</operator> <literal type="number">100</literal><operator>)</operator></expr></cpp:if> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBAVFORMAT_VERSION_INT</name> <operator>&gt;=</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">55</literal><operator>,</operator> <literal type="number">20</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><name><name>rate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>rate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>rate</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><name>rate</name> <operator>=</operator> <call><name>av_guess_frame_rate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><name><name>rate</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator> <name><name>rate</name><operator>.</operator><name>num</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>rate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>rate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>ar</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBAVUTIL_VERSION_MICRO</name> <operator>&lt;</operator> <literal type="number">100</literal><operator>)</operator></expr></cpp:if> 
<expr_stmt><expr><name><name>ar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name>av_guess_sample_aspect_ratio</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><name><name>ar</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>ar</name><operator>.</operator><name>den</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>ar</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>ar</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>es_fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>CodecTagToFourcc</name><argument_list>( <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"matroska"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVD_SUBTITLE</name> <operator>&amp;&amp;</operator>
<name><name>cp</name><operator>-&gt;</operator><name>extradata</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buf</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_buf</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>psz_buf</name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument> , <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_buf</name><index>[<expr><name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_start</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>psz_buf</name></expr></argument>, <argument><expr><literal type="string">"size:"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_start</name> <operator>&amp;&amp;</operator>
<call><name>vobsub_size_parse</name><argument_list>( <argument><expr><name>psz_start</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_width</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_height</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"original frame size: %dx%d"</literal></expr></argument>,
<argument><expr><name><name>es_fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_width</name></name></expr></argument>,
<argument><expr><name><name>es_fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"reading original frame size failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>psz_start</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>psz_buf</name></expr></argument>, <argument><expr><literal type="string">"palette:"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_start</name> <operator>&amp;&amp;</operator>
<call><name>vobsub_palette_parse</name><argument_list>( <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SPU_PALETTE_DEFINED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"vobsub palette read"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"reading original palette failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name> <operator>&amp;&amp;</operator>
<name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>dvb</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument> )</argument_list></call> <operator>|</operator>
<operator>(</operator><call><name>GetWBE</name><argument_list>( <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MOV_TEXT</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">"subtitle"</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>es_fmt</name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>CodecTagToFourcc</name><argument_list>( <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AVUTIL_CODEC_ATTACHMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_ATTACHMENT</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attachment</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">"attachment"</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TTF</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>av_dict_get</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>filename</name> <operator>&amp;&amp;</operator> <name><name>filename</name><operator>-&gt;</operator><name>value</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_attachment</name> <operator>=</operator> <call><name>vlc_input_attachment_New</name><argument_list>(
<argument><expr><name><name>filename</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"application/x-truetype-font"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_attachment</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>,
<argument><expr><name>p_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported attachment type (%u) in avformat demux"</literal></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_DATA</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">"data"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported track type (%u:%u) in avformat demux"</literal></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>language</name> <init>= <expr><call><name>av_dict_get</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>language</name> <operator>&amp;&amp;</operator> <name><name>language</name><operator>-&gt;</operator><name>value</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>language</name><operator>-&gt;</operator><name>value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_DEFAULT</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name> <operator>+</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AVUTIL_CODEC_ATTACHMENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_ATTACHMENT</name></expr> )</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_DATA</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_ogg</name> <init>= <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_extra</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_THEORA</name> <operator>&amp;&amp;</operator> <name>b_ogg</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pi_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>pp_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_count</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i_count</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_extra</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pi_size</name><index>[<expr><name>i_count</name></expr>]</index></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp_data</name><index>[<expr><name>i_count</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_extra</name> <operator>&lt;</operator> <name><name>pi_size</name><index>[<expr><name>i_count</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_extra</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pi_size</name><index>[<expr><name>i_count</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_extra</name> <operator>-=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pi_size</name><index>[<expr><name>i_count</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>xiph_PackHeaders</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name>pi_size</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument>, <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SPEEX</name> <operator>&amp;&amp;</operator> <name>b_ogg</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_dummy_comment</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pi_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>pp_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pi_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>p_dummy_comment</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p_dummy_comment</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pi_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>xiph_PackHeaders</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name>pi_size</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_dummy_comment</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'s'</literal></expr>,
<expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'s'</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pi_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>pp_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pi_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>p_dummy_comment</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p_dummy_comment</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pi_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>xiph_PackHeaders</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name>pi_size</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>cp</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>es_fmt</name><operator>.</operator><name>i_extra</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>es_fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>es_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_DEFAULT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES_DEFAULT</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"adding es: %s codec = %4.4s (%d)"</literal></expr></argument>,
<argument><expr><name>psz_type</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fcc</name></expr></argument>, <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>es_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_NOPTS_VALUE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_start_time</name> <operator>=</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"AVFormat(%s %s) supported stream"</literal></expr></argument>, <argument><expr><call><name>AVPROVIDER</name><argument_list>(<argument><expr><name>LIBAVFORMAT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LIBAVFORMAT_IDENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - format = %s (%s)"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - start time = %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i_start_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - duration = %"</literal><name>PRId64</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name> <operator>!=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_NOPTS_VALUE</name> <operator>)</operator></expr> ?</condition><then>
<expr><call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_chapters</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>=</operator> <call><name>vlc_input_title_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>av_dict_get</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>title</name> <operator>&amp;&amp;</operator> <name><name>title</name><operator>-&gt;</operator><name>value</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>title</name><operator>-&gt;</operator><name>value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - chapter %d: %s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start</name> <operator>*</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument> )</argument_list></call> <operator>-</operator>
<operator>(</operator><ternary><condition><expr><name>i_start_time</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name>i_start_time</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ResetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>avformat_CloseDemux</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>pb</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>pb</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start_time</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_av_ret</name> <init>= <expr><call><name>av_read_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_av_ret</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_av_ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>avformat_track_s</name></name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVStream</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid time base for the stream %d"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SSA</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_frame</name> <operator>=</operator> <call><name>BuildSsaFrame</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ssa_order</name></name><operator>++</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_frame</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_frame</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_frame</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_NOPTS_VALUE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_start_time</name> <operator>=</operator> <call><name>vlc_tick_from_frac</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_start_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>==</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_NOPTS_VALUE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>vlc_tick_from_frac</name><argument_list>( <argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>*</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument> )</argument_list></call>
<operator>-</operator> <name>i_start_time</name> <operator>+</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>==</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_NOPTS_VALUE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>vlc_tick_from_frac</name><argument_list>( <argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>*</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument> )</argument_list></call>
<operator>-</operator> <name>i_start_time</name> <operator>+</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>duration</name></name> <operator>*</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"flv"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator>
<name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>!=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>==</operator> <name><name>pkt</name><operator>.</operator><name>pts</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>+</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>i_dts</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>+</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVFORMAT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"tk[%d] dts=%"</literal><name>PRId64</name><literal type="string">" pts=%"</literal><name>PRId64</name></expr></argument>,
<argument><expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>, <argument><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_ts_max</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_es</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ts_max</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_ts_max</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pcr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_ts_min</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_es</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pcr</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pcr</name> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>&gt;=</operator> <name>i_ts_max</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ts_min</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_ts_min</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pcr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_ts_min</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>&amp;&amp;</operator> <call><name>likely</name><argument_list>(<argument><expr><name>i_ts_min</name> <operator>!=</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>i_ts_min</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateSeekPoint</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateSeekPoint</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_time_offset</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_update</name></name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResetTime</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_NOPTS_VALUE</name> <operator>||</operator> <name>i_time</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CLOCK_FREQ</name> <operator>==</operator> <name>AV_TIME_BASE</name></expr></cpp:if>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name>i_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>lldiv_t</name></type> <name>q</name> <init>= <expr><call><name>lldiv</name><argument_list>( <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>quot</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>rem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>t</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pcr</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>t</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr></argument>, <argument><expr><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateSeekPoint</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>BuildSsaFrame</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_order</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_buffer_size</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>i_buffer_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i_buffer_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_layer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h0</name></decl>, <decl><type ref="prev"/><name>m0</name></decl>, <decl><type ref="prev"/><name>s0</name></decl>, <decl><type ref="prev"/><name>c0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"Dialogue: %d,%d:%d:%d.%d,%d:%d:%d.%d,%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_layer</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>h0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_position</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_position</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>i_position</name> <operator>&gt;=</operator> <name>i_buffer_size</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"%u,%d,%.*s"</literal></expr></argument>, <argument><expr><name>i_order</name></expr></argument>, <argument><expr><name>i_layer</name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>i_position</name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i_position</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame</name> <init>= <expr><call><name>block_heap_Alloc</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_frame</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><operator>(</operator><name>h1</name><operator>-</operator><name>h0</name><operator>)</operator> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator>
<operator>(</operator><name>m1</name><operator>-</operator><name>m0</name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator>
<operator>(</operator><name>s1</name><operator>-</operator><name>s0</name><operator>)</operator> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>VLC_TICK_FROM_MS</name> <argument_list>(<argument><expr><name>c1</name><operator>-</operator><name>c0</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_frame</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i_start_time</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>
<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i64</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>current</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <name>current</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i64</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name> <operator>!=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_NOPTS_VALUE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>precise</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>i_start_time</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DEMUX_SET_POSITION: %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name> <operator>==</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_NOPTS_VALUE</name> <operator>||</operator>
<operator>(</operator><call><name>av_seek_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name>AVSEEK_FLAG_BACKWARD</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <operator>(</operator><name>i_size</name> <operator>*</operator> <name>f</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DEMUX_SET_BYTE_POSITION: %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>av_seek_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name>AVSEEK_FLAG_BYTE</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ResetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>precise</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ResetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i64</name> <operator>-</operator> <name>i_start_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ResetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name> <operator>!=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_NOPTS_VALUE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>TO_AV_TS</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>precise</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DEMUX_SET_TIME: %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>av_seek_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i64</name> <operator>+</operator> <name>i_start_time</name></expr></argument>, <argument><expr><name>AVSEEK_FLAG_BACKWARD</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>precise</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ResetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i64</name> <operator>-</operator> <name>i_start_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ResetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>


<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>names</name><index>[]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>vlc_meta_Title</name></expr>]</index> <operator>=</operator> <literal type="string">"title"</literal></expr>,
<expr><index>[<expr><name>vlc_meta_Artist</name></expr>]</index> <operator>=</operator> <literal type="string">"artist"</literal></expr>,
<expr><index>[<expr><name>vlc_meta_Genre</name></expr>]</index> <operator>=</operator> <literal type="string">"genre"</literal></expr>,
<expr><index>[<expr><name>vlc_meta_Copyright</name></expr>]</index> <operator>=</operator> <literal type="string">"copyright"</literal></expr>,
<expr><index>[<expr><name>vlc_meta_Album</name></expr>]</index> <operator>=</operator> <literal type="string">"album"</literal></expr>,

<expr><index>[<expr><name>vlc_meta_Description</name></expr>]</index> <operator>=</operator> <literal type="string">"comment"</literal></expr>,

<expr><index>[<expr><name>vlc_meta_Date</name></expr>]</index> <operator>=</operator> <literal type="string">"date"</literal></expr>,
<expr><index>[<expr><name>vlc_meta_Setting</name></expr>]</index> <operator>=</operator> <literal type="string">"encoder"</literal></expr>,

<expr><index>[<expr><name>vlc_meta_Language</name></expr>]</index> <operator>=</operator> <literal type="string">"language"</literal></expr>,

<expr><index>[<expr><name>vlc_meta_Publisher</name></expr>]</index> <operator>=</operator> <literal type="string">"publisher"</literal></expr>,
<expr><index>[<expr><name>vlc_meta_EncodedBy</name></expr>]</index> <operator>=</operator> <literal type="string">"encoded_by"</literal></expr>,



}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_meta_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>names</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>names</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>av_dict_get</name><argument_list>( <argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>e</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>IsUTF8</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attach</name> <init>=
<expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_attachment_t</name><operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_attach</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_attachment_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>ppp_attach</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppp_attach</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>vlc_input_attachment_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name>ppp_attach</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_title</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_title_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_title_offset</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_seekpoint_offset</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_title</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>input_title_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>ppp_title</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppp_title</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <call><name>vlc_input_title_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>ppp_title</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_title_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_seekpoint_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_SET_TITLE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_title</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>||</operator> <name>i_title</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_SET_SEEKPOINT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_seekpoint</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>TO_AV_TS</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i_seekpoint</name></expr>]</index></name><operator>-&gt;</operator><name>i_time_offset</name></expr></argument>)</argument_list></call> <operator>+</operator>
<name>i_start_time</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DEMUX_SET_SEEKPOINT: %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>av_seek_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name>AVSEEK_FLAG_BACKWARD</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ResetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i64</name> <operator>-</operator> <name>i_start_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>flags</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_update</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_update</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>*</operator><name>flags</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_GET_TITLE</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>DEMUX_GET_SEEKPOINT</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>IORead</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>i_ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>IOSeek</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_absolute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVFORMAT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"IOSeek offset: %"</literal><name>PRId64</name><literal type="string">", whence: %i"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>( <expr><name>whence</name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVSEEK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AVSEEK_SIZE</name></expr>:</case>
<return>return <expr><name>i_size</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>SEEK_SET</name></expr>:</case>
<expr_stmt><expr><name>i_absolute</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEEK_CUR</name></expr>:</case>
<expr_stmt><expr><name>i_absolute</name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEEK_END</name></expr>:</case>
<expr_stmt><expr><name>i_absolute</name> <operator>=</operator> <name>i_size</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>i_absolute</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Trying to seek before the beginning"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_absolute</name> <operator>&gt;=</operator> <name>i_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Trying to seek too far : EOF?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_absolute</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"we were not allowed to seek, or EOF "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
