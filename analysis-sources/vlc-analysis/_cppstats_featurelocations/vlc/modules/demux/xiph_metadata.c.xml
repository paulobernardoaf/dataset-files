<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\xiph_metadata.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xiph_metadata.h"</cpp:file></cpp:include>

<function><type><name>input_attachment_t</name><modifier>*</modifier></type> <name>ParseFlacPicture</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_attachments</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_cover_score</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_cover_idx</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pi_cover_score</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">5</literal></expr>, 
<expr><literal type="number">4</literal></expr>, 
<expr><literal type="number">20</literal></expr>, 
<expr><literal type="number">19</literal></expr>, 
<expr><literal type="number">13</literal></expr>, 
<expr><literal type="number">18</literal></expr>, 
<expr><literal type="number">17</literal></expr>, 
<expr><literal type="number">16</literal></expr>, 
<expr><literal type="number">14</literal></expr>, 
<expr><literal type="number">15</literal></expr>, 
<expr><literal type="number">9</literal></expr>, 
<expr><literal type="number">8</literal></expr>, 
<expr><literal type="number">7</literal></expr>, 
<expr><literal type="number">10</literal></expr>, 
<expr><literal type="number">11</literal></expr>, 
<expr><literal type="number">6</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">12</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">2</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert(size &gt;= (x)); size -= (x); p_data += (x); } while (0)</cpp:value></cpp:define>






<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>size</name> <operator>&lt;</operator> <name>len</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mime</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>mime</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>mime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>size</name> <operator>&lt;</operator> <name>len</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>mime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attachment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>description</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>description</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name>description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>size</name> <operator>&lt;</operator> <literal type="number">20</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>size</name> <operator>&lt;</operator> <name>len</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>




<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>i_attachments</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"picture%u"</literal></expr></argument>, <argument><expr><name>i_attachments</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>mime</name></expr></argument>, <argument><expr><literal type="string">"image/jpeg"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".jpg"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>mime</name></expr></argument>, <argument><expr><literal type="string">"image/png"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".png"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_attachment</name> <operator>=</operator> <call><name>vlc_input_attachment_New</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><name>mime</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>,
<argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>type</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pi_cover_score</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>*</operator><name>i_cover_score</name> <operator>&lt;</operator> <name><name>pi_cover_score</name><index>[<expr><name>type</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>i_cover_idx</name> <operator>=</operator> <name>i_attachments</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>i_cover_score</name> <operator>=</operator> <name><name>pi_cover_score</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>mime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_attachment</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { i_data -= (x); p_data += (x); } while (0)</cpp:value></cpp:define>






<typedef>typedef <type><struct>struct <name>chapters_array_t</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>pp_chapters</name></decl>;</decl_stmt>
}</block></struct></type> <name>chapters_array_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>seekpoint_t</name> <modifier>*</modifier></type> <name>getChapterEntry</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_index</name></decl></parameter>, <parameter><decl><type><name>chapters_array_t</name> <modifier>*</modifier></type><name>p_array</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_index</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>i_index</name> <operator>&gt;=</operator> <name><name>p_array</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_newsize</name> <init>= <expr><name><name>p_array</name><operator>-&gt;</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>i_index</name> <operator>&gt;=</operator> <name>i_newsize</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_newsize</name> <operator>+=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_array</name><operator>-&gt;</operator><name>pp_chapters</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_array</name><operator>-&gt;</operator><name>pp_chapters</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_newsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>seekpoint_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_array</name><operator>-&gt;</operator><name>pp_chapters</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_array</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>i_newsize</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><name>i_newsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>seekpoint_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>tmp</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>p_array</name><operator>-&gt;</operator><name>pp_chapters</name></name></expr></argument>, <argument><expr><name><name>p_array</name><operator>-&gt;</operator><name>i_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>seekpoint_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_array</name><operator>-&gt;</operator><name>pp_chapters</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_array</name><operator>-&gt;</operator><name>pp_chapters</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_array</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>i_newsize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_array</name><operator>-&gt;</operator><name>pp_chapters</name><index>[<expr><name>i_index</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_array</name><operator>-&gt;</operator><name>pp_chapters</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>p_array</name><operator>-&gt;</operator><name>pp_chapters</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_Title</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_Artist</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_Genre</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_Copyright</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_Album</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_TrackNum</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_Description</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_Rating</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_Date</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_Language</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_Publisher</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_EncodedBy</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPHMETA_TrackTotal</name></cpp:macro> <cpp:value>(1 &lt;&lt; 12)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>xiph_ExtractCueSheetMeta</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_tag</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_quoted</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><name>psz_tag</name></expr></argument>, <argument><expr><name>i_tag</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_quoted</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_line</name><index>[<expr><name>i_tag</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>i_tag</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_value</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_out</name> <init>= <expr><name>psz_value</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>psz_line</name> <operator>+=</operator> <name>i_tag</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_escaped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>*</operator><name>psz_line</name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><operator>*</operator><name>psz_line</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>b_escaped</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_escaped</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>psz_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>psz_line</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>b_escaped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>b_escaped</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_escaped</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>psz_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>psz_line</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>psz_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>psz_line</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>psz_line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>psz_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>psz_value</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xiph_ParseCueSheetMeta</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_flags</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_seekpoint</name></decl></parameter>, <parameter><decl><type><name>seekpoint_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_seekpoint</name></decl></parameter>,
<parameter><decl><type><name>seekpoint_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_tmppoint</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_valid</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>pi_seekpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ppp_seekpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>p_seekpoint</name> <init>= <expr><operator>*</operator><name>pp_tmppoint</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_EXTRACT_CUEMETA</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>string</name></type></parameter>, <parameter><type><name>quoted</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if( !(*pi_flags &amp; XIPHMETA_##var) &amp;&amp;( psz_string = xiph_ExtractCueSheetMeta( psz_line, string, sizeof(string) - 1, quoted ) ) ){vlc_meta_Set( p_meta, vlc_meta_##var, psz_string );free( psz_string );*pi_flags |= XIPHMETA_##var;}</cpp:value></cpp:define>








<macro><name>TRY_EXTRACT_CUEMETA</name><argument_list>(<argument>Title</argument>, <argument><literal type="string">"TITLE \""</literal></argument>, <argument>true</argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>TRY_EXTRACT_CUEMETA</name><argument_list>(<argument>Genre</argument>, <argument><literal type="string">"REM GENRE "</literal></argument>, <argument>false</argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>TRY_EXTRACT_CUEMETA</name><argument_list>(<argument>Date</argument>, <argument><literal type="string">"REM DATE "</literal></argument>, <argument>false</argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>TRY_EXTRACT_CUEMETA</name><argument_list>(<argument>Artist</argument>, <argument><literal type="string">"PERFORMER \""</literal></argument>, <argument>true</argument>)</argument_list></macro>
<if_stmt><if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="string">" TRACK "</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_seekpoint</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pb_valid</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><operator>*</operator><name>pi_seekpoint</name></expr></argument>, <argument><expr><operator>*</operator><name>ppp_seekpoint</name></expr></argument>, <argument><expr><name>p_seekpoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_seekpoint_Delete</name><argument_list>( <argument><expr><name>p_seekpoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_tmppoint</name> <operator>=</operator> <name>p_seekpoint</name> <operator>=</operator> <call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>p_seekpoint</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="string">" INDEX 01 "</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_line</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%u:%u:%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_seekpoint</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>m</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">75</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>p_seekpoint</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_seekpoint</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_seekpoint</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>xiph_ExtractCueSheetMeta</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="string">" TITLE \""</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xiph_ParseCueSheet</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_flags</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_seekpoint</name></decl></parameter>, <parameter><decl><type><name>seekpoint_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_seekpoint</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>p_seekpoint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_head</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_tail</name> <init>= <expr><name>p_head</name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_tail</name> <operator>&lt;</operator> <name>p_data</name> <operator>+</operator> <name>i_data</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p_tail</name> <operator>==</operator> <literal type="number">0x0D</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><name>p_head</name></expr></argument>, <argument><expr><name>p_tail</name> <operator>-</operator> <name>p_head</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xiph_ParseCueSheetMeta</name><argument_list>( <argument><expr><name>pi_flags</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>,
<argument><expr><name>pi_seekpoint</name></expr></argument>, <argument><expr><name>ppp_seekpoint</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_seekpoint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_valid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><operator>(</operator><operator>++</operator><name>p_tail</name><operator>)</operator> <operator>==</operator> <literal type="number">0x0A</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_tail</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_head</name> <operator>=</operator> <name>p_tail</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p_tail</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>( <expr><name>p_seekpoint</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_valid</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><operator>*</operator><name>pi_seekpoint</name></expr></argument>, <argument><expr><operator>*</operator><name>ppp_seekpoint</name></expr></argument>, <argument><expr><name>p_seekpoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_seekpoint_Delete</name><argument_list>( <argument><expr><name>p_seekpoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>vorbis_ParseComment</name><argument_list>( <argument><expr><name>es_format_t</name> <operator>*</operator><name>p_fmt</name></expr></argument>, <argument><expr><name>vlc_meta_t</name> <operator>*</operator><operator>*</operator><name>pp_meta</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>p_data</name></expr></argument>, <argument><expr><name>size_t</name> <name>i_data</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>i_attachments</name></expr></argument>, <argument><expr><name>input_attachment_t</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>attachments</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>i_cover_score</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>i_cover_idx</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>i_seekpoint</name></expr></argument>, <argument><expr><name>seekpoint_t</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>ppp_seekpoint</name></expr></argument>,
<argument><expr><call><name>float</name> <argument_list>(<argument><expr><operator>*</operator> <name>ppf_replay_gain</name></expr></argument>)</argument_list></call><index>[<expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr>]</index></expr></argument>,
<argument><expr><call><name>float</name> <argument_list>(<argument><expr><operator>*</operator> <name>ppf_replay_peak</name></expr></argument>)</argument_list></call><index>[<expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr>]</index></expr></argument> )</argument_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>vendor_length</name> <init>= <expr><call><name>GetDWLE</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>vendor_length</name> <operator>&gt;</operator> <name>i_data</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><name>vendor_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_comment</name> <init>= <expr><call><name>GetDWLE</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_comment</name> <operator>&gt;</operator> <name>i_data</name> <operator>||</operator> <name>i_comment</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 


<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><operator>*</operator><name>pp_meta</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_meta</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_meta</name> <operator>=</operator> <name>p_meta</name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_meta</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>hasMetaFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chapters_array_t</name></type> <name>chapters_array</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_comment</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_data</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i_comment</name><operator>--</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>comment_size</name> <init>= <expr><call><name>GetDWLE</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>RM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>comment_size</name> <operator>&gt;</operator> <name>i_data</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>comment_size</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_comment</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>comment_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_comment</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>next_comment</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>comment_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_comment</name><index>[<expr><name>comment_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF_EXTRACT</name><parameter_list>(<parameter><type><name>txt</name></type></parameter>,<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if( !strncasecmp(psz_comment, txt, strlen(txt)) ) { const char *oldval = vlc_meta_Get( p_meta, vlc_meta_ ##var ); if( oldval &amp;&amp; (hasMetaFlags &amp; XIPHMETA_##var)) { char * newval; if( asprintf( &amp;newval, "%s,%s", oldval, &amp;psz_comment[strlen(txt)] ) == -1 ) newval = NULL; vlc_meta_Set( p_meta, vlc_meta_ ##var, newval ); free( newval ); } else vlc_meta_Set( p_meta, vlc_meta_ ##var, &amp;psz_comment[strlen(txt)] ); hasMetaFlags |= XIPHMETA_##var; }</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF_EXTRACT_ONCE</name><parameter_list>(<parameter><type><name>txt</name></type></parameter>,<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if( !strncasecmp(psz_comment, txt, strlen(txt)) &amp;&amp; !(hasMetaFlags &amp; XIPHMETA_##var) ) { vlc_meta_Set( p_meta, vlc_meta_ ##var, &amp;psz_comment[strlen(txt)] ); hasMetaFlags |= XIPHMETA_##var; }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF_EXTRACT_FMT</name><parameter_list>(<parameter><type><name>txt</name></type></parameter>,<parameter><type><name>var</name></type></parameter>,<parameter><type><name>fmt</name></type></parameter>,<parameter><type><name>target</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if( !strncasecmp(psz_comment, txt, strlen(txt)) ) { IF_EXTRACT(txt,var)if( fmt ){free( fmt-&gt;target );fmt-&gt;target = strdup(&amp;psz_comment[strlen(txt)]);}}</cpp:value></cpp:define>










<macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"TITLE="</literal></argument>, <argument>Title</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"ARTIST="</literal></argument>, <argument>Artist</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"GENRE="</literal></argument>, <argument>Genre</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"COPYRIGHT="</literal></argument>, <argument>Copyright</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"ALBUM="</literal></argument>, <argument>Album</argument> )</argument_list></macro>
<if_stmt><if type="elseif">else if<condition>( <expr><operator>!</operator><operator>(</operator><name>hasMetaFlags</name> <operator>&amp;</operator> <name>XIPHMETA_TrackNum</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"TRACKNUMBER="</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"TRACKNUMBER="</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>short</name> <name>unsigned</name></type> <name>u_track</name></decl>, <decl><type ref="prev"/><name>u_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_values</name> <init>= <expr><call><name>sscanf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_comment</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"TRACKNUMBER="</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%hu/%hu"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_track</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_total</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>nb_values</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>u_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_TrackNumber</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasMetaFlags</name> <operator>|=</operator> <name>XIPHMETA_TrackNum</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>nb_values</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>u_total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_TrackTotal</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasMetaFlags</name> <operator>|=</operator> <name>XIPHMETA_TrackTotal</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT_ONCE</name><argument_list>(<argument><literal type="string">"TRACKTOTAL="</literal></argument>, <argument>TrackTotal</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT_ONCE</name><argument_list>(<argument><literal type="string">"TOTALTRACKS="</literal></argument>, <argument>TrackTotal</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"DESCRIPTION="</literal></argument>, <argument>Description</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"COMMENT="</literal></argument>, <argument>Description</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"COMMENTS="</literal></argument>, <argument>Description</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"RATING="</literal></argument>, <argument>Rating</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"DATE="</literal></argument>, <argument>Date</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT_FMT</name><argument_list>(<argument><literal type="string">"LANGUAGE="</literal></argument>, <argument>Language</argument>, <argument>p_fmt</argument>, <argument>psz_language</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"ORGANIZATION="</literal></argument>, <argument>Publisher</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>IF_EXTRACT</name><argument_list>(<argument><literal type="string">"ENCODER="</literal></argument>, <argument>EncodedBy</argument> )</argument_list></macro>
<if_stmt><if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"METADATA_BLOCK_PICTURE="</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"METADATA_BLOCK_PICTURE="</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>attachments</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>next_comment</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_picture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><call><name>vlc_b64_decode_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_picture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>psz_comment</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"METADATA_BLOCK_PICTURE="</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attachment</name> <init>= <expr><call><name>ParseFlacPicture</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>,
<argument><expr><name>i_size</name></expr></argument>, <argument><expr><operator>*</operator><name>i_attachments</name></expr></argument>, <argument><expr><name>i_cover_score</name></expr></argument>, <argument><expr><name>i_cover_idx</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_attachment</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TAB_APPEND_CAST</name><argument_list>( <argument><expr><operator>(</operator><name>input_attachment_t</name><operator>*</operator><operator>*</operator><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><name>i_attachments</name></expr></argument>, <argument><expr><operator>*</operator><name>attachments</name></expr></argument>, <argument><expr><name>p_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>ppf_replay_gain</name> <operator>&amp;&amp;</operator> <name>ppf_replay_peak</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>next_comment</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_TRACK_GAIN="</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppf_replay_gain</name><operator>)</operator><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><operator>++</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_ALBUM_GAIN="</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppf_replay_gain</name><operator>)</operator><index>[<expr><name>AUDIO_REPLAY_GAIN_ALBUM</name></expr>]</index> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><operator>++</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_ALBUM_PEAK="</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppf_replay_peak</name><operator>)</operator><index>[<expr><name>AUDIO_REPLAY_GAIN_ALBUM</name></expr>]</index> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><operator>++</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_TRACK_PEAK="</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppf_replay_peak</name><operator>)</operator><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><operator>++</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"CHAPTER"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_chapt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>p_seekpoint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>psz_comment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>psz_comment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>psz_comment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>psz_comment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psz_comment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"NAME="</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>sscanf</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"CHAPTER%uNAME="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_chapt</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_seekpoint</name> <operator>=</operator> <call><name>getChapterEntry</name><argument_list>( <argument><expr><name>i_chapt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chapters_array</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator> <name>p_seekpoint</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>next_comment</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>p_seekpoint</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_seekpoint</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><operator>++</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"CHAPTER%u="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_chapt</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p</name> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>( <argument><expr><operator>++</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"%u:%u:%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_seekpoint</name> <operator>=</operator> <call><name>getChapterEntry</name><argument_list>( <argument><expr><name>i_chapt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chapters_array</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>p_seekpoint</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>next_comment</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_seekpoint</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>h</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="string">"cuesheet="</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xiph_ParseCueSheet</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hasMetaFlags</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>psz_comment</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>comment_size</name> <operator>-</operator> <literal type="number">9</literal></expr></argument>,
<argument><expr><name>i_seekpoint</name></expr></argument>, <argument><expr><name>ppp_seekpoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>psz_comment</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>psz_comment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>psz_comment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psz_comment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IF_EXTRACT</name></cpp:undef>
<label><name>next_comment</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RM</name><argument_list>( <argument><expr><name>comment_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RM</name></cpp:undef>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>chapters_array</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>chapters_array</name><operator>.</operator><name>pp_chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>TAB_APPEND_CAST</name><argument_list>( <argument><expr><operator>(</operator><name>seekpoint_t</name><operator>*</operator><operator>*</operator><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>i_seekpoint</name></expr></argument>, <argument><expr><operator>*</operator><name>ppp_seekpoint</name></expr></argument>,
<argument><expr><name><name>chapters_array</name><operator>.</operator><name>pp_chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>chapters_array</name><operator>.</operator><name>pp_chapters</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FindKateCategoryName</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Katei18nCategories</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>Katei18nCategories</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tag</name></expr></argument>, <argument><expr><name><name>Katei18nCategories</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_tag</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>Katei18nCategories</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_i18n</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Unknown category"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
