<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\ty.c">



































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../codec/cc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg/pes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"TY"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"TY Stream audio/video demux"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>




<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"ty"</literal></argument>, <argument><literal type="string">"tivo"</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERIES1_PES_LENGTH</name></cpp:macro> <cpp:value>(11)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERIES2_PES_LENGTH</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_PES_LENGTH</name></cpp:macro> <cpp:value>(14)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_PES_LENGTH</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTIVO_PTS_OFFSET</name></cpp:macro> <cpp:value>(6)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_PTS_OFFSET</name></cpp:macro> <cpp:value>(9)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_PTS_OFFSET</name></cpp:macro> <cpp:value>(9)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_PTS_OFFSET</name></cpp:macro> <cpp:value>(9)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_PKT_LENGTH</name></cpp:macro> <cpp:value>(1536)</cpp:value></cpp:define> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ty_VideoPacket</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xe0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ty_MPEGAudioPacket</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xc0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ty_AC3AudioPacket</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xbd</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_PEEK_COUNT</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define> 



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIVO_PES_FILEID</name></cpp:macro> <cpp:value>( 0xf5467abd )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIVO_PART_LENGTH</name></cpp:macro> <cpp:value>( 0x20000000 )</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_SIZE</name></cpp:macro> <cpp:value>( 128 * 1024 )</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>l_rec_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>rec_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>subrec_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_ty_pts</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ty_rec_hdr_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>chunk_bitmask</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ty_seq_table_t</name>;</typedef>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>TIVO_TYPE_UNKNOWN</name></decl>,
<decl><name>TIVO_TYPE_SA</name></decl>,
<decl><name>TIVO_TYPE_DTIVO</name></decl>
}</block></enum></type> <name>tivo_type_t</name>;</typedef>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>TIVO_SERIES_UNKNOWN</name></decl>,
<decl><name>TIVO_SERIES1</name></decl>,
<decl><name>TIVO_SERIES2</name></decl>
}</block></enum></type> <name>tivo_series_t</name>;</typedef>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>TIVO_AUDIO_UNKNOWN</name></decl>,
<decl><name>TIVO_AUDIO_AC3</name></decl>,
<decl><name>TIVO_AUDIO_MPEG</name></decl>
}</block></enum></type> <name>tivo_audio_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDS_MAX_DATA_SIZE</name></cpp:macro> <cpp:value>(32)</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum
<block>{
<decl><name>XDS_CLASS_CURRENT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>XDS_CLASS_FUTURE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>XDS_CLASS_CHANNEL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>XDS_CLASS_MISCELLANEOUS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>XDS_CLASS_PUBLIC_SERVICE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>XDS_CLASS_RESERVED</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>XDS_CLASS_UNDEFINED</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>XDS_CLASS_OTHER</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>XDS_MAX_CLASS_COUNT</name></decl>
}</block></enum></type> <name>xds_class_t</name>;</typedef>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_started</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_data</name><index>[<expr><name>XDS_MAX_DATA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_sum</name></decl>;</decl_stmt>
}</block></struct></type> <name>xds_packet_t</name>;</typedef>
<typedef>typedef <type><enum>enum
<block>{
<decl><name>XDS_META_PROGRAM_RATING_NONE</name></decl>,
<decl><name>XDS_META_PROGRAM_RATING_MPAA</name></decl>,
<decl><name>XDS_META_PROGRAM_RATING_TPG</name></decl>,

}</block></enum></type> <name>xds_meta_program_rating_t</name>;</typedef>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xds_meta_program_rating_t</name></type> <name>rating</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_rating</name></decl>;</decl_stmt>

}</block></struct></type> <name>xds_meta_program_t</name>;</typedef>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_channel_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_channel_call_letter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_channel_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xds_meta_program_t</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xds_meta_program_t</name></type> <name>future</name></decl>;</decl_stmt>
}</block></struct></type> <name>xds_meta_t</name>;</typedef>
<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_xds</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>xds_class_t</name></type> <name>i_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_future</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>xds_packet_t</name></type> <name><name>pkt</name><index>[<expr><name>XDS_MAX_CLASS_COUNT</name></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>bool</name></type> <name>b_meta_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xds_meta_t</name></type> <name>meta</name></decl>;</decl_stmt>

}</block></struct></type> <name>xds_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_video</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_audio</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>cc_data_t</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name><name>p_cc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xds_t</name></type> <name>xds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cur_chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_stuff_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_stream_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_have_master</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>tivo_type_t</name></type> <name>tivo_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>tivo_series_t</name></type> <name>tivo_series</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>tivo_audio_t</name></type> <name>audio_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_Pes_Length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_Pts_Offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pes_buffer</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_pes_buf_cnt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>l_ac3_pkt_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_last_ty_pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_first_ty_pts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_final_ty_pts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_seq_table_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bits_per_seq_entry</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>lastAudioPTS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>lastVideoPTS</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>rec_hdrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_cur_rec</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_num_recs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_seq_rec</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ty_seq_table_t</name> <modifier>*</modifier></type><name>seq_table</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_first_chunk</name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_chunk_header</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>get_pts</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>find_es_header</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_search_len</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ty_stream_seek_pct</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>seek_pct</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ty_stream_seek_time</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>parse_chunk_headers</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_num_recs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_payload_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>probe_stream</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>analyze_chunk</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_chunk</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_master</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DemuxRecVideo</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>rec_hdr</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DemuxRecAudio</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>rec_hdr</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DemuxRecCc</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>rec_hdr</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DemuxDecodeXds</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d2</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>XdsInit</name><parameter_list>( <parameter><decl><type><name>xds_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>XdsExit</name><parameter_list>( <parameter><decl><type><name>xds_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TY_ES_GROUP</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>U32_AT</name><argument_list>(<argument><expr><name>p_peek</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TIVO_PES_FILEID</name> <operator>||</operator>
<call><name>U32_AT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x02</literal> <operator>||</operator>
<call><name>U32_AT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CHUNK_SIZE</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>demux_IsPathExtension</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">".ty"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>demux_IsPathExtension</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">".ty+"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"this does not look like a TY file, "</literal>
<literal type="string">"continuing anyway..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"valid TY stream detected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>demux_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>demux_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_chunk</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_have_master</name></name> <operator>=</operator> <operator>(</operator><call><name>U32_AT</name><argument_list>(<argument><expr><name>p_peek</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TIVO_PES_FILEID</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastAudioPTS</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastVideoPTS</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_size</name></name> <operator>=</operator> <call><name>stream_Size</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>=</operator> <name>TIVO_TYPE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>=</operator> <name>TIVO_AUDIO_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>=</operator> <name>TIVO_SERIES_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_Pes_Length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_Pts_Offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_ac3_pkt_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>probe_stream</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_have_master</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"No master chunk found; seeking will be limited."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>==</operator> <name>TIVO_AUDIO_MPEG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_A52</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name>TY_ES_GROUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audio</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name>TY_ES_GROUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_video</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>cc_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XdsInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>xds</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>p_rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>eof</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>
















<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_chunk</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_rec</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_num_recs</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>get_chunk_header</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_num_recs</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>p_rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rec_hdrs</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_rec</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_rec</name><operator>-&gt;</operator><name>b_ext</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>l_rec_size</name> <init>= <expr><name><name>p_rec</name><operator>-&gt;</operator><name>l_rec_size</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if<condition>( <expr><name>l_rec_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_rec</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_block_in</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>l_rec_size</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator>
<name><name>p_block_in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<switch>switch<condition>( <expr><name><name>p_rec</name><operator>-&gt;</operator><name>rec_type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0xe0</literal></expr>:</case> 
<expr_stmt><expr><call><name>DemuxRecVideo</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_rec</name></expr></argument>, <argument><expr><name>p_block_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xc0</literal></expr>:</case> 
<expr_stmt><expr><call><name>DemuxRecAudio</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_rec</name></expr></argument>, <argument><expr><name>p_block_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>

<expr_stmt><expr><call><name>DemuxRecCc</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_rec</name></expr></argument>, <argument><expr><name>p_block_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid record type 0x%02x"</literal></expr></argument>, <argument><expr><name><name>p_rec</name><operator>-&gt;</operator><name>rec_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<case>case <expr><literal type="number">0x03</literal></expr>:</case> 
<case>case <expr><literal type="number">0x05</literal></expr>:</case> 
<if_stmt><if>if<condition>( <expr><name>p_block_in</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></switch>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_rec</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>


<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i64</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_size</name></name> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>i64</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i64</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_size</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ty_stream_seek_pct</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>




<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>VLC_TICK_FROM_NS</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_last_ty_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case> 

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case> 
<return>return <expr><call><name>ty_stream_seek_time</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><call><name>NS_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>
<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XdsExit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>xds</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cc_Exit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rec_hdrs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>get_pts</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pts</name> <init>= <expr><call><name>GetPESTimestamp</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><name>i_pts</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>find_es_header</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_search_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>i_search_len</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>count</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>check_sync_pes</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rec_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_Pes_Length</name></name></expr></argument> &gt;</argument_list></name> <name>rec_len</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PES header at %d not complete in record. storing."</literal></expr></argument>,
<argument><expr><name>offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pes_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_buf_cnt</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>rec_len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PES header not found in record of %d bytes!"</literal></expr></argument>,
<argument><expr><name>rec_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pes_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>offset</name></expr></argument>,
<argument><expr><name>rec_len</name> <operator>-</operator> <name>offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_buf_cnt</name></name> <operator>=</operator> <name>rec_len</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>rec_len</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastAudioPTS</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>get_pts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><name>offset</name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_Pts_Offset</name></name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>lastAudioPTS</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_Pes_Length</name></name></expr></argument>, <argument><expr><name>rec_len</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_Pes_Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_Pes_Length</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
msg_Dbg(p_demux, "pes hdr removed; buffer len=%d and has "
"%02x %02x %02x %02x %02x %02x %02x %02x "
"%02x %02x %02x %02x %02x %02x %02x %02x", p_block-&gt;i_buffer,
p_block-&gt;p_buffer[0], p_block-&gt;p_buffer[1],
p_block-&gt;p_buffer[2], p_block-&gt;p_buffer[3],
p_block-&gt;p_buffer[4], p_block-&gt;p_buffer[5],
p_block-&gt;p_buffer[6], p_block-&gt;p_buffer[7],
p_block-&gt;p_buffer[8], p_block-&gt;p_buffer[9],
p_block-&gt;p_buffer[10], p_block-&gt;p_buffer[11],
p_block-&gt;p_buffer[12], p_block-&gt;p_buffer[13],
p_block-&gt;p_buffer[14], p_block-&gt;p_buffer[15]);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxRecVideo</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>rec_hdr</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>subrec_type</name> <init>= <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>subrec_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>l_rec_size</name> <init>= <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>l_rec_size</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>esOffset1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>rec_type</name></name> <operator>==</operator> <literal type="number">0xe0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block_in</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
msg_Dbg(p_demux, "packet buffer has "
"%02x %02x %02x %02x %02x %02x %02x %02x "
"%02x %02x %02x %02x %02x %02x %02x %02x",
p_block_in-&gt;p_buffer[0], p_block_in-&gt;p_buffer[1],
p_block_in-&gt;p_buffer[2], p_block_in-&gt;p_buffer[3],
p_block_in-&gt;p_buffer[4], p_block_in-&gt;p_buffer[5],
p_block_in-&gt;p_buffer[6], p_block_in-&gt;p_buffer[7],
p_block_in-&gt;p_buffer[8], p_block_in-&gt;p_buffer[9],
p_block_in-&gt;p_buffer[10], p_block_in-&gt;p_buffer[11],
p_block_in-&gt;p_buffer[12], p_block_in-&gt;p_buffer[13],
p_block_in-&gt;p_buffer[14], p_block_in-&gt;p_buffer[15]);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>subrec_type</name> <operator>!=</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator> <name>subrec_type</name> <operator>!=</operator> <literal type="number">0x0c</literal> <operator>&amp;&amp;</operator>
<name>subrec_type</name> <operator>!=</operator> <literal type="number">0x08</literal> <operator>&amp;&amp;</operator> <name>l_rec_size</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><name>esOffset1</name> <operator>=</operator> <call><name>find_es_header</name><argument_list>( <argument><expr><name>ty_VideoPacket</name></expr></argument>, <argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>esOffset1</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastVideoPTS</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>get_pts</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><name>esOffset1</name> <operator>+</operator> <name>VIDEO_PTS_OFFSET</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>subrec_type</name> <operator>!=</operator> <literal type="number">0x06</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>l_rec_size</name> <operator>&gt;=</operator> <name>VIDEO_PES_LENGTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>VIDEO_PES_LENGTH</name> <operator>+</operator> <name>esOffset1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>VIDEO_PES_LENGTH</name> <operator>+</operator> <name>esOffset1</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"video rec type 0x%02x has short PES"</literal>
<literal type="string">" (%ld bytes)"</literal></expr></argument>, <argument><expr><name>subrec_type</name></expr></argument>, <argument><expr><name>l_rec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x06</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>subrec_type</name> <operator>!=</operator> <literal type="number">0x02</literal></expr> )</condition>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x0c</literal> <operator>&amp;&amp;</operator> <name>l_rec_size</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x07</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_last_ty_pts</name></name> <operator>=</operator> <name><name>rec_hdr</name><operator>-&gt;</operator><name>l_ty_pts</name></name></expr>;</expr_stmt>


</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_last_ty_pts</name></name> <operator>+=</operator> <literal type="number">35000000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastVideoPTS</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>lastVideoPTS</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastVideoPTS</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_chans</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_608channels</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_chans</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>i_chans</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_chans</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_cc</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_description</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Closed captions 1"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Closed captions 2"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Closed captions 3"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Closed captions 4"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_CEA608</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>ppsz_description</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name>TY_ES_GROUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cc</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_cc</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block_in</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_cc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_cc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>cc_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_video</name></name></expr></argument>, <argument><expr><name>p_block_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxRecAudio</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>rec_hdr</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>subrec_type</name> <init>= <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>subrec_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>l_rec_size</name> <init>= <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>l_rec_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>esOffset1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>rec_type</name></name> <operator>==</operator> <literal type="number">0xc0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block_in</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int i;
fprintf( stderr, "Audio Packet Header " );
for( i = 0 ; i &lt; 24 ; i++ )
fprintf( stderr, "%2.2x ", p_block_in-&gt;p_buffer[i] );
fprintf( stderr, "\n" );
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>subrec_type</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_buf_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_need</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_Pes_Length</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_buf_cnt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"continuing PES header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_need</name> <operator>&gt;=</operator> <name>l_rec_size</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pes_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_buf_cnt</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>l_rec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_buf_cnt</name></name> <operator>+=</operator> <name>l_rec_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pes_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_buf_cnt</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_need</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_need</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>==</operator> <name>TIVO_AUDIO_MPEG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>esOffset1</name> <operator>=</operator> <call><name>find_es_header</name><argument_list>(<argument><expr><name>ty_MPEGAudioPacket</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pes_buffer</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>esOffset1</name> <operator>=</operator> <call><name>find_es_header</name><argument_list>(<argument><expr><name>ty_AC3AudioPacket</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pes_buffer</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>esOffset1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"can't find audio PES header in packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastAudioPTS</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>get_pts</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pes_buffer</name><index>[ <expr><name>esOffset1</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_Pts_Offset</name></name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>lastAudioPTS</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_buf_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>==</operator> <name>TIVO_AUDIO_AC3</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>==</operator> <name>TIVO_SERIES2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_ac3_pkt_size</name></name> <operator>+</operator> <name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator>
<name>AC3_PKT_LENGTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_ac3_pkt_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_ac3_pkt_size</name></name> <operator>+=</operator> <name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x03</literal></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name>esOffset1</name> <operator>=</operator> <call><name>find_es_header</name><argument_list>( <argument><expr><name>ty_MPEGAudioPacket</name></expr></argument>,
<argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>








<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>esOffset1</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>l_rec_size</name> <operator>==</operator> <literal type="number">16</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastAudioPTS</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>get_pts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name><index>[
<expr><name>SA_PTS_OFFSET</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>check_sync_pes</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_block_in</name></expr></argument>, <argument><expr><name>esOffset1</name></expr></argument>,
<argument><expr><name>l_rec_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
msg_Dbg(p_demux, "packet buffer has "
"%02x %02x %02x %02x %02x %02x %02x %02x "
"%02x %02x %02x %02x %02x %02x %02x %02x",
p_block_in-&gt;p_buffer[0], p_block_in-&gt;p_buffer[1],
p_block_in-&gt;p_buffer[2], p_block_in-&gt;p_buffer[3],
p_block_in-&gt;p_buffer[4], p_block_in-&gt;p_buffer[5],
p_block_in-&gt;p_buffer[6], p_block_in-&gt;p_buffer[7],
p_block_in-&gt;p_buffer[8], p_block_in-&gt;p_buffer[9],
p_block_in-&gt;p_buffer[10], p_block_in-&gt;p_buffer[11],
p_block_in-&gt;p_buffer[12], p_block_in-&gt;p_buffer[13],
p_block_in-&gt;p_buffer[14], p_block_in-&gt;p_buffer[15]);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x04</literal></expr> )</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastAudioPTS</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>lastAudioPTS</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x09</literal></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name>esOffset1</name> <operator>=</operator> <call><name>find_es_header</name><argument_list>( <argument><expr><name>ty_AC3AudioPacket</name></expr></argument>,
<argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
msg_Dbg(p_demux, "buffer has "
"%02x %02x %02x %02x %02x %02x %02x %02x "
"%02x %02x %02x %02x %02x %02x %02x %02x",
p_block_in-&gt;p_buffer[0], p_block_in-&gt;p_buffer[1],
p_block_in-&gt;p_buffer[2], p_block_in-&gt;p_buffer[3],
p_block_in-&gt;p_buffer[4], p_block_in-&gt;p_buffer[5],
p_block_in-&gt;p_buffer[6], p_block_in-&gt;p_buffer[7],
p_block_in-&gt;p_buffer[8], p_block_in-&gt;p_buffer[9],
p_block_in-&gt;p_buffer[10], p_block_in-&gt;p_buffer[11],
p_block_in-&gt;p_buffer[12], p_block_in-&gt;p_buffer[13],
p_block_in-&gt;p_buffer[14], p_block_in-&gt;p_buffer[15]);
msg_Dbg(p_demux, "audio ES AC3 hdr at offset %d", esOffset1);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><call><name>check_sync_pes</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_block_in</name></expr></argument>, <argument><expr><name>esOffset1</name></expr></argument>,
<argument><expr><name>l_rec_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>==</operator> <name>TIVO_SERIES2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name>AC3_PKT_LENGTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_ac3_pkt_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_ac3_pkt_size</name></name> <operator>=</operator> <name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_PCR</name></expr></argument>,
<argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audio</name></name></expr></argument>, <argument><expr><name>p_block_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxRecCc</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>rec_hdr</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_field</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block_in</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>rec_type</name></name> <operator>==</operator> <literal type="number">0x01</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>rec_type</name></name> <operator>==</operator> <literal type="number">0x02</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_field</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DemuxDecodeXds</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>ex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>ex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>CC_MAX_DATA_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cc_AppendData</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><call><name>CC_PKT_BYTE0</name><argument_list>(<argument><expr><name>i_field</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>ex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ty_stream_seek_pct</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>seek_pct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_pos</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_size</name></name> <operator>*</operator> <name>seek_pct</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_skip_amt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_cur_part</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>i_cur_part</name> <operator>=</operator> <name>seek_pos</name> <operator>/</operator> <name>TIVO_PART_LENGTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_chunk</name></name> <operator>=</operator> <name>seek_pos</name> <operator>/</operator> <name>CHUNK_SIZE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_cur_part</name> <operator>*</operator> <name>TIVO_PART_LENGTH</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>parse_master</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_chunk</name></name> <operator>*</operator> <name>CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stuff_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_chunk_header</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_rec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator>
<operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>seek_pos</name> <operator>%</operator> <name>CHUNK_SIZE</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>CHUNK_SIZE</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_num_recs</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Seeked to file pos %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>seek_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" (chunk %d, record %d)"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_chunk</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_rec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>l_skip_amt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_rec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>l_skip_amt</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rec_hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l_rec_size</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_chunk</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>CHUNK_SIZE</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_num_recs</name></name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>l_skip_amt</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>



<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>XdsInit</name><parameter_list>( <parameter><decl><type><name>xds_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_xds</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_class</name></name> <operator>=</operator> <name>XDS_MAX_CLASS_COUNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_future</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>XDS_MAX_CLASS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pkt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>b_started</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_meta_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>XdsExit</name><parameter_list>( <parameter><decl><type><name>xds_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>psz_channel_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>psz_channel_call_letter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>psz_channel_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>current</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>current</name><operator>.</operator><name>psz_rating</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>future</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>future</name><operator>.</operator><name>psz_rating</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>XdsStringUtf8</name><parameter_list>( <parameter><decl><type><name>char</name></type> <name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">32</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_dst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_src</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_src</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E2</name><parameter_list>( <parameter><type><name>c</name></type></parameter>, <parameter><type><name>u1</name></type></parameter>, <parameter><type><name>u2</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>case c: dst[i_dst++] = u1; dst[i_dst++] = u2; break</cpp:value></cpp:define>
<expr_stmt><expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x2a</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x5c</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x5e</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xad</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x5f</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x60</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xba</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x7b</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x7c</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x7d</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x91</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x7e</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>E2</name></cpp:undef>
<default>default:</default>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i_dst</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p_src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i_dst</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>XdsChangeString</name><parameter_list>( <parameter><decl><type><name>xds_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_new</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>ppsz_dst</name> <operator>&amp;&amp;</operator> <name>psz_new</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_dst</name></expr></argument>, <argument><expr><name>psz_new</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>ppsz_dst</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz_new</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_new</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_dst</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_dst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_meta_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>XdsDecodeCurrentFuture</name><parameter_list>( <parameter><decl><type><name>xds_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>xds_packet_t</name> <modifier>*</modifier></type><name>pk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xds_meta_program_t</name> <modifier>*</modifier></type><name>p_prg</name> <init>= <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>b_future</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>future</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>current</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">32</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_rating</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>
<expr_stmt><expr><call><name>XdsStringUtf8</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>XdsChangeString</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_prg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x05</literal></expr>:</case>
<expr_stmt><expr><name>i_rating</name> <operator>=</operator> <operator>(</operator><name><name>pk</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x18</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_rating</name> <operator>==</operator> <literal type="number">0x08</literal></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>pppsz_ratings</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"None"</literal></expr>, <expr><literal type="string">"No rating (no content advisory)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TV-Y"</literal></expr>, <expr><literal type="string">"All Children (no content advisory)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TV-Y7"</literal></expr>, <expr><literal type="string">"Directed to Older Children (V = Fantasy Violence)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TV-G"</literal></expr>, <expr><literal type="string">"General Audience (no content advisory)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TV-PG"</literal></expr>, <expr><literal type="string">"Parental Guidance Suggested"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TV-14"</literal></expr>, <expr><literal type="string">"Parents Strongly Cautioned"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TV-MA"</literal></expr>, <expr><literal type="string">"Mature Audience Only"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"None"</literal></expr>, <expr><literal type="string">"No rating (no content advisory)"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_prg</name><operator>-&gt;</operator><name>rating</name></name> <operator>=</operator> <name>XDS_META_PROGRAM_RATING_TPG</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>XdsChangeString</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_prg</name><operator>-&gt;</operator><name>psz_rating</name></name></expr></argument>, <argument><expr><name><name>pppsz_ratings</name><index>[<expr><name><name>pk</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x07</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>



</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_rating</name> <operator>==</operator> <literal type="number">0x00</literal> <operator>||</operator> <name>i_rating</name> <operator>==</operator> <literal type="number">0x10</literal></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>pppsz_ratings</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"N/A"</literal></expr>, <expr><literal type="string">"N/A"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"G"</literal></expr>, <expr><literal type="string">"General Audiences"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PG"</literal></expr>, <expr><literal type="string">"Parental Guidance Suggested"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PG-13"</literal></expr>, <expr><literal type="string">"Parents Strongly Cautioned"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"R"</literal></expr>, <expr><literal type="string">"Restricted"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NC-17"</literal></expr>, <expr><literal type="string">"No one 17 and under admitted"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"No one under 17 admitted"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NR"</literal></expr>, <expr><literal type="string">"Not Rated"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_prg</name><operator>-&gt;</operator><name>rating</name></name> <operator>=</operator> <name>XDS_META_PROGRAM_RATING_MPAA</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>XdsChangeString</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_prg</name><operator>-&gt;</operator><name>psz_rating</name></name></expr></argument>, <argument><expr><name><name>pppsz_ratings</name><index>[<expr><name><name>pk</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x07</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>



</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_rating</name> <operator>==</operator> <literal type="number">0x18</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_prg</name><operator>-&gt;</operator><name>rating</name></name> <operator>=</operator> <name>XDS_META_PROGRAM_RATING_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>XdsChangeString</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_prg</name><operator>-&gt;</operator><name>psz_rating</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TY_XDS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"xxxxxxxxxxxxxxxXDS XdsDecode: class 'Current/Future (Unknown 0x%x)'\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>XdsDecodeChannel</name><parameter_list>( <parameter><decl><type><name>xds_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>xds_packet_t</name> <modifier>*</modifier></type><name>pk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">32</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>chan</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">32</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>pk</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>XdsStringUtf8</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>XdsChangeString</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>psz_channel_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>pk</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XdsStringUtf8</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>XdsChangeString</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>psz_channel_call_letter</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>pk</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XdsStringUtf8</name><argument_list>( <argument><expr><name>chan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>XdsChangeString</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>psz_channel_number</name></name></expr></argument>, <argument><expr><name>chan</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>XdsChangeString</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>meta</name><operator>.</operator><name>psz_channel_number</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="number">0x04</literal></expr>:</case>

<break>break;</break>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TY_XDS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"xxxxxxxxxxxxxxxXDS XdsDecode: class 'Channel (Unknown 0x%x)'\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>XdsDecode</name><parameter_list>( <parameter><decl><type><name>xds_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>xds_packet_t</name> <modifier>*</modifier></type><name>pk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>i_class</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>XDS_CLASS_CURRENT</name></expr>:</case>
<case>case <expr><name>XDS_CLASS_FUTURE</name></expr>:</case>
<expr_stmt><expr><call><name>XdsDecodeCurrentFuture</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>pk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XDS_CLASS_CHANNEL</name></expr>:</case>
<expr_stmt><expr><call><name>XdsDecodeChannel</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>pk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XDS_CLASS_MISCELLANEOUS</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TY_XDS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"xxxxxxxxxxxxxxxXDS XdsDecode: class 'Miscellaneous'\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>XDS_CLASS_PUBLIC_SERVICE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TY_XDS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"xxxxxxxxxxxxxxxXDS XdsDecode: class 'Public Service'\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>XdsParse</name><parameter_list>( <parameter><decl><type><name>xds_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d2</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>d1</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>d1</name> <operator>&gt;=</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>&lt;=</operator> <literal type="number">0x0e</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>xds_class_t</name></type> <name>i_class</name> <init>= <expr><operator>(</operator> <name>d1</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_type</name> <init>= <expr><name>d2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_start</name> <init>= <expr><name>d1</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xds_packet_t</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>pkt</name><index>[<expr><name>i_class</name></expr>]</index><index>[<expr><name>i_type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_start</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pk</name><operator>-&gt;</operator><name>b_started</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_xds</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_xds</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_class</name></name> <operator>=</operator> <name>i_class</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_future</name></name> <operator>=</operator> <operator>!</operator><name>b_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>b_started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_start</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>i_sum</name></name> <operator>=</operator> <name>d1</name> <operator>+</operator> <name>d2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>d1</name> <operator>==</operator> <literal type="number">0x0f</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>b_xds</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>xds_packet_t</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>pkt</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>i_class</name></name></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>i_type</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>i_sum</name></name> <operator>+=</operator> <name>d1</name> <operator>+</operator> <name>d2</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>pk</name><operator>-&gt;</operator><name>i_sum</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>b_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>pk</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>b_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>XdsDecode</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>pk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>b_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>d1</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>b_xds</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>xds_packet_t</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>pkt</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>i_class</name></name></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>i_type</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pk</name><operator>-&gt;</operator><name>i_data</name></name><operator>+</operator><literal type="number">2</literal> <operator>&gt;</operator> <name>XDS_MAX_DATA_SIZE</name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_xds</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>b_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><name><name>pk</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>d1</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><name><name>pk</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>d2</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>i_sum</name></name> <operator>+=</operator> <name>d1</name><operator>+</operator><name>d2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_xds</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DemuxDecodeXds</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XdsParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>xds</name></name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>xds</name><operator>.</operator><name>b_meta_changed</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>xds_meta_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>xds</name><operator>.</operator><name>meta</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p_meta</name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>m</name><operator>-&gt;</operator><name>psz_channel_name</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_SetPublisher</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>psz_channel_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>m</name><operator>-&gt;</operator><name>psz_channel_call_letter</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_SetTitle</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>psz_channel_call_letter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>m</name><operator>-&gt;</operator><name>psz_channel_number</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"Channel number"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>psz_channel_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_GROUP_META</name></expr></argument>, <argument><expr><name>TY_ES_GROUP</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>m</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>psz_name</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name> <init>= <expr><call><name>vlc_epg_New</name><argument_list>( <argument><expr><name>TY_ES_GROUP</name></expr></argument>, <argument><expr><name>TY_ES_GROUP</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_epg</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_evt</name> <init>= <expr><call><name>vlc_epg_event_New</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_evt</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>m</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_epg_AddEvent</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><name>p_evt</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_epg_event_Delete</name><argument_list>( <argument><expr><name>p_evt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_epg_SetCurrent</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>m</name><operator>-&gt;</operator><name>future</name><operator>.</operator><name>psz_name</name></name></expr> )</condition>
<block>{<block_content>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_GROUP_EPG</name></expr></argument>,
<argument><expr><name>TY_ES_GROUP</name></expr></argument>, <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xds</name><operator>.</operator><name>b_meta_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ty_stream_seek_time</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>l_seek_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_seq_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_skip_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>l_cur_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_cur_part</name> <init>= <expr><name>l_cur_pos</name> <operator>/</operator> <name>TIVO_PART_LENGTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_seek_secs</name> <init>= <expr><name>l_seek_time</name> <operator>/</operator> <literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_fwd_stamp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_have_master</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Skipping to time %02"</literal><name>PRIu64</name><literal type="string">":%02"</literal><name>PRIu64</name><literal type="string">":%02"</literal><name>PRIu64</name></expr></argument>,
<argument><expr><name>l_seek_secs</name> <operator>/</operator> <literal type="number">3600</literal></expr></argument>, <argument><expr><operator>(</operator><name>l_seek_secs</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>l_seek_secs</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><name>l_seek_time</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>l_first_ty_pts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"skipping to prior segment."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_cur_part</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <operator>(</operator><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>l_cur_pos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Attempt to seek past BOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>i_cur_part</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>TIVO_PART_LENGTH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_cur_part</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>parse_master</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>l_seek_time</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>l_final_ty_pts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"skipping to next segment."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_cur_part</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>TIVO_PART_LENGTH</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <operator>(</operator><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>l_cur_pos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seek error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>i_cur_part</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>TIVO_PART_LENGTH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_cur_part</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>parse_master</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>



<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_table_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l_timestamp</name> <operator>&gt;</operator> <name>l_seek_time</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stopping at seq entry %d."</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l_fwd_stamp</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l_timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_seq_entry</name> <operator>=</operator> <name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_table_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_cur_part</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>TIVO_PART_LENGTH</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <operator>(</operator><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>l_cur_pos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seek error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>i_cur_part</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>TIVO_PART_LENGTH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_cur_part</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>parse_master</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_seq_entry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_bits_per_seq_entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_chunk_nr</name> <init>= <expr><name>i_seq_entry</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bits_per_seq_entry</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l_chunk_offset</name> <init>= <expr><operator>(</operator><name>l_chunk_nr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>CHUNK_SIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"testing part %d chunk %"</literal><name>PRIu64</name><literal type="string">" mask 0x%02X bit %d"</literal></expr></argument>,
<argument><expr><name>i_cur_part</name></expr></argument>, <argument><expr><name>l_chunk_nr</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name><index>[<expr><name>i_seq_entry</name></expr>]</index></name><operator>.</operator><name><name>chunk_bitmask</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>%</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name><index>[<expr><name>i_seq_entry</name></expr>]</index></name><operator>.</operator><name><name>chunk_bitmask</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>%</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"has SEQ. seeking to chunk at 0x%"</literal><name>PRIu64</name></expr></argument>,
<argument><expr><operator>(</operator><name>i_cur_part</name> <operator>*</operator> <name>TIVO_PART_LENGTH</name><operator>)</operator> <operator>+</operator> <name>l_chunk_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>i_cur_part</name> <operator>*</operator> <name>TIVO_PART_LENGTH</name><operator>)</operator> <operator>+</operator>
<name>l_chunk_offset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stuff_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_chunk_header</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_rec</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_rec</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_num_recs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no SEQ hdr in chunk; table had one."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>l_cur_pos</name> <operator>/</operator> <name>CHUNK_SIZE</name><operator>)</operator> <operator>*</operator> <name>CHUNK_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stuff_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_chunk_header</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l_seek_secs</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rec_hdrs</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_rec</name></name></expr>]</index></name><operator>.</operator><name>l_ty_pts</name> <operator>/</operator>
<literal type="number">1000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"found SEQ hdr for timestamp %02"</literal><name>PRIu64</name><literal type="string">":%02"</literal><name>PRIu64</name><literal type="string">":%02"</literal><name>PRIu64</name></expr></argument>,
<argument><expr><name>l_seek_secs</name> <operator>/</operator> <literal type="number">3600</literal></expr></argument>,
<argument><expr><operator>(</operator><name>l_seek_secs</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>l_seek_secs</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>rec_hdrs</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_rec</name></name></expr>]</index></name><operator>.</operator><name>l_ty_pts</name> <operator>&gt;=</operator> <name>l_seek_time</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seek target found."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"timestamp too early. still scanning."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bits_per_seq_entry</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ty_stream_seek_time</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>l_fwd_stamp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>i_skip_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_rec</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip_cnt</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rec_hdrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l_rec_size</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if<condition>(<expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_skip_cnt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>i_skip_cnt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_rec</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_rec</name></name></expr>;</expr_stmt>



<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_master</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mst_buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_save_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_pts_secs</name></decl>;</decl_stmt>








<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>mst_buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_map_size</name> <init>= <expr><call><name>U32_AT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mst_buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><call><name>U32_AT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mst_buf</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bits_per_seq_entry</name></name> <operator>=</operator> <name>i_map_size</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_table_size</name></name> <operator>=</operator> <name>i</name> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>i_map_size</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_table_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>UINT32_MAX</name> <operator>&gt;</operator> <name>SSIZE_MAX</name><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>i_map_size</name> <operator>&gt;</operator> <name>SSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_table_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ty_seq_table_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_table_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_table_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>mst_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l_timestamp</name> <operator>=</operator> <call><name>U64_AT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mst_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_map_size</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unsupported SEQ bitmap size in master chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_map_size</name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>i_map_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>mst_buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>i_map_size</name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>i_map_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>chunk_bitmask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mst_buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_map_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_first_ty_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>l_timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>l_final_ty_pts</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>seq_table</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_table_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>l_timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_have_master</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pts_secs</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>l_first_ty_pts</name></name> <operator>/</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"first TY pts in master is %02"</literal><name>PRId64</name><literal type="string">":%02"</literal><name>PRId64</name><literal type="string">":%02"</literal><name>PRId64</name></expr></argument>,
<argument><expr><name>i_pts_secs</name> <operator>/</operator> <literal type="number">3600</literal></expr></argument>, <argument><expr><operator>(</operator><name>i_pts_secs</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>i_pts_secs</name> <operator>%</operator> <literal type="number">60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pts_secs</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>l_final_ty_pts</name></name> <operator>/</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"final TY pts in master is %02"</literal><name>PRId64</name><literal type="string">":%02"</literal><name>PRId64</name><literal type="string">":%02"</literal><name>PRId64</name></expr></argument>,
<argument><expr><name>i_pts_secs</name> <operator>/</operator> <literal type="number">3600</literal></expr></argument>, <argument><expr><operator>(</operator><name>i_pts_secs</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>i_pts_secs</name> <operator>%</operator> <literal type="number">60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_save_pos</name> <operator>+</operator> <name>CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>probe_stream</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_probe_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_buf</name></expr></argument>, <argument><expr><name>CHUNK_PEEK_COUNT</name> <operator>*</operator> <name>CHUNK_SIZE</name></expr></argument> )</argument_list></call> <operator>&lt;</operator>
<name>CHUNK_PEEK_COUNT</name> <operator>*</operator> <name>CHUNK_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Can't peek %d chunks"</literal></expr></argument>, <argument><expr><name>CHUNK_PEEK_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHUNK_PEEK_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>analyze_chunk</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>!=</operator> <name>TIVO_SERIES_UNKNOWN</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>!=</operator> <name>TIVO_AUDIO_UNKNOWN</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>!=</operator> <name>TIVO_TYPE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>CHUNK_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>==</operator> <name>TIVO_SERIES_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Can't determine Tivo Series."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_probe_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>==</operator> <name>TIVO_AUDIO_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Can't determine Tivo Audio Type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_probe_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>==</operator> <name>TIVO_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Can't determine Tivo Type (SA/DTivo)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_probe_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>b_probe_error</name></expr>?</condition><then><expr><name>VLC_EGENERIC</name></expr></then><else>:<expr><name>VLC_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>analyze_chunk</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_recs</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>p_hdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_6e0</name></decl>, <decl><type ref="prev"/><name>i_num_be0</name></decl>, <decl><type ref="prev"/><name>i_num_9c0</name></decl>, <decl><type ref="prev"/><name>i_num_3c0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload_size</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>U32_AT</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_chunk</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>TIVO_PES_FILEID</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>i_num_recs</name> <operator>=</operator> <name><name>p_chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_num_recs</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_chunk</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_hdrs</name> <operator>=</operator> <call><name>parse_chunk_headers</name><argument_list>(<argument><expr><name>p_chunk</name></expr></argument>, <argument><expr><name>i_num_recs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_payload_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>i_num_6e0</name> <operator>=</operator> <name>i_num_be0</name> <operator>=</operator> <name>i_num_9c0</name> <operator>=</operator> <name>i_num_3c0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_num_recs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<switch>switch <condition>(<expr><name><name>p_hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subrec_type</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>p_hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x6e0</literal></expr>:</case>
<expr_stmt><expr><name>i_num_6e0</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xbe0</literal></expr>:</case>
<expr_stmt><expr><name>i_num_be0</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x3c0</literal></expr>:</case>
<expr_stmt><expr><name>i_num_3c0</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x9c0</literal></expr>:</case>
<expr_stmt><expr><name>i_num_9c0</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"probe: chunk has %d 0x6e0 recs, %d 0xbe0 recs."</literal></expr></argument>,
<argument><expr><name>i_num_6e0</name></expr></argument>, <argument><expr><name>i_num_be0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i_num_6e0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected Series 1 Tivo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>=</operator> <name>TIVO_SERIES1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_Pes_Length</name></name> <operator>=</operator> <name>SERIES1_PES_LENGTH</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i_num_be0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected Series 2 Tivo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>=</operator> <name>TIVO_SERIES2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_Pes_Length</name></name> <operator>=</operator> <name>SERIES2_PES_LENGTH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i_num_9c0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected AC-3 Audio (DTivo)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>=</operator> <name>TIVO_AUDIO_AC3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>=</operator> <name>TIVO_TYPE_DTIVO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_Pts_Offset</name></name> <operator>=</operator> <name>AC3_PTS_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_Pes_Length</name></name> <operator>=</operator> <name>AC3_PES_LENGTH</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i_num_3c0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>=</operator> <name>TIVO_AUDIO_MPEG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected MPEG Audio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>==</operator> <name>TIVO_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_data_offset</name> <init>= <expr><operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name>i_num_recs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_num_recs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subrec_type</name> <operator>&lt;&lt;</operator> <literal type="number">0x08</literal> <operator>|</operator> <name><name>p_hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec_type</name><operator>)</operator> <operator>==</operator> <literal type="number">0x3c0</literal> <operator>&amp;&amp;</operator>
<name><name>p_hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l_rec_size</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_pes_offset</name> <init>= <expr><call><name>find_es_header</name><argument_list>(<argument><expr><name>ty_MPEGAudioPacket</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_chunk</name><index>[<expr><name>i_data_offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_pes_offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_chunk</name><index>[<expr><name>i_data_offset</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>i_pes_offset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>==</operator> <name>TIVO_SERIES1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected Stand-Alone Tivo"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>=</operator> <name>TIVO_TYPE_SA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_Pts_Offset</name></name> <operator>=</operator> <name>SA_PTS_OFFSET</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>==</operator> <name>TIVO_SERIES1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected DirecTV Tivo"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>=</operator> <name>TIVO_TYPE_DTIVO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_Pts_Offset</name></name> <operator>=</operator> <name>DTIVO_PTS_OFFSET</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_data_offset</name> <operator>+=</operator> <name><name>p_hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l_rec_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_hdrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>get_chunk_header</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_readSize</name></decl>, <decl><type ref="prev"/><name>i_num_recs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hdr_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload_size</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"parsing ty chunk #%d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_chunk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stuff_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stuff_cnt</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_stuff_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stuff_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_readSize</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_chunk</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i_readSize</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator> <call><name>U32_AT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>U32_AT</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>TIVO_PES_FILEID</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>parse_master</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>get_chunk_header</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_peek</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_num_recs</name></name> <operator>=</operator> <name>i_num_recs</name> <operator>=</operator> <operator>(</operator><name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_rec</name></name> <operator>=</operator> <operator>(</operator><name><name>p_peek</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p_peek</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_rec</name></name> <operator>!=</operator> <literal type="number">0xffff</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_rec</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x8000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_num_recs</name></name> <operator>=</operator> <name>i_num_recs</name> <operator>=</operator> <name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_rec</name></name> <operator>=</operator> <name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_rec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_chunk</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rec_hdrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rec_hdrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_hdr_buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>i_num_recs</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_hdr_buf</name></expr></argument>, <argument><expr><name>i_num_recs</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>i_num_recs</name> <operator>*</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hdr_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rec_hdrs</name></name> <operator>=</operator> <call><name>parse_chunk_headers</name><argument_list>(<argument><expr><name>p_hdr_buf</name></expr></argument>, <argument><expr><name>i_num_recs</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_payload_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_hdr_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stuff_cnt</name></name> <operator>=</operator> <name>CHUNK_SIZE</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_num_recs</name></name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>i_payload_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stuff_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"chunk has %d stuff bytes at end"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stuff_cnt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>parse_chunk_headers</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_num_recs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_payload_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ty_rec_hdr_t</name> <modifier>*</modifier></type><name>p_hdrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_rec_hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_payload_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_hdrs</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>i_num_recs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ty_rec_hdr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_num_recs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>record_header</name> <init>= <expr><name>p_buf</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_rec_hdr</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_hdrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_rec_hdr</name><operator>-&gt;</operator><name>rec_type</name></name> <operator>=</operator> <name><name>record_header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rec_hdr</name><operator>-&gt;</operator><name>subrec_type</name></name> <operator>=</operator> <name><name>record_header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>record_header</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <operator>(</operator> <name><name>record_header</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator> <name><name>record_header</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <operator>(</operator> <name><name>record_header</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator> <name><name>record_header</name><index>[ <expr><literal type="number">2</literal></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rec_hdr</name><operator>-&gt;</operator><name>ex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rec_hdr</name><operator>-&gt;</operator><name>ex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rec_hdr</name><operator>-&gt;</operator><name>l_rec_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rec_hdr</name><operator>-&gt;</operator><name>l_ty_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rec_hdr</name><operator>-&gt;</operator><name>b_ext</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_rec_hdr</name><operator>-&gt;</operator><name>l_rec_size</name></name> <operator>=</operator> <operator>(</operator> <name><name>record_header</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>
<name><name>record_header</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <operator>(</operator> <name><name>record_header</name><index>[ <expr><literal type="number">2</literal></expr> ]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_payload_size</name> <operator>+=</operator> <name><name>p_rec_hdr</name><operator>-&gt;</operator><name>l_rec_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rec_hdr</name><operator>-&gt;</operator><name>b_ext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rec_hdr</name><operator>-&gt;</operator><name>l_ty_pts</name></name> <operator>=</operator> <call><name>U64_AT</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>record_header</name><index>[ <expr><literal type="number">8</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></for> 
<return>return <expr><name>p_hdrs</name></expr>;</return>
</block_content>}</block></function>
</unit>
