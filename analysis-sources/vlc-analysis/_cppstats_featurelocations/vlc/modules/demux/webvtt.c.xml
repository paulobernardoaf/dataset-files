<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\webvtt.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../codec/webvtt/webvtt.h"</cpp:file></cpp:include>





<struct>struct <name>index_entry_s</name>
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>active</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_slave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_first_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_next_block_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_next_demux_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name></decl>;</decl_stmt>
}</block> <decl><name>regions_headers</name></decl>, <name>styles_headers</name>;</struct>

<struct>struct
<block>{
<decl_stmt><decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type><name>p_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_count</name></decl>;</decl_stmt>
}</block> <decl><name>cues</name></decl>;</struct>

<struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>index_entry_s</name></name> <modifier>*</modifier></type><name>p_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_current</name></decl>;</decl_stmt>
}</block> <decl><name>index</name></decl>;</struct>

<decl_stmt><decl><type><name>webvtt_text_parser_t</name> <modifier>*</modifier></type><name>p_streamparser</name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEBVTT_PREALLOC</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type> <name>cue_Compare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>webvtt_cue_t</name> <operator>*</operator><operator>)</operator><name>a_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>webvtt_cue_t</name> <operator>*</operator><operator>)</operator><name>b_</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>i_start</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>i_stop</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator> <name><name>a</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>i_start</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ConvertWEBVTT</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_continued</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>stream</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>paylsize</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idensize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_cue</name><operator>-&gt;</operator><name>psz_id</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>attrsize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_cue</name><operator>-&gt;</operator><name>psz_attrs</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>vttcsize</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <name>paylsize</name> <operator>+</operator> <name>attrsize</name> <operator>+</operator> <name>idensize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vttcbox</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'c'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_continued</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vttcbox</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name>vttcbox</name></expr></argument>, <argument><expr><name>vttcsize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>vttcbox</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_id</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>idenbox</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name>idenbox</name></expr></argument>, <argument><expr><name>idensize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>idenbox</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument>, <argument><expr><name>idensize</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>attrbox</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'g'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name>attrbox</name></expr></argument>, <argument><expr><name>attrsize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>attrbox</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr></argument>, <argument><expr><name>attrsize</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>paylbox</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'l'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name>paylbox</name></expr></argument>, <argument><expr><name>paylsize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>paylbox</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><name>paylsize</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>block_heap_Alloc</name><argument_list>( <argument><expr><name><name>stream</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>.</operator><name>length</name></name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<struct>struct <name>memstream_wrap</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>memstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_opened</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memstream_Append</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>memstream_wrap</name></name> <modifier>*</modifier></type><name>mw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>mw</name><operator>-&gt;</operator><name>b_opened</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>mw</name><operator>-&gt;</operator><name>memstream</name></name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>mw</name><operator>-&gt;</operator><name>memstream</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memstream_Grab</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>memstream_wrap</name></name> <modifier>*</modifier></type><name>mw</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>mw</name><operator>-&gt;</operator><name>b_opened</name></name> <operator>&amp;&amp;</operator> <call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>mw</name><operator>-&gt;</operator><name>memstream</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>mw</name><operator>-&gt;</operator><name>memstream</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>mw</name><operator>-&gt;</operator><name>memstream</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mw</name><operator>-&gt;</operator><name>memstream</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>mw</name><operator>-&gt;</operator><name>memstream</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi</name> <operator>=</operator> <name><name>mw</name><operator>-&gt;</operator><name>memstream</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<struct>struct <name>callback_ctx</name>
<block>{
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>memstream_wrap</name></name></type> <name>regions</name></decl>, <decl><type ref="prev"/><name>styles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ordered</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>webvtt_cue_t</name> <modifier>*</modifier></type> <name>ParserGetCueHandler</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>callback_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>callback_ctx</name> <operator>*</operator><operator>)</operator> <name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz_text</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_alloc</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>webvtt_cue_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <name>WEBVTT_PREALLOC</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_alloc</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>p_array</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>webvtt_cue_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_alloc</name></name> <operator>+</operator> <name>WEBVTT_PREALLOC</name> <operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_realloc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>p_array</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_alloc</name></name> <operator>+=</operator> <name>WEBVTT_PREALLOC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_alloc</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParserCueDoneHandler</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>callback_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>callback_ctx</name> <operator>*</operator><operator>)</operator> <name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>webvtt_cue_Clean</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>webvtt_cue_Init</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>!=</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b_ordered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_alloc</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>index_entry_s</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <name>WEBVTT_PREALLOC</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_alloc</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>index_entry_s</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_alloc</name></name> <operator>+</operator> <name>WEBVTT_PREALLOC</name> <operator>*</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_realloc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_alloc</name></name> <operator>+=</operator> <name>WEBVTT_PREALLOC</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_alloc</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>time</name> <operator>=</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>time</name> <operator>=</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParserHeaderHandler</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>webvtt_header_line_e</name></name></type> <name>s</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_new</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>b_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>callback_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>callback_ctx</name> <operator>*</operator><operator>)</operator> <name>priv</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name> <operator>==</operator> <name>WEBVTT_HEADER_STYLE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memstream_Append</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>styles</name></name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>s</name> <operator>==</operator> <name>WEBVTT_HEADER_REGION</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memstream_Append</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>regions</name></name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>webvtt_cue_t</name> <modifier>*</modifier></type> <name>StreamParserGetCueHandler</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>webvtt_cue_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>StreamParserCueDoneHandler</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator> <name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_text</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>ConvertWEBVTT</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name> <operator>=</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator>
<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;=</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>webvtt_cue_Clean</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>index_Compare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>index_entry_s</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator>struct <name>index_entry_s</name> <operator>*</operator><operator>)</operator> <name>a_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>index_entry_s</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator>struct <name>index_entry_s</name> <operator>*</operator><operator>)</operator> <name>b_</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>time</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>time</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>active</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>active</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>active</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>active</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>time</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>time</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>getIndexByTime</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name> <operator>&gt;=</operator> <name>i_time</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BuildIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>qsort</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>index_entry_s</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>index_Compare</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>








<decl_stmt><decl><type><name>unsigned</name></type> <name>i_overlaps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <operator>++</operator><name>i_overlaps</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <operator>--</operator><name>i_overlaps</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>demux_From</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name>p_list</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_cue_t</name> <modifier>*</modifier></type><name>p_cue</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>p_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <name>i_start</name></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&lt;=</operator> <name>i_start</name> <operator>&amp;&amp;</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;</operator> <name>i_start</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>ConvertWEBVTT</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><operator>(</operator> <name>p_list</name> <operator>)</operator></expr> ?</condition><then> <expr><call><name>block_ChainGather</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadWEBVTT</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>callback_ctx</name></name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>p_demux</name></name> <operator>=</operator> <name>p_demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>b_ordered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>webvtt_text_parser_t</name> <modifier>*</modifier></type><name>p_parser</name> <init>=
<expr><call><name>webvtt_text_parser_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ParserGetCueHandler</name></expr></argument>,
<argument><expr><name>ParserCueDoneHandler</name></expr></argument>,
<argument><expr><name>ParserHeaderHandler</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_parser</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>regions</name><operator>.</operator><name>b_opened</name></name> <operator>=</operator> <operator>!</operator><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>regions</name><operator>.</operator><name>memstream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>styles</name><operator>.</operator><name>b_opened</name></name> <operator>=</operator> <operator>!</operator><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>styles</name><operator>.</operator><name>memstream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>(</operator><name>psz_line</name> <operator>=</operator> <call><name>vlc_stream_ReadLine</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>webvtt_text_parser_Feed</name><argument_list>( <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>webvtt_text_parser_Feed</name><argument_list>( <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>ctx</name><operator>.</operator><name>b_ordered</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qsort</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>p_array</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>webvtt_cue_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cue_Compare</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BuildIndex</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memstream_Grab</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>regions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>regions_headers</name><operator>.</operator><name>p_data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>regions_headers</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memstream_Grab</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>styles</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>styles_headers</name><operator>.</operator><name>p_data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>styles_headers</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_text_parser_Delete</name><argument_list>( <argument><expr><name>p_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MakeExtradata</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_extra</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>extradata</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument>, <argument><expr><literal type="string">"WEBVTT\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>regions_headers</name><operator>.</operator><name>p_data</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>regions_headers</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>styles_headers</name><operator>.</operator><name>p_data</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>styles_headers</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>extradata</name><operator>.</operator><name>length</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_extra</name> <operator>=</operator> <name><name>extradata</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_extra</name> <operator>=</operator> <name><name>extradata</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>extradata</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <call><name>getIndexByTime</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>
<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name> <operator>/</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <call><name>getIndexByTime</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>*</operator> <name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>DEMUX_SET_NEXT_DEMUX_TIME</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slave</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>
<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>
<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>
<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlStream</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_barrier</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name>time</name> <operator>&lt;=</operator> <name>i_barrier</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start_time</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name>time</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_end_time</name> <init>= <expr><name>i_start_time</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>++</operator><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_start_time</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name>time</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_end_time</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>demux_From</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_start_time</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_end_time</name> <operator>-</operator> <name>i_start_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name>i_start_time</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_slave</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_slave</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_barrier</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name> <operator>+=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_current</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>i_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxStream</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name> <init>= <expr><call><name>vlc_stream_ReadLine</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>webvtt_text_parser_Feed</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_streamparser</name></name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator> <name>psz_line</name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr> ?</condition><then> <expr><name>VLC_DEMUXER_EOF</name></expr> </then><else>: <expr><name>VLC_DEMUXER_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ProbeWEBVTT</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"\xEF\xBB\xBF"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_peek</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"WEBVTT"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>(</operator> <name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>
<name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>
<name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>)</operator> <operator>)</operator>
<operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"subtitle demux discarded"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>webvtt_OpenDemux</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>ProbeWEBVTT</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ReadWEBVTT</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>webvtt_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_WEBVTT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MakeExtradata</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>webvtt_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>webvtt_OpenDemuxStream</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>ProbeWEBVTT</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>DemuxStream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>ControlStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_streamparser</name></name> <operator>=</operator> <call><name>webvtt_text_parser_New</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><name>StreamParserGetCueHandler</name></expr></argument>,
<argument><expr><name>StreamParserCueDoneHandler</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_streamparser</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>webvtt_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_WEBVTT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>webvtt_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>webvtt_CloseDemux</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>webvtt_cue_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>p_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>p_array</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>p_array</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_streamparser</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>webvtt_text_parser_Feed</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_streamparser</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>webvtt_text_parser_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_streamparser</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
