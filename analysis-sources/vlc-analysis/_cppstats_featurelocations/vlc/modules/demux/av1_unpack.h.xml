<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\av1_unpack.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_AV1_UNPACK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_AV1_UNPACK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/av1_obu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>leb128_expected</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>v</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>v</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>v</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">5</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>leb128_write</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>AV1_Unpack_Sample_ExpandSize</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AV1_OBU_iterator_ctx_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV1_OBU_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_obu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>i_obu</name></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>AV1_OBU_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_obu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_obu</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>AV1_OBUHasSizeField</name><argument_list>(<argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_header</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <call><name>AV1_OBUHasExtensionField</name><argument_list>(<argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_sizelen</name> <init>= <expr><call><name>leb128_expected</name><argument_list>(<argument><expr><name>i_obu</name> <operator>-</operator> <name>i_header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_obu_offset</name> <init>= <expr><name>p_obu</name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>i_obu_offset</name> <operator>+</operator> <name>i_header</name><operator>)</operator> <operator>+</operator> <name>i_sizelen</name> <operator>&lt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>i_sizelen</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_block</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_sizelen</name></expr>]</index></name></expr></argument>,
<argument><expr><name>i_obu_offset</name> <operator>+</operator> <name>i_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_sizelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_block</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_off</name> <init>= <expr><name>i_obu_offset</name> <operator>+</operator> <name>i_header</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_off</name> <operator>+</operator> <name>i_sizelen</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_off</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_off</name> <operator>-</operator> <name>i_sizelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>leb128_write</name><argument_list>(<argument><expr><name>i_obu</name> <operator>-</operator> <name>i_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_obu_offset</name> <operator>+</operator> <name>i_header</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_obu_offset</name></expr>]</index></name> <operator>|=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></while>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>AV1_Unpack_Sample</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>AV1_Unpack_Sample_ExpandSize</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_block</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x81</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> 
<operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7A</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x12</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_block</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
