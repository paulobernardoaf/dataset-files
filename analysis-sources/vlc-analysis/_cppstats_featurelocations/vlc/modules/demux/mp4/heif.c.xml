<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\mp4\heif.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libmp4.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"heif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/iso_color_tables.h"</cpp:file></cpp:include>

<struct>struct <name>heif_private_t</name>
<block>{
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pcr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_end_display_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_image_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_seekpoint_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_seekpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>p_title</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_infe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_shared_header</name></decl>;</decl_stmt>
}</block> <decl><name>current</name></decl>;</struct>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type> <name>NextAtom</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_root</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>,
<parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_infe</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_infe</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_infe</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_infe</name> <operator>=</operator> <name><name>p_infe</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_infe</name></expr>;</condition> <incr><expr><name>p_infe</name> <operator>=</operator> <name><name>p_infe</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_infe</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>i_type</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_infe</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type> <name>GetAtom</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_root</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_atom</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type>(<modifier>*</modifier><name>pf_match</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><operator>(</operator><name>p_atom</name> <operator>=</operator> <call><name>NextAtom</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>p_atom</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>pf_match</name><argument_list>( <argument><expr><name>p_atom</name></expr></argument>, <argument><expr><name>priv</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_atom</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>MatchInfeID</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_infe</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_item_id</name> <operator>==</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>priv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>MatchPureImage</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_infe</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_root</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_iref</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><literal type="string">"meta/iref"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_iref</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_refbox</name> <init>= <expr><name><name>p_iref</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</init>
<condition><expr><name>p_refbox</name></expr>;</condition> <incr><expr><name>p_refbox</name> <operator>=</operator> <name><name>p_refbox</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_refbox</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_from_item_id</name> <operator>==</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_item_id</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SeekToPrevImageEnd</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>heif_private_t</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_picture</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_infe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>i</name> <operator>&lt;</operator> <name>i_picture</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p_infe</name> <operator>=</operator> <call><name>NextAtom</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><name>ATOM_infe</name></expr></argument>, <argument><expr><literal type="string">"meta/iinf/infe"</literal></expr></argument>, <argument><expr><name>p_infe</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x00</literal> <operator>||</operator>
<operator>!</operator><call><name>MatchPureImage</name><argument_list>( <argument><expr><name>p_infe</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_infe</name></name> <operator>=</operator> <name>p_infe</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_end_display_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>i</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_image_duration</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlHEIF</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>heif_private_t</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_title</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_title_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_title_offset</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_seekpoint_offset</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppp_title</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>input_title_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppp_title</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <call><name>vlc_input_title_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_title_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_seekpoint_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_SET_TITLE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_title</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>||</operator> <name>i_title</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_GET_SEEKPOINT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>DEMUX_SET_SEEKPOINT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_seekpoint</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SeekToPrevImageEnd</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_seekpoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>flags</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>INPUT_UPDATE_SEEKPOINT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekpoint_changed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekpoint_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>*</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_image_duration</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>SeekToPrevImageEnd</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call> <operator>/</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_image_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>/</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_image_duration</name></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>SeekToPrevImageEnd</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ReadItemExtents</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_item_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_shared_header</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>heif_private_t</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_iloc</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"meta/iloc"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_iloc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_block</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_iloc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_item_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_iloc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_item_id</name> <operator>!=</operator> <name>i_item_id</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name>p_block</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>p_shared_header</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_shared_header</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_shared_header</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>,
<argument><expr><name><name>p_shared_header</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_iloc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_extent_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_iloc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_base_offset</name> <operator>+</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_iloc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_extents</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_extent_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_length</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_iloc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_extents</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_extent_length</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_iloc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_construction_method</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_iloc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_construction_method</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>idat</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"meta/idat"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>idat</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <name><name>idat</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <call><name>mp4_box_headersize</name><argument_list>(<argument><expr><name>idat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_iloc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_construction_method</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_extent_index</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_iloc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_extents</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_extent_index</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_extent_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_extent_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_iref</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"meta/iref"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_iref</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_refbox</name> <init>= <expr><name><name>p_iref</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</init>
<condition><expr><name>p_refbox</name></expr>;</condition> <incr><expr><name>p_refbox</name> <operator>=</operator> <name><name>p_refbox</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_refbox</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'o'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_refbox</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_from_item_id</name> <operator>==</operator> <name>i_item_id</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_refbox</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_reference_count</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>--</operator><name>i_extent_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_refbox</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_references</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>i_to_item_id</name> <operator>!=</operator> <name>i_item_id</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>ReadItemExtents</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_refbox</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_references</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>i_to_item_id</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_ChainGather</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetPictureProperties</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_item_id</name></decl></parameter>,
<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>heif_private_t</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_ipma</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"meta/iprp/ipma"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ipma</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ipma</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_entry_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ipma</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_item_id</name> <operator>!=</operator> <name>i_item_id</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ipma</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_association_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ipma</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_assocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_property_index</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_prop</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"meta/iprp/ipco/[%u]"</literal></expr></argument>,
<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ipma</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_assocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_property_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_prop</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_prop</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ATOM_hvcC</name></expr>:</case>
<case>case <expr><name>ATOM_avcC</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>&amp;&amp;</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_HEVC</name> <operator>&amp;&amp;</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_hvcC</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name> <operator>&amp;&amp;</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_avcC</name><operator>)</operator> <operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ATOM_av1C</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_AV1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&amp;&amp;</operator>
<name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_av1C</name><operator>-&gt;</operator><name>i_av1C</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_av1C</name><operator>-&gt;</operator><name>i_av1C</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_av1C</name><operator>-&gt;</operator><name>i_av1C</name></name></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_av1C</name><operator>-&gt;</operator><name>p_av1C</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ATOM_jpeC</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_JPEG</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_header</name> <operator>=</operator> <name>p_prop</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ATOM_ispe</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ispe</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ispe</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ATOM_pasp</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pasp</name><operator>-&gt;</operator><name>i_horizontal_spacing</name></name> <operator>&amp;&amp;</operator>
<name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pasp</name><operator>-&gt;</operator><name>i_vertical_spacing</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pasp</name><operator>-&gt;</operator><name>i_horizontal_spacing</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pasp</name><operator>-&gt;</operator><name>i_vertical_spacing</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ATOM_irot</name></expr>:</case>
<switch>switch<condition>( <expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_irot</name><operator>-&gt;</operator><name>i_ccw_degrees</name></name> <operator>%</operator> <literal type="number">360</literal></expr> )</condition>
<block>{<block_content>
<default>default:</default>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_NORMAL</name></expr> ;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">90</literal></expr>:</case> <expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_90</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">180</literal></expr>:</case> <expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_180</name></expr> ;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">270</literal></expr>:</case> <expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_270</name></expr> ;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>ATOM_colr</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <call><name>iso_23001_8_cp_to_vlc_primaries</name><argument_list>(
<argument><expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>nclc</name><operator>.</operator><name>i_primary_idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <call><name>iso_23001_8_tc_to_vlc_xfer</name><argument_list>(
<argument><expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>nclc</name><operator>.</operator><name>i_transfer_function_idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <call><name>iso_23001_8_mc_to_vlc_coeffs</name><argument_list>(
<argument><expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>nclc</name><operator>.</operator><name>i_matrix_idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>nclc</name><operator>.</operator><name>i_full_range</name></name></expr> ?</condition><then>
<expr><name>COLOR_RANGE_FULL</name></expr> </then><else>: <expr><name>COLOR_RANGE_LIMITED</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ATOM_clli</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name> <operator>=</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_CoLL</name><operator>-&gt;</operator><name>i_maxCLL</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name> <operator>=</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_CoLL</name><operator>-&gt;</operator><name>i_maxFALL</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ATOM_mdcv</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name></name></expr></argument>,
<argument><expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_SmDm</name><operator>-&gt;</operator><name>primaries</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>white_point</name></name></expr></argument>,
<argument><expr><name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_SmDm</name><operator>-&gt;</operator><name>white_point</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name> <operator>=</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_SmDm</name><operator>-&gt;</operator><name>i_luminanceMax</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>min_luminance</name></name> <operator>=</operator> <name><name>p_prop</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_SmDm</name><operator>-&gt;</operator><name>i_luminanceMin</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_image_duration</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetupPicture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_infe</name></decl></parameter>,
<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_header</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_item_id</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_item_id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>psz_content_type</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>item_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_HEVC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_H264</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ATOM_av01</name></expr>:</case>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_AV1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'j'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'e'</literal></expr></argument>,<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_JPEG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if<condition>( <expr><name>psz_mime</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"image/jpeg"</literal></expr></argument>, <argument><expr><name>psz_mime</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_JPEG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"image/avif"</literal></expr></argument>, <argument><expr><name>psz_mime</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_AV1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>SetPictureProperties</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_item_id</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p_header</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<union>union <name>heif_derivation_data</name>
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>rows_minus_one</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>columns_minus_one</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>output_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>output_height</name></decl>;</decl_stmt>
}</block> <decl><name>ImageGrid</name></decl>;</struct>
}</block>;</union>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDerivationData_Grid</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><name><name>union</name> <name>heif_derivation_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_fieldlength</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ImageGrid</name><operator>.</operator><name>rows_minus_one</name></name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ImageGrid</name><operator>.</operator><name>columns_minus_one</name></name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i_fieldlength</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ImageGrid</name><operator>.</operator><name>output_width</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ImageGrid</name><operator>.</operator><name>output_height</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ImageGrid</name><operator>.</operator><name>output_width</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ImageGrid</name><operator>.</operator><name>output_height</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDerivationData</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_item_id</name></decl></parameter>,
<parameter><decl><type><name><name>union</name> <name>heif_derivation_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>ReadItemExtents</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_item_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_data</name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>ReadDerivationData_Grid</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadGridImage</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_pic_item_id</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>tile</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>gridcols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>imagewidth</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>imageheight</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>heif_private_t</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_infe</name> <init>= <expr><call><name>GetAtom</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ATOM_infe</name></expr></argument>, <argument><expr><literal type="string">"meta/iinf/infe"</literal></expr></argument>,
<argument><expr><name>MatchInfeID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pic_item_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_infe</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_shared_header</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>SetupPicture</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_infe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_shared_header</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_sample</name> <init>= <expr><call><name>ReadItemExtents</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_pic_item_id</name></expr></argument>,
<argument><expr><name>p_shared_header</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_sample</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>decoded</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><name>VLC_CODEC_RGBA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name> <init>= <expr><call><name>image_Read</name><argument_list>( <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_picture</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>tilewidth</name> <init>= <expr><name><name>p_picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>tileheight</name> <init>= <expr><name><name>p_picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstline</name> <init>= <expr><name>p_buffer</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dstline</name> <operator>+=</operator> <operator>(</operator><name>tile</name> <operator>/</operator> <name>gridcols</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>imagewidth</name> <operator>*</operator> <name>tileheight</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<for>for<control>(<init>;</init><condition><expr><literal type="number">1</literal></expr>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>offsetpxw</name> <init>= <expr><operator>(</operator><name>tile</name> <operator>%</operator> <name>gridcols</name><operator>)</operator> <operator>*</operator> <name>tilewidth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>offsetpxh</name> <init>= <expr><operator>(</operator><name>tile</name> <operator>/</operator> <name>gridcols</name><operator>)</operator> <operator>*</operator> <name>tileheight</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>offsetpxw</name> <operator>&gt;</operator> <name>imagewidth</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcline</name> <init>= <expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tocopylines</name> <init>= <expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>offsetpxh</name> <operator>+</operator> <name>tocopylines</name> <operator>&gt;=</operator> <name>imageheight</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocopylines</name> <operator>=</operator> <name>imageheight</name> <operator>-</operator> <name>offsetpxh</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>tocopylines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>tocopypx</name> <init>= <expr><name>tilewidth</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>offsetpxw</name> <operator>+</operator> <name>tilewidth</name> <operator>&gt;</operator> <name>imagewidth</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocopypx</name> <operator>=</operator> <name>imagewidth</name> <operator>-</operator> <name>offsetpxw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dstline</name><index>[<expr><name>offsetpxw</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcline</name></expr></argument>, <argument><expr><name>tocopypx</name> <operator>*</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dstline</name> <operator>+=</operator> <name>imagewidth</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>srcline</name> <operator>+=</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>

<break>break;</break>
</block_content>}</block></for>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DerivedImageAssembleGrid</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_grid_item_id</name></decl></parameter>,
<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>heif_private_t</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_iref</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"meta/iref"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_iref</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_refbox</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>p_refbox</name> <operator>=</operator> <name><name>p_iref</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</init> <condition><expr><name>p_refbox</name></expr>;</condition> <incr><expr><name>p_refbox</name> <operator>=</operator> <name><name>p_refbox</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_refbox</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_refbox</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_from_item_id</name> <operator>==</operator> <name>i_grid_item_id</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_refbox</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>heif_derivation_data</name></name></type> <name>derivation_data</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>ReadDerivationData</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>item_type</name></expr></argument>,
<argument><expr><name>i_grid_item_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>derivation_data</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>,<argument><expr><literal type="string">"%ux%upx image %ux%u tiles composition"</literal></expr></argument>,
<argument><expr><name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>output_width</name></name></expr></argument>,
<argument><expr><name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>output_height</name></name></expr></argument>,
<argument><expr><name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>columns_minus_one</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>columns_minus_one</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>handler</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>output_width</name></name> <operator>*</operator>
<name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>output_height</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_RGBA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>output_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>output_height</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_refbox</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_reference_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Loading tile %d/%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>rows_minus_one</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>columns_minus_one</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LoadGridImage</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_refbox</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_references</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_to_item_id</name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>columns_minus_one</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>output_width</name></name></expr></argument>,
<argument><expr><name><name>derivation_data</name><operator>.</operator><name>ImageGrid</name><operator>.</operator><name>output_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>SetPictureProperties</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_grid_item_id</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name>handler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxHEIF</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>heif_private_t</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_end_display_time</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_empty</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_EMPTY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_empty</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_empty</name> <operator>||</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_end_display_time</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_end_display_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_shared_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_infe</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_pitm</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"meta/pitm"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pitm</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_infe</name></name> <operator>=</operator> <call><name>GetAtom</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ATOM_infe</name></expr></argument>, <argument><expr><literal type="string">"meta/iinf/infe"</literal></expr></argument>,
<argument><expr><name>MatchInfeID</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_pitm</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_item_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_infe</name></name> <operator>=</operator> <call><name>GetAtom</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_infe</name></name></expr></argument>,
<argument><expr><name>ATOM_infe</name></expr></argument>, <argument><expr><literal type="string">"meta/iinf/infe"</literal></expr></argument>,
<argument><expr><name>MatchPureImage</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_infe</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_current_item_id</name> <init>= <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_item_id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_ipco</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"meta/iprp/ipco"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ipco</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>item_type</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>DerivedImageAssembleGrid</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_current_item_id</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_block</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>SetupPicture</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_infe</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_shared_header</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>ReadItemExtents</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_current_item_id</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_shared_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_infe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_image_duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_END_OF_SEQUENCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_end_display_time</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekpoint_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>OpenHEIF</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>ATOM_ftyp</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>BRAND_mif1</name></expr>:</case>
<case>case <expr><name>BRAND_heic</name></expr>:</case>
<case>case <expr><name>BRAND_heix</name></expr>:</case>
<case>case <expr><name>BRAND_jpeg</name></expr>:</case>
<case>case <expr><name>BRAND_avci</name></expr>:</case>
<case>case <expr><name>BRAND_avif</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>BRAND_msf1</name></expr>:</case>
<case>case <expr><name>BRAND_hevc</name></expr>:</case>
<case>case <expr><name>BRAND_hevx</name></expr>:</case>
<case>case <expr><name>BRAND_avcs</name></expr>:</case>
<case>case <expr><name>BRAND_avis</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_root</name> <init>= <expr><call><name>MP4_BoxGetRoot</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_root</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_BoxDumpStructure</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_root</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>heif_private_t</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name> <operator>=</operator> <name>p_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>=</operator> <call><name>vlc_input_title_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_image_duration</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"heif-image-duration"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_image_duration</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_image_duration</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><name>HEIF_DEFAULT_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_infe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>(</operator><name>p_infe</name> <operator>=</operator> <call><name>NextAtom</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><name>ATOM_infe</name></expr></argument>, <argument><expr><literal type="string">"meta/iinf/infe"</literal></expr></argument>, <argument><expr><name>p_infe</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x00</literal> <operator>||</operator>
<operator>!</operator><call><name>MatchPureImage</name><argument_list>( <argument><expr><name>p_infe</name></expr></argument>, <argument><expr><name>p_root</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_image_duration</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>psz_item_name</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_infe</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>psz_item_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>DemuxHEIF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>ControlHEIF</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CloseHEIF</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>heif_private_t</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
