<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\mp4\mp4.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_MP4_MP4_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MP4_MP4_H_</name></cpp:macro></cpp:define>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libmp4.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fragments.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../asf/asfpacket.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_description_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_first</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_virtual_run_number</name></decl>;</decl_stmt> 





<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_first_dts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entries_dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_sample_count_dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_sample_delta_dts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entries_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_sample_count_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>p_sample_offset_pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_sample_size</name></decl>;</decl_stmt>



}</block></struct></type> <name>mp4_chunk_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_first_dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trun</name></decl>;</decl_stmt>
}</block></struct></type> <name>mp4_run_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>RTP_timstamp_synchronization_s</name>
<block>{
<decl><name>UNKNOWN_SYNC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>UNSYNCHRONIZED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>SYNCHRONIZED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><name>RESERVED</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block></enum></type> <name>RTP_timstamp_synchronization_t</name>;</typedef>

<enum>enum
<block>{
<decl><name>USEAS_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>USEAS_CHAPTERS</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>USEAS_TIMECODE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
}</block>;</enum>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_track_ID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_ok</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>b_enable</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_selected</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_use_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_forced_spu</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_switch_group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_mac_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_block_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_next_block_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgi_chans_reordering</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_chans_reorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_flip</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>i_elst</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_elst_time</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_elst</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_chunk</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_chunk_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_sample_size</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_first</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_first_dts</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_stbl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_stsd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
bool b_codec_need_restart;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_time</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RTP_timstamp_synchronization_t</name></type> <name>sync_mode</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>int32_t</name></type> <name>i_tsro_offset</name></decl>;</decl_stmt>

<struct>struct
<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_resync_time_offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_sample_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_sample_duration</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>mp4_run_t</name> <modifier>*</modifier></type><name>p_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_count</name></decl>;</decl_stmt>
}</block> <decl><name>runs</name></decl>;</struct>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_trun_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_trun_sample_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_temp</name></decl>;</decl_stmt>
}</block> <decl><name>context</name></decl>;</struct>


<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_asf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts_backup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_backup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asf_track_info_t</name></type> <name>asfinfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>mp4_track_t</name>;</typedef>

<function_decl><type><name>int</name></type> <name>SetupVideoES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>SetupAudioES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>SetupSpuES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>SetupCCES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>SetupMeta</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_udta</name></decl></parameter> )</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>trackrefindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>samplenumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sampleoffset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bytesperblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>samplesperblock</name></decl>;</decl_stmt>

}</block></struct></type> <name>mp4_rtpsampleconstructor_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
