<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\mp4\mp4.c">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mp4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attachments.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"heif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/cc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../av1_unpack.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"mp4-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_M4A_TEXT</name></cpp:macro> <cpp:value>N_("M4A audio only")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_M4A_LONGTEXT</name></cpp:macro> <cpp:value>N_("Ignore non audio tracks from iTunes audio files")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIF_DURATION_TEXT</name></cpp:macro> <cpp:value>N_("Duration in seconds")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIF_DURATION_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Duration in seconds before simulating an end of file. " "A negative value means an unlimited play time.")</cpp:value></cpp:define>



<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"MP4 stream demuxer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"MP4"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">240</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_category_hint</name><argument_list>(<argument><literal type="string">"Hacks"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>CFG_PREFIX<literal type="string">"m4a-audioonly"</literal></argument>, <argument>false</argument>, <argument>MP4_M4A_TEXT</argument>, <argument>MP4_M4A_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"HEIF demuxer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"heif"</literal></argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">239</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenHEIF</argument>, <argument>CloseHEIF</argument> )</argument_list></macro>
<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"HEIF demuxer"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument><literal type="string">"heif-image-duration"</literal></argument>, <argument>HEIF_DEFAULT_DURATION</argument>,
<argument>HEIF_DURATION_TEXT</argument>, <argument>HEIF_DURATION_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxRef</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list><block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_demux</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></function>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DemuxFrag</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_root</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pcr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_moov_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_duration</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_cumulated_duration</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_nztime</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_tracks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>track</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_fps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_fragmented</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_fastseekable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_error</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_index_probed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_fragments_probed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moov</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_current_box_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_fragment_atom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_post_mdat_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_lastseqnumber</name></decl>;</decl_stmt>
}</block> <decl><name>context</name></decl>;</struct>


<decl_stmt><decl><type><name>bool</name></type> <name>seekpoint_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_seekpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>p_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>asf_packet_sys_t</name></type> <name>asfpacketsys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_preroll</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_preroll_start</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>es_cat_filters</name></decl>;</decl_stmt>
}</block> <decl><name>hacks</name></decl>;</struct>

<decl_stmt><decl><type><name>mp4_fragments_index_t</name> <modifier>*</modifier></type><name>p_fragsindex</name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEMUX_INCREMENT</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(250)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEMUX_TRACK_MAX_PRELOAD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(15)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_PRELOAD</name></cpp:macro> <cpp:value>UINT_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEMUXER_EOS</name></cpp:macro> <cpp:value>(VLC_DEMUXER_EGENERIC - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEMUXER_FATAL</name></cpp:macro> <cpp:value>(VLC_DEMUXER_EGENERIC - 2)</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MP4_TrackSetup</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MP4_TrackInit</name><parameter_list>( <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MP4_TrackClean</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MP4_Block_Send</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MP4_TrackSelect</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MP4_TrackSeek</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>MP4_TrackGetPos</name> <parameter_list>( <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>MP4_TrackGetReadSize</name><parameter_list>( <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MP4_TrackNextSample</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MP4_TrackSetELST</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MP4_UpdateSeekpoint</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type> <name>MP4_GetTrexByTrackID</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moov</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_id</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MP4_GetDefaultSizeAndDuration</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moov</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MP4_Box_data_tfhd_t</name> <modifier>*</modifier></type><name>p_tfhd_data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_default_size</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_default_duration</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>stime_t</name></type> <name>GetMoovTrackDuration</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_track_ID</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ProbeFragments</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_force</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_fragmented</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ProbeFragmentsChecked</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ProbeIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FragCreateTrunIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>stime_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FragGetMoofBySidxIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_target_time</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_moof_pos</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_sampletime</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FragGetMoofByTfraIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_target_time</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_track_ID</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_moof_pos</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_sampletime</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FragResetContext</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>asf_track_info_t</name> <modifier>*</modifier></type> <name>MP4ASF_GetTrackInfo</name><parameter_list>( <parameter><decl><type><name>asf_packet_sys_t</name> <modifier>*</modifier></type><name>p_packetsys</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_stream_number</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MP4ASF_Send</name><parameter_list>(<parameter><decl><type><name>asf_packet_sys_t</name> <modifier>*</modifier></type><name>p_packetsys</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_stream_number</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_frame</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MP4ASF_ResetFrames</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>MP4_RTPHint_Convert</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>MP4_RTPHintToFrame</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>packetcount</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MP4_LoadMeta</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>;</function_decl>



<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>MP4_rescale</name><parameter_list>( <parameter><decl><type><name>int64_t</name></type> <name>i_value</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_newscale</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_timescale</name> <operator>==</operator> <name>i_newscale</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_value</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_value</name> <operator>&lt;=</operator> <name>INT64_MAX</name> <operator>/</operator> <name>i_newscale</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_value</name> <operator>*</operator> <name>i_newscale</name> <operator>/</operator> <name>i_timescale</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>q</name> <init>= <expr><name>i_value</name> <operator>/</operator> <name>i_timescale</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>r</name> <init>= <expr><name>i_value</name> <operator>%</operator> <name>i_timescale</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>q</name> <operator>*</operator> <name>i_newscale</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>i_newscale</name> <operator>/</operator> <name>i_timescale</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>MP4_rescale_mtime</name><parameter_list>( <parameter><decl><type><name>int64_t</name></type> <name>i_value</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>MP4_rescale</name><argument_list>(<argument><expr><name>i_value</name></expr></argument>, <argument><expr><name>i_timescale</name></expr></argument>, <argument><expr><name>CLOCK_FREQ</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>MP4_rescale_qtime</name><parameter_list>( <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_value</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>MP4_rescale</name><argument_list>(<argument><expr><name>i_value</name></expr></argument>, <argument><expr><name>CLOCK_FREQ</name></expr></argument>, <argument><expr><name>i_timescale</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>stream_ReadU32</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_read</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_toread</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_return</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_toread</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_return</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_read</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>INT32_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_return</name> <operator>&lt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_return</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_toread</name> <operator>-=</operator> <name>INT32_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_return</name> <operator>+=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p_read</name> <operator>+</operator> <name>i_return</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>i_toread</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_return</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_reftypeToFlag</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_reftype</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_reftype</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ATOM_chap</name></expr>:</case>
<return>return <expr><name>USEAS_CHAPTERS</name></expr>;</return>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>
<return>return <expr><name>USEAS_TIMECODE</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>USEAS_NONE</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>MP4_isMetadata</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>tk</name><operator>-&gt;</operator><name>i_use_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>USEAS_CHAPTERS</name><operator>|</operator><name>USEAS_TIMECODE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type> <name>MP4_GetTrexByTrackID</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moov</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_moov</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trex</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_moov</name></expr></argument>, <argument><expr><literal type="string">"mvex/trex"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_trex</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_trex</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_trex</name> <operator>&amp;&amp;</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_trex</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_trex</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_track_ID</name> <operator>==</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_trex</name> <operator>=</operator> <name><name>p_trex</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>p_trex</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>mp4_track_t</name> <modifier>*</modifier></type><name>MP4_GetTrackByTrackID</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>tid</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>ret</name><operator>-&gt;</operator><name>i_track_ID</name></name> <operator>==</operator> <name>tid</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type> <name>MP4_GetTrakByTrackID</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moov</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trak</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_moov</name></expr></argument>, <argument><expr><literal type="string">"trak"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tkhd</name></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_trak</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_trak</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_trak</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p_tkhd</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_trak</name></expr></argument>, <argument><expr><literal type="string">"tkhd"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_track_ID</name> <operator>==</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_trak</name> <operator>=</operator> <name><name>p_trak</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>p_trak</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type> <name>MP4_GetTrafByTrackID</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moof</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_traf</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_moof</name></expr></argument>, <argument><expr><literal type="string">"traf"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tfhd</name></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_traf</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_traf</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_traf</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p_tfhd</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_traf</name></expr></argument>, <argument><expr><literal type="string">"tfhd"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_track_ID</name> <operator>==</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_traf</name> <operator>=</operator> <name><name>p_traf</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>p_traf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>es_out_id_t</name> <modifier>*</modifier></type> <name>MP4_AddTrackES</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>es_out_Add</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name>p_es</name> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>b_forced_spu</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES_DEFAULT</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_es</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>MP4_TrackGetDTS</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_chunk_t</name> <modifier>*</modifier></type><name>p_chunk</name> <init>= <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sample</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>-</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>i_sample_first</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sdts</name> <init>= <expr><name><name>p_chunk</name><operator>-&gt;</operator><name>i_first_dts</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_sample</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_index</name> <operator>&lt;</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>i_entries_dts</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_sample</name> <operator>&gt;</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>sdts</name> <operator>+=</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>*</operator>
<name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_delta_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sample</name> <operator>-=</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>sdts</name> <operator>+=</operator> <name>i_sample</name> <operator>*</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_delta_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name> <init>= <expr><call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>sdts</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_elst</name></name> <operator>&amp;&amp;</operator> <call><name><name>p_track</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_entry_count</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_data_elst_t</name> <modifier>*</modifier></type><name>elst</name> <init>= <expr><call><name><name>p_track</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>elst</name><operator>-&gt;</operator><name>i_media_rate_integer</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>elst</name><operator>-&gt;</operator><name>i_media_rate_fraction</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>elst</name><operator>-&gt;</operator><name>i_media_time</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_dts</name> <operator>-=</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name><name>elst</name><operator>-&gt;</operator><name>i_media_time</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_dts</name> <operator>+=</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst_time</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_dts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_dts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>MP4_TrackGetPTSDelta</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_delta</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mp4_chunk_t</name> <modifier>*</modifier></type><name>ck</name> <init>= <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sample</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>-</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_sample_first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name></expr> ;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_sample</name> <operator>&lt;</operator> <name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_delta</name> <operator>=</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_sample</name> <operator>-=</operator> <name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>MP4_GetSamplesDuration</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_nb_samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_chunk_t</name> <modifier>*</modifier></type><name>p_chunk</name> <init>= <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_remain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>p_chunk</name><operator>-&gt;</operator><name>i_sample_first</name></name></expr></init></decl>;</init>
<condition><expr><name>i</name><operator>&lt;</operator><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&amp;&amp;</operator> <name>i_index</name> <operator>&lt;</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>i_entries_dts</name></name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>-</operator> <name>i</name> <operator>&gt;=</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_remain</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<while>while<condition>( <expr><name>i_nb_samples</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_index</name> <operator>&lt;</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>i_entries_dts</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_nb_samples</name> <operator>&gt;=</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>-</operator> <name>i_remain</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_duration</name> <operator>+=</operator> <operator>(</operator><name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>-</operator> <name>i_remain</name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_delta_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_nb_samples</name> <operator>-=</operator> <operator>(</operator><name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>-</operator> <name>i_remain</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_remain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_duration</name> <operator>+=</operator> <name>i_nb_samples</name> <operator>*</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>p_sample_delta_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_duration</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>MP4_GetMoviePTS</name><parameter_list>(<parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LoadChapter</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadInitFrag</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_root</name> <init>= <expr><call><name>MP4_BoxGetRoot</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_root</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><literal type="string">"/moov"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_root</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>LoadInitFragError</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name> <operator>=</operator> <name>p_root</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>LoadInitFragError</name>:</label>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"MP4 plugin discarded (not a valid initialization chunk)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CreateTracks</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_tracks</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>SIZE_MAX</name> <operator>/</operator> <name>i_tracks</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mp4_track_t</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_tracks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mp4_track_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <name>i_tracks</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_tracks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>MP4_TrackInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/moov/trak[%d]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>MP4_EIA608_Convert</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_newblock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <name>SSIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>cdat_size</name> <init>= <expr><call><name>GetDWBE</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cdat_size</name> <operator>&gt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cdat</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>cdat</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"cdat"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>cdat_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>cdat_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cdat_size</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>cdt2_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cdt2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>GetDWBE</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cdt2</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>cdt2</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"cdt2"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cdt2_size</name> <operator>=</operator> <name>size</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_newblock</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><operator>(</operator><name>cdat_size</name> <operator>+</operator> <name>cdt2_size</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_newblock</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>p_newblock</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cdat_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>CC_PKT_BYTE0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>cdat</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>cdat</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cdat_size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>cdt2_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>CC_PKT_BYTE0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>cdt2</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>cdt2</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cdt2_size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>p_newblock</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_newblock</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_newblock</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>MP4_TrackGetRunSeq</name><parameter_list>( <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_virtual_run_number</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_GetInterleaving</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_max_contiguous</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_flat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_max_contiguous</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_flat</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>tk</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>&lt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_offset</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tk</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>( <init>;</init> <condition><expr><name>tk</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i_duration</name> <operator>+=</operator> <name><name>tk</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_chunk</name></name><operator>++</operator></expr>;</expr_stmt>


<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>nexttk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>i_chunk</name></name> <operator>==</operator> <name><name>cur</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>nexttk</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>cur</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>&lt;</operator> <name><name>nexttk</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>nexttk</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nexttk</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><name>nexttk</name> <operator>&amp;&amp;</operator> <name><name>nexttk</name><operator>-&gt;</operator><name>i_chunk</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nexttk</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>nexttk</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_virtual_run_number</name> <operator>=</operator>
<name><name>nexttk</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>nexttk</name><operator>-&gt;</operator><name>i_chunk</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_virtual_run_number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>tk</name> <operator>!=</operator> <name>nexttk</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dur</name> <init>= <expr><call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_duration</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_dur</name> <operator>&gt;</operator> <operator>*</operator><name>pi_max_contiguous</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_max_contiguous</name> <operator>=</operator> <name>i_dur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_duration</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_chunk</name></name> <operator>!=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pb_flat</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>nexttk</name> <operator>&amp;&amp;</operator> <name><name>nexttk</name><operator>-&gt;</operator><name>i_chunk</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>nexttk</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>nexttk</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_virtual_run_number</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tk</name> <operator>=</operator> <name>nexttk</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chunk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>MP4_Block_Convert</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_WEBVTT</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_TTML</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_QTXT</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_TX3G</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_SPU</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_SUBT</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>VLC_CODEC_CEA608</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_CEA708</name></expr>:</case>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>MP4_EIA608_Convert</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_AV1</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>AV1_Unpack_Sample</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>==</operator> <name>ATOM_rrtp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>MP4_RTPHint_Convert</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_Block_Send</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>MP4_Block_Convert</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>b_chans_reorder</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>aout_ChannelReorder</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>rgi_chans_reordering</name></name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_block_flags</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_asf</name></name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <call><name>vlc_stream_MemoryNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_dts_backup</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_pts_backup</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DemuxASFPacket</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>asfpacketsys</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>OpenHEIF</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CloseHEIF</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_ftyp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_mvhd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_mvex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_enabled_es</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ATOM_moov</name></expr>:</case>
<case>case <expr><name>ATOM_foov</name></expr>:</case>
<case>case <expr><name>ATOM_moof</name></expr>:</case>
<case>case <expr><name>ATOM_mdat</name></expr>:</case>
<case>case <expr><name>ATOM_udta</name></expr>:</case>
<case>case <expr><name>ATOM_free</name></expr>:</case>
<case>case <expr><name>ATOM_skip</name></expr>:</case>
<case>case <expr><name>ATOM_wide</name></expr>:</case>
<case>case <expr><name>ATOM_uuid</name></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr>:</case>
<break>break;</break>
<case>case <expr><name>ATOM_ftyp</name></expr>:</case>
<block>{<block_content>

<switch>switch<condition>( <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>

<case>case <expr><name>BRAND_heic</name></expr>:</case>
<case>case <expr><name>BRAND_heix</name></expr>:</case>
<case>case <expr><name>BRAND_mif1</name></expr>:</case>
<case>case <expr><name>BRAND_jpeg</name></expr>:</case>
<case>case <expr><name>BRAND_avci</name></expr>:</case>
<case>case <expr><name>BRAND_avif</name></expr>:</case>

<case>case <expr><name>BRAND_f4v</name></expr>:</case>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>


<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_FASTSEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_lastseqnumber</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>LoadInitFrag</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_BoxDumpStructure</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_ftyp</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/ftyp"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ftyp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_major_brand</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>BRAND_isom</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"ISO Media (isom) version %d."</literal></expr></argument>,
<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ftyp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_minor_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BRAND_3gp4</name></expr>:</case>
<case>case <expr><name>BRAND_3gp5</name></expr>:</case>
<case>case <expr><name>BRAND_3gp6</name></expr>:</case>
<case>case <expr><name>BRAND_3gp7</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"3GPP Media Release: %4.4s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ftyp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_major_brand</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BRAND_qt__</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Apple QuickTime media"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BRAND_isml</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PIFF (= isml = fMP4) media"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BRAND_dash</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DASH Stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BRAND_M4A</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"iTunes audio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"m4a-audioonly"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hacks</name><operator>.</operator><name>es_cat_filters</name></name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"unrecognized major media specification (%4.4s)."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ftyp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_major_brand</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ftyp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_compatible_brands_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ftyp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>i_compatible_brands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>BRAND_dash</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DASH Stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_ftyp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>i_compatible_brands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>BRAND_smoo</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Handling VLC Smooth Stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"file type box missing (assuming ISO Media)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/moov"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/foov"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"MP4 plugin discarded (no moov,foov,moof box)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>ATOM_moov</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_mvhd</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr></argument>, <argument><expr><literal type="string">"mvhd"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_mvhd</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mvhd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mvhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_timescale</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mvhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_timescale</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_moov_duration</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mvhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulated_duration</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mvhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_duration</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"No valid mvhd found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_rmra</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/moov/rmra"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_rmra</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_input_item</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><call><name>MP4_BoxCount</name><argument_list>( <argument><expr><name>p_rmra</name></expr></argument>, <argument><expr><literal type="string">"rmda"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected playlist mov file (%d ref)"</literal></expr></argument>, <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_current</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_subitems</name> <init>= <expr><call><name>input_item_node_Create</name><argument_list>( <argument><expr><name>p_current</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_rdrf</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_rmra</name></expr></argument>, <argument><expr><literal type="string">"rmda[%d]/rdrf"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_ref_type</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_rdrf</name> <operator>||</operator> <operator>!</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_rdrf</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>(</operator> <name>psz_ref</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_rdrf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>psz_ref</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_ref_type</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_rdrf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_ref_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"new ref=`%s' type=%4.4s"</literal></expr></argument>,
<argument><expr><name>psz_ref</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_ref_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ref_type</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_ref</name></expr></argument>, <argument><expr><literal type="string">"qt5gateQT"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ignoring pseudo ref =`%s'"</literal></expr></argument>, <argument><expr><name>psz_ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_ref</name></expr></argument>, <argument><expr><literal type="string">"http://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_ref</name></expr></argument>, <argument><expr><literal type="string">"rtsp://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_absolute</name> <init>= <expr><call><name>vlc_uri_resolve</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>,
<argument><expr><name>psz_ref</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_absolute</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_node_Delete</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psz_ref</name> <operator>=</operator> <name>psz_absolute</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"adding ref = `%s'"</literal></expr></argument>, <argument><expr><name>psz_ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>input_item_New</name><argument_list>( <argument><expr><name>psz_ref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>input_item_node_AppendItem</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unknown ref type=%4.4s FIXME (send a bug report)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_rdrf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_ref_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>es_out_Control</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_POST_SUBNODE</name></expr></argument>, <argument><expr><name>p_subitems</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_node_Delete</name><argument_list>(<argument><expr><name>p_subitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>p_mvhd</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/moov/mvhd"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_rmra</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find /moov/mvhd"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find /moov/mvhd (pure ref file)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>DemuxRef</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mvhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_timescale</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"bad timescale"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_tracks</name> <init>= <expr><call><name>MP4_BoxCount</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/moov/trak"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tracks</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find any /moov/trak"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"found %u track%c"</literal></expr></argument>, <argument><expr><name>i_tracks</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i_tracks</name></expr> ?</condition><then> <expr><literal type="char">'s'</literal></expr></then><else>:<expr><literal type="char">' '</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CreateTracks</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_tracks</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name>b_enabled_es</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trak</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/moov/trak[%d]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tkhd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_trak</name></expr></argument>, <argument><expr><literal type="string">"tkhd"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_tkhd</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name><operator>&amp;</operator><name>MP4_TRACK_ENABLED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_enabled_es</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tref</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_trak</name></expr></argument>, <argument><expr><literal type="string">"tref"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_tref</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_refbox</name> <init>= <expr><name><name>p_tref</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</init> <condition><expr><name>p_refbox</name></expr>;</condition> <incr><expr><name>p_refbox</name> <operator>=</operator> <name><name>p_refbox</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_trak_reference_t</name> <modifier>*</modifier></type><name>refdata</name> <init>= <expr><name><name>p_refbox</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_track_reference</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>refdata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>refdata</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>reftk</name> <init>= <expr><call><name>MP4_GetTrackByTrackID</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>refdata</name><operator>-&gt;</operator><name>i_track_ID</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>reftk</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track 0x%x refs track 0x%x for %4.4s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>refdata</name><operator>-&gt;</operator><name>i_track_ID</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_refbox</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reftk</name><operator>-&gt;</operator><name>i_use_flags</name></name> <operator>|=</operator> <call><name>MP4_reftypeToFlag</name><argument_list>( <argument><expr><name><name>p_refbox</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MP4_LoadMeta</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trak</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/moov/trak[%u]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MP4_TrackSetup</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_trak</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>!</operator><name>b_enabled_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_ok</name> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>MP4_isMetadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cat</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case<expr><operator>(</operator> <name>VIDEO_ES</name> <operator>)</operator></expr>:</case>
<expr_stmt><expr><name>psz_cat</name> <operator>=</operator> <literal type="string">"video"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case<expr><operator>(</operator> <name>AUDIO_ES</name> <operator>)</operator></expr>:</case>
<expr_stmt><expr><name>psz_cat</name> <operator>=</operator> <literal type="string">"audio"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case<expr><operator>(</operator> <name>SPU_ES</name> <operator>)</operator></expr>:</case>
<expr_stmt><expr><name>psz_cat</name> <operator>=</operator> <literal type="string">"subtitle"</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>psz_cat</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"adding track[Id 0x%x] %s (%s) language %s"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_track_ID</name></expr></argument>, <argument><expr><name>psz_cat</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_enable</name></expr> ?</condition><then> <expr><literal type="string">"enable"</literal></expr></then><else>:<expr><literal type="string">"disable"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr> ?</condition><then>
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr> </then><else>: <expr><literal type="string">"undef"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_use_flags</name> <operator>&amp;</operator> <name>USEAS_CHAPTERS</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"using track[Id 0x%x] for chapter language %s"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_track_ID</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr> ?</condition><then>
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr> </then><else>: <expr><literal type="string">"undef"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ignoring track[Id 0x%x] %d refs %x"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_track_ID</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_ok</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_use_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_mvex</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr></argument>, <argument><expr><literal type="string">"mvex"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_mvex</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_mehd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_mvex</name></expr></argument>, <argument><expr><literal type="string">"mehd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_mehd</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mehd</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mehd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_fragment_duration</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragmented</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mehd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_fragment_duration</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sidx</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"sidx"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sidx</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragmented</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragmented</name></name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>ProbeFragments</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragmented</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>=</operator> <name>ATOM_moov</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragmented</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragmented</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>DemuxFrag</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Set Fragmented demux mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>&amp;&amp;</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>==</operator> <name>Demux</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"MP4 plugin discarded (not seekable)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_max_continuity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_flat</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MP4_GetInterleaving</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_max_continuity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_flat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_flat</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"that media doesn't look interleaved, will need to seek"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>i_max_continuity</name> <operator>&gt;</operator> <name>DEMUX_TRACK_MAX_PRELOAD</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"that media doesn't look properly interleaved, will need to seek"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>LoadChapter</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfpacketsys</name><operator>.</operator><name>p_demux</name></name> <operator>=</operator> <name>p_demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfpacketsys</name><operator>.</operator><name>pi_preroll</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfpacketsys</name><operator>.</operator><name>pi_preroll_start</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfpacketsys</name><operator>.</operator><name>pf_doskip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfpacketsys</name><operator>.</operator><name>pf_send</name></name> <operator>=</operator> <name>MP4ASF_Send</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfpacketsys</name><operator>.</operator><name>pf_gettrackinfo</name></name> <operator>=</operator> <name>MP4ASF_GetTrackInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfpacketsys</name><operator>.</operator><name>pf_updatetime</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfpacketsys</name><operator>.</operator><name>pf_setaspectratio</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Can't reset stream position from probing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>SAMPLEHEADERSIZE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>RTPPACKETSIZE</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>CONSTRUCTORSIZE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>MP4_RTPHintToFrame</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>packetcount</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_slice</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>SAMPLEHEADERSIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_newblock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_payload</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>SAMPLEHEADERSIZE</name> <operator>+</operator> <name>RTPPACKETSIZE</name> <operator>+</operator> <name>CONSTRUCTORSIZE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Sample not large enough for necessary structs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>packetcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p_slice</name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator> <operator>+</operator> <name>RTPPACKETSIZE</name> <operator>+</operator> <name>CONSTRUCTORSIZE</name> <operator>&gt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_slice</name> <operator>+=</operator> <name>RTPPACKETSIZE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>mp4_rtpsampleconstructor_t</name></type> <name>sample_cons</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sample_cons</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>p_slice</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample_cons</name><operator>.</operator><name>trackrefindex</name></name> <operator>=</operator> <name><name>p_slice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample_cons</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_slice</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample_cons</name><operator>.</operator><name>samplenumber</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_slice</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample_cons</name><operator>.</operator><name>sampleoffset</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_slice</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample_cons</name><operator>.</operator><name>bytesperblock</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_slice</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample_cons</name><operator>.</operator><name>samplesperblock</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_slice</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_slice</name> <operator>+=</operator> <name>CONSTRUCTORSIZE</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>sample_cons</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <literal type="number">2</literal><operator>||</operator><name><name>sample_cons</name><operator>.</operator><name>trackrefindex</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>
<operator>||</operator><name><name>sample_cons</name><operator>.</operator><name>samplesperblock</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>||</operator><name><name>sample_cons</name><operator>.</operator><name>bytesperblock</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unhandled constructor in RTP Reception Hint Track. Type:%u"</literal></expr></argument>, <argument><expr><name><name>sample_cons</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>sample_cons</name><operator>.</operator><name>sampleoffset</name></name> <operator>+</operator> <name><name>sample_cons</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Sample buffer is smaller than sample"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>p_newblock</name> <operator>)</operator></expr> ?</condition><then>
<expr><call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_newblock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_payload</name> <operator>+</operator> <name><name>sample_cons</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></then><else>:
<expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_payload</name> <operator>+</operator> <name><name>sample_cons</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_realloc</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_newblock</name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><operator>&amp;</operator><name><name>p_newblock</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_payload</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p_src</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>sample_cons</name><operator>.</operator><name>sampleoffset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_type</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p_src</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>synccode</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>synccode</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">7</literal> <operator>||</operator> <name>i_type</name> <operator>==</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_dst</name><operator>++</operator><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name><name>sample_cons</name><operator>.</operator><name>length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name><name>sample_cons</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_payload</name> <operator>=</operator> <name>p_dst</name> <operator>-</operator> <name><name>p_newblock</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_newblock</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_newblock</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_payload</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p_newblock</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_newblock</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_newblock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>MP4_RTPHint_Convert</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_converted</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_packets</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_packets</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name>i_codec</name> <operator>!=</operator> <name>VLC_CODEC_H264</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_skip</name> <init>= <expr><name>SAMPLEHEADERSIZE</name> <operator>+</operator> <name>i_packets</name> <operator>*</operator> <operator>(</operator> <name>RTPPACKETSIZE</name> <operator>+</operator> <name>CONSTRUCTORSIZE</name> <operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_packets</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_skip</name> <operator>&lt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_skip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_converted</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p_converted</name> <operator>=</operator> <call><name>MP4_RTPHintToFrame</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>i_packets</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_converted</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>OverflowCheck</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>i_readpos</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_samplessize</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_fragmented</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_post_mdat_offset</name></name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_readpos</name> <operator>+</operator> <name>i_samplessize</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_post_mdat_offset</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Broken file. track[0x%x] "</literal>
<literal type="string">"Sample @%"</literal> <name>PRIu64</name> <literal type="string">" overflowing "</literal>
<literal type="string">"parent mdat by %"</literal> <name>PRIu64</name></expr></argument>,
<argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>, <argument><expr><name>i_readpos</name></expr></argument>,
<argument><expr><name>i_readpos</name> <operator>+</operator> <name>i_samplessize</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_post_mdat_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_samplessize</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_post_mdat_offset</name></name> <operator>-</operator> <name>i_readpos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_samplessize</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxTrack</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_readpos</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_max_preload</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_samplessize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&gt;=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_use_flags</name></name> <operator>&amp;</operator> <name>USEAS_CHAPTERS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_run_seq</name> <init>= <expr><call><name>MP4_TrackGetRunSeq</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_current_nzdts</name> <init>= <expr><call><name>MP4_TrackGetDTS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_demux_max_nzdts</name> <init>=<expr><ternary><condition><expr><name>i_max_preload</name> <operator>&lt;</operator> <name>INVALID_PRELOAD</name></expr>
?</condition><then> <expr><name>i_current_nzdts</name> <operator>+</operator> <name>i_max_preload</name></expr>
</then><else>: <expr><name>INT64_MAX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_demux_max_nzdts</name> <operator>&gt;=</operator> <name>i_current_nzdts</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&gt;=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOS</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
msg_Dbg( p_demux, "tk(%i)=%"PRId64" mv=%"PRId64" pos=%"PRIu64, tk-&gt;i_track_ID,
MP4_TrackGetDTS( p_demux, tk ),
MP4_GetMoviePTS( p_demux-&gt;p_sys ), i_readpos );
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_samplessize</name> <operator>=</operator> <call><name>MP4_TrackGetReadSize</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nb_samples</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_samplessize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_delta</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>i_readpos</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_readpos</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track[0x%x] will be disabled (eof?)"</literal>
<literal type="string">": Failed to seek to %"</literal><name>PRIu64</name></expr></argument>,
<argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>, <argument><expr><name>i_readpos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP4_TrackSelect</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_samplessize</name> <operator>=</operator> <call><name>OverflowCheck</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_readpos</name></expr></argument>, <argument><expr><name>i_samplessize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>p_block</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_samplessize</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track[0x%x] will be disabled (eof?)"</literal>
<literal type="string">": Failed to read %d bytes sample at %"</literal><name>PRIu64</name></expr></argument>,
<argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>, <argument><expr><name>i_samplessize</name></expr></argument>, <argument><expr><name>i_readpos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP4_TrackSelect</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_current_nzdts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name>i_current_nzdts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name>i_current_nzdts</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>MP4_TrackGetPTSDelta</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_delta</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i_delta</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>MP4_GetSamplesDuration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_nb_samples</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_Block_Send</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name>i_nb_samples</name> <operator>&amp;&amp;</operator> 
<call><name>MP4_TrackNextSample</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_nb_samples</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_next_run_seq</name> <init>= <expr><call><name>MP4_TrackGetRunSeq</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_next_run_seq</name> <operator>!=</operator> <name>i_run_seq</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_current_nzdts</name> <operator>=</operator> <call><name>MP4_TrackGetDTS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_readpos</name> <operator>=</operator> <call><name>MP4_TrackGetPos</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

<label><name>end</name>:</label>
<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxMoov</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_track</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>i_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_track</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>(</operator> <name><name>tk</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>&amp;&amp;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&gt;=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP4_TrackSelect</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP4_TrackSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><call><name>MP4_GetMoviePTS</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_nztime</name> <init>= <expr><call><name>MP4_GetMoviePTS</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_eof</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_track</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call> <operator>||</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&gt;=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_eof</name> <operator>&amp;=</operator> <operator>(</operator> <name>i_nztime</name> <operator>&gt;</operator> <call><name>MP4_TrackGetDTS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>b_eof</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOS</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_max_preload</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>)</operator></expr> ?</condition><then> <expr><name>DEMUX_TRACK_MAX_PRELOAD</name></expr> </then><else>: <expr><name>INVALID_PRELOAD</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_status</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOS</name></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>i_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_track</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk_tmp</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk_tmp</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>tk_tmp</name></expr></argument> )</argument_list></call> <operator>||</operator>
<name><name>tk_tmp</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&gt;=</operator> <name><name>tk_tmp</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>tk_tmp</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_SUCCESS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>MP4_TrackGetDTS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk_tmp</name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <name>i_nztime</name> <operator>+</operator> <name>DEMUX_INCREMENT</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>tk</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>MP4_TrackGetPos</name><argument_list>( <argument><expr><name>tk_tmp</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <call><name>MP4_TrackGetPos</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tk</name> <operator>=</operator> <name>tk_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>tk</name></expr> )</condition>
<block>{<block_content>



<for>for<control>( <init><expr><name>i_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_max_preload</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_track</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk_tmp</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>tk_tmp</name> <operator>==</operator> <name>tk</name> <operator>||</operator>
<operator>!</operator><name><name>tk_tmp</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>tk_tmp</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>tk_tmp</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name><operator>)</operator> <operator>||</operator>
<name><name>tk_tmp</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&gt;=</operator> <name><name>tk_tmp</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_nzdts</name> <init>= <expr><call><name>MP4_TrackGetDTS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk_tmp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_nzdts</name> <operator>&lt;=</operator> <name>i_nztime</name> <operator>+</operator> <name>DEMUX_TRACK_MAX_PRELOAD</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>MP4_TrackGetPos</name><argument_list>( <argument><expr><name>tk_tmp</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <call><name>MP4_TrackGetPos</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tk</name> <operator>=</operator> <name>tk_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name> <init>= <expr><call><name>MP4_TrackGetPos</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>DemuxTrack</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>, <argument><expr><name>i_max_preload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_DEMUXER_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_SUCCESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>!=</operator> <name>VLC_DEMUXER_SUCCESS</name> <operator>||</operator> <operator>!</operator><name>tk</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name> <operator>+=</operator> <name>DEMUX_INCREMENT</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>MP4_UpdateSeekpoint</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_nztime</name> <operator>+</operator> <name>DEMUX_INCREMENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_fragmented</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_status</name> <init>= <expr><call><name>DemuxMoov</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>==</operator> <name>VLC_DEMUXER_EOS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_UpdateSeekpoint</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_time_offset</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_accurate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_track</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name> <init>= <expr><name>i_date</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_track</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_ok</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>MP4_TrackSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_seeked</name> <init>= <expr><call><name>MP4_TrackGetDTS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_seeked</name> <operator>&lt;</operator> <name>i_start</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_start</name> <operator>=</operator> <name>i_seeked</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seeking with %"</literal><name>PRId64</name> <literal type="string">"ms %s"</literal></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_date</name> <operator>-</operator> <name>i_start</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>!</operator><name>b_accurate</name></expr> ?</condition><then> <expr><literal type="string">"alignment"</literal></expr> </then><else>: <expr><literal type="string">"preroll (use input-fast-seek to avoid)"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_track</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator> <operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_ok</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MP4_TrackSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_UpdateSeekpoint</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP4ASF_ResetFrames</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_accurate</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FragPrepareChunk</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moof</name></decl></parameter>,
<parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sidx</name></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>i_moof_time</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_discontinuity</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_discontinuity</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>context</name><operator>.</operator><name>b_resync_time_offset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FragCreateTrunIndex</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_moof</name></expr></argument>, <argument><expr><name>p_sidx</name></expr></argument>, <argument><expr><name>i_moof_time</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_run_t</name> <modifier>*</modifier></type><name>p_run</name> <init>= <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample_pos</name></name> <operator>=</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_time</name></name> <operator>=</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_first_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>FragGetDemuxTimeFromTracksTime</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_ttime</name> <init>= <expr><call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_time</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_timescale</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_time</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name>i_ttime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>i_time</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>FragGetMoofSequenceNumber</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moof</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_mfhd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_moof</name></expr></argument>, <argument><expr><literal type="string">"mfhd"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_mfhd</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mfhd</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_sequence_number</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FragSeekLoadFragment</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_moox</name></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>i_moox_time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moox</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_moox</name> <operator>==</operator> <name>ATOM_moov</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_moox</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ATOM_moof</name> <operator>!=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_vroot</name> <init>= <expr><call><name>MP4_BoxGetNextChunk</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_vroot</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_moox</name> <operator>=</operator> <call><name>MP4_BoxExtract</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vroot</name><operator>-&gt;</operator><name>p_first</name></name></expr></argument>, <argument><expr><name>ATOM_moof</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_moox</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>FragResetContext</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name> <operator>=</operator> <name>p_moox</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>=</operator> <name>i_moox</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_moox</name> <operator>==</operator> <name>ATOM_moof</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FragPrepareChunk</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_moox</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_moox_time</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_lastseqnumber</name></name> <operator>=</operator> <call><name>FragGetMoofSequenceNumber</name><argument_list>( <argument><expr><name>p_moox</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name> <operator>=</operator> <call><name>FragGetDemuxTimeFromTracksTime</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seeked to %4.4s at pos %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>i_moox</name></expr></argument>, <argument><expr><name><name>p_moox</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>GetSeekTrackIndex</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cand</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>cand</name> <operator>!=</operator> <name>i</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>cand</name></expr>]</index></name><operator>.</operator><name>b_selected</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cand</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>cand</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FragTrunSeekToTime</name><parameter_list>( <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>i_target_time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_time</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_first_dts</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_run_t</name> <modifier>*</modifier></type><name>p_run</name> <init>= <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_trun_t</name> <modifier>*</modifier></type><name>p_data</name> <init>=
<expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name><name>p_trun</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trun</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>&gt;</operator> <name>i_target_time</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_run</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_time</name> <operator>=</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_first_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dur</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_default_sample_duration</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_default_sample_size</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_DURATION</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dur</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_duration</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>+</operator> <name>dur</name> <operator>&gt;</operator> <name>i_target_time</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_time</name> <operator>+=</operator> <name>dur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample</name></name> <operator>=</operator> <name>i_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample_pos</name></name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <name>i_run</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_SEGMENT_TIME</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FragSeekToTime</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_nztime</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_accurate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i64</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_segment_type</name> <init>= <expr><name>ATOM_moof</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_segment_time</name> <init>= <expr><name>INVALID_SEGMENT_TIME</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_sync_time</name> <init>= <expr><name>i_nztime</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_iframesync</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_duration</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulated_duration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>||</operator> <operator>!</operator><name>i_duration</name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_backup_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragments_probed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_index_probed</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ProbeIndex</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_index_probed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_seek_track_index</name> <init>= <expr><call><name>GetSeekTrackIndex</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_seek_track_ID</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_seek_track_index</name></expr>]</index></name><operator>.</operator><name>i_track_ID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name>i_nztime</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call>
<operator>&lt;</operator> <call><name>GetMoovTrackDuration</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_seek_track_ID</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_segment_type</name> <operator>=</operator> <name>ATOM_moov</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>FragGetMoofBySidxIndex</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_nztime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sync_time</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_segment_time</name> <operator>=</operator> <name>i_sync_time</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seeking to sidx moof pos %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name>i_sync_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>FragGetMoofByTfraIndex</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_nztime</name></expr></argument>, <argument><expr><name>i_seek_track_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sync_time</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seeking to sync point %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>i_sync_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_iframesync</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragments_probed</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>ProbeFragmentsChecked</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragments_probed</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_basetime</name> <init>= <expr><call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name>i_sync_time</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>MP4_Fragments_Index_Lookup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_basetime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i64</name></expr></argument>, <argument><expr><name>i_seek_track_index</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <operator>(</operator><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_backup_pos</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seeking to fragment index pos %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>,
<argument><expr><call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_basetime</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i64</name> <operator>==</operator> <name>UINT64_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seek by index failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <operator>(</operator><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_backup_pos</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"final seek to fragment at %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seek failed to %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <operator>(</operator><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_backup_pos</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>FragSeekLoadFragment</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_segment_type</name></expr></argument>, <argument><expr><name>i_segment_time</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <operator>(</operator><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_backup_pos</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_segment_type</name> <operator>==</operator> <name>ATOM_moov</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP4_TrackSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_sync_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name> <operator>=</operator> <name>i_sync_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>b_iframesync</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_tst</name> <init>= <expr><call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name>i_sync_time</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_timescale</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FragTrunSeekToTime</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_tst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_next_block_flags</name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4ASF_ResetFrames</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_iframesync</name> <operator>&amp;&amp;</operator> <name>b_accurate</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_nztime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FragSeekToPos</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_accurate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_duration</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulated_duration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_duration</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragments_probed</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>ProbeFragmentsChecked</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_duration</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulated_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_duration</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>FragSeekToTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator><operator>(</operator> <name>f</name> <operator>*</operator>
<call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_duration</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr></argument>, <argument><expr><name>b_accurate</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_LoadMeta</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_meta</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_metapath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_metaroot</name> <init>= <expr><call><name>MP4_GetMetaRoot</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_metapath</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GetCoverMetaURI</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><name>p_metaroot</name></expr></argument>, <argument><expr><name>psz_metapath</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_metaroot</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetupMeta</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>p_metaroot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_duration</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulated_duration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>
<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_duration</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name> <operator>/</operator>
<call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_duration</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_SEEKPOINT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>==</operator> <name>DemuxFrag</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>FragSeekToPos</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <operator>(</operator><name>vlc_tick_t</name><operator>)</operator><operator>(</operator> <name>f</name> <operator>*</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
<return>return <expr><call><name>Seek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>==</operator> <name>DemuxFrag</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>FragSeekToTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>Seek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_duration</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>
<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attach</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_attachment_t</name><operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <call><name>MP4_GetAttachments</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><name>ppp_attach</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>*</operator><name>pi_int</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"adding attachment %s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ppp_attach</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_meta_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_title</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_title_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_title_offset</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_seekpoint_offset</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppp_title</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>input_title_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppp_title</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <call><name>vlc_input_title_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_title_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_seekpoint_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_SET_TITLE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_title</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>||</operator> <name>i_title</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_SET_SEEKPOINT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_seekpoint</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>Seek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i_seekpoint</name></expr>]</index></name><operator>-&gt;</operator><name>i_time_offset</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>flags</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>INPUT_UPDATE_SEEKPOINT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint_changed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_load</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>p_load</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_track</name></expr></argument>, <argument><expr><literal type="string">"load"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_load</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_duration</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator>
<call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_load</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_duration</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_timescale</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_SET_NEXT_DEMUX_TIME</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_GROUP_DEFAULT</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_GROUP_ALL</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_GROUP_LIST</name></expr>:</case>
<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>
<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type> <name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_track</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"freeing all memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FragResetContext</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_Fragments_Index_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_track</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MP4_TrackClean</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadChapterGpac</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_chpl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_chpl</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_chapter</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>=</operator> <call><name>vlc_input_title_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_chpl</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_chapter</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_chpl</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_seekpoint_Delete</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>msftime_t</name></type> <name>offset</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_chpl</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MSFTIME</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadChapterGoPro</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_hmmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>=</operator> <call><name>vlc_input_title_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_hmmt</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_chapter_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"HiLight tag #%u"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_hmmt</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>pi_chapter_start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadChapterApple</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name><name>tk</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tk</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&lt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</condition> <incr><expr><name><name>tk</name><operator>-&gt;</operator><name>i_sample</name></name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_dts</name> <init>= <expr><call><name>MP4_TrackGetDTS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_delta</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>MP4_TrackGetPTSDelta</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pts_delta</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_pts_delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_size</name> <init>= <expr><call><name>MP4_TrackGetReadSize</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nb_samples</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><call><name>MP4_TrackGetPos</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>p_buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_read</name> <init>= <expr><call><name>stream_ReadU32</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>,
<argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_string</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><call><name>GetWBE</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i_read</name><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psnz_string</name> <init>= <expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_string</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>psnz_string</name></expr></argument>, <argument><expr><literal type="string">"\xFF\xFE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><name>psnz_string</name></expr></argument>, <argument><expr><name>i_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>psnz_string</name></expr></argument>, <argument><expr><name>i_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_seekpoint_Delete</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <name>i_dts</name> <operator>+</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_pts_delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>=</operator> <call><name>vlc_input_title_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_sample</name></name><operator>+</operator><literal type="number">1</literal> <operator>&gt;=</operator> <name><name>tk</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_sample_first</name> <operator>+</operator>
<name><name>tk</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_sample_count</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_chunk</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadChapter</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_chpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_hmmt</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_chpl</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/moov/udta/chpl"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_chpl</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_chpl</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_chapter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LoadChapterGpac</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_chpl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>p_hmmt</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/moov/udta/HMMT"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_hmmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_hmmt</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pi_chapter_start</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_hmmt</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_chapter_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LoadChapterGoPro</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_hmmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tk</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tk</name><operator>-&gt;</operator><name>i_use_flags</name></name> <operator>&amp;</operator> <name>USEAS_CHAPTERS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TX3G</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LoadChapterApple</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_duration</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulated_duration</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator>
<call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_duration</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>TrackCreateChunksIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_demux_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_co64</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_stsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_index</name></decl>, <decl><type ref="prev"/><name>i_last</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><operator>(</operator><name>p_co64</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_stbl</name></name></expr></argument>, <argument><expr><literal type="string">"stco"</literal></expr></argument> )</argument_list></call> <operator>)</operator><operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>p_co64</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_stbl</name></name></expr></argument>, <argument><expr><literal type="string">"co64"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>)</operator><operator>||</operator>
<operator>(</operator> <operator>!</operator><operator>(</operator><name>p_stsc</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_stbl</name></name></expr></argument>, <argument><expr><literal type="string">"stsc"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return<expr><operator>(</operator> <name>VLC_EGENERIC</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_co64</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_entry_count</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no chunk defined"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mp4_chunk_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><expr><name>i_chunk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_chunk</name> <operator>&lt;</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr>;</condition> <incr><expr><name>i_chunk</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_chunk_t</name> <modifier>*</modifier></type><name>ck</name> <init>= <expr><operator>&amp;</operator><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_co64</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>i_chunk_offset</name><index>[<expr><name>i_chunk</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_delta_dts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name>i_last</name> <operator>=</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>i_index</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_stsc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_entry_count</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>i_index</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><expr><name>i_chunk</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_stsc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>i_first_chunk</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><name>i_chunk</name> <operator>&lt;</operator> <name>i_last</name></expr>;</condition> <incr><expr><name>i_chunk</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_chunk</name> <operator>&gt;=</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"corrupted chunk table"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample_description_index</name> <operator>=</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_stsc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>i_sample_description_index</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample_count</name> <operator>=</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_stsc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>i_samples_per_chunk</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i_last</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_stsc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>i_first_chunk</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_broken</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_sample_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>+=</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_sample_count</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_chunk_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><operator>&amp;</operator><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i_chunk</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i_chunk</name> <operator>&lt;</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr>;</condition> <incr><expr><name>i_chunk</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_chunk_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>UINT32_MAX</name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>&lt;</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_broken</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>+=</operator> <name><name>cur</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>i_sample_first</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>i_sample_first</name></name> <operator>+</operator> <name><name>prev</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>b_broken</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Overflow in chunks total samples count"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track[Id 0x%x] read %d chunk"</literal></expr></argument>,
<argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>, <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xTTS_CountEntries</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_entry</name></decl></parameter> ,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_index</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_index_samples_left</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_sample_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>pi_index_sample_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_table_count</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_array_offset</name></decl>;</decl_stmt>
<while>while<condition>( <expr><name>i_sample_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><operator>(</operator><name>UINT32_MAX</name> <operator>-</operator> <name>i_index</name><operator>)</operator> <operator>&gt;=</operator> <operator>*</operator><name>pi_entry</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_array_offset</name> <operator>=</operator> <name>i_index</name> <operator>+</operator> <operator>*</operator><name>pi_entry</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_array_offset</name> <operator>&gt;=</operator> <name>i_table_count</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid index counting total samples %u %u"</literal></expr></argument>, <argument><expr><name>i_array_offset</name></expr></argument>, <argument><expr><name>i_table_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EBADVAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_index_samples_left</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_index_samples_left</name> <operator>&gt;</operator> <name>i_sample_count</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_index_samples_left</name> <operator>-=</operator> <name>i_sample_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sample_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_entry</name> <operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_sample_count</name> <operator>-=</operator> <name>i_index_samples_left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index_samples_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_entry</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_sample_count</name> <operator>-=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_sample_count</name></expr></argument>, <argument><expr><name><name>pi_index_sample_count</name><index>[<expr><name>i_array_offset</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_entry</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TrackCreateSamplesIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_demux_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_data_stsz_t</name> <modifier>*</modifier></type><name>stsz</name></decl>;</decl_stmt>






<expr_stmt><expr><name>p_box</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_stbl</name></name></expr></argument>, <argument><expr><literal type="string">"stsz"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find STSZ box"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>stsz</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>!=</operator> <name><name>stsz</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Incorrect total samples stsc %"</literal> <name>PRIu32</name> <literal type="string">" &lt;&gt; stsz %"</literal><name>PRIu32</name> <literal type="string">", "</literal>
<literal type="string">" expect truncated media playback"</literal></expr></argument>,
<argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument>, <argument><expr><name><name>stsz</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument>, <argument><expr><name><name>stsz</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>stsz</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>=</operator> <name><name>stsz</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_sample_size</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_sample_size</name></name> <operator>=</operator>
<call><name>calloc</name><argument_list>( <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>uint32_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_sample_size</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i_sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_sample</name> <operator>&lt;</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</condition> <incr><expr><name>i_sample</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_sample_size</name><index>[<expr><name>i_sample</name></expr>]</index></name> <operator>=</operator>
<name><name>stsz</name><operator>-&gt;</operator><name>i_entry_size</name><index>[<expr><name>i_sample</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>&amp;&amp;</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_chunk_t</name> <modifier>*</modifier></type><name>lastchunk</name> <init>= <expr><operator>&amp;</operator><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>lastchunk</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>+</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>stsz</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid samples table: stsz table is too small"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>










<decl_stmt><decl><type><name>int64_t</name></type> <name>i_next_dts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>p_box</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_stbl</name></name></expr></argument>, <argument><expr><literal type="string">"stts"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find STTS box"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_data_stts_t</name> <modifier>*</modifier></type><name>stts</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"STTS table of %"</literal><name>PRIu32</name><literal type="string">" entries"</literal></expr></argument>, <argument><expr><name><name>stts</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_current_index_samples_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i_chunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_chunk</name> <operator>&lt;</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr>;</condition> <incr><expr><name>i_chunk</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_chunk_t</name> <modifier>*</modifier></type><name>ck</name> <init>= <expr><operator>&amp;</operator><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_count</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>=</operator> <name>i_next_dts</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>xTTS_CountEntries</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ck</name><operator>-&gt;</operator><name>i_entries_dts</name></name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>,
<argument><expr><name>i_current_index_samples_left</name></expr></argument>,
<argument><expr><name><name>ck</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument>,
<argument><expr><name><name>stts</name><operator>-&gt;</operator><name>pi_sample_count</name></name></expr></argument>,
<argument><expr><name><name>stts</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_dts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>uint32_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_delta_dts</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_dts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>uint32_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name></name> <operator>||</operator> <operator>!</operator><name><name>ck</name><operator>-&gt;</operator><name>p_sample_delta_dts</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_delta_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"can't allocate memory for i_entry=%"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_sample_count</name> <operator>=</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_entries_dts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_current_index_samples_left</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_current_index_samples_left</name> <operator>&gt;</operator> <name>i_sample_count</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i_sample_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_delta_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_delta</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_dts</name> <operator>+=</operator> <name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_delta</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_sample_count</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <name>i_next_dts</name> <operator>-</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_first_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_current_index_samples_left</name> <operator>-=</operator> <name>i_sample_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sample_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name> <operator>==</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_entries_dts</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i_current_index_samples_left</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_delta_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_delta</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_dts</name> <operator>+=</operator> <name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_delta</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_current_index_samples_left</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <name>i_next_dts</name> <operator>-</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_first_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_sample_count</name> <operator>-=</operator> <name>i_current_index_samples_left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_current_index_samples_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>stts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>&gt;</operator> <name>i_sample_count</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i_sample_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_delta_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_delta</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_dts</name> <operator>+=</operator> <name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_delta</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_sample_count</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <name>i_next_dts</name> <operator>-</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_first_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_current_index_samples_left</name> <operator>=</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>-</operator> <name>i_sample_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sample_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name> <operator>==</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_entries_dts</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_delta_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_delta</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_dts</name> <operator>+=</operator> <name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_delta</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>stts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i_index</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <name>i_next_dts</name> <operator>-</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_first_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_sample_count</name> <operator>-=</operator> <name><name>stts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name>p_box</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_stbl</name></name></expr></argument>, <argument><expr><literal type="string">"ctts"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_box</name> <operator>&amp;&amp;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_data_ctts_t</name> <modifier>*</modifier></type><name>ctts</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"CTTS table of %"</literal><name>PRIu32</name><literal type="string">" entries"</literal></expr></argument>, <argument><expr><name><name>ctts</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_cts_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_cslg</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>p_stbl</name></name></expr></argument>, <argument><expr><literal type="string">"cslg"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_cslg</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_cslg</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_cts_shift</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_cslg</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ct_to_dts_shift</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_current_index_samples_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i_chunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_chunk</name> <operator>&lt;</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr>;</condition> <incr><expr><name>i_chunk</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_chunk_t</name> <modifier>*</modifier></type><name>ck</name> <init>= <expr><operator>&amp;</operator><name><name>p_demux_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_count</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>xTTS_CountEntries</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>,
<argument><expr><name>i_current_index_samples_left</name></expr></argument>,
<argument><expr><name><name>ck</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument>,
<argument><expr><name><name>ctts</name><operator>-&gt;</operator><name>pi_sample_count</name></name></expr></argument>,
<argument><expr><name><name>ctts</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>uint32_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>int32_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name></name> <operator>||</operator> <operator>!</operator><name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"can't allocate memory for i_entry=%"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_sample_count</name> <operator>=</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_current_index_samples_left</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_current_index_samples_left</name> <operator>&gt;</operator> <name>i_sample_count</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i_sample_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctts</name><operator>-&gt;</operator><name>pi_sample_offset</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>+</operator> <name>i_cts_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_current_index_samples_left</name> <operator>-=</operator> <name>i_sample_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sample_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name> <operator>==</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i_current_index_samples_left</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctts</name><operator>-&gt;</operator><name>pi_sample_offset</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>+</operator> <name>i_cts_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sample_count</name> <operator>-=</operator> <name>i_current_index_samples_left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_current_index_samples_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>ctts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>&gt;</operator> <name>i_sample_count</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i_sample_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctts</name><operator>-&gt;</operator><name>pi_sample_offset</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>+</operator> <name>i_cts_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_current_index_samples_left</name> <operator>=</operator> <name><name>ctts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>-</operator> <name>i_sample_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sample_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name> <operator>==</operator> <name><name>ck</name><operator>-&gt;</operator><name>i_entries_pts</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctts</name><operator>-&gt;</operator><name>pi_sample_offset</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>+</operator> <name>i_cts_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sample_count</name> <operator>-=</operator> <name><name>ctts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track[Id 0x%x] read %"</literal><name>PRIu32</name><literal type="string">" samples length:%"</literal><name>PRId64</name><literal type="string">"s"</literal></expr></argument>,
<argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>, <argument><expr><name><name>p_demux_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument>,
<argument><expr><name>i_next_dts</name> <operator>/</operator> <name><name>p_demux_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>TrackGetESSampleRate</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_den</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_sd_index</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_chunk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_den</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trak</name> <init>= <expr><call><name>MP4_GetTrakByTrackID</name><argument_list>( <argument><expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>,
<argument><expr><literal type="string">"/moov"</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_mdhd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_trak</name></expr></argument>, <argument><expr><literal type="string">"mdia/mdhd"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_mdhd</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mdhd</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><name>pi_num</name></expr></argument>, <argument><expr><name>pi_den</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mdhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_timescale</name> <operator>*</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mdhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_duration</name></expr></argument>,
<argument><expr><name>UINT16_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_chunk_t</name> <modifier>*</modifier></type><name>p_chunk</name> <init>= <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_chunk</name> <operator>&gt;</operator> <operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>p_chunk</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_sample_description_index</name> <operator>==</operator> <name>i_sd_index</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_chunk</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_total_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>i_sample</name> <operator>+=</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_total_duration</name> <operator>+=</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>i_duration</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_chunk</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
while<condition>( <expr><name>p_chunk</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>p_chunk</name><operator>-&gt;</operator><name>i_sample_description_index</name></name> <operator>==</operator> <name>i_sd_index</name></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><name>i_sample</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_total_duration</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><name>pi_num</name></expr></argument>, <argument><expr><name>pi_den</name></expr></argument>,
<argument><expr><name>i_sample</name> <operator>*</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>,
<argument><expr><name>i_total_duration</name></expr></argument>,
<argument><expr><name>UINT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>TrackCreateES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_chunk</name></decl></parameter>, <parameter><decl><type><name>es_out_id_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_es</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sample_description_index</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragmented</name></name> <operator>||</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_sample_description_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_sample_description_index</name> <operator>=</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample_description_index</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_es</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_es</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_sample_description_index</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid SampleEntry index (track[Id 0x%x])"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_stsd</name></name></expr></argument>, <argument><expr><literal type="string">"[%d]"</literal></expr></argument>,
<argument><expr><name>i_sample_description_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sample</name> <operator>||</operator>
<operator>(</operator> <operator>!</operator><name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_payload</name></name> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>SPU_ES</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find SampleEntry (track[Id 0x%x])"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_sample</name></name> <operator>=</operator> <name>p_sample</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_frma</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_frma</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_sample</name></name></expr></argument>, <argument><expr><literal type="string">"sinf/frma"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_frma</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_frma</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Original Format Box: %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_frma</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_frma</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name><name>p_frma</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_frma</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr>;</expr_stmt>


<switch>switch<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>!=</operator> <name>ATOM_vide</name> <operator>||</operator>
<operator>!</operator><call><name>SetupVideoES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_sample</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>TrackGetESSampleRate</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,
<argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>i_sample_description_index</name></expr></argument>, <argument><expr><name>i_chunk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>/</operator>
<operator>(</operator><name>float</name><operator>)</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>!=</operator> <name>ATOM_soun</name> <operator>||</operator>
<operator>!</operator><call><name>SetupAudioES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_sample</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_replay_gain_t</name> <modifier>*</modifier></type><name>p_arg</name> <init>= <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio_replay_gain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_meta</name> <init>= <expr><call><name>vlc_meta_GetExtra</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><literal type="string">"replaygain_track_gain"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_meta</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f_gain</name> <init>= <expr><call><name>us_atof</name><argument_list>( <argument><expr><name>psz_meta</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_arg</name><operator>-&gt;</operator><name>pf_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name> <operator>=</operator> <name>f_gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_arg</name><operator>-&gt;</operator><name>pb_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name> <operator>=</operator> <name>f_gain</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>psz_meta</name> <operator>=</operator> <call><name>vlc_meta_GetExtra</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><literal type="string">"replaygain_track_peak"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_meta</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f_gain</name> <init>= <expr><call><name>us_atof</name><argument_list>( <argument><expr><name>psz_meta</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_arg</name><operator>-&gt;</operator><name>pf_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name> <operator>=</operator> <name>f_gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_arg</name><operator>-&gt;</operator><name>pb_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name> <operator>=</operator> <name>f_gain</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>!=</operator> <name>ATOM_text</name> <operator>&amp;&amp;</operator>
<name><name>p_sample</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>!=</operator> <name>ATOM_subt</name> <operator>&amp;&amp;</operator>
<name><name>p_sample</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>!=</operator> <name>ATOM_sbtl</name> <operator>&amp;&amp;</operator>
<name><name>p_sample</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>!=</operator> <name>ATOM_clcp</name> <operator>)</operator> <operator>||</operator>
<operator>!</operator><call><name>SetupSpuES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_sample</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>pp_es</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_es</name> <operator>=</operator> <call><name>MP4_AddTrackES</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator> <operator>!</operator><name>pp_es</name> <operator>||</operator> <operator>*</operator><name>pp_es</name> <operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>TrackGetNearestSeekPoint</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_sample</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_sync_sample</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_sync_sample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_stss</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_stss</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_stbl</name></name></expr></argument>, <argument><expr><literal type="string">"stss"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_stss_t</name> <modifier>*</modifier></type><name>p_stss_data</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_stss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track[Id 0x%x] using Sync Sample Box (stss)"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name><name>p_stss_data</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>&gt;=</operator> <name><name>p_stss_data</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator>
<name>i_sample</name> <operator>&lt;</operator> <name><name>p_stss_data</name><operator>-&gt;</operator><name>i_sample_number</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_sync_sample</name> <operator>=</operator> <name><name>p_stss_data</name><operator>-&gt;</operator><name>i_sample_number</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stss gives %d --&gt; %"</literal> <name>PRIu32</name> <literal type="string">" (sample number)"</literal></expr></argument>,
<argument><expr><name>i_sample</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_sync_sample</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sbgp</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_stbl</name></name></expr></argument>, <argument><expr><literal type="string">"sbgp"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_sbgp</name></expr>;</condition> <incr><expr><name>p_sbgp</name> <operator>=</operator> <name><name>p_sbgp</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_sbgp_t</name> <modifier>*</modifier></type><name>p_sbgp_data</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_sbgp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_sbgp</name> <operator>||</operator> <operator>!</operator><name>p_sbgp_data</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sbgp_data</name><operator>-&gt;</operator><name>i_grouping_type</name></name> <operator>==</operator> <name>SAMPLEGROUP_rap</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_group_sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sbgp_data</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sbgp_data</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_group_description_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_sample</name> <operator>&lt;</operator> <name>i_group_sample</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sbgp lookup failed %"</literal> <name>PRIu32</name> <literal type="string">" (sample number)"</literal></expr></argument>,
<argument><expr><name>i_sample</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>i_sample</name> <operator>&gt;=</operator> <name>i_group_sample</name> <operator>&amp;&amp;</operator>
<operator>*</operator><name>pi_sync_sample</name> <operator>&lt;</operator> <name>i_group_sample</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_sync_sample</name> <operator>=</operator> <name>i_group_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_group_sample</name> <operator>+=</operator> <name><name>p_sbgp_data</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_sample_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pi_sync_sample</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sbgp gives %d --&gt; %"</literal> <name>PRIu32</name> <literal type="string">" (sample number)"</literal></expr></argument>,
<argument><expr><name>i_sample</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_sync_sample</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>TrackTimeToSampleChunk</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_chunk</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_sample</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_start</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator> <name>VLC_EGENERIC</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>MP4_TrackSetELST</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_elst</name></name> <operator>&amp;&amp;</operator> <call><name><name>p_track</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_entry_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_data_elst_t</name> <modifier>*</modifier></type><name>elst</name> <init>= <expr><call><name><name>p_track</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_mvt</name><init>= <expr><call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><name>start</name> <operator>&lt;</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst_time</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_chunk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_sample</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_start</name> <operator>=</operator> <call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>elst</name><operator>-&gt;</operator><name>i_media_rate_integer</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>elst</name><operator>-&gt;</operator><name>i_media_rate_fraction</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>elst</name><operator>-&gt;</operator><name>i_media_time</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_start</name> <operator>+=</operator> <name><name>elst</name><operator>-&gt;</operator><name>i_media_time</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"elst (%d) gives %"</literal><name>PRId64</name><literal type="string">"ms (movie)-&gt; %"</literal><name>PRId64</name>
<literal type="string">"ms (track)"</literal></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name></expr></argument>,
<argument><expr><call><name>MP4_rescale</name><argument_list>( <argument><expr><name>i_mvt</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>MP4_rescale</name><argument_list>( <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>i_start</name> <operator>=</operator> <call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<for>for<control>( <init><expr><name>i_chunk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i_chunk</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_chunk</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name>i_chunk</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>i_start</name> <operator>&gt;=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_first_dts</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name>i_start</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_first_dts</name></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>i_sample</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample_first</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_first_dts</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint_fast32_t</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>i_index</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_entries_dts</name> <operator>&amp;&amp;</operator>
<name>i_sample</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample_count</name></expr>;</condition>
<incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>+</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>*</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name><name>p_sample_delta_dts</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>i_start</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_dts</name> <operator>+=</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>*</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name><name>p_sample_delta_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sample</name> <operator>+=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name><name>p_sample_count_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name><name>p_sample_delta_dts</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_sample</name> <operator>+=</operator> <operator>(</operator> <name>i_start</name> <operator>-</operator> <name>i_dts</name> <operator>)</operator> <operator>/</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name><name>p_sample_delta_dts</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_sample</name> <operator>&gt;=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track[Id 0x%x] will be disabled "</literal>
<literal type="string">"(seeking too far) chunk=%d sample=%d"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>, <argument><expr><name>i_chunk</name></expr></argument>, <argument><expr><name>i_sample</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>VLC_EGENERIC</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sync_sample</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>==</operator>
<call><name>TrackGetNearestSeekPoint</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>i_sample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sync_sample</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_sync_sample</name> <operator>&lt;=</operator> <name>i_sample</name></expr> )</condition>
<block>{<block_content>
<while>while<condition>( <expr><name>i_chunk</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>i_sync_sample</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample_first</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_chunk</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<while>while<condition>( <expr><name>i_chunk</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>i_sync_sample</name> <operator>&gt;=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample_first</name> <operator>+</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample_count</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_chunk</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>i_sample</name> <operator>=</operator> <name>i_sync_sample</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_chunk</name> <operator>=</operator> <name>i_chunk</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_sample</name> <operator>=</operator> <name>i_sample</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TrackGotoChunkSample</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_chunk</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sample</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_reselect</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name> <operator>&gt;=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name> <operator>||</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_sample_description_index</name> <operator>!=</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample_description_index</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"recreate ES for track[Id 0x%x]"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_reselect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>TrackCreateES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>i_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot create es for track[Id 0x%x]"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>b_reselect</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name> <operator>=</operator> <name>i_chunk</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample</name> <operator>=</operator> <name>i_sample</name> <operator>-</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name><operator>.</operator><name>i_sample_first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>=</operator> <name>i_sample</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_selected</name></name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void MP4_TrackRestart( demux_t *p_demux, mp4_track_t *p_track,
MP4_Box_t *p_params_box )
{
bool b_reselect = false;
if( p_track-&gt;p_es )
{
es_out_Control( p_demux-&gt;out, ES_OUT_GET_ES_STATE,
p_track-&gt;p_es, &amp;b_reselect );
}


uint32_t i_sample_pos_backup = p_track-&gt;i_sample;
vlc_tick_t time_backup = p_track-&gt;i_time;
uint32_t timescale_backup = p_track-&gt;i_timescale;


es_format_t fmtbackup;
es_out_id_t *p_es_backup = p_track-&gt;p_es;
p_track-&gt;p_es = NULL;
es_format_Copy( &amp;fmtbackup, &amp;p_track-&gt;fmt );
es_format_Clean( &amp;p_track-&gt;fmt );



MP4_TrackDestroy( p_demux, p_track );
memset( p_track, 0, sizeof(*p_track) );

assert(p_params_box-&gt;i_type == ATOM_trak);
MP4_TrackCreate( p_demux, p_track, p_params_box, false, true );

if( p_track-&gt;b_ok )
{
if( !es_format_IsSimilar( &amp;fmtbackup, &amp;p_track-&gt;fmt ) ||
fmtbackup.i_extra != p_track-&gt;fmt.i_extra ||
memcmp( fmtbackup.p_extra, p_track-&gt;fmt.p_extra, fmtbackup.i_extra ) )
{
if( p_es_backup )
es_out_Del( p_demux-&gt;out, p_es_backup );

if( !p_track-&gt;b_chapters_source )
{
p_track-&gt;p_es = MP4_AddTrackES( p_demux-&gt;out, p_track );
p_track-&gt;b_ok = !!p_track-&gt;p_es;
}
}
else
{
p_track-&gt;p_es = p_es_backup;
}
}
else if( p_es_backup )
{
es_out_Del( p_demux-&gt;out, p_es_backup );
}


if( b_reselect &amp;&amp; p_track-&gt;p_es )
es_out_Control( p_demux-&gt;out, ES_OUT_SET_ES, p_track-&gt;p_es );

es_format_Clean( &amp;fmtbackup );


p_track-&gt;i_sample = i_sample_pos_backup;
p_track-&gt;i_time = MP4_rescale( time_backup, timescale_backup, p_track-&gt;i_timescale );
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_TrackSetup</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box_trak</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_create_es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_force_enable</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_track</name></name> <operator>=</operator> <name>p_box_trak</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>language</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sdp_media_type</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tkhd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"tkhd"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_tkhd</name></expr> )</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_enable</name></name> <operator>=</operator>
<operator>(</operator> <operator>(</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name><operator>&amp;</operator><name>MP4_TRACK_ENABLED</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_width</name> <operator>/</operator> <name>BLOCK16x16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_height</name> <operator>/</operator> <name>BLOCK16x16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>f_rotation</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>f_rotation</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_flip</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flip</name></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_mdhd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"mdia/mdhd"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_hdlr</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"mdia/hdlr"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><name>p_mdhd</name> <operator>)</operator><operator>||</operator><operator>(</operator> <operator>!</operator><name>p_hdlr</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mdhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_timescale</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid track timescale "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mdhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_timescale</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>language</name></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mdhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>rgs_language</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_mac_encoding</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mdhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>b_mac_encoding</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_hdlr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>i_handler_type</name></name></expr> )</condition>
<block>{<block_content>
<case>case<expr><operator>(</operator> <name>ATOM_soun</name> <operator>)</operator></expr>:</case>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"mdia/minf/smhd"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case<expr><operator>(</operator> <name>ATOM_pict</name> <operator>)</operator></expr>:</case> 
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case<expr><operator>(</operator> <name>ATOM_vide</name> <operator>)</operator></expr>:</case>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"mdia/minf/vmhd"</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case<expr><operator>(</operator> <name>ATOM_hint</name> <operator>)</operator></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"mdia/minf/hmhd"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"mdia/minf/stbl/stsd/rrtp"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_sdp</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"udta/hnti/sdp "</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Didn't find sdp box to determine stream type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>sdp_media_type</name></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_sdp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>psz_text</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>sdp_media_type</name></expr></argument>, <argument><expr><literal type="string">"m=audio"</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Found audio Rtp: %s"</literal></expr></argument>, <argument><expr><name>sdp_media_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>sdp_media_type</name></expr></argument>, <argument><expr><literal type="string">"m=video"</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Found video Rtp: %s"</literal></expr></argument>, <argument><expr><name>sdp_media_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Malformed track SDP message: %s"</literal></expr></argument>, <argument><expr><name>sdp_media_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_sdp</name></name> <operator>=</operator> <name>p_sdp</name></expr>;</expr_stmt>
<break>break;</break>

<case>case<expr><operator>(</operator> <name>ATOM_tx3g</name> <operator>)</operator></expr>:</case>
<case>case<expr><operator>(</operator> <name>ATOM_text</name> <operator>)</operator></expr>:</case>
<case>case<expr><operator>(</operator> <name>ATOM_subp</name> <operator>)</operator></expr>:</case>
<case>case<expr><operator>(</operator> <name>ATOM_subt</name> <operator>)</operator></expr>:</case> 
<case>case<expr><operator>(</operator> <name>ATOM_sbtl</name> <operator>)</operator></expr>:</case>
<case>case<expr><operator>(</operator> <name>ATOM_clcp</name> <operator>)</operator></expr>:</case> 
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>asfinfo</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_elst</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_track</name><operator>-&gt;</operator><name>p_elst</name></name> <operator>=</operator> <name>p_elst</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"edts/elst"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_data_elst_t</name> <modifier>*</modifier></type><name>elst</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"elst box found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elst</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - [%d] duration=%"</literal><name>PRId64</name><literal type="string">"ms media time=%"</literal><name>PRId64</name>
<literal type="string">"ms) rate=%d.%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><call><name>MP4_rescale</name><argument_list>( <argument><expr><name><name>elst</name><operator>-&gt;</operator><name>i_segment_duration</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>elst</name><operator>-&gt;</operator><name>i_media_time</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><call><name>MP4_rescale</name><argument_list>( <argument><expr><name><name>elst</name><operator>-&gt;</operator><name>i_media_time</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr> </then><else>:
<expr><call><name>INT64_C</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><name><name>elst</name><operator>-&gt;</operator><name>i_media_rate_integer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>elst</name><operator>-&gt;</operator><name>i_media_rate_fraction</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_track</name><operator>-&gt;</operator><name>p_stbl</name></name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>,<argument><expr><literal type="string">"mdia/minf/stbl"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator> <name><name>p_track</name><operator>-&gt;</operator><name>p_stsd</name></name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>,<argument><expr><literal type="string">"mdia/minf/stbl/stsd"</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>*</operator><name>language</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>language</name></expr></argument>, <argument><expr><literal type="string">"```"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>language</name></expr></argument>, <argument><expr><literal type="string">"und"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>language</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_udta</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"udta"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_udta</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box_iter</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>p_box_iter</name> <operator>=</operator> <name><name>p_udta</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</init> <condition><expr><name>p_box_iter</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_box_iter</name> <operator>=</operator> <name><name>p_box_iter</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_box_iter</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ATOM_0xa9nam</name></expr>:</case>
<case>case <expr><name>ATOM_name</name></expr>:</case>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator>
<call><name>strndup</name><argument_list>( <argument><expr><name><name>p_box_iter</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>,
<argument><expr><name><name>p_box_iter</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>TrackCreateChunksIndex</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,<argument><expr><name>p_track</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>TrackCreateSamplesIndex</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot create chunks index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>UNKNOWN_ES</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_track</name><operator>-&gt;</operator><name>i_use_flags</name></name> <operator>&amp;</operator> <name>USEAS_CHAPTERS</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_enable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tsel</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_force_enable</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Enabling track[Id 0x%x] (buggy file without enabled track)"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_enable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>(</operator><name>p_tsel</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box_trak</name></expr></argument>, <argument><expr><literal type="string">"udta/tsel"</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tsel</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tsel</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_switch_group</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_switch_group</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tsel</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_switch_group</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_priority</name> <init>= <expr><name>ES_PRIORITY_SELECTABLE_MIN</name></expr></init></decl>;</decl_stmt>
<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_track_t</name> <modifier>*</modifier></type><name>p_other</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_other</name> <operator>&amp;&amp;</operator> <name>p_other</name> <operator>!=</operator> <name>p_track</name> <operator>&amp;&amp;</operator>
<name><name>p_other</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>&amp;&amp;</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>i_switch_group</name></name> <operator>==</operator> <name><name>p_other</name><operator>-&gt;</operator><name>i_switch_group</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_priority</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_priority</name></expr></argument>, <argument><expr><name><name>p_other</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name>i_priority</name> <operator>&gt;</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_NOT_DEFAULTABLE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>i_priority</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_elst</name></name> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>==</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name></expr> )</condition>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SELECTABLE</name></cpp:macro> <cpp:value>(INT_MAX - ES_PRIORITY_SELECTABLE_MIN)</cpp:value></cpp:define>
<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>p_track</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_entry_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name><name>p_track</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>i_media_time</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name><name>p_track</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>i_segment_duration</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_time</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>MAX_SELECTABLE</name></expr></argument>, <argument><expr><call><name><name>p_track</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>i_media_time</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name> <operator>+</operator> <name>MAX_SELECTABLE</name> <operator>-</operator> <name>i_time</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hacks</name><operator>.</operator><name>es_cat_filters</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hacks</name><operator>.</operator><name>es_cat_filters</name></name> <operator>&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_NOT_DEFAULTABLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>b_enable</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_NOT_DEFAULTABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>TrackCreateES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><name>p_track</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>p_track</name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><name>b_create_es</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot create es for track[Id 0x%x]"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroyChunk</name><parameter_list>( <parameter><decl><type><name>mp4_chunk_t</name> <modifier>*</modifier></type><name>ck</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_delta_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_count_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_offset_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ck</name><operator>-&gt;</operator><name>p_sample_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_TrackClean</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name></name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i_chunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_chunk</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_chunk_count</name></name></expr>;</condition> <incr><expr><name>i_chunk</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyChunk</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name>i_chunk</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_sample_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>asfinfo</name><operator>.</operator><name>p_frame</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>asfinfo</name><operator>.</operator><name>p_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_TrackInit</name><parameter_list>( <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trackbox</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mp4_track_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_track</name></name> <operator>=</operator> <name>p_trackbox</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tkhd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_trackbox</name></expr></argument>, <argument><expr><literal type="string">"tkhd"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_track_ID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_TrackSelect</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_select</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>(<argument><expr><name>p_track</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_select</name> <operator>==</operator> <name><name>p_track</name><operator>-&gt;</operator><name>b_selected</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_select</name> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES_STATE</name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <name>b_select</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_TrackSeek</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>TrackTimeToSampleChunk</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sample</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot select track[Id 0x%x]"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>TrackGotoChunkSample</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>i_chunk</name></expr></argument>, <argument><expr><name>i_sample</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_selected</name></name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>MP4_GetFixedSampleSize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MP4_Box_data_sample_soun_t</name> <modifier>*</modifier></type><name>p_soun</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator>
<name><name>p_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_GSM</name></expr>:</case>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument> )</argument_list></call></expr>:</case>
<case>case <expr><name>ATOM_twos</name></expr>:</case>
<case>case <expr><name>ATOM_sowt</name></expr>:</case>
<case>case <expr><name>ATOM_raw</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S8</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S16L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S16B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S24L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S24B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S32L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S32B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_F32L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_F32B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_F64L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_F64B</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name><name>p_soun</name><operator>-&gt;</operator><name>i_samplesize</name></name><operator>+</operator><literal type="number">7U</literal><operator>)</operator><operator>/</operator><literal type="number">8U</literal><operator>)</operator> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p_soun</name><operator>-&gt;</operator><name>i_samplesize</name></name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_ALAW</name></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument> )</argument_list></call></expr>:</case>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>MP4_TrackGetReadSize</name><parameter_list>( <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_nb_samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>==</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_sample_size</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name></expr>]</index></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_sample_soun_t</name> <modifier>*</modifier></type><name>p_soun</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_chunk_t</name> <modifier>*</modifier></type><name>p_chunk</name> <init>= <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_max_samples</name> <init>= <expr><name><name>p_chunk</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>-</operator> <name><name>p_chunk</name><operator>-&gt;</operator><name>i_sample</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>==</operator> <name>VLC_CODEC_DVD_LPCM</name> <operator>&amp;&amp;</operator>
<name><name>p_soun</name><operator>-&gt;</operator><name>i_constLPCMframesperaudiopacket</name></name> <operator>&amp;&amp;</operator>
<name><name>p_soun</name><operator>-&gt;</operator><name>i_constbytesperaudiopacket</name></name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_packets</name> <init>= <expr><name>i_max_samples</name> <operator>/</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_constLPCMframesperaudiopacket</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>UINT32_MAX</name> <operator>/</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_constbytesperaudiopacket</name></name> <operator>&lt;</operator> <name>i_packets</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_packets</name> <operator>=</operator> <name>UINT32_MAX</name> <operator>/</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_constbytesperaudiopacket</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <name>i_packets</name> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_constLPCMframesperaudiopacket</name></name></expr>;</expr_stmt>
<return>return <expr><name>i_packets</name> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_constbytesperaudiopacket</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_sample_size</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name> <operator>==</operator> <literal type="number">0xFFFE</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_sample_size</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_sample</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition> 
<block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <name>i_max_samples</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <operator>*</operator><name>pi_nb_samples</name> <operator>/</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
<return>return <expr><name>i_size</name></expr>;</return>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_packets</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_packets</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_packets</name> <operator>=</operator> <name>i_max_samples</name> <operator>/</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>UINT32_MAX</name> <operator>/</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>&lt;</operator> <name>i_packets</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_packets</name> <operator>=</operator> <name>UINT32_MAX</name> <operator>/</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <name>i_packets</name> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name>i_packets</name> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
<return>return <expr><name>i_size</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>( <expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>

<case>case <expr><name>VLC_CODEC_GSM</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <literal type="number">160</literal> <operator>*</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">33</literal> <operator>*</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</return>
<case>case <expr><name>VLC_CODEC_ADPCM_IMA_QT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">34</literal> <operator>*</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_max_v0_samples</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>

<case>case <expr><name>VLC_CODEC_AMR_NB</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_AMR_WB</name></expr>:</case>
<expr_stmt><expr><name>i_max_v0_samples</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MPGA</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_MP2</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_MP3</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_MP4A</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>
<expr_stmt><expr><name>i_max_v0_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>i_max_v0_samples</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>/</operator> <literal type="number">40</literal> <operator>*</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_max_v0_samples</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_max_v0_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>pi_nb_samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name></expr></init></decl>;</init>
<condition><expr><name>i</name><operator>&lt;</operator><name><name>p_chunk</name><operator>-&gt;</operator><name>i_sample_first</name></name><operator>+</operator><name><name>p_chunk</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>&amp;&amp;</operator>
<name>i</name><operator>&lt;</operator><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_nb_samples</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>p_sample_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <call><name>MP4_GetFixedSampleSize</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_soun</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>pi_nb_samples</name> <operator>==</operator> <name>i_max_v0_samples</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<return>return <expr><name>i_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>MP4_TrackGetPos</name><parameter_list>( <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_data_sample_soun_t</name> <modifier>*</modifier></type><name>p_soun</name> <init>=
<expr><name><name>p_track</name><operator>-&gt;</operator><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_GSM</name></expr>:</case> 
<expr_stmt><expr><name>i_pos</name> <operator>+=</operator> <operator>(</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>-</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_sample_first</name> <operator>)</operator> <operator>/</operator> <literal type="number">160</literal> <operator>*</operator> <literal type="number">33</literal></expr>;</expr_stmt>
<return>return <expr><name>i_pos</name></expr>;</return>
<case>case <expr><name>VLC_CODEC_ADPCM_IMA_QT</name></expr>:</case> 
<expr_stmt><expr><name>i_pos</name> <operator>+=</operator> <operator>(</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>-</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_sample_first</name> <operator>)</operator> <operator>/</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">34</literal></expr>;</expr_stmt>
<return>return <expr><name>i_pos</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name> <operator>||</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_pos</name> <operator>+=</operator> <operator>(</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>-</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_sample_first</name> <operator>)</operator> <operator>*</operator>
<call><name>MP4_GetFixedSampleSize</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_soun</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>i_pos</name> <operator>+=</operator> <operator>(</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>-</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_sample_first</name> <operator>)</operator> <operator>/</operator>
<name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for<control>( <init><expr><name>i_sample</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_sample_first</name></expr>;</init>
<condition><expr><name>i_sample</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name></expr>;</condition> <incr><expr><name>i_sample</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_pos</name> <operator>+=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>p_sample_size</name><index>[<expr><name>i_sample</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>i_pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_TrackNextSample</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>UINT32_MAX</name> <operator>-</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&lt;</operator> <name>i_samples</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>+=</operator> <name>i_samples</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&gt;=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>&gt;=</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_sample_first</name> <operator>+</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name></expr>]</index></name><operator>.</operator><name>i_sample_count</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>TrackGotoChunkSample</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_chunk</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track[0x%x] will be disabled "</literal>
<literal type="string">"(cannot restart decoder)"</literal></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP4_TrackSelect</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_elst</name></name> <operator>&amp;&amp;</operator> <call><name><name>p_track</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_entry_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_data_elst_t</name> <modifier>*</modifier></type><name>elst</name> <init>= <expr><call><name><name>p_track</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_mvt</name> <init>= <expr><call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><call><name>MP4_TrackGetDTS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name> <operator>&lt;</operator> <name><name>elst</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>&amp;&amp;</operator>
<name>i_mvt</name> <operator>&gt;=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_elst_time</name></name> <operator>+</operator>
<name><name>elst</name><operator>-&gt;</operator><name>i_segment_duration</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP4_TrackSetELST</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>,
<argument><expr><call><name>MP4_TrackGetDTS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_TrackSetELST</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_elst_last</name> <init>= <expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>p_elst</name></name> <operator>&amp;&amp;</operator> <call><name><name>tk</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_entry_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_data_elst_t</name> <modifier>*</modifier></type><name>elst</name> <init>= <expr><call><name><name>tk</name><operator>-&gt;</operator><name>BOXDATA</name></name><argument_list>(<argument><expr><name>p_elst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_mvt</name><init>= <expr><call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name> <operator>&lt;</operator> <name><name>elst</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_dur</name> <init>= <expr><name><name>elst</name><operator>-&gt;</operator><name>i_segment_duration</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst_time</name></name> <operator>&lt;=</operator> <name>i_mvt</name>
<operator>&amp;&amp;</operator> <name>i_mvt</name> <operator>&lt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>tk</name><operator>-&gt;</operator><name>i_elst_time</name></name> <operator>+</operator> <name>i_dur</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst_time</name></name> <operator>+=</operator> <name>i_dur</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name> <operator>&gt;=</operator> <name><name>elst</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name> <operator>=</operator> <name><name>elst</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst_time</name></name> <operator>-=</operator> <name><name>elst</name><operator>-&gt;</operator><name>i_segment_duration</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>elst</name><operator>-&gt;</operator><name>i_media_time</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst_time</name></name> <operator>+=</operator> <name><name>elst</name><operator>-&gt;</operator><name>i_segment_duration</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_elst_last</name> <operator>!=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"elst old=%d new=%d"</literal></expr></argument>, <argument><expr><name>i_elst_last</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_elst</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>






static int ReInitDecoder( demux_t *p_demux, const MP4_Box_t *p_root,
mp4_track_t *p_track )
{
MP4_Box_t *p_paramsbox = MP4_BoxGet( p_root, "/moov/trak[0]" );
if( !p_paramsbox )
return VLC_EGENERIC;

MP4_TrackRestart( p_demux, p_track, p_paramsbox );


p_track-&gt;b_selected = true;
p_track-&gt;b_enable = true;

return VLC_SUCCESS;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>stime_t</name></type> <name>GetCumulatedDuration</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_max_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_track_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trak</name> <init>= <expr><call><name>MP4_GetTrakByTrackID</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_track_ID</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_stsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tkhd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>p_tkhd</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_trak</name></expr></argument>, <argument><expr><literal type="string">"tkhd"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p_stsz</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_trak</name></expr></argument>, <argument><expr><literal type="string">"mdia/minf/stbl/stsz"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_stsz</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_sample_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_max_duration</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>i_max_duration</name></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_track_duration</name> <operator>+=</operator> <call><name>MP4_Fragment_Index_GetTrackDuration</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_max_duration</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_max_duration</name></expr></argument>, <argument><expr><name>i_track_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>i_max_duration</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProbeIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_stream_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mfro</name><index>[<expr><name>MP4_MFRO_BOXSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>MP4_BoxCount</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"/mfra"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_stream_size</name> <operator>=</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>i_stream_size</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name>i_stream_size</name> <operator>&lt;</operator> <name>MP4_MFRO_BOXSIZE</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_stream_size</name> <operator>-</operator> <name>MP4_MFRO_BOXSIZE</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name> <operator>)</operator></expr>
)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Probing tail for mfro has failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mfro</name></expr></argument>, <argument><expr><name>MP4_MFRO_BOXSIZE</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>MP4_MFRO_BOXSIZE</name> <operator>&amp;&amp;</operator>
<call><name>VLC_FOURCC</name><argument_list>(<argument><expr><name><name>mfro</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>mfro</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>mfro</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>mfro</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ATOM_mfro</name> <operator>&amp;&amp;</operator>
<call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mfro</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>MP4_MFRO_BOXSIZE</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_offset</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>mfro</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"will read mfra index at %"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name>i_stream_size</name> <operator>-</operator> <name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_stream_size</name> <operator>&gt;</operator> <name>i_offset</name> <operator>&amp;&amp;</operator>
<call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_stream_size</name> <operator>-</operator> <name>i_offset</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"reading mfra index at %"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name>i_stream_size</name> <operator>-</operator> <name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ATOM_mfra</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><name>stoplist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stime_t</name></type> <name>GetMoovTrackDuration</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_track_ID</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trak</name> <init>= <expr><call><name>MP4_GetTrakByTrackID</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr></argument>, <argument><expr><name>i_track_ID</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_stsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tkhd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>p_tkhd</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_trak</name></expr></argument>, <argument><expr><literal type="string">"tkhd"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p_stsz</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_trak</name></expr></argument>, <argument><expr><literal type="string">"mdia/minf/stbl/stsz"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_stsz</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_sample_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_duration</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_moov_duration</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tkhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_duration</name></expr>;</return></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_moov_duration</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>GetMoofTrackDuration</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moov</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moof</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_track_ID</name></decl></parameter>, <parameter><decl><type><name>stime_t</name> <modifier>*</modifier></type><name>p_duration</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_moof</name> <operator>||</operator> <operator>!</operator><name>p_moov</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_traf</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_moof</name></expr></argument>, <argument><expr><literal type="string">"traf"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>( <expr><name>p_traf</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_traf</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_traf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_traf</name> <operator>=</operator> <name><name>p_traf</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tfhd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_traf</name></expr></argument>, <argument><expr><literal type="string">"tfhd"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trun</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_traf</name></expr></argument>, <argument><expr><literal type="string">"trun"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_tfhd</name> <operator>||</operator> <operator>!</operator><name>p_trun</name> <operator>||</operator> <name>i_track_ID</name> <operator>!=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_track_ID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_traf</name> <operator>=</operator> <name><name>p_traf</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_track_timescale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_track_defaultsampleduration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trex</name> <init>= <expr><call><name>MP4_GetTrexByTrackID</name><argument_list>( <argument><expr><name>p_moov</name></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_track_ID</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_trex</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_track_defaultsampleduration</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_trex</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_default_sample_duration</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trak</name> <init>= <expr><call><name>MP4_GetTrakByTrackID</name><argument_list>( <argument><expr><name>p_moov</name></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_track_ID</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_trak</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_mdhd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_trak</name></expr></argument>, <argument><expr><literal type="string">"mdia/mdhd"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_mdhd</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_track_timescale</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_mdhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_timescale</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>i_track_timescale</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_traf</name> <operator>=</operator> <name><name>p_traf</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_traf_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>( <expr><name>p_trun</name> <operator>&amp;&amp;</operator> <name>p_tfhd</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_trun</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_trun</name> <operator>=</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_trun_t</name> <modifier>*</modifier></type><name>p_trundata</name> <init>= <expr><name><name>p_trun</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trun</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_trundata</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_DURATION</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_traf_duration</name> <operator>+=</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_duration</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_DURATION</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_traf_duration</name> <operator>+=</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>*</operator>
<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_default_sample_duration</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_traf_duration</name> <operator>+=</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>*</operator>
<name>i_track_defaultsampleduration</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_trun</name> <operator>=</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p_duration</name> <operator>=</operator> <name>i_traf_duration</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProbeFragments</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_force</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_fragmented</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"probing fragments from %"</literal><name>PRId64</name></expr></argument>, <argument><expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_vroot</name> <init>= <expr><call><name>MP4_BoxNew</name><argument_list>(<argument><expr><name>ATOM_root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_vroot</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name> <operator>||</operator> <name>b_force</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragments_probed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_moof</name> <init>= <expr><call><name>MP4_BoxCount</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><literal type="string">"/moof"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_moof</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pb_fragmented</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name> <operator>=</operator> <call><name>MP4_Fragments_Index_New</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr></argument>, <argument><expr><name>i_moof</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>stime_t</name> <modifier>*</modifier></type><name>pi_track_times</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pi_track_times</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pi_track_times</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP4_Fragments_Index_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moof</name> <init>= <expr><name><name>p_vroot</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</init> <condition><expr><name>p_moof</name></expr>;</condition> <incr><expr><name>p_moof</name> <operator>=</operator> <name><name>p_moof</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_moof</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_moof</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tfdt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_traf</name> <init>= <expr><call><name>MP4_GetTrafByTrackID</name><argument_list>( <argument><expr><name>p_moof</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_track_ID</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_traf</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_tfdt</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_traf</name></expr></argument>, <argument><expr><literal type="string">"tfdt"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_tfdt</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfdt</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pi_track_times</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_tfdt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfdt</name><operator>-&gt;</operator><name>i_base_media_decode_time</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_duration</name> <init>= <expr><call><name>GetMoovTrackDuration</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_track_ID</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pi_track_times</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>MP4_rescale</name><argument_list>( <argument><expr><name>i_duration</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_timescale</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_movietime</name> <init>= <expr><call><name>MP4_rescale</name><argument_list>( <argument><expr><name><name>pi_track_times</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_timescale</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name><operator>-&gt;</operator><name>p_times</name><index>[<expr><name>index</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>i_movietime</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>GetMoofTrackDuration</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr></argument>, <argument><expr><name>p_moof</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_track_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_duration</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pi_track_times</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>i_duration</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name><operator>-&gt;</operator><name>pi_pos</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p_moof</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_movietime</name> <init>= <expr><call><name>MP4_rescale</name><argument_list>( <argument><expr><name><name>pi_track_times</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_timescale</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name><operator>-&gt;</operator><name>i_last_time</name></name> <operator>&lt;</operator> <name>i_movietime</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name><operator>-&gt;</operator><name>i_last_time</name></name> <operator>=</operator> <name>i_movietime</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pi_track_times</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>MP4_Fragments_Index_Dump</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>excllist</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ATOM_moof</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MP4_ReadBoxContainerRestricted</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>excllist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pb_fragmented</name> <operator>=</operator> <operator>(</operator><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>ATOM_moof</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pb_fragmented</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_mehd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr></argument>, <argument><expr><literal type="string">"mvex/mehd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_mehd</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulated_duration</name></name> <operator>=</operator> <call><name>GetCumulatedDuration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProbeFragmentsChecked</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragments_probed</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_msg</name> <init>= <expr><call><name>_</name><argument_list>(
<argument><expr><literal type="string">"Because this file index is broken or missing, "</literal>
<literal type="string">"seeking will not work correctly.\n"</literal>
<literal type="string">"VLC won't repair your file but can temporary fix this "</literal>
<literal type="string">"problem by building an index in memory.\n"</literal>
<literal type="string">"This step might take a long time on a large file.\n"</literal>
<literal type="string">"What do you want to do?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_continue</name> <init>= <expr><call><name>vlc_dialog_wait_question</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><name>VLC_DIALOG_QUESTION_NORMAL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Do not seek"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Build index"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Broken or missing Index"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_msg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_continue</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_backup_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>foo</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>ProbeFragments</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>foo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fragments_probed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <operator>(</operator><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_backup_pos</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FragResetContext</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_default_sample_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_default_sample_duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FragDemuxTrack</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_max_preload</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator>
<name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_current</name></name> <operator>&gt;=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_trun_t</name> <modifier>*</modifier></type><name>p_trun</name> <init>=
<expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name><name>p_trun</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trun</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample</name></name> <operator>&gt;=</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dur</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_default_sample_duration</name></name></expr></init></decl>,
<decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_default_sample_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample_pos</name></name> <operator>&amp;&amp;</operator>
<call><name>MP4_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample_pos</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>stime_t</name></type> <name>i_demux_max_dts</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i_max_preload</name> <operator>&lt;</operator> <name>INVALID_PRELOAD</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_time</name></name> <operator>+</operator> <call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name>i_max_preload</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr> </then><else>:
<expr><name>INT64_MAX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>stime_t</name></type> <name>i_dts</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pts</name> <init>= <expr><name>i_dts</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_DURATION</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dur</name> <operator>=</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_duration</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>&gt;</operator> <name>i_demux_max_dts</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_time</name></name> <operator>+=</operator> <name>dur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_TIME_OFFSET</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_pts</name> <operator>+=</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>i_composition_time_offset</name><operator>.</operator><name>v1</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>i_composition_time_offset</name><operator>.</operator><name>v0</name></name> <operator>&lt;</operator> <literal type="number">0xFF000000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_pts</name> <operator>+=</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>i_composition_time_offset</name><operator>.</operator><name>v0</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>i_pts</name> <operator>+=</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>i_composition_time_offset</name><operator>.</operator><name>v1</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>dur</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Zero duration sample in trun."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>len</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Zero length sample in trun."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>OverflowCheck</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_read</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>p_block</name> <operator>)</operator></expr> ?</condition><then> <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample_pos</name></name> <operator>+=</operator> <name>i_read</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <name>len</name> <operator>||</operator> <name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_DEMUXER_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
msg_Dbg( p_demux, "tk(%i)=%"PRId64" mv=%"PRId64" pos=%"PRIu64, p_track-&gt;i_track_ID,
VLC_TICK_0 + MP4_rescale_mtime( i_dts, p_track-&gt;i_timescale ),
VLC_TICK_0 + MP4_rescale_mtime( i_pts, p_track-&gt;i_timescale ),
p_track-&gt;context.i_trun_sample_pos );
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_dts</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_TIME_OFFSET</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_pts</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>dur</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP4_Block_Send</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample</name></name> <operator>==</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_current</name></name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_time</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name>i_first_dts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample_pos</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxMoof</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_max_preload</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>)</operator></expr> ?</condition><then> <expr><name>DEMUX_TRACK_MAX_PRELOAD</name></expr> </then><else>: <expr><name>INVALID_PRELOAD</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_nztime</name> <init>= <expr><call><name>MP4_GetMoviePTS</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_nztime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>context</name><operator>.</operator><name>i_temp</name></name> <operator>=</operator> <name>VLC_DEMUXER_SUCCESS</name></expr>;</expr_stmt></block_content></block></for>


<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOS</name></expr>;</expr_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk_tmp</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk_tmp</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>tk_tmp</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>tk_tmp</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name><operator>)</operator> <operator>||</operator>
<name><name>tk_tmp</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_current</name></name> <operator>&gt;=</operator> <name><name>tk_tmp</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name> <operator>||</operator>
<name><name>tk_tmp</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_temp</name></name> <operator>!=</operator> <name>VLC_DEMUXER_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_SUCCESS</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name><name>tk_tmp</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument>, <argument><expr><name><name>tk_tmp</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <name>i_nztime</name> <operator>+</operator> <name>DEMUX_INCREMENT</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>tk</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>tk_tmp</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample_pos</name></name> <operator>&lt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample_pos</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tk</name> <operator>=</operator> <name>tk_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>tk</name></expr> )</condition>
<block>{<block_content>



<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_max_preload</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk_tmp</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>tk_tmp</name> <operator>==</operator> <name>tk</name> <operator>||</operator>
<operator>!</operator><name><name>tk_tmp</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>tk_tmp</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>tk_tmp</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name><operator>)</operator> <operator>||</operator>
<name><name>tk_tmp</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_current</name></name> <operator>&gt;=</operator> <name><name>tk_tmp</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_nzdts</name> <init>= <expr><call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name><name>tk_tmp</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument>, <argument><expr><name><name>tk_tmp</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_nzdts</name> <operator>&lt;=</operator> <name>i_nztime</name> <operator>+</operator> <name>DEMUX_TRACK_MAX_PRELOAD</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>tk_tmp</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample_pos</name></name> <operator>&lt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_trun_sample_pos</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tk</name> <operator>=</operator> <name>tk_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>FragDemuxTrack</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_max_preload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_temp</name></name> <operator>=</operator> <name>i_ret</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_DEMUXER_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_SUCCESS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_DEMUXER_FATAL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>!=</operator> <name>VLC_DEMUXER_SUCCESS</name> <operator>||</operator> <operator>!</operator><name>tk</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>!=</operator> <name>VLC_DEMUXER_EOS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name> <operator>+=</operator> <name>DEMUX_INCREMENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_segment_end</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_track_end</name> <init>= <expr><call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_track_end</name> <operator>&lt;</operator> <name>i_segment_end</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_segment_end</name> <operator>=</operator> <name>i_track_end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_segment_end</name> <operator>!=</operator> <name>INT64_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name> <operator>=</operator> <name>i_segment_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>i_status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FragCreateTrunIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moof</name></decl></parameter>,
<parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_chunksidx</name></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>i_moof_time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_traf_base_data_offset</name> <init>= <expr><name><name>p_moof</name><operator>-&gt;</operator><name>i_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_traf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_prev_traf_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_traf</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_moof</name></expr></argument>, <argument><expr><literal type="string">"traf"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>p_traf</name></expr> ;</condition> <incr><expr><name>p_traf</name> <operator>=</operator> <name><name>p_traf</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_traf</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_traf</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tfhd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_traf</name></expr></argument>, <argument><expr><literal type="string">"tfhd"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_trun_count</name> <init>= <expr><call><name>MP4_BoxCount</name><argument_list>( <argument><expr><name>p_traf</name></expr></argument>, <argument><expr><literal type="string">"trun"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_tfhd</name> <operator>||</operator> <operator>!</operator><name>i_trun_count</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><call><name>MP4_GetTrackByTrackID</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_track_ID</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_track</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>i_trun_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mp4_run_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_track_defaultsamplesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_track_defaultsampleduration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MP4_GetDefaultSizeAndDuration</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_track_defaultsamplesize</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_track_defaultsampleduration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_default_sample_size</name></name> <operator>=</operator> <name>i_track_defaultsamplesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_default_sample_duration</name></name> <operator>=</operator> <name>i_track_defaultsampleduration</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_traf_start_time</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_has_base_media_decode_time</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>b_resync_time_offset</name></name></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>b_resync_time_offset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tfdt</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_traf</name></expr></argument>, <argument><expr><literal type="string">"tfdt"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_tfdt</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_traf_start_time</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfdt</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_base_media_decode_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_has_base_media_decode_time</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_has_base_media_decode_time</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_uuid</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_traf</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_uuid</name></expr>;</condition> <incr><expr><name>p_uuid</name> <operator>=</operator> <name><name>p_uuid</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_uuid</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_uuid</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>CmpUUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_uuid</name><operator>-&gt;</operator><name>i_uuid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TfxdBoxUUID</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_uuid</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfxd</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_traf_start_time</name> <operator>=</operator> <name><name>p_uuid</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfxd</name><operator>-&gt;</operator><name>i_fragment_abs_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_has_base_media_decode_time</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_has_base_media_decode_time</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_track_index</name> <init>= <expr><operator>(</operator><name>p_track</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track_index</name></expr>]</index></name> <operator>==</operator> <name>p_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_traf_start_time</name> <operator>=</operator> <call><name>MP4_Fragment_Index_GetTrackStartTime</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fragsindex</name></name></expr></argument>,
<argument><expr><name>i_track_index</name></expr></argument>, <argument><expr><name><name>p_moof</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_traf_start_time</name> <operator>=</operator> <call><name>MP4_rescale</name><argument_list>( <argument><expr><name>i_traf_start_time</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_has_base_media_decode_time</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_has_base_media_decode_time</name> <operator>&amp;&amp;</operator> <name>p_chunksidx</name></expr> )</condition>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_sidx_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_chunksidx</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sidx</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_data</name> <operator>&amp;&amp;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>&amp;&amp;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_reference_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_traf_start_time</name> <operator>=</operator> <call><name>MP4_rescale</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_earliest_presentation_time</name></name></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_has_base_media_decode_time</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_has_base_media_decode_time</name> <operator>&amp;&amp;</operator> <call><name>FragGetMoofSequenceNumber</name><argument_list>( <argument><expr><name>p_moof</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_traf_start_time</name> <operator>=</operator> <call><name>MP4_rescale</name><argument_list>( <argument><expr><call><name>GetMoovTrackDuration</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_has_base_media_decode_time</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_has_base_media_decode_time</name> <operator>&amp;&amp;</operator> <name>i_moof_time</name> <operator>!=</operator> <name>INVALID_SEGMENT_TIME</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_traf_start_time</name> <operator>=</operator> <call><name>MP4_rescale</name><argument_list>( <argument><expr><name>i_moof_time</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_has_base_media_decode_time</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_traf_start_time</name> <operator>=</operator> <call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name> <operator>&amp;</operator> <name>MP4_TFHD_BASE_DATA_OFFSET</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_traf_base_data_offset</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_base_data_offset</name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name> <operator>&amp;</operator> <name>MP4_TFHD_DEFAULT_BASE_IS_MOOF</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_traf_base_data_offset</name> <operator>=</operator> <name><name>p_moof</name><operator>-&gt;</operator><name>i_pos</name></name></expr> ;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_traf</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_traf_base_data_offset</name> <operator>=</operator> <name><name>p_moof</name><operator>-&gt;</operator><name>i_pos</name></name></expr> ;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_traf_base_data_offset</name> <operator>=</operator> <name>i_prev_traf_end</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_trun_dts</name> <init>= <expr><name>i_traf_start_time</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_trun_data_offset</name> <init>= <expr><name>i_traf_base_data_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_trun_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trun</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_traf</name></expr></argument>, <argument><expr><literal type="string">"trun"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>p_trun</name> <operator>&amp;&amp;</operator> <name>p_tfhd</name></expr>;</condition> <incr><expr><name>p_trun</name> <operator>=</operator> <name><name>p_trun</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_trun</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_trun_t</name> <modifier>*</modifier></type><name>p_trundata</name> <init>= <expr><name><name>p_trun</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trun</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_trundata</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_DATA_OFFSET</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name> <operator>&amp;</operator> <name>MP4_TFHD_BASE_DATA_OFFSET</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>i_traf</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>i_traf_base_data_offset</name> <operator>+</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_data_offset</name></name> <operator>&lt;</operator> <name><name>p_moof</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_moof</name><operator>-&gt;</operator><name>i_size</name></name> <operator>+</operator> <literal type="number">8</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_trun_data_offset</name> <operator>+=</operator> <name><name>p_moof</name><operator>-&gt;</operator><name>i_size</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name> <operator>&amp;</operator> <name>MP4_TFHD_BASE_DATA_OFFSET</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_trun_data_offset</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_base_data_offset</name> <operator>+</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_data_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name> <operator>&amp;</operator> <name>MP4_TFHD_DEFAULT_BASE_IS_MOOF</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_trun_data_offset</name> <operator>=</operator> <name><name>p_moof</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_data_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_trun_data_offset</name> <operator>+=</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_data_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_trun_data_offset</name> <operator>+=</operator> <name>i_trun_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_trun_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"tk %u run %"</literal> <name>PRIu32</name> <literal type="string">" dflt dur %"</literal><name>PRIu32</name><literal type="string">" size %"</literal><name>PRIu32</name><literal type="string">" firstdts %"</literal><name>PRId64</name><literal type="string">" offset %"</literal><name>PRIu64</name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name></expr></argument>,
<argument><expr><name>i_track_defaultsampleduration</name></expr></argument>,
<argument><expr><name>i_track_defaultsamplesize</name></expr></argument>,
<argument><expr><call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_trun_dts</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>i_trun_data_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>mp4_run_t</name> <modifier>*</modifier></type><name>p_run</name> <init>= <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_track</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>runs</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>=</operator> <name>i_trun_dts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <name>i_trun_data_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_trun</name></name> <operator>=</operator> <name>p_trun</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>( <expr><name><name>p_trundata</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_DURATION</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_trun_dts</name> <operator>+=</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_duration</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_trun_dts</name> <operator>+=</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>*</operator>
<name>i_track_defaultsampleduration</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_trundata</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_SIZE</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_trun_size</name> <operator>+=</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_trun_size</name> <operator>+=</operator> <name><name>p_trundata</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>*</operator>
<name>i_track_defaultsamplesize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_prev_traf_end</name> <operator>=</operator> <name>i_trun_data_offset</name> <operator>+</operator> <name>i_trun_size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i_traf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FragGetMoofBySidxIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>target_time</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_moof_pos</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_sampletime</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sidx</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"sidx"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_sidx</name></expr> ;</condition> <incr><expr><name>p_sidx</name> <operator>=</operator> <name><name>p_sidx</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sidx</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_sidx</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_sidx_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_sidx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_data</name> <operator>||</operator> <operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_timescale</name></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_target_time</name> <init>= <expr><call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name>target_time</name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name> <init>= <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_first_offset</name></name> <operator>+</operator> <name><name>p_sidx</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_sidx</name><operator>-&gt;</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_reference_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_reference_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>+</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subsegment_duration</name> <operator>&gt;</operator> <name>i_target_time</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_sampletime</name> <operator>=</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_moof_pos</name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_pos</name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_referenced_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_time</name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subsegment_duration</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FragGetMoofByTfraIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_target_time</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_track_ID</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_moof_pos</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_sampletime</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tfra</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>, <argument><expr><literal type="string">"mfra/tfra"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_tfra</name></expr>;</condition> <incr><expr><name>p_tfra</name> <operator>=</operator> <name><name>p_tfra</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_tfra</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_tfra_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tfra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_data</name> <operator>||</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_track_ID</name></name> <operator>!=</operator> <name>i_track_ID</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><call><name>MP4_GetTrackByTrackID</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_track</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_track_target_time</name> <init>= <expr><call><name>MP4_rescale_qtime</name><argument_list>( <argument><expr><name>i_target_time</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_number_of_entries</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_time</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_time</name></name> <operator>+</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_moof_offset</name></name> <operator>+</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_time</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_time</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_moof_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_time</name> <operator>&gt;=</operator> <name>i_track_target_time</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_pos</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_moof_pos</name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_sampletime</name> <operator>=</operator> <call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_GetDefaultSizeAndDuration</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moov</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MP4_Box_data_tfhd_t</name> <modifier>*</modifier></type><name>p_tfhd_data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_default_size</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_default_duration</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_tfhd_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_DURATION</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_default_duration</name> <operator>=</operator> <name><name>p_tfhd_data</name><operator>-&gt;</operator><name>i_default_sample_duration</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_tfhd_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_default_size</name> <operator>=</operator> <name><name>p_tfhd_data</name><operator>-&gt;</operator><name>i_default_sample_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pi_default_duration</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pi_default_size</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_trex</name> <init>= <expr><call><name>MP4_GetTrexByTrackID</name><argument_list>( <argument><expr><name>p_moov</name></expr></argument>, <argument><expr><name><name>p_tfhd_data</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_trex</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>*</operator><name>pi_default_duration</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_default_duration</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_trex</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_default_sample_duration</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>*</operator><name>pi_default_size</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_default_size</name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_trex</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_default_sample_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxFrag</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_track_selected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_status</name> <init>= <expr><name>VLC_DEMUXER_SUCCESS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unrecoverable error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_track</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_track</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>||</operator> <call><name>MP4_isMetadata</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>tk</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>!=</operator> <name>b</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track %u %s!"</literal></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>: <expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MP4_TrackSelect</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>b_selected</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_track_selected</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_track_selected</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no track selected, exiting..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>!=</operator> <name>ATOM_mdat</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>!=</operator> <name>ATOM_moof</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>!=</operator> <name>ATOM_moov</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">16</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>GetQWBE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>UINT64_MAX</name> <operator>-</operator> <name>i_pos</name> <operator>&lt;</operator> <name>i_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>==</operator> <name>ATOM_mdat</name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_post_mdat_offset</name></name> <operator>=</operator> <name>i_pos</name> <operator>+</operator> <name>i_size</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_pos</name> <operator>+</operator> <name>i_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_vroot</name> <init>= <expr><call><name>MP4_BoxGetNextChunk</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_vroot</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>p_box</name> <operator>=</operator> <name><name>p_vroot</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</init> <condition><expr><name>p_box</name></expr>;</condition> <incr><expr><name>p_box</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_moof</name> <operator>||</operator>
<name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_moov</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_box</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FragResetContext</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_moov</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_moov</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name> <operator>=</operator> <call><name>MP4_BoxExtract</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vroot</name><operator>-&gt;</operator><name>p_first</name></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_sequence_number</name> <init>= <expr><call><name>FragGetMoofSequenceNumber</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_discontinuity</name> <init>= <expr><operator>(</operator> <name>i_sequence_number</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_lastseqnumber</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_discontinuity</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Fragment sequence discontinuity detected %"</literal><name>PRIu32</name><literal type="string">" != %"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><name>i_sequence_number</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_lastseqnumber</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_lastseqnumber</name></name> <operator>=</operator> <name>i_sequence_number</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>FragPrepareChunk</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name></expr></argument>,
<argument><expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><literal type="string">"sidx"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INVALID_SEGMENT_TIME</name></expr></argument>,
<argument><expr><name>b_discontinuity</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EOF</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_discontinuity</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nztime</name></name> <operator>=</operator> <call><name>FragGetDemuxTimeFromTracksTime</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no moof or moov in current chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>==</operator> <name>ATOM_mdat</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name></name></expr> )</condition><block type="pseudo"><block_content>
<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ATOM_moov</name></expr>:</case>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <call><name>DemuxMoov</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ATOM_moof</name></expr>:</case>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <call><name>DemuxMoof</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"fragment type %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>p_fragment_atom</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>==</operator> <name>VLC_DEMUXER_EOS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_SUCCESS</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_pos</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_post_mdat_offset</name></name> <operator>&amp;&amp;</operator> <name>i_status</name> <operator>!=</operator> <name>VLC_DEMUXER_EOF</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_pos</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_post_mdat_offset</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" Overread mdat by %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>i_pos</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_post_mdat_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mdat had still %"</literal><name>PRIu64</name><literal type="string">" bytes unparsed as samples"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_post_mdat_offset</name></name> <operator>-</operator> <name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_post_mdat_offset</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>VLC_DEMUXER_EGENERIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_current_box_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>==</operator> <name>VLC_DEMUXER_EOF</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_demux_end</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_track_end</name> <init>= <expr><call><name>MP4_rescale_mtime</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_track_end</name> <operator>&gt;</operator> <name>i_demux_end</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_demux_end</name> <operator>=</operator> <name>i_track_end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_demux_end</name> <operator>!=</operator> <name>INT64_MIN</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_demux_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_status</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>mp4_track_t</name> <modifier>*</modifier></type><name>MP4ASF_GetTrack</name><parameter_list>( <parameter><decl><type><name>asf_packet_sys_t</name> <modifier>*</modifier></type><name>p_packetsys</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>i_stream_number</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_packetsys</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_asf</name> <operator>&amp;&amp;</operator>
<name>i_stream_number</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_asf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_stream_number</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>asf_track_info_t</name> <modifier>*</modifier></type> <name>MP4ASF_GetTrackInfo</name><parameter_list>( <parameter><decl><type><name>asf_packet_sys_t</name> <modifier>*</modifier></type><name>p_packetsys</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>i_stream_number</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><call><name>MP4ASF_GetTrack</name><argument_list>( <argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><name>i_stream_number</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_track</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>asfinfo</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4ASF_Send</name><parameter_list>( <parameter><decl><type><name>asf_packet_sys_t</name> <modifier>*</modifier></type><name>p_packetsys</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_stream_number</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_frame</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><call><name>MP4ASF_GetTrack</name><argument_list>( <argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><name>i_stream_number</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_track</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><operator>*</operator><name>pp_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_gather</name> <init>= <expr><call><name>block_ChainGather</name><argument_list>( <argument><expr><operator>*</operator><name>pp_frame</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_gather</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_dts_backup</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gather</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_pts_backup</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_packetsys</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_gather</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_frame</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4ASF_ResetFrames</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>asfinfo</name><operator>.</operator><name>p_frame</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>asfinfo</name><operator>.</operator><name>p_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>asfinfo</name><operator>.</operator><name>p_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
