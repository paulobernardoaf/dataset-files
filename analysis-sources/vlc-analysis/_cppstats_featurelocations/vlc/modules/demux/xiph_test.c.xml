<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\xiph_test.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xiph.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>xiph0</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>xiph1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>xiphlavc0</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">30</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<enum>enum
<block>{
<decl><name>OK</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>,
<decl><name>FAIL</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>params_s</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>packets</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>packets_sizes</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>packets_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>lavc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_append</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_append</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAILOUT</name><parameter_list>(<parameter><type><name>run</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ fprintf(stderr, "failed %s line %d\n", run, __LINE__); return 1; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN</name><parameter_list>(<parameter><type><name>run</name></type></parameter>, <parameter><type><name>test</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(test(#test " " run, a, b, &amp;params) != res) BAILOUT(#test " " run)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT</name><parameter_list>(<parameter><type><name>foo</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(!(foo)) BAILOUT(run)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_CLEANUP</name><parameter_list>(<parameter><type><name>foo</name></type></parameter>, <parameter><type><name>cleanup</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(!(foo)) { cleanup; BAILOUT(run) }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_xiph_IsLavcFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>run</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>params_s</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><call><name>xiph_IsLavcFormat</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>source</name><operator>-&gt;</operator><name>lavc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_xiph_CountHeaders</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>run</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>params_s</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><call><name>xiph_CountHeaders</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>source</name><operator>-&gt;</operator><name>packets_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_xiph_CountLavcHeaders</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>run</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>params_s</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><call><name>xiph_CountLavcHeaders</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>source</name><operator>-&gt;</operator><name>packets_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SplitCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>run</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name><name>packet_size</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>packet</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>packet_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>params_s</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>packets_count</name></name> <operator>==</operator> <name>packet_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>packet_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>packet</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>packets_sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>packet_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_xiph_SplitHeaders</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>run</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>params_s</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>packets</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>packet_sizes</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>packet_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>xiph_SplitHeaders</name><argument_list>(<argument><expr><name>packet_sizes</name></expr></argument>, <argument><expr><name>packets</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet_count</name></expr></argument>,
<argument><expr><name>i_extra</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SplitCompare</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>packet_sizes</name></expr></argument>, <argument><expr><name>packets</name></expr></argument>, <argument><expr><name>packet_count</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_xiph_SplitLavcHeaders</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>run</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>params_s</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>packets</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>packet_sizes</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>packet_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>xiph_SplitLavcHeaders</name><argument_list>(<argument><expr><name>packet_sizes</name></expr></argument>, <argument><expr><name>packets</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet_count</name></expr></argument>,
<argument><expr><name>i_extra</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SplitCompare</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>packet_sizes</name></expr></argument>, <argument><expr><name>packets</name></expr></argument>, <argument><expr><name>packet_count</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_xiph_PackHeaders</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>run</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>params_s</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>xiph_PackHeaders</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_result</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <operator>*</operator><operator>)</operator> <name><name>source</name><operator>-&gt;</operator><name>packets_sizes</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>packets_count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EXPECT_CLEANUP</name><argument_list>(<argument><expr><operator>(</operator><name>i_extra</name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>i_result</name><operator>)</operator></expr></argument>, <argument><expr><call><name>free</name><argument_list>(<argument><expr><name>p_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPECT_CLEANUP</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>p_result</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>free</name><argument_list>(<argument><expr><name>p_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_xiph_AppendHeaders</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>run</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>params_s</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>xiph_AppendHeaders</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>i_append</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>p_append</name></name></expr></argument>,
<argument><expr><name><name>source</name><operator>-&gt;</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EXPECT_CLEANUP</name><argument_list>(<argument><expr><operator>(</operator><name>i_extra</name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>i_append</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>free</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>p_append</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPECT_CLEANUP</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>p_append</name></name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>i_append</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>free</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>p_append</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>params_s</name></name></type> <name>params</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>lavc</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>codec</name></name> <operator>=</operator> <name>VLC_CODEC_VORBIS</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc0"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc1"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc2"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc3"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiphlavc0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc4"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiphlavc0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>lavc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc5"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiphlavc0</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>lavc</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc6"</literal></expr></argument>, <argument><expr><name>test_xiph_IsLavcFormat</name></expr></argument>, <argument><expr><name>xiphlavc0</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>test_xiph_CountHeaders</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>test_xiph_CountHeaders</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name>test_xiph_CountHeaders</name></expr></argument>, <argument><expr><name>xiph1</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>codec</name></name> <operator>=</operator> <name>VLC_CODEC_VORBIS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc0"</literal></expr></argument>, <argument><expr><name>test_xiph_CountLavcHeaders</name></expr></argument>, <argument><expr><name>xiphlavc0</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc1"</literal></expr></argument>, <argument><expr><name>test_xiph_CountLavcHeaders</name></expr></argument>, <argument><expr><name>xiphlavc0</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc2"</literal></expr></argument>, <argument><expr><name>test_xiph_CountLavcHeaders</name></expr></argument>, <argument><expr><name>xiphlavc0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>test_xiph_SplitHeaders</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>test_xiph_SplitHeaders</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name>test_xiph_SplitHeaders</name></expr></argument>, <argument><expr><name>xiph1</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><name>test_xiph_SplitHeaders</name></expr></argument>, <argument><expr><name>xiph1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>xiph2</name><index>[<expr><literal type="number">265</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>xiph2</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">265</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><name>test_xiph_SplitHeaders</name></expr></argument>, <argument><expr><name>xiph2</name></expr></argument>, <argument><expr><literal type="number">265</literal></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xiph2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><name>test_xiph_SplitHeaders</name></expr></argument>, <argument><expr><name>xiph2</name></expr></argument>, <argument><expr><literal type="number">265</literal></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xiph2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph2</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">256</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"6"</literal></expr></argument>, <argument><expr><name>test_xiph_SplitHeaders</name></expr></argument>, <argument><expr><name>xiph2</name></expr></argument>, <argument><expr><literal type="number">265</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiphlavc0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiphlavc0</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiphlavc0</name><index>[<expr><literal type="number">37</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc0"</literal></expr></argument>, <argument><expr><name>test_xiph_SplitLavcHeaders</name></expr></argument>, <argument><expr><name>xiphlavc0</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc1"</literal></expr></argument>, <argument><expr><name>test_xiph_SplitLavcHeaders</name></expr></argument>, <argument><expr><name>xiphlavc0</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"lavc2"</literal></expr></argument>, <argument><expr><name>test_xiph_SplitLavcHeaders</name></expr></argument>, <argument><expr><name>xiphlavc0</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <name>XIPH_MAX_HEADER_COUNT</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>test_xiph_PackHeaders</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>test_xiph_PackHeaders</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name>test_xiph_PackHeaders</name></expr></argument>, <argument><expr><name>xiph1</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><name>test_xiph_PackHeaders</name></expr></argument>, <argument><expr><name>xiph1</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph2</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">256</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><name>test_xiph_PackHeaders</name></expr></argument>, <argument><expr><name>xiph2</name></expr></argument>, <argument><expr><literal type="number">265</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>params</name><operator>.</operator><name>i_append</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_append</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>xiph0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>test_xiph_AppendHeaders</name></expr></argument>, <argument><expr><name>xiph0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xiph2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xiph2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xiph2</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xiph0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xiph2</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xiph0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>test_xiph_AppendHeaders</name></expr></argument>, <argument><expr><name>xiph2</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>p_append</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>i_append</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_append</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>XIPH_MAX_HEADER_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>packets_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xiph2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xiph2</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RUN</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><name>test_xiph_AppendHeaders</name></expr></argument>, <argument><expr><name>xiph2</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>XIPH_MAX_HEADER_COUNT</name><operator>)</operator></expr> ?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>p_append</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
