<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\moving_avg.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_MOVING_AVG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MOVING_AVG_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MVA_PACKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVA_PACKETS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>mva_packet_s</name>
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>diff</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>moving_average_s</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>mva_packet_s</name></name></type> <name><name>packets</name><index>[<expr><name>MVA_PACKETS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_packet</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mva_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>moving_average_s</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>mva_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>moving_average_s</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mva_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>moving_average_s</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>dts</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name><operator>.</operator><name>dts</name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name><operator>.</operator><name>diff</name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>mva_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>moving_average_s</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mva_packet_s</name></name> <modifier>*</modifier></type><name>min</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>max</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name> <operator>&gt;=</operator> <name>MVA_PACKETS</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name> <operator>-</operator> <name>MVA_PACKETS</name></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>min</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name>i</name> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name><operator>.</operator><name>diff</name> <operator>&lt;</operator> <name><name>min</name><operator>-&gt;</operator><name>diff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name>i</name> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>max</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name>i</name> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name><operator>.</operator><name>diff</name> <operator>&gt;</operator> <name><name>max</name><operator>-&gt;</operator><name>diff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name>i</name> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>avgdiff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name>i</name> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name> <operator>==</operator> <name>min</name> <operator>||</operator>
<operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name>i</name> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name> <operator>==</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>diff</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><name>i</name> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name><operator>.</operator><name>diff</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>diff</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>avgdiff</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><name>count</name></expr> ?</condition><then> <expr><name>avgdiff</name> <operator>/</operator> <name>count</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>mva_packet_s</name></name> <modifier>*</modifier></type> <name>mva_getLastPacket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>moving_average_s</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>packets</name><index>[<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>i_packet</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MVA_PACKETS</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>mva_getLastDTS</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>moving_average_s</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mva_packet_s</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mva_getLastPacket</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>dts</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
