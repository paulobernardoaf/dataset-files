<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\mpeg\mpeg4_iod.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_MPEG4_IOD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MPEG4_IOD_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ES_DESCRIPTOR_COUNT</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum
<block>{
<decl><name>USE_ACCESS_UNIT_START_FLAG</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,
<decl><name>USE_ACCESS_UNIT_END_FLAG</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,
<decl><name>USE_RANDOM_ACCESS_POINT_FLAG</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>HAS_RANDOM_ACCESS_UNITS_ONLY_FLAG</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>USE_PADDING_FLAG</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>USE_TIMESTAMPS_FLAG</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>USE_IDLE_FLAG</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>USE_DURATION_FLAG</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>sl_config_flags</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timestamp_resolution</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_OCR_resolution</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_timestamp_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_OCR_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_AU_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_instant_bitrate_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_degradation_priority_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_AU_seqnum_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_packet_seqnum_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_accessunit_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_compositionunit_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_startdecoding_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_startcomposition_timestamp</name></decl>;</decl_stmt>
}</block></struct></type> <name>sl_config_descriptor_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_au_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_au_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>
}</block></struct></type> <name>sl_header_data</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>es_mpeg4_descriptor_t</name></name></type> <name>es_mpeg4_descriptor_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>decoder_config_descriptor_t</name></name></type> <name>decoder_config_descriptor_t</name>;</typedef>

<struct>struct <name>decoder_config_descriptor_t</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_objectTypeIndication</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_streamType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>es_mpeg4_descriptor_t</name>
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_es_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_config_descriptor_t</name></type> <name>dec_descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sl_config_descriptor_t</name></type> <name>sl_descr</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_ID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_mpeg4_descriptor_t</name></type> <name><name>es_descr</name><index>[<expr><name>ES_DESCRIPTOR_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>od_descriptor_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_version</name></decl>;</decl_stmt>
<macro><name>DECL_ARRAY</name><argument_list>(<argument>od_descriptor_t *</argument>)</argument_list></macro> <expr_stmt><expr><name>objects</name></expr>;</expr_stmt>
}</block></struct></type> <name>od_descriptors_t</name>;</typedef>

<function_decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>IODNew</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ODFree</name><parameter_list>( <parameter><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>p_od</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>sl_header_data</name></type> <name>DecodeSLHeader</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>sl_config_descriptor_t</name> <modifier>*</modifier></type><name>sl</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DecodeODCommand</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>od_descriptors_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
