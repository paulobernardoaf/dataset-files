<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\mpeg\ps.h">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timestamps.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_STREAM_ID_END_STREAM</name></cpp:macro> <cpp:value>0xB9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_STREAM_ID_PACK_HEADER</name></cpp:macro> <cpp:value>0xBA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_STREAM_ID_SYSTEM_HEADER</name></cpp:macro> <cpp:value>0xBB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_STREAM_ID_MAP</name></cpp:macro> <cpp:value>0xBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_STREAM_ID_PRIVATE_STREAM1</name></cpp:macro> <cpp:value>0xBD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_STREAM_ID_PADDING</name></cpp:macro> <cpp:value>0xBE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_STREAM_ID_EXTENDED</name></cpp:macro> <cpp:value>0xFD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_STREAM_ID_DIRECTORY</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_TK_COUNT</name></cpp:macro> <cpp:value>(256+256+256+8 - 0xc0)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>ps_id_to_tk</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>i_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_id</name> <operator>&gt;=</operator> <literal type="number">0xc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_id</name> <operator>&lt;</operator> <literal type="number">0xc0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>i_id</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_id</name> <operator>-</operator> <literal type="number">0xc0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name>i_id</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xbd00</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">256</literal><operator>-</operator><literal type="number">0xC0</literal> <operator>+</operator> <operator>(</operator><name>i_id</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name>i_id</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xfd00</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">512</literal><operator>-</operator><literal type="number">0xc0</literal> <operator>+</operator> <operator>(</operator><name>i_id</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">768</literal><operator>-</operator><literal type="number">0xc0</literal> <operator>+</operator> <operator>(</operator><name>i_id</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>ps_psm_t</name></name></type> <name>ps_psm_t</name>;</typedef>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>ps_id_to_type</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ps_psm_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ps_id_to_lang</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ps_psm_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_configured</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_seen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_skip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_next_block_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_first_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>ps_track_t</name>;</typedef>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ps_track_init</name><parameter_list>( <parameter><decl><type><name>ps_track_t</name></type> <name><name>tk</name><index>[<expr><name>PS_TK_COUNT</name></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PS_TK_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_configured</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_seen</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_next_block_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>es</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_first_pts</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_last_pts</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ps_is_H264</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>startcode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">9</literal> <operator>||</operator>
<operator>(</operator><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>startcode</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>startcode</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<while>while<condition>( <expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">5</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>startcode</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x67</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_flags</name> <operator>^=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x68</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_flags</name> <operator>^=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">23</literal> <operator>||</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>i_flags</name> <operator>==</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_data</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ps_track_fill</name><parameter_list>( <parameter><decl><type><name>ps_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>, <parameter><decl><type><name>ps_psm_t</name> <modifier>*</modifier></type><name>p_psm</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_pkt</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_mpeg2only</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xff00</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0xbd00</literal></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xf8</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x88</literal> <operator>||</operator> 
<operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xf8</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x98</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xf8</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <operator>||</operator> 
<operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xf0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr> )</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_eac3</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xf0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_pkt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>i_pkt</name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_start</name> <init>= <expr><literal type="number">9</literal> <operator>+</operator> <name><name>p_pkt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>+</operator> <literal type="number">9</literal> <operator>&lt;</operator> <name>i_pkt</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><index>[<expr><name>i_start</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0b</literal> <operator>||</operator>
<name><name>p_pkt</name><index>[<expr><name>i_start</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x77</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bsid</name> <init>= <expr><name><name>p_pkt</name><index>[<expr><name>i_start</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>bsid</name> <operator>&gt;</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_eac3</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_eac3</name></expr> ?</condition><then> <expr><name>VLC_CODEC_EAC3</name></expr> </then><else>: <expr><name>VLC_CODEC_A52</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xfc</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_CVD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xff</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x10</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_TELETEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xe0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_SPU</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xff</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x70</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_OGT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xf0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0xa0</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DVD_LPCM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xf0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0xb0</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_TRUEHD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name>i_id</name><operator>&amp;</operator><literal type="number">0xff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xfd00</literal></expr> )</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sub_id</name> <init>= <expr><name>i_id</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_sub_id</name> <operator>&gt;=</operator> <literal type="number">0x55</literal> <operator>&amp;&amp;</operator> <name>i_sub_id</name> <operator>&lt;=</operator> <literal type="number">0x5f</literal> <operator>)</operator> <operator>||</operator> 
<operator>(</operator> <name>i_sub_id</name> <operator>&gt;=</operator> <literal type="number">0x75</literal> <operator>&amp;&amp;</operator> <name>i_sub_id</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal> <operator>)</operator></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_VC1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name>i_id</name><operator>&amp;</operator><literal type="number">0xff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xa000</literal></expr> )</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sub_id</name> <init>= <expr><name>i_id</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_sub_id</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DVDA_LPCM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_sub_id</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MLP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>ps_id_to_type</name><argument_list>( <argument><expr><name>p_psm</name></expr></argument> , <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_id</name><operator>&amp;</operator><literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0</literal></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x01</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name>VLC_CODEC_MP1V</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x02</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x10</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4V</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x1b</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_H264</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x24</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_HEVC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_id</name> <operator>==</operator> <literal type="number">0xe2</literal> <operator>||</operator> 
<name>i_id</name> <operator>==</operator> <literal type="number">0xe3</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_H264</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>p_pkt</name> <operator>&amp;&amp;</operator> <name>i_type</name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> 
<name>i_pkt</name> <operator>&gt;</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator>
<name>i_pkt</name> <operator>&gt;</operator> <literal type="number">9U</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>p_pkt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<call><name>ps_is_H264</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pkt</name><index>[ <expr><literal type="number">9</literal> <operator>+</operator> <name><name>p_pkt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr> ]</index></name></expr></argument>,
<argument><expr><name>i_pkt</name> <operator>-</operator> <literal type="number">9</literal> <operator>-</operator> <name><name>p_pkt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_H264</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>UNKNOWN_ES</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>p_pkt</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>b_mpeg2only</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0xe0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x03</literal> <operator>||</operator>
<name>i_type</name> <operator>==</operator> <literal type="number">0x04</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x0f</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x11</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>UNKNOWN_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>UNKNOWN_ES</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <operator>~</operator><name>i_id</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ps_id_to_lang</name><argument_list>( <argument><expr><name>p_psm</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument>, <argument><expr><call><name>ps_id_to_lang</name><argument_list>( <argument><expr><name>p_psm</name></expr></argument> , <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>UNKNOWN_ES</name> <operator>||</operator> <name>p_pkt</name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ps_pkt_id</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_pkt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_pkt</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbd</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sub_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_pkt</name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator>
<name>i_pkt</name> <operator>&gt;</operator> <literal type="number">9</literal> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_pkt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_start</name> <init>= <expr><literal type="number">9</literal> <operator>+</operator> <name><name>p_pkt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_sub_id</name> <operator>=</operator> <name><name>p_pkt</name><index>[<expr><name>i_start</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_sub_id</name> <operator>&amp;</operator> <literal type="number">0xfe</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xa0</literal> <operator>&amp;&amp;</operator>
<name>i_pkt</name> <operator>&gt;=</operator> <name>i_start</name> <operator>+</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_pkt</name><index>[<expr><name>i_start</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xc0</literal> <operator>||</operator>
<name><name>p_pkt</name><index>[<expr><name>i_start</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>



<return>return <expr><literal type="number">0xa000</literal> <operator>|</operator> <operator>(</operator><name>i_sub_id</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0xbd00</literal> <operator>|</operator> <name>i_sub_id</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_pkt</name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator>
<name><name>p_pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfd</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_pkt</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> 
<operator>(</operator><name><name>p_pkt</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x01</literal></expr> )</condition> 
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_flags</name> <init>= <expr><name><name>p_pkt</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_skip</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x10</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x08</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x04</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x02</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>&lt;</operator> <name>i_pkt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_pkt</name><index>[<expr><name>i_skip</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x01</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_flags2</name> <init>= <expr><name><name>p_pkt</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_flags2</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_flags2</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>i_skip</name> <operator>&lt;</operator> <name>i_pkt</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_pkt</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_flags2</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_flags2</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>i_pkt</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_extension_field_length</name> <init>= <expr><name><name>p_pkt</name><index>[<expr><name>i_skip</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_extension_field_length</name> <operator>&gt;=</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream_id_extension_flag</name> <init>= <expr><operator>(</operator><name><name>p_pkt</name><index>[<expr><name>i_skip</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_stream_id_extension_flag</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0xfd00</literal> <operator>|</operator> <operator>(</operator><name><name>p_pkt</name><index>[<expr><name>i_skip</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>p_pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ps_pkt_size</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_peek</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>PS_STREAM_ID_END_STREAM</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>

<case>case <expr><name>PS_STREAM_ID_PACK_HEADER</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&gt;=</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x01</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">14</literal> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x07</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>i_peek</name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x02</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">12</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>PS_STREAM_ID_SYSTEM_HEADER</name></expr>:</case>
<case>case <expr><name>PS_STREAM_ID_MAP</name></expr>:</case>
<case>case <expr><name>PS_STREAM_ID_DIRECTORY</name></expr>:</case>
<default>default:</default>
<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">6</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></switch>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ps_pkt_parse_pack</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_pkt</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_scr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_mux_rate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_pkt</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_pkt</name> <operator>&gt;=</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x01</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_scr</name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>( <argument><expr><call><name>ExtractPackHeaderTimestamp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_mux_rate</name> <operator>=</operator> <operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal> <operator>)</operator><operator>|</operator><operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>)</operator><operator>|</operator><operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_pkt</name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x02</literal></expr> )</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_scr</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ExtractPESTimestamp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_scr</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_scr</name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>( <argument><expr><name>i_scr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_mux_rate</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7f</literal> <operator>)</operator><operator>&lt;&lt;</operator> <literal type="number">15</literal> <operator>)</operator><operator>|</operator><operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>)</operator><operator>|</operator><operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ps_pkt_parse_system</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_pkt</name></decl></parameter>,
<parameter><decl><type><name>ps_psm_t</name> <modifier>*</modifier></type><name>p_psm</name></decl></parameter>,
<parameter><decl><type><name>ps_track_t</name></type> <name><name>tk</name><index>[<expr><name>PS_TK_COUNT</name></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_pkt</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pktend</name> <init>= <expr><operator>&amp;</operator><name><name>p_pkt</name><index>[<expr><name>i_pkt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



<while>while<condition>( <expr><name>p</name> <operator>&lt;</operator> <name>p_pktend</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>i_id</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0xB7</literal></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>p_pktend</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_id</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>PS_STREAM_ID_EXTENDED</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if<condition>( <expr><name>p_pktend</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>i_id</name> <operator>&lt;</operator> <literal type="number">0xc0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_tk</name> <init>= <expr><call><name>ps_id_to_tk</name><argument_list>( <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><index>[<expr><name>i_tk</name></expr>]</index></name><operator>.</operator><name>b_configured</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ps_track_fill</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><index>[<expr><name>i_tk</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_psm</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ps_pkt_parse_pes</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_skip_extra</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stime_t</name></type> <name>i_dts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_pes_scrambling</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParsePESHeader</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_skip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stream_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_pes_scrambling</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_pes_scrambling</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_SCRAMBLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_skip_extra</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <name>i_skip_extra</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name>i_skip</name> <operator>+</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <call><name>ps_pkt_id</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0xa001</literal> <operator>||</operator>
<call><name>ps_pkt_id</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0xbda1</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_skip</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <name>i_skip</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_skip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_skip</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_dts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>( <argument><expr><name>i_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>( <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lang</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ps_descriptors_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>ps_es_t</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ps_descriptors_t</name></type> <name>desc</name></decl>;</decl_stmt>

}</block></struct></type> <name>ps_es_t</name>;</typedef>

<struct>struct <name>ps_psm_t</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ps_es_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ps_descriptors_t</name></type> <name>uniqueextdesc</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>ps_id_to_type</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ps_psm_t</name> <modifier>*</modifier></type><name>p_psm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p_psm</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_psm</name><operator>-&gt;</operator><name>i_es</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_psm</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name> <operator>==</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name><name>p_psm</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ps_id_to_lang</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ps_psm_t</name> <modifier>*</modifier></type><name>p_psm</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p_psm</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_psm</name><operator>-&gt;</operator><name>i_es</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_psm</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name> <operator>==</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_psm</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>desc</name><operator>.</operator><name>lang</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ps_psm_init</name><parameter_list>( <parameter><decl><type><name>ps_psm_t</name> <modifier>*</modifier></type><name>p_psm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_psm</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_psm</name><operator>-&gt;</operator><name>i_es</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_psm</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_psm</name><operator>-&gt;</operator><name>uniqueextdesc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ps_psm_destroy</name><parameter_list>( <parameter><decl><type><name>ps_psm_t</name> <modifier>*</modifier></type><name>p_psm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_psm</name><operator>-&gt;</operator><name>es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_psm</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_psm</name><operator>-&gt;</operator><name>i_es</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ps_parse_descriptors</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><name>ps_descriptors_t</name> <modifier>*</modifier></type><name>p_desc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>i_data</name> <operator>&gt;</operator> <literal type="number">2u</literal> <operator>+</operator> <name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x0A</literal></expr>:</case> 
<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_desc</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_desc_size</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name>i_desc_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">2</literal> <operator>+</operator> <name>i_desc_size</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ps_psm_fill</name><parameter_list>( <parameter><decl><type><name>ps_psm_t</name> <modifier>*</modifier></type><name>p_psm</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_pkt</name></decl></parameter>,
<parameter><decl><type><name>ps_track_t</name></type> <name><name>tk</name><index>[<expr><name>PS_TK_COUNT</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_length</name></decl>, <decl><type ref="prev"/><name>i_info_length</name></decl>, <decl><type ref="prev"/><name>i_es_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_single_extension</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_pkt</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_psm</name> <operator>||</operator> <name>i_pkt</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>||</operator> <name><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>PS_STREAM_ID_MAP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_length</name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&gt;</operator> <name>i_pkt</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_single_extension</name> <operator>=</operator> <name><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_version</name> <operator>=</operator> <operator>(</operator><name><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_psm</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <name>i_version</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ps_psm_destroy</name><argument_list>( <argument><expr><name>p_psm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_info_length</name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_info_length</name> <operator>+</operator> <literal type="number">10</literal> <operator>&gt;</operator> <name>i_length</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>i_es_base</name> <operator>=</operator> <literal type="number">12</literal> <operator>+</operator> <name>i_info_length</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>i_es_base</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>i_length</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ps_es_t</name> <modifier>*</modifier></type><name>tmp_es</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_psm</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ps_es_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>p_psm</name><operator>-&gt;</operator><name>i_es</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>tmp_es</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_psm</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>tmp_es</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ps_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><operator>&amp;</operator><name><name>p_psm</name><operator>-&gt;</operator><name>es</name><index>[ <expr><name><name>p_psm</name><operator>-&gt;</operator><name>i_es</name></name><operator>++</operator></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name><name>p_buffer</name><index>[ <expr><name>i_es_base</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_buffer</name><index>[ <expr><name>i_es_base</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_info_length</name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[ <expr><name>i_es_base</name> <operator>+</operator> <literal type="number">2</literal></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_es_base</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>i_info_length</name> <operator>&gt;</operator> <name>i_length</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>






<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>i_id</name></name> <operator>==</operator> <name>PS_STREAM_ID_EXTENDED</name> <operator>&amp;&amp;</operator> <name>b_single_extension</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_info_length</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <operator>(</operator><name><name>p_es</name><operator>-&gt;</operator><name>i_id</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p_buffer</name><index>[<expr><name>i_es_base</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ps_parse_descriptors</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>i_es_base</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>i_info_length</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_psm</name><operator>-&gt;</operator><name>uniqueextdesc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>ps_parse_descriptors</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>i_es_base</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>i_info_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>desc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_es_base</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>i_info_length</name></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name><name>p_psm</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <name>i_version</name></expr>;</expr_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PS_TK_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_configured</name> <operator>||</operator> <operator>!</operator><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>es</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ps_track_t</name></type> <name>tk_tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk_tmp</name><operator>.</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ps_track_fill</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tk_tmp</name></expr></argument>, <argument><expr><name>p_psm</name></expr></argument>, <argument><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name></expr></argument>,
<argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_pkt</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk_tmp</name><operator>.</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk_tmp</name><operator>.</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk_tmp</name><operator>.</operator><name>b_configured</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tk_tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>es</name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
