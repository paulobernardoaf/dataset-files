<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\mpeg\ts_sl.c">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_sl.h"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>es_mpeg4_descriptor_t</name> <modifier>*</modifier></type> <name>GetMPEG4DescByEsId</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>pmt</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_es_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ES_DESCRIPTOR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>es_mpeg4_descriptor_t</name> <modifier>*</modifier></type><name>es_descr</name> <init>= <expr><operator>&amp;</operator><name><name>pmt</name><operator>-&gt;</operator><name>iod</name><operator>-&gt;</operator><name>es_descr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es_descr</name><operator>-&gt;</operator><name>i_es_id</name></name> <operator>==</operator> <name>i_es_id</name> <operator>&amp;&amp;</operator> <name><name>es_descr</name><operator>-&gt;</operator><name>b_ok</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>es_descr</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pmt</name><operator>-&gt;</operator><name>od</name><operator>.</operator><name>objects</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>od_descriptor_t</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>pmt</name><operator>-&gt;</operator><name>od</name><operator>.</operator><name>objects</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ES_DESCRIPTOR_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>es_mpeg4_descriptor_t</name> <modifier>*</modifier></type><name>es_descr</name> <init>= <expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>es_descr</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>es_descr</name><operator>-&gt;</operator><name>i_es_id</name></name> <operator>==</operator> <name>i_es_id</name> <operator>&amp;&amp;</operator> <name><name>es_descr</name><operator>-&gt;</operator><name>b_ok</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>es_descr</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ts_es_t</name> <modifier>*</modifier></type> <name>GetPMTESBySLEsId</name><parameter_list>( <parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>pmt</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_sl_es_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name> <operator>==</operator> <name>i_sl_es_id</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_es</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SetupISO14496LogicalStream</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>decoder_config_descriptor_t</name> <modifier>*</modifier></type><name>dcd</name></decl></parameter>,
<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - IOD objecttype: %"</literal><name>PRIx8</name><literal type="string">" streamtype:%"</literal><name>PRIx8</name></expr></argument>,
<argument><expr><name><name>dcd</name><operator>-&gt;</operator><name>i_objectTypeIndication</name></name></expr></argument>, <argument><expr><name><name>dcd</name><operator>-&gt;</operator><name>i_streamType</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>dcd</name><operator>-&gt;</operator><name>i_streamType</name></name> <operator>==</operator> <literal type="number">0x04</literal></expr> )</condition> 
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>dcd</name><operator>-&gt;</operator><name>i_objectTypeIndication</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x0B</literal></expr>:</case> 
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_SUBT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x20</literal></expr>:</case> 
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4V</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x21</literal></expr>:</case> 
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_H264</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x60</literal></expr>:</case>
<case>case <expr><literal type="number">0x61</literal></expr>:</case>
<case>case <expr><literal type="number">0x62</literal></expr>:</case>
<case>case <expr><literal type="number">0x63</literal></expr>:</case>
<case>case <expr><literal type="number">0x64</literal></expr>:</case>
<case>case <expr><literal type="number">0x65</literal></expr>:</case> 
<case>case <expr><literal type="number">0x6a</literal></expr>:</case> 
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6c</literal></expr>:</case> 
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_JPEG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>dcd</name><operator>-&gt;</operator><name>i_streamType</name></name> <operator>==</operator> <literal type="number">0x05</literal></expr> )</condition> 
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>dcd</name><operator>-&gt;</operator><name>i_objectTypeIndication</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x40</literal></expr>:</case> 
<case>case <expr><literal type="number">0x66</literal></expr>:</case>
<case>case <expr><literal type="number">0x67</literal></expr>:</case>
<case>case <expr><literal type="number">0x68</literal></expr>:</case> 
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x69</literal></expr>:</case> 
<case>case <expr><literal type="number">0x6b</literal></expr>:</case> 
<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>UNKNOWN_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>dcd</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>dcd</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SLPackets_Section_Handler</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_sectiondata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_sectiondata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_payloaddata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_payloaddata</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_pes_cbdata</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_sectiondata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_sectiondata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name> <init>= <expr><operator>(</operator><name>ts_stream_t</name> <operator>*</operator><operator>)</operator> <name>p_pes_cbdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_mpeg4_descriptor_t</name> <modifier>*</modifier></type><name>p_mpeg4desc</name> <init>= <expr><call><name>GetMPEG4DescByEsId</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_mpeg4desc</name> <operator>&amp;&amp;</operator> <name><name>p_mpeg4desc</name><operator>-&gt;</operator><name>dec_descr</name><operator>.</operator><name>i_objectTypeIndication</name></name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator>
<name><name>p_mpeg4desc</name><operator>-&gt;</operator><name>dec_descr</name><operator>.</operator><name>i_streamType</name></name> <operator>==</operator> <literal type="number">0x01</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name>p_payloaddata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name> <init>= <expr><name>i_payloaddata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>od_descriptors_t</name> <modifier>*</modifier></type><name>p_ods</name> <init>= <expr><operator>&amp;</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>od</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sl_header_data</name></type> <name>header</name> <init>= <expr><call><name>DecodeSLHeader</name><argument_list>( <argument><expr><name>i_data</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_mpeg4desc</name><operator>-&gt;</operator><name>sl_descr</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DecodeODCommand</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_ods</name></expr></argument>, <argument><expr><name>i_data</name> <operator>-</operator> <name><name>header</name><operator>.</operator><name>i_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><name><name>header</name><operator>.</operator><name>i_size</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_ods</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>p_od</name> <init>= <expr><name><name>p_ods</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ES_DESCRIPTOR_COUNT</name> <operator>&amp;&amp;</operator> <name><name>p_od</name><operator>-&gt;</operator><name>es_descr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>b_ok</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>p_mpeg4desc</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_od</name><operator>-&gt;</operator><name>es_descr</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>GetPMTESBySLEsId</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name><name>p_mpeg4desc</name><operator>-&gt;</operator><name>i_es_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_mpeg4desc</name> <operator>&amp;&amp;</operator> <name><name>p_mpeg4desc</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>&amp;&amp;</operator> <name>p_es</name> <operator>&amp;&amp;</operator>
<call><name>SetupISO14496LogicalStream</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_mpeg4desc</name><operator>-&gt;</operator><name>dec_descr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_changed</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>UpdatePESFilters</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>==</operator> <name>PROGRAM_ALL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_au</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_au_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

}</block></struct></type> <name>SL_stream_processor_context_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SL_stream_processor_Delete</name><parameter_list>( <parameter><decl><type><name>ts_stream_processor_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SL_stream_processor_context_t</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SL_stream_processor_context_t</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SL_stream_processor_Reset</name><parameter_list>( <parameter><decl><type><name>ts_stream_processor_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SL_stream_processor_context_t</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SL_stream_processor_context_t</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pp_au_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>SL_stream_processor_Push</name><parameter_list>( <parameter><decl><type><name>ts_stream_processor_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_stream_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SL_stream_processor_context_t</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SL_stream_processor_context_t</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name>i_stream_id</name> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xFA</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_mpeg4_descriptor_t</name> <modifier>*</modifier></type><name>p_desc</name> <init>= <expr><call><name>GetMPEG4DescByEsId</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_desc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>sl_header_data</name></type> <name>header</name> <init>= <expr><call><name>DecodeSLHeader</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_desc</name><operator>-&gt;</operator><name>sl_descr</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name><name>header</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name><name>header</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>header</name><operator>.</operator><name>i_dts</name></name></expr> ?</condition><then> <expr><name><name>header</name><operator>.</operator><name>i_dts</name></name></expr> </then><else>: <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>header</name><operator>.</operator><name>i_pts</name></name></expr> ?</condition><then> <expr><name><name>header</name><operator>.</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>header</name><operator>.</operator><name>b_au_start</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pp_au_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pp_au_last</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>header</name><operator>.</operator><name>b_au_end</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_ChainGather</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pp_au_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ts_stream_processor_t</name> <modifier>*</modifier></type><name>SL_stream_processor_New</name><parameter_list>( <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ts_stream_processor_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>SL_stream_processor_context_t</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SL_stream_processor_context_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pp_au_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>p_au</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_stream</name></name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pf_delete</name></name> <operator>=</operator> <name>SL_stream_processor_Delete</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pf_push</name></name> <operator>=</operator> <name>SL_stream_processor_Push</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pf_reset</name></name> <operator>=</operator> <name>SL_stream_processor_Reset</name></expr>;</expr_stmt>

<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>
</unit>
