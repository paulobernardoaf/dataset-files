<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\mpeg\sections.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sections.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DVBPSI_DVBPSI_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dvbpsi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DVBPSI_DEMUX_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/demux.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/psi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../mux/mpeg/dvbpsi_compat.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_decoders.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<struct>struct <name>ts_sections_processor_t</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_table_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_extension_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>p_dvbpsi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ts_section_processor_callback_t</name></type> <name>pf_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ts_sections_processor_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_callback_data</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_subdecoder_rawsection_Callback</name><parameter_list>( <parameter><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>p_dvbpsi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_psi_section_t</name><modifier>*</modifier></type> <name>p_section</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_proc_cb_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ts_sections_processor_t</name> <modifier>*</modifier></type><name>p_proc</name> <init>= <expr><operator>(</operator><name>ts_sections_processor_t</name> <operator>*</operator><operator>)</operator> <name>p_proc_cb_data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_proc</name><operator>-&gt;</operator><name>pf_callback</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name>dvbpsi_psi_section_t</name> <modifier>*</modifier></type><name>p_sec</name> <init>= <expr><name>p_section</name></expr></init></decl>;</init> <condition><expr><name>p_sec</name></expr>;</condition> <incr><expr><name>p_sec</name> <operator>=</operator> <name><name>p_sec</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_rawlength</name> <init>= <expr><name><name>p_sec</name><operator>-&gt;</operator><name>p_payload_end</name></name> <operator>-</operator> <name><name>p_sec</name><operator>-&gt;</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_sec</name><operator>-&gt;</operator><name>b_syntax_indicator</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_rawlength</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_proc</name><operator>-&gt;</operator><name>i_table_id</name></name> <operator>&amp;&amp;</operator> <name><name>p_section</name><operator>-&gt;</operator><name>i_table_id</name></name> <operator>!=</operator> <name><name>p_proc</name><operator>-&gt;</operator><name>i_table_id</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_proc</name><operator>-&gt;</operator><name>i_extension_id</name></name> <operator>&amp;&amp;</operator> <name><name>p_section</name><operator>-&gt;</operator><name>i_extension</name></name> <operator>!=</operator> <name><name>p_proc</name><operator>-&gt;</operator><name>i_extension_id</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_proc</name><operator>-&gt;</operator><name>pf_callback</name></name><argument_list>( <argument><expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator> <name><name>p_dvbpsi</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>,
<argument><expr><name><name>p_sec</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>i_rawlength</name></expr></argument>,
<argument><expr><name><name>p_sec</name><operator>-&gt;</operator><name>p_payload_start</name></name></expr></argument>,
<argument><expr><name><name>p_sec</name><operator>-&gt;</operator><name>p_payload_end</name></name> <operator>-</operator> <name><name>p_sec</name><operator>-&gt;</operator><name>p_payload_start</name></name></expr></argument>,
<argument><expr><name><name>p_proc</name><operator>-&gt;</operator><name>p_callback_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_sections_processor_Add</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>ts_sections_processor_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_chain</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>i_table_id</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_extension_id</name></decl></parameter>,
<parameter><decl><type><name>ts_section_processor_callback_t</name></type> <name>pf_callback</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_callback_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ts_sections_processor_t</name> <modifier>*</modifier></type><name>p_proc</name> <init>= <expr><operator>*</operator><name>pp_chain</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_proc</name></expr>;</condition> <incr><expr><name>p_proc</name> <operator>=</operator> <name><name>p_proc</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_proc</name><operator>-&gt;</operator><name>i_extension_id</name></name> <operator>==</operator> <name>i_extension_id</name> <operator>&amp;&amp;</operator>
<name><name>p_proc</name><operator>-&gt;</operator><name>i_table_id</name></name> <operator>==</operator> <name>i_table_id</name> <operator>&amp;&amp;</operator>
<name><name>p_proc</name><operator>-&gt;</operator><name>pf_callback</name></name> <operator>==</operator> <name>pf_callback</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_proc</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts_sections_processor_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_proc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_proc</name><operator>-&gt;</operator><name>pf_callback</name></name> <operator>=</operator> <name>pf_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_proc</name><operator>-&gt;</operator><name>i_extension_id</name></name> <operator>=</operator> <name>i_extension_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_proc</name><operator>-&gt;</operator><name>i_table_id</name></name> <operator>=</operator> <name>i_table_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_proc</name><operator>-&gt;</operator><name>p_dvbpsi</name></name> <operator>=</operator> <call><name>dvbpsi_new</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dvbpsi_messages</name></expr></argument>, <argument><expr><name>DVBPSI_MSG_DEBUG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_proc</name><operator>-&gt;</operator><name>p_dvbpsi</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_proc</name><operator>-&gt;</operator><name>p_callback_data</name></name> <operator>=</operator> <name>p_callback_data</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ts_dvbpsi_AttachRawDecoder</name><argument_list>( <argument><expr><name><name>p_proc</name><operator>-&gt;</operator><name>p_dvbpsi</name></name></expr></argument>,
<argument><expr><name>ts_subdecoder_rawsection_Callback</name></expr></argument>, <argument><expr><name>p_proc</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ts_sections_processor_ChainDelete</name><argument_list>( <argument><expr><name>p_proc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_proc</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <operator>*</operator><name>pp_chain</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_chain</name> <operator>=</operator> <name>p_proc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_sections_processor_ChainDelete</name><parameter_list>( <parameter><decl><type><name>ts_sections_processor_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>p_chain</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ts_dvbpsi_DetachRawDecoder</name><argument_list>( <argument><expr><name><name>p_chain</name><operator>-&gt;</operator><name>p_dvbpsi</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dvbpsi_delete</name><argument_list>( <argument><expr><name><name>p_chain</name><operator>-&gt;</operator><name>p_dvbpsi</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ts_sections_processor_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_chain</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_chain</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_sections_processor_Reset</name><parameter_list>( <parameter><decl><type><name>ts_sections_processor_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>p_chain</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_decoder_reset</name><argument_list>( <argument><expr><name><name>p_chain</name><operator>-&gt;</operator><name>p_dvbpsi</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_chain</name> <operator>=</operator> <name><name>p_chain</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_sections_processor_Push</name><parameter_list>( <parameter><decl><type><name>ts_sections_processor_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>ts_sections_processor_t</name> <modifier>*</modifier></type><name>p_proc</name> <init>= <expr><name>p_chain</name></expr></init></decl>;</init>
<condition><expr><name>p_proc</name></expr>;</condition> <incr><expr><name>p_proc</name> <operator>=</operator> <name><name>p_proc</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_packet_push</name><argument_list>( <argument><expr><name><name>p_chain</name><operator>-&gt;</operator><name>p_dvbpsi</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
