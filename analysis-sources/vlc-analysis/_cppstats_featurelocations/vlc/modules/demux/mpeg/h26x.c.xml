<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\mpeg\h26x.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/hevc_nal.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/h264_nal.h"</cpp:file></cpp:include> 




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenH264</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenHEVC</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_TEXT</name></cpp:macro> <cpp:value>N_("Frames per Second")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Desired frame rate for the stream.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"H264"</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"H264 video demuxer"</literal> )</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">6</literal></argument> )</argument_list></macro>
<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"H264 video demuxer"</literal> )</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument><literal type="string">"h264-fps"</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument>FPS_TEXT</argument>, <argument>FPS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenH264</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"h264"</literal></argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"HEVC"</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"HEVC/H.265 video demuxer"</literal> )</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">6</literal></argument> )</argument_list></macro>
<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"HEVC/H.265 video demuxer"</literal> )</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument><literal type="string">"hevc-fps"</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument>FPS_TEXT</argument>, <argument>FPS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenHEVC</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"hevc"</literal></argument>, <argument><literal type="string">"h265"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_rate_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_rate_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H26X_PACKET_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H26X_PEEK_CHUNK</name></cpp:macro> <cpp:value>(H26X_PACKET_SIZE * 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H26X_MIN_PEEK</name></cpp:macro> <cpp:value>(4 + 7 + 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H26X_MAX_PEEK</name></cpp:macro> <cpp:value>(H26X_PEEK_CHUNK * 8)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H26X_NAL_COUNT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_pps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_vps</name></decl>;</decl_stmt>
}</block></struct></type> <name>hevc_probe_ctx_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_pps</name></decl>;</decl_stmt>
}</block></struct></type> <name>h264_probe_ctx_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProbeHEVC</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_peek</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_priv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hevc_probe_ctx_t</name> <modifier>*</modifier></type><name>p_ctx</name> <init>= <expr><operator>(</operator><name>hevc_probe_ctx_t</name> <operator>*</operator><operator>)</operator> <name>p_priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_type</name> <init>= <expr><call><name>hevc_getNALType</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_layer</name> <init>= <expr><call><name>hevc_getNALLayer</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_type</name> <operator>==</operator> <name>HEVC_NAL_VPS</name></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_layer</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_peek</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator>
<name><name>p_peek</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xFF</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xFF</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>b_vps</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>HEVC_NAL_SPS</name></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_layer</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>b_sps</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>HEVC_NAL_PPS</name></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_layer</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>b_pps</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>&gt;=</operator> <name>HEVC_NAL_BLA_W_LP</name> <operator>&amp;&amp;</operator> <name>i_type</name> <operator>&lt;=</operator> <name>HEVC_NAL_CRA</name></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_ctx</name><operator>-&gt;</operator><name>b_vps</name></name> <operator>&amp;&amp;</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>b_sps</name></name> <operator>&amp;&amp;</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>b_pps</name></name> <operator>&amp;&amp;</operator> <name>i_layer</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>HEVC_NAL_AUD</name></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <name>H26X_MIN_PEEK</name> <operator>||</operator>
<name><name>p_peek</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>HEVC_NAL_PREF_SEI</name></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFF</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProbeH264</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_peek</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_priv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>h264_probe_ctx_t</name> <modifier>*</modifier></type><name>p_ctx</name> <init>= <expr><operator>(</operator><name>h264_probe_ctx_t</name> <operator>*</operator><operator>)</operator> <name>p_priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_nal_type</name> <init>= <expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_ref_idc</name> <init>= <expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x60</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if<condition>( <expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_SPS</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_ref_idc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_peek</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator>
<operator>(</operator><name><name>p_peek</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>b_sps</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_PPS</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_ref_idc</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>b_pps</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_SLICE_IDR</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_ref_idc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>b_pps</name></name> <operator>||</operator> <operator>!</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>b_sps</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_AU_DELIMITER</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_ref_idc</name> <operator>||</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>b_pps</name></name> <operator>||</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>b_sps</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_SEI</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_ref_idc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_SPS_EXT</name> <operator>||</operator>
<name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_SUBSET_SPS</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_ref_idc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>b_sps</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_PREFIX</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_ref_idc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>b_pps</name></name> <operator>||</operator> <operator>!</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>b_sps</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>check_Property</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_psz</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type>(<modifier>*</modifier><name>pf_check</name>)<parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><operator>*</operator><name>pp_psz</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>pf_check</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_psz</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pp_psz</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GenericOpen</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_module</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>pf_probe</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_psz_exts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_psz_mimes</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>annexb_startcode</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>check_Property</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pp_psz_exts</name></expr></argument>, <argument><expr><name>demux_IsPathExtension</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>check_Property</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pp_psz_mimes</name></expr></argument>, <argument><expr><name>demux_IsContentType</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>H26X_MIN_PEEK</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>H26X_MIN_PEEK</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>annexb_startcode</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_peek</name> <init>= <expr><name>H26X_MIN_PEEK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_peek_target</name> <init>= <expr><name>H26X_MIN_PEEK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_probe_offset</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_probe</name> <init>= <expr><name>p_peek</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_synced</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bitflow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>H26X_NAL_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<while>while<condition>( <expr><operator>!</operator><name>b_synced</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_probe_offset</name> <operator>+</operator> <name>H26X_MIN_PEEK</name> <operator>&gt;=</operator> <name>i_peek</name> <operator>&amp;&amp;</operator>
<name>i_peek_target</name> <operator>+</operator> <name>H26X_PEEK_CHUNK</name> <operator>&lt;=</operator> <name>H26X_MAX_PEEK</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_peek_target</name> <operator>+=</operator> <name>H26X_PEEK_CHUNK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek_target</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_probe_offset</name> <operator>+</operator> <name>H26X_MIN_PEEK</name> <operator>&gt;=</operator> <name>i_peek</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_probe</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_probe_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_bitflow</name> <operator>=</operator> <operator>(</operator><name>i_bitflow</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>!</operator><name><name>p_probe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_probe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i_bitflow</name> <operator>&amp;</operator> <literal type="number">0x06</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x06</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_synced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_probe_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>b_synced</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_probe</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_probe_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>pf_probe</name><argument_list>( <argument><expr><name>p_probe</name></expr></argument>, <argument><expr><name>i_peek</name> <operator>-</operator> <name>i_probe_offset</name></expr></argument>, <argument><expr><name>p_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_probe_offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b_synced</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"%s module discarded (no startcode)"</literal></expr></argument>, <argument><expr><name>psz_module</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"this doesn't look like a %s ES stream, "</literal>
<literal type="string">"continuing anyway"</literal></expr></argument>, <argument><expr><name>psz_module</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name><operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_den</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_fps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fpsvar</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fpsvar</name></expr></argument>, <argument><expr><literal type="string">"%s-fps"</literal></expr></argument>, <argument><expr><name>psz_module</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>f_fps</name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>psz_fpsvar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_fpsvar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>f_fps</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>f_fps</name> <operator>&lt;</operator> <literal type="number">0.001f</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f_fps</name> <operator>=</operator> <literal type="number">0.001f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_den</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_num</name></name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <name>f_fps</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_num</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><literal type="number">25000</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>f_fps</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dts</name><operator>.</operator><name>i_divider_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dts</name><operator>.</operator><name>i_divider_den</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name> <operator>=</operator> <call><name>demux_PacketizerNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>psz_module</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenH264</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>h264_probe_ctx_t</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>rgi_psz_ext</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">".h264"</literal></expr>, <expr><literal type="string">".264"</literal></expr>, <expr><literal type="string">".bin"</literal></expr>, <expr><literal type="string">".bit"</literal></expr>, <expr><literal type="string">".raw"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>rgi_psz_mime</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"video/H264"</literal></expr>, <expr><literal type="string">"video/h264"</literal></expr>, <expr><literal type="string">"video/avc"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>GenericOpen</name><argument_list>( <argument><expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"h264"</literal></expr></argument>, <argument><expr><name>VLC_CODEC_H264</name></expr></argument>, <argument><expr><name>ProbeH264</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>rgi_psz_ext</name></expr></argument>, <argument><expr><name>rgi_psz_mime</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenHEVC</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hevc_probe_ctx_t</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>rgi_psz_ext</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">".h265"</literal></expr>, <expr><literal type="string">".265"</literal></expr>, <expr><literal type="string">".hevc"</literal></expr>, <expr><literal type="string">".bin"</literal></expr>, <expr><literal type="string">".bit"</literal></expr>, <expr><literal type="string">".raw"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>rgi_psz_mime</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"video/h265"</literal></expr>, <expr><literal type="string">"video/hevc"</literal></expr>, <expr><literal type="string">"video/HEVC"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>GenericOpen</name><argument_list>( <argument><expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"hevc"</literal></expr></argument>, <argument><expr><name>VLC_CODEC_HEVC</name></expr></argument>, <argument><expr><name>ProbeHEVC</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>rgi_psz_ext</name></expr></argument>, <argument><expr><name>rgi_psz_mime</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>demux_PacketizerDestroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_block_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block_in</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>H26X_PACKET_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block_in</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while<condition>( <expr><operator>(</operator><name>p_block_out</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>pf_packetize</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>p_block_in</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>p_block_in</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<while>while<condition>( <expr><name>p_block_out</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block_in</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_block_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>frame</name> <init>= <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_MASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_frame_dts</name> <init>= <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_frame_length</name> <init>= <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_length</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_block_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>frame</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_den</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_num</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_num</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_den</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_num</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"using %.2f fps"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_num</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_nb_fields</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_frame_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_nb_fields</name> <operator>=</operator> <call><name>round</name><argument_list>( <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>i_frame_length</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_num</name></name> <operator>/</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame_rate_den</name></name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i_nb_fields</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_nb_fields</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>i_nb_fields</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>i_frame_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block_out</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>b_eof</name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_DEMUXER_EOF</name></expr> </then><else>: <expr><name>VLC_DEMUXER_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_SET_TIME</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

</unit>
