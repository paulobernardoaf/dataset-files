<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\windows_audio_commons.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DMX_WINDOWS_AUDIO_COMMONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMX_WINDOWS_AUDIO_COMMONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_channels_src</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WAVE_SPEAKER_FRONT_LEFT</name></expr>,
<expr><name>WAVE_SPEAKER_FRONT_RIGHT</name></expr>, <expr><name>WAVE_SPEAKER_FRONT_CENTER</name></expr>,
<expr><name>WAVE_SPEAKER_LOW_FREQUENCY</name></expr>, <expr><name>WAVE_SPEAKER_BACK_LEFT</name></expr>, <expr><name>WAVE_SPEAKER_BACK_RIGHT</name></expr>,
<expr><name>WAVE_SPEAKER_BACK_CENTER</name></expr>, <expr><name>WAVE_SPEAKER_SIDE_LEFT</name></expr>, <expr><name>WAVE_SPEAKER_SIDE_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_channels_aout</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>,
<expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>,
<expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><name>AOUT_CHAN_MIDDLELEFT</name></expr>, <expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>getChannelMask</name><parameter_list>( <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>wvfextChannelMask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_channels</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>i_match</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channel_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>i_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pi_channels_src</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pi_channels_src</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<operator>*</operator><name>i_match</name> <operator>&lt;</operator> <name>i_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>wvfextChannelMask</name> <operator>&amp;</operator> <name><name>pi_channels_src</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>i_channel_mask</name> <operator>&amp;</operator> <name><name>pi_channels_aout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>i_match</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>wvfextChannelMask</name> <operator>&amp;=</operator> <operator>~</operator><name><name>pi_channels_src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_channel_mask</name> <operator>|=</operator> <name><name>pi_channels_aout</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i_channel_mask</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
