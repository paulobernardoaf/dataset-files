<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\adaptive\playlist\SegmentInfoCommon.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SEGMENTINFOCOMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGMENTINFOCOMMON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Inheritables.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Templates.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Segment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ICanonicalUrl.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../tools/Properties.hpp"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>adaptive</name>
<block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>playlist</name>
<block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Segment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SegmentInfoCommon</name> <range>: <expr><name>public</name> <name>ICanonicalUrl</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>Initializable</name><argument_list type="generic">&lt;<argument><expr><name>Segment</name></expr></argument>&gt;</argument_list></name></decl>,
<decl><type ref="prev"/><name>public</name> <name><name>Indexable</name><argument_list type="generic">&lt;<argument><expr><name>Segment</name></expr></argument>&gt;</argument_list></name>
<block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SegmentInfoCommon</name><argument_list>( <argument><expr><name>ICanonicalUrl</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>SegmentInfoCommon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>int</name> <macro><name>getStartIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>setStartIndex</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>startIndex</name></decl></parameter> )</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>appendBaseURL</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument> )</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <name>Url</name> <macro><name>getUrlSegment</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> 
<decl_stmt><decl><type><name><name>Property</name><argument_list type="generic">&lt;<argument><expr><name>stime_t</name></expr></argument>&gt;</argument_list></name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>getSegmentNumberByScaledTime</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ISegment</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator></expr></argument>,
<argument><expr><name>stime_t</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>int</name></type> <name>startIndex</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>baseURLs</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
