<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\adaptive\playlist\BaseRepresentation.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BASEREPRESENTATION_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASEREPRESENTATION_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CommonAttributesElements.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SegmentInformation.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../StreamFormat.hpp"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>adaptive</name>
<block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SharedResources</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>playlist</name>
<block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BaseAdaptationSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AbstractPlaylist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BaseSegmentTemplate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BaseRepresentation</name> <range>: <expr><name>public</name> <name>CommonAttributesElements</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>SegmentInformation</name>
<block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>BaseRepresentation</name><argument_list>( <argument><expr><name>BaseAdaptationSet</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>BaseRepresentation</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>StreamFormat</name> <macro><name>getStreamFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>BaseAdaptationSet</name><modifier>*</modifier></type> <name>getAdaptationSet</name><parameter_list>()</parameter_list>;</function_decl>






<expr_stmt><expr><name>uint64_t</name> <macro><name>getBandwidth</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>setBandwidth</name> <parameter_list>( <parameter><decl><type><name>uint64_t</name></type> <name>bandwidth</name></decl></parameter> )</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator> <macro><name>getCodecs</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>addCodecs</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>consistentSegmentNumber</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>pruneByPlaybackTime</name> <parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>vlc_tick_t</name></type> <name>getMinAheadTime</name> <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>needsUpdate</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>runLocalUpdates</name> <parameter_list>(<parameter><decl><type><name>SharedResources</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>scheduleNextUpdate</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>debug</name> <argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>,<argument><expr><name>int</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>contextualize</name><argument_list>(<argument>size_t</argument>, <argument>const std::string &amp;</argument>,
<argument>const BaseSegmentTemplate *</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>bwCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BaseRepresentation</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BaseRepresentation</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>validateCodec</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>BaseAdaptationSet</name> <modifier>*</modifier></type><name>adaptationSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bandwidth</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>codecs</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_consistent</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
