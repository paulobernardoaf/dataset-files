<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\adaptive\xml\DOMParser.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DOMPARSER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOMPARSER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Node.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>adaptive</name>
<block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>xml</name>
<block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DOMParser</name>
<block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DOMParser</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOMParser</name> <argument_list>(<argument><expr><name>stream_t</name> <operator>*</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>DOMParser</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>parse</name> <parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>reset</name> <parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Node</name><modifier>*</modifier></type> <name>getRootNode</name> <parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>print</name> <parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>vlc_reader</name></decl>;</decl_stmt>

<function_decl><type><name>Node</name><modifier>*</modifier></type> <name>processNode</name> <parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addAttributesToNode</name> <parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>print</name> <parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
