<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\adaptive\logic\RateBasedAdaptationLogic.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RATEBASEDADAPTATIONLOGIC_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATEBASEDADAPTATIONLOGIC_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"AbstractAdaptationLogic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../tools/MovingAverage.hpp"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>adaptive</name>
<block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>logic</name>
<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RateBasedAdaptationLogic</name> <range>: <expr><name>public</name> <name>AbstractAdaptationLogic</name>
<block>{
<expr><name>public</name><operator>:</operator>
<call><name>RateBasedAdaptationLogic</name> <argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>virtual</name> <operator>~</operator><call><name>RateBasedAdaptationLogic</name> <argument_list>()</argument_list></call></expr>;

<expr><name>BaseRepresentation</name> <operator>*</operator><call><name>getNextRepresentation</name><argument_list>(<argument><expr><name>BaseAdaptationSet</name> <operator>*</operator></expr></argument>, <argument><expr><name>BaseRepresentation</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>updateDownloadRate</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ID</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr>; 
<expr><name>virtual</name> <name>void</name> <call><name>trackerEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SegmentTrackerEvent</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>; 

<expr><name>private</name><operator>:</operator>
<name>size_t</name> <name>bpsAvg</name></expr>;
<expr><name>size_t</name> <name>currentBps</name></expr>;
<expr><name>size_t</name> <name>usedBps</name></expr>;

<expr><name><name>MovingAverage</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>average</name></expr>;

<expr><name>size_t</name> <name>dlsize</name></expr>;
<expr><name>vlc_tick_t</name> <name>dllength</name></expr>;

<expr><name>mutable</name> <name>vlc_mutex_t</name> <name>lock</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FixedRateAdaptationLogic</name> <range>: <expr><name>public</name> <name>AbstractAdaptationLogic</name>
<block>{
<expr><name>public</name><operator>:</operator>
<call><name>FixedRateAdaptationLogic</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;

<expr><name>BaseRepresentation</name> <operator>*</operator><call><name>getNextRepresentation</name><argument_list>(<argument><expr><name>BaseAdaptationSet</name> <operator>*</operator></expr></argument>, <argument><expr><name>BaseRepresentation</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>size_t</name> <name>currentBps</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
