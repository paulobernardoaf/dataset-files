<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\playlist\dvb.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"playlist.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ReadDir</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>input_item_t</name> <modifier>*</modifier></type><name>ParseLine</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>int</name></type> <name>Import_DVB</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_FILE</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stream_HasExtension</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">".conf"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>peek</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>eol</name> <operator>-</operator> <name>peek</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>peek</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>ParseLine</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"found valid channels.conf file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>ReadDir</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDir</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>subitems</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>vlc_stream_ReadLine</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>ParseLine</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_node_AppendItem</name><argument_list>(<argument><expr><name>subitems</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ParseFEC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>fec</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>dvb</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>vlc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"1_2"</literal></expr>, <expr><literal type="string">"1/2"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2_3"</literal></expr>, <expr><literal type="string">"2/3"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"3_4"</literal></expr>, <expr><literal type="string">"3/4"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"4_5"</literal></expr>, <expr><literal type="string">"4/5"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"5_6"</literal></expr>, <expr><literal type="string">"5/6"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"6_7"</literal></expr>, <expr><literal type="string">"6/7"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"7_8"</literal></expr>, <expr><literal type="string">"7/8"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"8_9"</literal></expr>, <expr><literal type="string">"8/9"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"9_10"</literal></expr>, <expr><literal type="string">"9/10"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AUTO"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"NONE"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"FEC_"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fec</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>bsearch</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>f</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>vlc</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ParseModulation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>mod</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>dvb</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>vlc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"8VSB"</literal></expr>, <expr><literal type="string">"8VSB"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"APSK_16"</literal></expr>, <expr><literal type="string">"16APSK"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"APSK_32"</literal></expr>, <expr><literal type="string">"32APSK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DQPSK"</literal></expr>, <expr><literal type="string">"DQPSK"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"PSK_8"</literal></expr>, <expr><literal type="string">"8PSK"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"QPSK"</literal></expr>, <expr><literal type="string">"QPSK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"QAM_128"</literal></expr>, <expr><literal type="string">"128QAM"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"QAM_16"</literal></expr>, <expr><literal type="string">"16QAM"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"QAM_256"</literal></expr>, <expr><literal type="string">"256QAM"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"QAM_32"</literal></expr>, <expr><literal type="string">"32QAM"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"QAM_64"</literal></expr>, <expr><literal type="string">"64QAM"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"QAM_AUTO"</literal></expr>, <expr><literal type="string">"QAM"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"VSB_16"</literal></expr>, <expr><literal type="string">"16VSB"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"VSB_8"</literal></expr>, <expr><literal type="string">"8VSB"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<if_stmt><if>if<condition>( <expr><name>str</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mod</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>bsearch</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>m</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>m</name><operator>-&gt;</operator><name>vlc</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ParseGuard</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>guard</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>dvb</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>vlc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"19_128"</literal></expr>, <expr><literal type="string">"19/128"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"19_256"</literal></expr>, <expr><literal type="string">"19/256"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"1_128"</literal></expr>, <expr><literal type="string">"1/128"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1_16"</literal></expr>, <expr><literal type="string">"1/16"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"1_32"</literal></expr>, <expr><literal type="string">"1/32"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"1_4"</literal></expr>, <expr><literal type="string">"1/4"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"1_8"</literal></expr>, <expr><literal type="string">"1/8"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"AUTO"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"GUARD_INTERVAL_"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>guard</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>bsearch</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>g</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>g</name><operator>-&gt;</operator><name>vlc</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>input_item_t</name> <modifier>*</modifier></type><name>ParseLine</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" \t\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>freq</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mrl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>char</name></type> <name>polarization</name> <init>= <expr><call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>rate</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>||</operator> <name>rate</name> <operator>&gt;</operator> <operator>(</operator><name>ULONG_MAX</name> <operator>/</operator> <literal type="number">1000u</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rate</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mrl</name></expr></argument>,
<argument><expr><literal type="string">"dvb-s://frequency=%"</literal><name>PRIu64</name><literal type="string">":polarization=%c:srate=%lu"</literal></expr></argument>,
<argument><expr><name>freq</name> <operator>*</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>polarization</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mrl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"INVERSION_"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>inversion</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"AUTO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inversion</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"OFF"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inversion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inversion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"BANDWIDTH_"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>rate</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fec</name> <init>= <expr><call><name>ParseFEC</name><argument_list>(<argument><expr><call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>ParseModulation</name><argument_list>(<argument><expr><call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>,<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fec</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>mod</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mrl</name></expr></argument>, <argument><expr><literal type="string">"dvb-c://frequency=%lu:inversion:%d:srate=%lu:"</literal>
<literal type="string">"fec=%s:modulation=%s"</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>inversion</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>,
<argument><expr><name>mod</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mrl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>bandwidth</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><call><name>ParseFEC</name><argument_list>(<argument><expr><call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><call><name>ParseFEC</name><argument_list>(<argument><expr><call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>ParseModulation</name><argument_list>(<argument><expr><call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>lp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>mod</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"TRANSMISSION_MODE_"</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xmit</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>xmit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xmit</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>guard</name> <init>= <expr><call><name>ParseGuard</name><argument_list>(<argument><expr><call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>,<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>guard</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"HIERARCHY_"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hierarchy</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"AUTO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hierarchy</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mrl</name></expr></argument>, <argument><expr><literal type="string">"dvb-t://frequency=%lu:inversion=%d:"</literal>
<literal type="string">"bandwidth=%u:code-rate-hp=%s:code-rate-lp=%s:"</literal>
<literal type="string">"modulation=%s:transmission=%d:guard=%s:"</literal>
<literal type="string">"hierarchy=%d"</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>inversion</name></expr></argument>, <argument><expr><name>bandwidth</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>,
<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>xmit</name></expr></argument>, <argument><expr><name>guard</name></expr></argument>, <argument><expr><name>hierarchy</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mrl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>ParseModulation</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mrl</name></expr></argument>, <argument><expr><literal type="string">"atsc://frequency=%lu:modulation=%s"</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>,
<argument><expr><name>mod</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mrl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>mrl</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sid</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>||</operator> <name>sid</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sid_opt</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"program=65535"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sid_opt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sid_opt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"program=%lu"</literal></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>input_item_NewCard</name><argument_list>(<argument><expr><name>mrl</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>sid_opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>
</unit>
