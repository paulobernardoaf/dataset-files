<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\playlist\xspf.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"playlist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLE_INTERFACE</name></cpp:macro> <cpp:value>(input_item_t *p_input,const char *psz_name,char *psz_value,void *opaque)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLEX_INTERFACE</name></cpp:macro> <cpp:value>(stream_t *p_stream,input_item_node_t *p_input_node,xml_reader_t *p_xml_reader,const char *psz_element,bool b_empty_node)</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_playlist_node</name></type> <name>COMPLEX_INTERFACE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_tracklist_node</name></type> <name>COMPLEX_INTERFACE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_track_node</name></type> <name>COMPLEX_INTERFACE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_extension_node</name></type> <name>COMPLEX_INTERFACE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_extitem_node</name></type> <name>COMPLEX_INTERFACE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>set_item_info</name></type> <name>SIMPLE_INTERFACE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>set_option</name></type> <name>SIMPLE_INTERFACE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>skip_element</name></type> <name>COMPLEX_INTERFACE</name></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<union>union
<block>{
<macro><name>bool</name> <argument_list>(<argument>*smpl</argument>)</argument_list></macro> <expr_stmt><expr><name>SIMPLE_INTERFACE</name></expr>;</expr_stmt>
<macro><name>bool</name> <argument_list>(<argument>*cmplx</argument>)</argument_list></macro> <expr_stmt><expr><name>COMPLEX_INTERFACE</name></expr>;</expr_stmt>
}</block> <decl><name>pf_handler</name></decl>;</union>
<decl_stmt><decl><type><name>bool</name></type> <name>cmplx</name></decl>;</decl_stmt>
}</block></struct></type> <name>xml_elem_hnd_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_tracklist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_tracklist_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_track_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_base</name></decl>;</decl_stmt>
}</block></struct></type> <name>xspf_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ReadDir</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>int</name></type> <name>Import_xspf</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_FILE</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>stream_HasExtension</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">".xspf"</literal></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>stream_IsMimeType</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"application/xspf+xml"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xspf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"using XSPF playlist reader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>ReadDir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Close_xspf</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xspf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracklist_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_tracklist</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_tracklist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_tracklist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDir</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_subitems</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xspf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pp_tracklist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_tracklist_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>psz_base</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_xml_reader</name> <operator>=</operator> <call><name>xml_ReaderCreate</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_xml_reader</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>xml_ReaderNextNode</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XML_READER_STARTELEM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"can't read xml stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"playlist"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"invalid root node name &lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>xml_ReaderIsEmptyElement</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <ternary><condition><expr><call><name>parse_playlist_node</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_subitems</name></expr></argument>,
<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><literal type="string">"playlist"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_tracklist_entries</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_new_input</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>pp_tracklist</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_new_input</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_node_AppendItem</name><argument_list>(<argument><expr><name>p_subitems</name></expr></argument>, <argument><expr><name>p_new_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>p_xml_reader</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_ret</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>get_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_node_attribute</name><parameter_list>(<parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>value</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_node</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,
<parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_input_node</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name></decl></parameter>,
<parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_root_node</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>pl_elements</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_pl_elements</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>p_handler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>i_node</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>XML_READER_NONE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_empty</name> <init>= <expr><call><name>xml_ReaderIsEmptyElement</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>i_node</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>name</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"invalid XML stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_handler</name> <operator>=</operator> <call><name>get_handler</name><argument_list>(<argument><expr><name>pl_elements</name></expr></argument>, <argument><expr><name>i_pl_elements</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_handler</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"skipping unexpected element &lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>skip_element</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>b_empty</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_handler</name><operator>-&gt;</operator><name>cmplx</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>p_handler</name><operator>-&gt;</operator><name>pf_handler</name><operator>.</operator><name>cmplx</name></name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_input_node</name></expr></argument>,
<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><name><name>p_handler</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>b_empty</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_handler</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>XML_READER_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_handler</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>psz_value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>psz_root_node</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_handler</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_handler</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"there's no open element left for &lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_handler</name><operator>-&gt;</operator><name>pf_handler</name><operator>.</operator><name>smpl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_handler</name><operator>-&gt;</operator><name>pf_handler</name><operator>.</operator><name>smpl</name></name><argument_list>(<argument><expr><name>p_input_item</name></expr></argument>, <argument><expr><name><name>p_handler</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_handler</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>
</block_content>}</block></function>








<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_playlist_node</name></type> <name>COMPLEX_INTERFACE</name>
<block>{<block_content>
<decl_stmt><decl><type><name>xspf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>b_empty_node</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_version_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>psz_name</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_value</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_version_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"unsupported XSPF version %s"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"xmlns"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"xmlns:vlc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"xml:base"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>psz_base</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"invalid &lt;playlist&gt; attribute: \"%s\""</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_version_found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"&lt;playlist&gt; requires \"version\" attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>xml_elem_hnd_t</name></type> <name><name>pl_elements</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{<expr><literal type="string">"title"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"creator"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"annotation"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"info"</literal></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"location"</literal></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"identifier"</literal></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"image"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"date"</literal></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"license"</literal></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"attribution"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>skip_element</name></expr>}</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"link"</literal></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"meta"</literal></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"extension"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>parse_extension_node</name></expr>}</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"trackList"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>parse_tracklist_node</name></expr>}</block></expr>, <expr><name>true</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_node</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name><name>p_input_node</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>,
<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><name>psz_element</name></expr></argument>,
<argument><expr><name>pl_elements</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pl_elements</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_tracklist_node</name></type> <name>COMPLEX_INTERFACE</name>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>b_empty_node</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>xml_elem_hnd_t</name></type> <name><name>pl_elements</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{<expr><literal type="string">"track"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>parse_track_node</name></expr>}</block></expr>, <expr><name>true</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_node</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name><name>p_input_node</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>,
<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><name>psz_element</name></expr></argument>,
<argument><expr><name>pl_elements</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pl_elements</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_location</name></type> <name>SIMPLE_INTERFACE</name>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xspf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>xspf_sys_t</name> <operator>*</operator><operator>)</operator> <name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_uri</name> <init>= <expr><call><name>ProcessMRL</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>psz_uri</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_SetURI</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>psz_uri</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_track_node</name></type> <name>COMPLEX_INTERFACE</name>
<block>{<block_content>
<decl_stmt><decl><type><name>xspf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>b_empty_node</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_new_input</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_new_input</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_new_node</name> <init>= <expr><call><name>input_item_node_Create</name><argument_list>(<argument><expr><name>p_new_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_new_node</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>p_new_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>xml_elem_hnd_t</name></type> <name><name>track_elements</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{<expr><literal type="string">"location"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>parse_location</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"identifier"</literal></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"title"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"creator"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"annotation"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"info"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"image"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"album"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"trackNum"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"duration"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_item_info</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"link"</literal></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"meta"</literal></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"extension"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>parse_extension_node</name></expr>}</block></expr>, <expr><name>true</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><call><name>parse_node</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_new_node</name></expr></argument>, <argument><expr><name>p_new_input</name></expr></argument>,
<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><name>psz_element</name></expr></argument>,
<argument><expr><name>track_elements</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>track_elements</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>b_ret</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><call><name>input_item_GetURI</name><argument_list>(<argument><expr><name>p_new_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_uri</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetURI</name><argument_list>(<argument><expr><name>p_new_input</name></expr></argument>, <argument><expr><name>INPUT_ITEM_URI_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>==</operator> <name>INT_MAX</name> <operator>||</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>&gt;=</operator> <operator>(</operator><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>p_new_input</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_node_AppendNode</name><argument_list>(<argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>p_new_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_new_node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracklist_entries</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_tracklist</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_tracklist</name></name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracklist_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracklist_entries</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracklist_entries</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_insert</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_tracklist</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track_id</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp_insert</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"track ID %d collision"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_node_AppendItem</name><argument_list>(<argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>p_new_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_insert</name> <operator>=</operator> <name>p_new_input</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_new_input</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>b_ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_new_node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_node_Delete</name><argument_list>(<argument><expr><name>p_new_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if<condition>(<expr><name>p_new_input</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>p_new_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>set_item_info</name></type> <name>SIMPLE_INTERFACE</name>
<block>{<block_content>
<decl_stmt><decl><type><name>xspf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>xspf_sys_t</name> <operator>*</operator><operator>)</operator> <name>opaque</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_name</name> <operator>||</operator> <operator>!</operator><name>psz_value</name> <operator>||</operator> <operator>!</operator><name>p_input</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_xml_decode</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetTitle</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"creator"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetArtist</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"album"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetAlbum</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"trackNum"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetTrackNum</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>atol</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"annotation"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetDescription</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name> <init>= <expr><call><name>ProcessMRL</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_mrl</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetURL</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_value</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name> <init>= <expr><call><name>ProcessMRL</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_mrl</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetArtURL</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>set_option</name></type> <name>SIMPLE_INTERFACE</name>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_name</name> <operator>||</operator> <operator>!</operator><name>psz_value</name> <operator>||</operator> <operator>!</operator><name>p_input</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_xml_decode</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_vlcid</name></type> <name>SIMPLE_INTERFACE</name>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xspf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>xspf_sys_t</name> <operator>*</operator><operator>)</operator> <name>opaque</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>psz_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_vlcnode_node</name></type> <name>COMPLEX_INTERFACE</name>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name> <init>= <expr><name><name>p_input_node</name><operator>-&gt;</operator><name>p_item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>b_empty_node</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attr</name> <init>= <expr><call><name>get_node_attribute</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>psz_attr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_title</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>psz_title</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_xml_decode</name><argument_list>(<argument><expr><name>psz_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_title</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"&lt;vlc:node&gt; requires \"title\" attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_new_input</name> <init>=
<expr><call><name>input_item_NewDirectory</name><argument_list>(<argument><expr><name>INPUT_ITEM_URI_NOP</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>ITEM_NET_UNKNOWN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_new_input</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_input_node</name> <operator>=</operator>
<call><name>input_item_node_AppendItem</name><argument_list>(<argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>p_new_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_input_item</name> <operator>=</operator> <name>p_new_input</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>xml_elem_hnd_t</name></type> <name><name>pl_elements</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{<expr><literal type="string">"vlc:node"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>parse_vlcnode_node</name></expr>}</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"vlc:item"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>parse_extitem_node</name></expr>}</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"vlc:id"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>parse_vlcid</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"vlc:option"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_option</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><call><name>parse_node</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>p_input_item</name></expr></argument>,
<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><name>psz_element</name></expr></argument>,
<argument><expr><name>pl_elements</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pl_elements</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_new_input</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>p_new_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_extension_node</name></type> <name>COMPLEX_INTERFACE</name>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>b_empty_node</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_application</name> <init>= <expr><call><name>get_node_attribute</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><literal type="string">"application"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_application</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"&lt;extension&gt; requires \"application\" attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_application</name></expr></argument>, <argument><expr><literal type="string">"http://www.videolan.org/vlc/playlist/0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Skipping \"%s\" extension tag"</literal></expr></argument>, <argument><expr><name>psz_application</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>skip_element</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><name>psz_element</name></expr></argument>, <argument><expr><name>b_empty_node</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>xml_elem_hnd_t</name></type> <name><name>pl_elements</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{<expr><literal type="string">"vlc:node"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>parse_vlcnode_node</name></expr>}</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"vlc:id"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>parse_vlcid</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"vlc:option"</literal></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>set_option</name></expr>}</block></expr>, <expr><name>false</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_node</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name><name>p_input_node</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>,
<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><name>psz_element</name></expr></argument>,
<argument><expr><name>pl_elements</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pl_elements</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>parse_extitem_node</name></type> <name>COMPLEX_INTERFACE</name>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xspf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_new_input</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_tid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_empty_node</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tid</name> <init>= <expr><call><name>get_node_attribute</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><literal type="string">"tid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>psz_tid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_tid</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>psz_tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_tid</name> <operator>||</operator> <name>i_tid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"&lt;vlc:item&gt; requires valid \"tid\" attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_tid</name> <operator>&gt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_tracklist_entries</name></name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name>p_new_input</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pp_tracklist</name><index>[ <expr><name>i_tid</name></expr> ]</index></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"non existing \"tid\" %d referenced"</literal></expr></argument>, <argument><expr><name>i_tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_node_AppendItem</name><argument_list>(<argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>p_new_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>p_new_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pp_tracklist</name><index>[<expr><name>i_tid</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name> <name>skip_element</name></type> <name>COMPLEX_INTERFACE</name>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_input_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>b_empty_node</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><ternary><condition><expr><name>psz_element</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_element</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lvl</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>lvl</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b_ret</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>xml_ReaderNextNode</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>xml_ReaderIsEmptyElement</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>lvl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>
<expr_stmt><expr><name>lvl</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>XML_READER_NONE</name></expr>:</case>
<case>case <expr><name>XML_READER_ERROR</name></expr>:</case>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>b_ret</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>b_ret</name> <operator>&amp;=</operator> <operator>(</operator><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>psz_end</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_end</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
