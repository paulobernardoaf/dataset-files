<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\playlist\itml.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"itml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"playlist.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ReadDir</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<function><type><name>int</name></type> <name>Import_iTML</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_FILE</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>stream_HasExtension</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">".xml"</literal></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>||</operator>
<operator>!</operator><call><name>strnstr</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"&lt;!DOCTYPE plist "</literal></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"using iTunes Media Library reader"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>ReadDir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDir</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_subitems</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_xml_reader</name> <operator>=</operator> <call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_xml_reader</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>type</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"can't read xml stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
while<condition>( <expr><name>type</name> <operator>!=</operator> <name>XML_READER_STARTELEM</name></expr> )</condition>;</do>


<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"plist"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid root node &lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xml_elem_hnd_t</name></type> <name><name>pl_elements</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"dict"</literal></expr>, <expr><name>COMPLEX_CONTENT</name></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>parse_plist_dict</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>UNKNOWN_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>parse_plist_node</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_subitems</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><literal type="string">"plist"</literal></expr></argument>,
<argument><expr><name>pl_elements</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if<condition>( <expr><name>p_xml_reader</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_plist_node</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_input_node</name></decl></parameter>,
<parameter><decl><type><name>track_elem_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_element</name></decl></parameter>,
<parameter><decl><type><name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>p_handlers</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_version_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_version_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"1.0"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported iTunes Media Library version"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid &lt;plist&gt; attribute:\"%s\""</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_version_found</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"&lt;plist&gt; requires \"version\" attribute"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>parse_dict</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_xml_reader</name></expr></argument>,
<argument><expr><literal type="string">"plist"</literal></expr></argument>, <argument><expr><name>p_handlers</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_dict</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_input_node</name></decl></parameter>,
<parameter><decl><type><name>track_elem_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_element</name></decl></parameter>, <parameter><decl><type><name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>p_handlers</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>p_handler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>i_node</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_node</name></expr> )</condition>
<block>{<block_content>

<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>

<for>for<control>( <init><expr><name>p_handler</name> <operator>=</operator> <name>p_handlers</name></expr>;</init>
<condition><expr><name><name>p_handler</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>p_handler</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</condition>
<incr><expr><name>p_handler</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_handler</name><operator>-&gt;</operator><name>name</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unexpected element &lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_handler</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>COMPLEX_CONTENT</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name><name>p_handler</name><operator>-&gt;</operator><name>pf_handler</name><operator>.</operator><name>cmplx</name></name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><name><name>p_handler</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_handler</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>XML_READER_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>psz_value</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>node</name></expr></argument>, <argument><expr><name>psz_element</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_handler</name> <operator>||</operator> <operator>!</operator><name><name>p_handler</name><operator>-&gt;</operator><name>name</name></name>
<operator>||</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_handler</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"there's no open element left for &lt;%s&gt;"</literal></expr></argument>,
<argument><expr><name>node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_handler</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_key</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_handler</name><operator>-&gt;</operator><name>pf_handler</name><operator>.</operator><name>smpl</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>p_handler</name><operator>-&gt;</operator><name>pf_handler</name><operator>.</operator><name>smpl</name></name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_handler</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of XML data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_plist_dict</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_input_node</name></decl></parameter>,
<parameter><decl><type><name>track_elem_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_element</name></decl></parameter>,
<parameter><decl><type><name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>p_handlers</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_handlers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xml_elem_hnd_t</name></type> <name><name>pl_elements</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{<expr><literal type="string">"dict"</literal></expr>, <expr><name>COMPLEX_CONTENT</name></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>parse_tracks_dict</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"array"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"key"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"integer"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"string"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"date"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"true"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"false"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>UNKNOWN_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_dict</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_xml_reader</name></expr></argument>,
<argument><expr><literal type="string">"dict"</literal></expr></argument>, <argument><expr><name>pl_elements</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_tracks_dict</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_input_node</name></decl></parameter>,
<parameter><decl><type><name>track_elem_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_element</name></decl></parameter>,
<parameter><decl><type><name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>p_handlers</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_handlers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xml_elem_hnd_t</name></type> <name><name>tracks_elements</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{<expr><literal type="string">"dict"</literal></expr>, <expr><name>COMPLEX_CONTENT</name></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>parse_track_dict</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"key"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>UNKNOWN_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_dict</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_xml_reader</name></expr></argument>,
<argument><expr><literal type="string">"dict"</literal></expr></argument>, <argument><expr><name>tracks_elements</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"added %zu tracks successfully"</literal></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_track_dict</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_input_node</name></decl></parameter>,
<parameter><decl><type><name>track_elem_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_element</name></decl></parameter>,
<parameter><decl><type><name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>p_handlers</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_handlers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_new_input</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_track</name> <operator>=</operator> <call><name>new_track</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xml_elem_hnd_t</name></type> <name><name>track_elements</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{<expr><literal type="string">"array"</literal></expr>, <expr><name>COMPLEX_CONTENT</name></expr>, <expr><block>{<expr><operator>.</operator><name>cmplx</name> <operator>=</operator> <name>skip_element</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"key"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>save_data</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"integer"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>save_data</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"string"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>save_data</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"date"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><operator>.</operator><name>smpl</name> <operator>=</operator> <name>save_data</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"true"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"false"</literal></expr>, <expr><name>SIMPLE_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>UNKNOWN_CONTENT</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>parse_dict</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>,
<argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><literal type="string">"dict"</literal></expr></argument>, <argument><expr><name>track_elements</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"name: %s, artist: %s, album: %s, genre: %s, trackNum: %s, location: %s"</literal></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>artist</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>album</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>genre</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>trackNum</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>location</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ignoring track without Location entry"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_track</name><argument_list>( <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Adding '%s'"</literal></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_new_input</name> <operator>=</operator> <call><name>input_item_New</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>location</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_node_AppendItem</name><argument_list>( <argument><expr><name>p_input_node</name></expr></argument>, <argument><expr><name>p_new_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>add_meta</name><argument_list>( <argument><expr><name>p_new_input</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_new_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_track</name><argument_list>( <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>track_elem_t</name> <modifier>*</modifier></type><name>new_track</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>track_elem_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof <name/></sizeof>*<name>p_track</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>artist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>album</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>genre</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>trackNum</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_track</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_track</name><parameter_list>( <parameter><decl><type><name>track_elem_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_track</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>artist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>album</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>genre</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>trackNum</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>save_data</name><parameter_list>( <parameter><decl><type><name>track_elem_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_name</name> <operator>||</operator> <operator>!</operator><name>psz_value</name> <operator>||</operator> <operator>!</operator><name>p_track</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_xml_decode</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE_INFO</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( !strcmp( psz_name, name ) ) { p_track-&gt;value = strdup( psz_value ); }</cpp:value></cpp:define>


<macro><name>SAVE_INFO</name><argument_list>( <argument><literal type="string">"Name"</literal></argument>, <argument>name</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SAVE_INFO</name><argument_list>( <argument><literal type="string">"Artist"</literal></argument>, <argument>artist</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SAVE_INFO</name><argument_list>( <argument><literal type="string">"Album"</literal></argument>, <argument>album</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SAVE_INFO</name><argument_list>( <argument><literal type="string">"Genre"</literal></argument>, <argument>genre</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SAVE_INFO</name><argument_list>( <argument><literal type="string">"Track Number"</literal></argument>, <argument>trackNum</argument> )</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>SAVE_INFO</name><argument_list>( <argument><literal type="string">"Location"</literal></argument>, <argument>location</argument> )</argument_list></macro>
<if_stmt><if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"Total Time"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i_num</name> <init>= <expr><call><name>atol</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <operator>(</operator><name>vlc_tick_t</name><operator>)</operator> <name>i_num</name><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SAVE_INFO</name></cpp:undef>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_meta</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name></decl></parameter>, <parameter><decl><type><name>track_elem_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_input_item</name> <operator>||</operator> <operator>!</operator><name>p_track</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_INFO</name><parameter_list>( <parameter><type><name>type</name></type></parameter>, <parameter><type><name>prop</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( p_track-&gt;prop ) {input_item_Set##type( p_input_item, p_track-&gt;prop );}</cpp:value></cpp:define>

<macro><name>SET_INFO</name><argument_list>( <argument>Title</argument>, <argument>name</argument> )</argument_list></macro>
<macro><name>SET_INFO</name><argument_list>( <argument>Artist</argument>, <argument>artist</argument> )</argument_list></macro>
<macro><name>SET_INFO</name><argument_list>( <argument>Album</argument>, <argument>album</argument> )</argument_list></macro>
<macro><name>SET_INFO</name><argument_list>( <argument>Genre</argument>, <argument>genre</argument> )</argument_list></macro>
<macro><name>SET_INFO</name><argument_list>( <argument>TrackNum</argument>, <argument>trackNum</argument> )</argument_list></macro>
<macro><name>SET_INFO</name><argument_list>( <argument>Duration</argument>, <argument>duration</argument> )</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_INFO</name></cpp:undef>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>skip_element</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_input_node</name></decl></parameter>,
<parameter><decl><type><name>track_elem_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_element</name></decl></parameter>, <parameter><decl><type><name>xml_elem_hnd_t</name> <modifier>*</modifier></type><name>p_handlers</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_input_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_handlers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name>type</name> <operator>==</operator> <name>XML_READER_ENDELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_element</name></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
