<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\playlist\wpl.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"playlist.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>consume_tag</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name><modifier>*</modifier></type> <name>p_reader</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>psz_tag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>, <decl><type ref="prev"/><name>i_depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderIsEmptyElement</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_ENDELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_tag</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>--</operator><name>i_depth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_STARTELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_tag</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderIsEmptyElement</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i_depth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>consume_volatile_tag</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_demux</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>psz_tag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_copy</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_tag</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_ENOMEM</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>psz_copy</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>consume_tag</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>, <argument><expr><name>psz_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_meta</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name> <specifier>const</specifier></type> <name>b_empty</name> <init>= <expr><call><name>xml_ReaderIsEmptyElement</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_meta_name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_meta_content</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>(</operator> <name>psz_attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_value</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>psz_value</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attr</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>psz_meta_name</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_meta_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attr</name></expr></argument>, <argument><expr><literal type="string">"content"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>psz_meta_content</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_meta_content</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_meta_name</name> <operator>&amp;&amp;</operator> <name>psz_meta_content</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>b_empty</name> <operator>==</operator> <name>false</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>consume_tag</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_meta_name</name> <operator>||</operator> <operator>!</operator><name>psz_meta_content</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_meta_name</name></expr></argument>, <argument><expr><literal type="string">"TotalDuration"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_AddInfo</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Playlist"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Total duration"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><call><name>atoll</name><argument_list>( <argument><expr><name>psz_meta_content</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_meta_name</name></expr></argument>, <argument><expr><literal type="string">"Author"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetPublisher</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_meta_content</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_meta_name</name></expr></argument>, <argument><expr><literal type="string">"Rating"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetRating</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_meta_content</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_meta_name</name></expr></argument>, <argument><expr><literal type="string">"Genre"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetGenre</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_meta_content</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ignoring unknown meta-attribute %s"</literal></expr></argument>, <argument><expr><name>psz_meta_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_meta_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_meta_content</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_title_element</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>psz_title</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderIsEmptyElement</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_title</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>XML_READER_TEXT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_SetTitle</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>consume_tag</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_head</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_ENDELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"head"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_STARTELEM</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>parse_meta</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>parse_title_element</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"skipping unknown tag &lt;%s&gt; in &lt;head&gt;"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume_volatile_tag</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_body</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name><modifier>*</modifier></type> <name>p_node</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_type</name> <operator>!=</operator> <name>XML_READER_STARTELEM</name> <operator>||</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"seq"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Expected opening &lt;seq&gt; tag. Got &lt;%s&gt; with type %d"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderIsEmptyElement</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>( <expr><operator>(</operator> <name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_ENDELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"seq"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_STARTELEM</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_empty</name> <init>= <expr><call><name>xml_ReaderIsEmptyElement</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>psz_attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_val</name></expr></argument> )</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_val</name> <operator>||</operator> <operator>*</operator><name>psz_val</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attr</name></expr></argument>, <argument><expr><literal type="string">"src"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>mrl</name> <init>= <expr><call><name>ProcessMRL</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>mrl</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>p_item</name> <init>= <expr><call><name>input_item_New</name><argument_list>( <argument><expr><name>mrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_node_AppendItem</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>b_empty</name> <operator>==</operator> <name>false</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>consume_tag</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"skipping unknown tag &lt;%s&gt; in &lt;seq&gt;"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume_volatile_tag</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_type</name> <operator>!=</operator> <name>XML_READER_ENDELEM</name> <operator>||</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"body"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Expected closing &lt;body&gt; tag. Got: &lt;%s&gt; with type %d"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>XML_READER_STARTELEM</name> <operator>||</operator>
<call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"smil"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>xml_ReaderIsEmptyElement</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name><modifier>*</modifier></type> <name>p_input</name> <init>= <expr><call><name>GetCurrentItem</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_ENDELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"smil"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_STARTELEM</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"head"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>read_head</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"body"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>read_body</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"skipping unknown tag &lt;%s&gt; in &lt;smil&gt;"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume_volatile_tag</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Close_WPL</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Import_WPL</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_demux</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_FILE</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>stream_HasExtension</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">".wpl"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>stream_HasExtension</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">".zpl"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>i_peek</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_probestream</name> <init>= <expr><call><name>vlc_stream_MemoryNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_probestream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_probestream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_reader</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Failed to create an XML reader"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_probestream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_reader</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier><specifier>const</specifier></type> <name>logger</name> <init>= <expr><name><name>p_reader</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name> <operator>=</operator> <name>logger</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>type</name> <operator>!=</operator> <name>XML_READER_STARTELEM</name> <operator>||</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"smil"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid WPL playlist. Root element should have been &lt;smil&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close_WPL</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_probestream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_probestream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Found valid WPL playlist"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

</unit>
