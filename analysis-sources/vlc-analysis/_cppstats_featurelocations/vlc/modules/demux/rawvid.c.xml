<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\rawvid.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_TEXT</name></cpp:macro> <cpp:value>N_("Frames per Second")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_LONGTEXT</name></cpp:macro> <cpp:value>N_("This is the desired frame rate when " "playing raw video streams. In the form 30000/1001 or 29.97")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_TEXT</name></cpp:macro> <cpp:value>N_("Width")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("This specifies the width in pixels of the raw " "video stream.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_TEXT</name></cpp:macro> <cpp:value>N_("Height")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_("This specifies the height in pixels of the raw " "video stream.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_TEXT</name></cpp:macro> <cpp:value>N_("Force chroma (Use carefully)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_LONGTEXT</name></cpp:macro> <cpp:value>N_("Force chroma. This is a four character string.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASPECT_RATIO_TEXT</name></cpp:macro> <cpp:value>N_("Aspect ratio")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASPECT_RATIO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Aspect ratio (4:3, 16:9). Default assumes square pixels." )</cpp:value></cpp:define>


<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"Raw Video"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Raw video demuxer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"rawvideo"</literal></argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"rawvid-fps"</literal></argument>, <argument>NULL</argument>, <argument>FPS_TEXT</argument>, <argument>FPS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"rawvid-width"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WIDTH_TEXT</argument>, <argument>WIDTH_LONGTEXT</argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"rawvid-height"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>HEIGHT_TEXT</argument>, <argument>HEIGHT_LONGTEXT</argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"rawvid-chroma"</literal></argument>, <argument>NULL</argument>, <argument>CHROMA_TEXT</argument>, <argument>CHROMA_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"rawvid-aspect-ratio"</literal></argument>, <argument>NULL</argument>,
<argument>ASPECT_RATIO_TEXT</argument>, <argument>ASPECT_RATIO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>pcr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_y4m</name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>

<struct>struct <name>preset_t</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u_fps_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u_fps_den</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u_ar_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u_ar_den</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>preset_t</name></name></type> <name><name>p_presets</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"sqcif"</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><name>VLC_CODEC_YV12</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qcif"</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><name>VLC_CODEC_YV12</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cif"</literal></expr>, <expr><literal type="number">352</literal></expr>, <expr><literal type="number">288</literal></expr>, <expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><name>VLC_CODEC_YV12</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"4cif"</literal></expr>, <expr><literal type="number">704</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><name>VLC_CODEC_YV12</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"16cif"</literal></expr>, <expr><literal type="number">1408</literal></expr>, <expr><literal type="number">1152</literal></expr>, <expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><name>VLC_CODEC_YV12</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yuv"</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><name>VLC_CODEC_YV12</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_width</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_height</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u_fps_num</name></decl>, <decl><type ref="prev"/><name>u_fps_den</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sar_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sar_den</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>preset_t</name></name> <modifier>*</modifier></type><name>p_preset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_y4m</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">9</literal></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"YUV4MPEG2"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_y4m</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>valid</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ext</name> <init>= <expr><call><name>strrchr</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_ext</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_ext</name><operator>++</operator></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_presets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_ext</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_ext</name></expr></argument>, <argument><expr><name><name>p_presets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_ext</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_preset</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_presets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>valid</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<label><name>valid</name>:</label>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_y4m</name></name> <operator>=</operator> <name>b_y4m</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>p_preset</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_width</name> <operator>=</operator> <name><name>p_preset</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_height</name> <operator>=</operator> <name><name>p_preset</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u_fps_num</name> <operator>=</operator> <name><name>p_preset</name><operator>-&gt;</operator><name>u_fps_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u_fps_den</name> <operator>=</operator> <name><name>p_preset</name><operator>-&gt;</operator><name>u_fps_den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sar_num</name> <operator>=</operator> <name><name>p_preset</name><operator>-&gt;</operator><name>u_ar_num</name></name> <operator>*</operator> <name><name>p_preset</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sar_den</name> <operator>=</operator> <name><name>p_preset</name><operator>-&gt;</operator><name>u_ar_den</name></name> <operator>*</operator> <name><name>p_preset</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name><name>p_preset</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>b_y4m</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>vlc_stream_ReadLine</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>psz</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_FRAC</name><parameter_list>( <parameter><type><name>key</name></type></parameter>, <parameter><type><name>num</name></type></parameter>, <parameter><type><name>den</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { psz_buf = strstr( psz+9, key );if( psz_buf ){char *end = strchr( psz_buf+1, ' ' );char *sep;if( end ) *end = '\0';sep = strchr( psz_buf+1, ':' );if( sep ){*sep = '\0';den = atoi( sep+1 );}else{den = 1;}num = atoi( psz_buf+2 );if( sep ) *sep = ':';if( end ) *end = ' ';} } while(0)</cpp:value></cpp:define>




















<expr_stmt><expr><call><name>READ_FRAC</name><argument_list>( <argument><expr><literal type="string">" W"</literal></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_FRAC</name><argument_list>( <argument><expr><literal type="string">" H"</literal></expr></argument>, <argument><expr><name>i_height</name></expr></argument>, <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_FRAC</name><argument_list>( <argument><expr><literal type="string">" F"</literal></expr></argument>, <argument><expr><name>u_fps_num</name></expr></argument>, <argument><expr><name>u_fps_den</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_FRAC</name><argument_list>( <argument><expr><literal type="string">" A"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READ_FRAC</name></cpp:undef>
<if_stmt><if>if<condition>( <expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_sar_num</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sar_den</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_buf</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>psz</name><operator>+</operator><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">" C"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_buf</name></expr> )</condition>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fcc</name></decl>;</decl_stmt> }</block> <decl><name><name>formats</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"420jpeg"</literal></expr>, <expr><name>VLC_CODEC_I420</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"420paldv"</literal></expr>, <expr><name>VLC_CODEC_I420</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"420"</literal></expr>, <expr><name>VLC_CODEC_I420</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"422"</literal></expr>, <expr><name>VLC_CODEC_I422</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"444"</literal></expr>, <expr><name>VLC_CODEC_I444</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mono"</literal></expr>, <expr><name>VLC_CODEC_GREY</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>bool</name></type> <name>b_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_end</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psz_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_buf</name></expr></argument>, <argument><expr><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fcc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_found</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unknown YUV4MPEG2 chroma type \"%s\""</literal></expr></argument>, <argument><expr><name>psz_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_end</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psz_end</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"rawvid-width"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tmp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_width</name> <operator>=</operator> <name>i_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"rawvid-height"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tmp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_height</name> <operator>=</operator> <name>i_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <call><name>var_CreateGetNonEmptyString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"rawvid-chroma"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_tmp</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid fourcc format/chroma specification %s"</literal>
<literal type="string">" expecting four characters eg, UYVY"</literal></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_chroma</name></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Forcing chroma to 0x%.8x (%4.4s)"</literal></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_chroma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_fps_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_fps_den</name></expr></argument>, <argument><expr><literal type="string">"rawvid-fps"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>u_fps_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u_fps_den</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sar_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sar_den</name></expr></argument>,
<argument><expr><literal type="string">"rawvid-aspect-ratio"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_sar_num</name> <operator>=</operator> <name>i_sar_den</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_width</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"width and height must be strictly positive."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>u_fps_num</name> <operator>||</operator> <operator>!</operator><name>u_fps_den</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid or no framerate specified."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_chroma</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid or no chroma specified."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_sar_num</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_sar_den</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_sar_num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sar_den</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_video</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_video</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument>,
<argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument>,
<argument><expr><name>i_sar_num</name></expr></argument>, <argument><expr><name>i_sar_den</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_video</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_video</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,
<argument><expr><name>u_fps_num</name></expr></argument>, <argument><expr><name>u_fps_den</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pcr</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_video</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_video</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pcr</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_video</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unsupported chroma 0x%.8x (%4.4s)"</literal></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_chroma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>dsc</name> <init>=
<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_video</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dsc</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>dsc</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pitch</name> <init>= <expr><operator>(</operator><name>i_width</name> <operator>+</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator>
<operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lines</name> <init>= <expr><operator>(</operator><name>i_height</name> <operator>+</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator>
<operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>+=</operator> <name>pitch</name> <operator>*</operator> <name>lines</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_video</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pcr</name> <init>= <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pcr</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>i_pcr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_y4m</name></name></expr> )</condition>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>b</name> <operator>==</operator> <literal type="number">0x0a</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>i_pcr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_video</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pcr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i_bps</name> <init>= <expr><literal type="number">8LL</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_divider_num</name></name> <operator>/</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_divider_den</name></name></expr></init></decl>;</decl_stmt>


<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_bps</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
