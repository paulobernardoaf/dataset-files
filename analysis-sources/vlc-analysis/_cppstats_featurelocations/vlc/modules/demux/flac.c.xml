<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\flac.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xiph_metadata.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/flac.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"FLAC demuxer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">155</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"flac"</literal></argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseHeaders</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_byte_offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>flac_seekpoint_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_next_block_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_current_block</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>flac_stream_info</name></name></type> <name>stream_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_stream_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_data_pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_seekpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flac_seekpoint_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>seekpoint</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_title_seekpoints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_title_seekpoints</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_attachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cover_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cover_score</name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_PACKET_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_MAX_PREROLL</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_MAX_SLOW_PREROLL</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(45)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'f'</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'L'</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="char">'a'</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>!=</operator><literal type="char">'C'</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>demux_IsContentType</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"audio/flac"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"this doesn't look like a flac stream, "</literal>
<literal type="string">"continuing anyway"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_start</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_seekpoints</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title_seekpoints</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_FLAC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>ParseHeaders</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name> <operator>=</operator> <call><name>demux_PacketizerNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"flac"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_idx</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_url</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"attachment://%s"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>vlc_meta_ArtworkURL</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title_seekpoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_seekpoint_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title_seekpoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_seekpoints</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title_seekpoints</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>demux_PacketizerDestroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GetPacketizedBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>flac_stream_info</name></name> <modifier>*</modifier></type><name>streaminfo</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_current_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name><name>p_packetizer</name><operator>-&gt;</operator><name>pf_packetize</name></name><argument_list>( <argument><expr><name>p_packetizer</name></expr></argument>, <argument><expr><name>pp_current_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <name>FLAC_HEADER_SIZE_MAX</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>flac_header_info</name></name></type> <name>headerinfo</name> <init>= <expr><block>{ <expr><operator>.</operator><name>i_pts</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>FLAC_ParseSyncInfo</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>streaminfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headerinfo</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>headerinfo</name><operator>.</operator><name>i_pts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FlushPacketizer</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_packetizer</name><operator>-&gt;</operator><name>pf_flush</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_packetizer</name><operator>-&gt;</operator><name>pf_flush</name></name><argument_list>( <argument><expr><name>p_packetizer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_out</name></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>(</operator><name>p_block_out</name> <operator>=</operator> <call><name><name>p_packetizer</name><operator>-&gt;</operator><name>pf_packetize</name></name><argument_list>( <argument><expr><name>p_packetizer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Reset</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FlushPacketizer</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RefineSeek</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>i_bytemicrorate</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>i_lowpos</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_highpos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frame_size</name> <init>= <expr><name>FLAC_FRAME_SIZE_MIN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_canfastseek</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_FASTSEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_canfastseek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_start_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><name>b_found</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FlushPacketizer</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_block_in</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><name>p_block_out</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block_in</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>p_block_in</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_frame_size</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block_out</name> <operator>=</operator> <call><name>GetPacketizedBlock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_block_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block_out</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_block_in</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name>i_frame_size</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_frame_size</name> <operator>=</operator> <name><name>p_block_out</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>&gt;=</operator> <name>i_time</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_diff</name> <init>= <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name>i_time</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_diff</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i_diff</name> <operator>/</operator> <name>i_bytemicrorate</name> <operator>&gt;</operator> <name>i_frame_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_highpos</name> <operator>=</operator> <name>i_start_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_start_pos</name> <operator>-=</operator> <operator>(</operator> <name>i_diff</name> <operator>/</operator> <name>i_bytemicrorate</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_start_pos</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>i_start_pos</name></expr></argument>, <argument><expr><name>i_lowpos</name> <operator>+</operator> <name>i_frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>b_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_diff</name> <init>= <expr><name>i_time</name> <operator>-</operator> <name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_diff</name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>b_canfastseek</name><operator>)</operator></expr> ?</condition><then> <expr><name>FLAC_MAX_PREROLL</name></expr> </then><else>: <expr><name>FLAC_MAX_SLOW_PREROLL</name></expr></else></ternary><operator>)</operator> <operator>&amp;&amp;</operator>
<name>i_diff</name> <operator>/</operator> <name>i_bytemicrorate</name> <operator>&gt;</operator> <name>i_frame_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_lowpos</name> <operator>=</operator> <name>i_start_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_start_pos</name> <operator>+=</operator> <operator>(</operator> <name>i_diff</name> <operator>/</operator> <name>i_bytemicrorate</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_start_pos</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>i_start_pos</name></expr></argument>, <argument><expr><name>i_highpos</name> <operator>-</operator> <name>i_frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>b_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block_out</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block_in</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_found</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_highpos</name> <operator>&lt;</operator> <name>i_lowpos</name> <operator>||</operator> <name>i_highpos</name> <operator>-</operator> <name>i_lowpos</name> <operator>&lt;</operator> <name>i_frame_size</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>!=</operator> <call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_start_pos</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><name>b_found</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>FLAC_PACKET_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_eof</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_start</name></name></expr> ?</condition><then> <expr><name>VLC_TICK_0</name></expr> </then><else>: <expr><name>VLC_TICK_INVALID</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>(</operator><name>p_block_out</name> <operator>=</operator> <call><name>GetPacketizedBlock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_block</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<while>while<condition>( <expr><name>p_block_out</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_block_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block_out</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><name>b_eof</name></expr> ?</condition><then> <expr><name>VLC_DEMUXER_EOF</name></expr> </then><else>: <expr><name>VLC_DEMUXER_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>ControlGetLength</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>flac_seekpoint_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>i_byte_offset</name></name> <operator>&lt;=</operator> <name>i_size</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>flac_seekpoint_t</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>n</name><operator>-&gt;</operator><name>i_byte_offset</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_byte_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>+</operator> <operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>i_time_offset</name></name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i_size</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>i_byte_offset</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>i_byte_offset</name></name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>i_byte_offset</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i_length</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>ControlGetTime</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlSetTime</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_seekable</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_seekable</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><call><name>ControlGetLength</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_stream_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_stream_size</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>i_bytemicrorate</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name>i_length</name> <operator>/</operator> <operator>(</operator><name>i_stream_size</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_bytemicrorate</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_lower</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_upper</name> <init>= <expr><name>i_stream_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_start_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_time_offset</name> <operator>&lt;=</operator> <name>i_time</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i_lower</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>i_byte_offset</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_upper</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>i_byte_offset</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_start_pos</name> <operator>=</operator> <name>i_lower</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_start_pos</name> <operator>=</operator> <name>i_time</name> <operator>/</operator> <name>i_bytemicrorate</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>!=</operator> <call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_start_pos</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>RefineSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name>i_bytemicrorate</name></expr></argument>, <argument><expr><name>i_lower</name></expr></argument>, <argument><expr><name>i_upper</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Reset</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_GET_META</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_meta_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_HAS_UNSUPPORTED_META</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_GET_LENGTH</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>ControlGetLength</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_SET_TIME</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><call><name>ControlSetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_SET_POSITION</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>f</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><call><name>ControlGetLength</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>ControlSetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_length</name> <operator>*</operator> <name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name>f</name> <operator>*</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Reset</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_GET_TIME</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>ControlGetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_GET_POSITION</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><call><name>ControlGetLength</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>current</name> <init>= <expr><call><name>ControlGetTime</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>current</name> <operator>&lt;=</operator> <name>i_length</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>current</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_length</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_GET_ATTACHMENTS</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attach</name> <init>=
<expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_attachment_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_attach</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_attachment_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>ppp_attach</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppp_attach</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>vlc_input_attachment_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_GET_TITLE_INFO</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_title</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_title_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_title_offset</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_seekpoint_offset</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_seekpoints</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppp_title</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_title_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>ppp_title</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>p_title</name> <init>= <expr><operator>(</operator><operator>*</operator><name>ppp_title</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <call><name>vlc_input_title_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_title</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>ppp_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_seekpoints</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seekpoint_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>(<argument><expr><name>p_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>ppp_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title_seekpoints</name></name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_title</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_title</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_seekpoint_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title_seekpoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>pi_title_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_seekpoint_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_SET_TITLE</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_title</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_title</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_SET_SEEKPOINT</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_seekpoint</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_seekpoints</name></name> <operator>||</operator> <name>i_seekpoint</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title_seekpoints</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ControlSetTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title_seekpoints</name><index>[<expr><name>i_seekpoint</name></expr>]</index></name><operator>-&gt;</operator><name>i_time_offset</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">8</literal><operator>*</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<enum>enum
<block>{
<decl><name>META_STREAMINFO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>META_SEEKTABLE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>META_COMMENT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>META_PICTURE</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>Get24bBE</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ParseSeekTable</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_sample_rate</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ParseComment</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ParsePicture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseHeaders</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_last</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>flac_seekpoint_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xmalloc</name><argument_list>( <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_byte_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"fLaC"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><operator>!</operator><name>b_last</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b_last</name> <operator>=</operator> <name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>Get24bBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>META_STREAMINFO</name> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>!=</operator> <name>FLAC_STREAMINFO_SIZE</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid size %d for a STREAMINFO metadata block"</literal></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>FLAC_STREAMINFO_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name>FLAC_STREAMINFO_SIZE</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>FLAC_STREAMINFO_SIZE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"failed to read STREAMINFO metadata block"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name>FLAC_STREAMINFO_SIZE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FLAC_ParseStreamInfo</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>bits_per_sample</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>sample_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>total_samples</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>META_SEEKTABLE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>+</operator><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><name>i_len</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ParseSeekTable</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>META_COMMENT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>+</operator><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><name>i_len</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ParseComment</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>META_PICTURE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>+</operator><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><name>i_len</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ParsePicture</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>+</operator><name>i_len</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal><operator>+</operator><name>i_len</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseSeekTable</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_sample_rate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flac_seekpoint_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sample_rate</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>i_data</name><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>/</operator><literal type="number">18</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i_sample</name> <init>= <expr><call><name>GetQWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">18</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sample</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_sample</name> <operator>&gt;=</operator> <name>INT64_MAX</name> <operator>||</operator>
<call><name>GetQWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">18</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>FLAC_STREAMINFO_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>i_sample</name></expr></argument>, <argument><expr><name>i_sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_byte_offset</name></name> <operator>=</operator> <call><name>GetQWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">18</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>i_time_offset</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>i_byte_offset</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>i_byte_offset</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>s</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseComment</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vorbis_ParseComment</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_data</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_score</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_idx</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_seekpoints</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_title_seekpoints</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParsePicture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attachment</name> <init>= <expr><call><name>ParseFlacPicture</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_score</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cover_idx</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_attachment</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachments</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>, <argument><expr><name>p_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
