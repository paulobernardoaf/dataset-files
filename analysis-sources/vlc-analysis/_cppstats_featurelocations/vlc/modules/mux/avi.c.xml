<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\mux\avi.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_boxes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/avi/bitmapinfoheader.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-avi-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_ARTIST_TEXT</name></cpp:macro> <cpp:value>N_("Artist")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_DATE_TEXT</name></cpp:macro> <cpp:value>N_("Date")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_GENRE_TEXT</name></cpp:macro> <cpp:value>N_("Genre")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_COPYRIGHT_TEXT</name></cpp:macro> <cpp:value>N_("Copyright")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_COMMENT_TEXT</name></cpp:macro> <cpp:value>N_("Comment")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_NAME_TEXT</name></cpp:macro> <cpp:value>N_("Name")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_SUBJECT_TEXT</name></cpp:macro> <cpp:value>N_("Subject")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_ENCODER_TEXT</name></cpp:macro> <cpp:value>N_("Encoder")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_KEYWORDS_TEXT</name></cpp:macro> <cpp:value>N_("Keywords")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"AVI muxer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_MUX</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout mux"</literal></argument>, <argument><literal type="number">5</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"avi"</literal></argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"artist"</literal></argument>, <argument>NULL</argument>, <argument>CFG_ARTIST_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"date"</literal></argument>, <argument>NULL</argument>, <argument>CFG_DATE_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"genre"</literal></argument>, <argument>NULL</argument>, <argument>CFG_GENRE_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"copyright"</literal></argument>, <argument>NULL</argument>, <argument>CFG_COPYRIGHT_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"comment"</literal></argument>, <argument>NULL</argument>, <argument>CFG_COMMENT_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"name"</literal></argument>, <argument>NULL</argument>, <argument>CFG_NAME_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"subject"</literal></argument>, <argument>NULL</argument>, <argument>CFG_SUBJECT_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"encoder"</literal></argument>,
<argument><literal type="string">"VLC Media Player - "</literal> VERSION_MESSAGE</argument>,
<argument>CFG_ENCODER_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"keywords"</literal></argument>, <argument>NULL</argument>, <argument>CFG_KEYWORDS_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>avi_stream_s</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fcc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_frames</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_totalsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>f_fps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>p_bih</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_bih</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>p_wf</name></decl>;</decl_stmt>

}</block></struct></type> <name>avi_stream_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_idx1_entry_s</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>fcc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_length</name></decl>;</decl_stmt>

}</block></struct></type> <name>avi_idx1_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_idx1_s</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_entry_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_entry_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_idx1_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
}</block></struct></type> <name>avi_idx1_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_write_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>i_movi_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_stream_t</name></type> <name><name>stream</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_idx1_t</name></type> <name>idx1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>i_idx1_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_mux_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HDR_BASE_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIF_HASINDEX</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIF_ISINTERLEAVED</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIF_TRUSTCKTYPE</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIIF_KEYFRAME</name></cpp:macro> <cpp:value>0x00000010L</cpp:value></cpp:define> 


<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>avi_HeaderCreateRIFF</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>avi_HeaderCreateidx1</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetFCC</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fcc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"AVI muxer opened"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_mux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_video</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_max</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_max</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>avi_idx1_entry_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_write_header</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_addstream</name></name> <operator>=</operator> <name>AddStream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_delstream</name></name> <operator>=</operator> <name>DelStream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_mux</name></name> <operator>=</operator> <name>Mux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_hdr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_idx1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"AVI muxer closed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_idx1</name> <operator>=</operator> <call><name>avi_HeaderCreateidx1</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_idx1</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_idx1_size</name></name> <operator>=</operator> <name><name>p_idx1</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_idx1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_idx1_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<for>for<control>( <init><expr><name>i_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_frames</name></name> <operator>/</operator>
<operator>(</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>/</operator>
<operator>(</operator><name>float</name><operator>)</operator><name>CLOCK_FREQ</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator>
<literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1000000</literal> <operator>*</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_totalsize</name></name> <operator>/</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_duration</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"stream[%d] duration:%"</literal><name>PRId64</name><literal type="string">" totalsize:%"</literal><name>PRId64</name>
<literal type="string">" frames:%d fps:%f KiB/s:%d"</literal></expr></argument>,
<argument><expr><name>i_stream</name></expr></argument>,
<argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_totalsize</name></name></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_frames</name></name></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>f_fps</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_bitrate</name></name><operator>/</operator><literal type="number">1024</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_hdr</name> <operator>=</operator> <call><name>avi_HeaderCreateRIFF</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>p_hdr</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sout_AccessOutSeek</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_hdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>MUX_CAN_ADD_STREAM_WHILE_MUXING</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>MUX_GET_MIME</name></expr>:</case>
<expr_stmt><expr><name>ppsz</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"video/avi"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>&gt;=</operator> <literal type="number">100</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"too many streams"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adding input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>int</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name><operator>)</operator> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fcc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fcc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fcc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_bih</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>p_wf</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof> <operator>+</operator>
<name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_wf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name><operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_A52</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MP3</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_MPEGLAYER3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_WMA1</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_WMA1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_WMA2</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_WMA2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_WMAP</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_WMAP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_WMAL</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_WMAL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_ALAW</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_ALAW</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MULAW</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_MULAW</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_PCM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name><operator>=</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator> <operator>(</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>*</operator>
<name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>*</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S16L</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_PCM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name><operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator> <operator>(</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>*</operator>
<name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>*</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S24L</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_PCM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name><operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator> <operator>(</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>*</operator>
<name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>*</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S32L</name></expr>:</case>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_PCM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name><operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator> <operator>(</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>*</operator>
<name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>*</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_wf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name></name> <operator>=</operator> <name>p_wf</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>=</operator> <name>VIDEO_ES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fcc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fcc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fcc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_video</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_video</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name></name> <operator>=</operator> <call><name>CreateBitmapInfoHeader</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_bih</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>VLC_EGENERIC</name> <operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_totalsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>VLC_SUCCESS</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"removing input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PrepareSamples</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>avi_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_frames</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_header_length</name> <init>=
<expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biSize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><operator>*</operator><name>pp_block</name></expr></argument>, <argument><expr><name>i_header_length</name></expr></argument>,
<argument><expr><name><operator>(</operator><operator>*</operator><name>pp_block</name><operator>)</operator><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pp_block</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pp_block</name><operator>)</operator><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_header_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>==</operator> <name>BI_RGB</name> <operator>&amp;&amp;</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>==</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>!=</operator> <literal type="number">0xFF0000</literal> <operator>||</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>!=</operator> <literal type="number">0x0000FF</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>rshift</name> <init>= <expr><call><name>ctz</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_rmask</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>gshift</name> <init>= <expr><call><name>ctz</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_gmask</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bshift</name> <init>= <expr><call><name>ctz</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bmask</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pp_block</name><operator>)</operator><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><operator>(</operator><operator>*</operator><name>pp_block</name><operator>)</operator><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bmask</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>bshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_gmask</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>gshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_rmask</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>rshift</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_write_header</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"writing header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_hdr</name> <init>= <expr><call><name>avi_HeaderCreateRIFF</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_hdr</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_hdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_write_header</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_stream</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_sys</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_fifo</name> <operator>=</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_fifo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <call><name>block_FifoCount</name><argument_list>( <argument><expr><name>p_fifo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_idx1_entry_t</name> <modifier>*</modifier></type><name>p_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_FifoGet</name><argument_list>( <argument><expr><name>p_fifo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>block_FifoCount</name><argument_list>( <argument><expr><name>p_fifo</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><call><name>block_FifoShow</name><argument_list>( <argument><expr><name>p_fifo</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_next</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>PrepareSamples</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>fmt</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_count</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_frames</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"argg length &lt; 0 l"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_totalsize</name></name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_count</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_idx</name><operator>-&gt;</operator><name>fcc</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fcc</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_MASK</name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>AVIIF_KEYFRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_size</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_length</name></name><operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_count</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_max</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_max</name></name> <operator>+=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_max</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>avi_idx1_entry_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_data</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetFCC</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>p_data</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_data</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_size</name></name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_count</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

</block_content>}</block></for>
<return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_BOX_ENTER</name><parameter_list>( <parameter><type><name>fcc</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>int i_datasize_offset; bo_add_fourcc( p_bo, fcc ); i_datasize_offset = p_bo-&gt;b-&gt;i_buffer; bo_add_32le( p_bo, 0 )</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_BOX_ENTER_LIST</name><parameter_list>( <parameter><type><name>fcc</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>AVI_BOX_ENTER( "LIST" ); bo_add_fourcc( p_bo, fcc )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_BOX_EXIT</name><parameter_list>( <parameter><type><name>i_err</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( p_bo-&gt;b-&gt;i_buffer&amp;0x01 ) bo_add_8( p_bo, 0 ); bo_set_32le( p_bo, i_datasize_offset, p_bo-&gt;b-&gt;i_buffer - i_datasize_offset - 4 ); return( i_err );</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type> <name>avi_HeaderAdd_avih</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>,
<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_stream_t</name> <modifier>*</modifier></type><name>p_video</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_microsecperframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_maxbytespersec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_totalframes</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AVI_BOX_ENTER</name><argument_list>( <argument><expr><literal type="string">"avih"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_video</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_video</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_video</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_video</name><operator>-&gt;</operator><name>i_frames</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_video</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_microsecperframe</name> <operator>=</operator>
<operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">1000000</literal> <operator>/</operator>
<operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_video</name></name></expr>]</index></name><operator>.</operator><name>f_fps</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_totalframes</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_video</name></name></expr>]</index></name><operator>.</operator><name>i_frames</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"avi file without video track isn't a good idea..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_microsecperframe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_totalframes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for<control>( <init><expr><name>i_stream</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator><expr><name>i_maxbytespersec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>.</operator><name>i_duration</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_maxbytespersec</name> <operator>+=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>.</operator><name>i_totalsize</name> <operator>/</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>.</operator><name>i_duration</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>i_microsecperframe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>i_maxbytespersec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>AVIF_TRUSTCKTYPE</name> <operator>|</operator>
<name>AVIF_HASINDEX</name> <operator>|</operator>
<name>AVIF_ISINTERLEAVED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>i_totalframes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><name>p_video</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_video</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_video</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AVI_BOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>avi_HeaderAdd_strh</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>avi_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AVI_BOX_ENTER</name><argument_list>( <argument><expr><literal type="string">"strh"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="string">"vids"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="string">"DIB "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <literal type="number">1000</literal> <operator>*</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_frames</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_rate</name></decl>, <decl><type ref="prev"/><name>i_scale</name></decl>, <decl><type ref="prev"/><name>i_samplesize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_samplesize</name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_samplesize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_scale</name> <operator>=</operator> <name>i_samplesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_rate</name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_samplesize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_scale</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_rate</name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="string">"auds"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>i_scale</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>i_rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_frames</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>i_samplesize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>AVI_BOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avi_HeaderAdd_strf</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>avi_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AVI_BOX_ENTER</name><argument_list>( <argument><expr><literal type="string">"strf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_wf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biSize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biPlanes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biSizeImage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biXPelsPerMeter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biYPelsPerMeter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrImportant</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_bih</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument> )</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_bih</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>AVI_BOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avi_HeaderAdd_strl</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>avi_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AVI_BOX_ENTER_LIST</name><argument_list>( <argument><expr><literal type="string">"strl"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avi_HeaderAdd_strh</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avi_HeaderAdd_strf</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_BOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avi_HeaderAdd_meta</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>psz_meta</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>psz_data</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name>psz_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AVI_BOX_ENTER</name><argument_list>( <argument><expr><name>psz_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>psz</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bo_add_8</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><operator>*</operator><name>psz</name><operator>++</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVI_BOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avi_HeaderAdd_INFO</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_META</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>fourcc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>psz = var_InheritString( p_mux, SOUT_CFG_PREFIX var );if ( psz ){avi_HeaderAdd_meta( p_bo, fourcc, psz );free( psz );}</cpp:value></cpp:define>







<expr_stmt><expr><call><name>AVI_BOX_ENTER_LIST</name><argument_list>( <argument><expr><literal type="string">"INFO"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>APPLY_META</name><argument_list>( <argument><literal type="string">"artist"</literal></argument>, <argument><literal type="string">"IART"</literal></argument>)</argument_list></macro>
<macro><name>APPLY_META</name><argument_list>( <argument><literal type="string">"comment"</literal></argument>, <argument><literal type="string">"ICMT"</literal></argument>)</argument_list></macro>
<macro><name>APPLY_META</name><argument_list>( <argument><literal type="string">"copyright"</literal></argument>,<argument><literal type="string">"ICOP"</literal></argument>)</argument_list></macro>
<macro><name>APPLY_META</name><argument_list>( <argument><literal type="string">"date"</literal></argument>, <argument><literal type="string">"ICRD"</literal></argument>)</argument_list></macro>
<macro><name>APPLY_META</name><argument_list>( <argument><literal type="string">"genre"</literal></argument>, <argument><literal type="string">"IGNR"</literal></argument>)</argument_list></macro>
<macro><name>APPLY_META</name><argument_list>( <argument><literal type="string">"name"</literal></argument>, <argument><literal type="string">"INAM"</literal></argument>)</argument_list></macro>
<macro><name>APPLY_META</name><argument_list>( <argument><literal type="string">"keywords"</literal></argument>, <argument><literal type="string">"IKEY"</literal></argument>)</argument_list></macro>
<macro><name>APPLY_META</name><argument_list>( <argument><literal type="string">"subject"</literal></argument>, <argument><literal type="string">"ISBJ"</literal></argument>)</argument_list></macro>
<macro><name>APPLY_META</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="string">"ISFT"</literal></argument>)</argument_list></macro>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APPLY_META</name></cpp:undef>

<expr_stmt><expr><call><name>AVI_BOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>avi_HeaderCreateRIFF</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_junk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bo_t</name></type> <name>bo</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_riffsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_hdrllistsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_hdrldatastart</name></decl>;</decl_stmt>
}</block> <decl><name>offsets</name></decl>;</struct>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>HDR_BASE_SIZE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offsets</name><operator>.</operator><name>i_riffsize</name></name> <operator>=</operator> <name><name>bo</name><operator>.</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0xEFBEADDE</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"AVI "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"LIST"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>offsets</name><operator>.</operator><name>i_hdrllistsize</name></name> <operator>=</operator> <name><name>bo</name><operator>.</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0xEFBEADDE</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"hdrl"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offsets</name><operator>.</operator><name>i_hdrldatastart</name></name> <operator>=</operator> <name><name>bo</name><operator>.</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avi_HeaderAdd_avih</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>avi_HeaderAdd_strl</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>int</name></type> <name>i_align</name> <init>= <expr><operator>(</operator> <operator>(</operator> <name><name>bo</name><operator>.</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">0xE</literal> <operator>)</operator> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0xF</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_junk</name> <operator>=</operator> <name>i_align</name> <operator>-</operator> <name><name>bo</name><operator>.</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"JUNK"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_junk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>i_junk</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>bo_set_32le</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>offsets</name><operator>.</operator><name>i_hdrllistsize</name></name></expr></argument>,
<argument><expr><name><name>bo</name><operator>.</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>offsets</name><operator>.</operator><name>i_hdrldatastart</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avi_HeaderAdd_INFO</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"LIST"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_size</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"movi"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bo_set_32le</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>offsets</name><operator>.</operator><name>i_riffsize</name></name></expr></argument>, <argument><expr><name><name>bo</name><operator>.</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">8</literal>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_size</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_idx1_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <name><name>bo</name><operator>.</operator><name>b</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>avi_HeaderCreateidx1</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_idx1_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bo_t</name></type> <name>bo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_idx1_size</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_count</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i_idx1_size</name> <operator>||</operator> <operator>!</operator><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_idx1_size</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>bo</name><operator>.</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_idx1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"idx1"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_idx1_size</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return<expr><operator>(</operator> <name><name>bo</name><operator>.</operator><name>b</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
