<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\mux\av1_pack.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_AV1_PACK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_AV1_PACK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/av1_obu.h"</cpp:file></cpp:include>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type><name>AV1_Pack_Sample</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AV1_OBU_iterator_ctx_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV1_OBU_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_obu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>i_obu</name></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>AV1_OBU_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_obu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_obu</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<switch>switch<condition>(<expr><call><name>AV1_OBUGetType</name><argument_list>(<argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<case>case <expr><name>AV1_OBU_TEMPORAL_DELIMITER</name></expr>:</case>
<case>case <expr><name>AV1_OBU_PADDING</name></expr>:</case>
<case>case <expr><name>AV1_OBU_REDUNDANT_FRAME_HEADER</name></expr>:</case>
<case>case <expr><name>AV1_OBU_TILE_LIST</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><name>p_obu</name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_offset</name> <operator>&lt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name> <operator>-</operator> <name>i_obu</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_obu</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_obu</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_obu</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_obu</name><index>[<expr><name>i_obu</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_obu</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>AV1_OBU_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_obu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>p_obu</name> <operator>&amp;&amp;</operator> <call><name>AV1_OBUHasSizeField</name><argument_list>(<argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_offset</name> <init>= <expr><name>p_obu</name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_header</name> <init>= <expr><ternary><condition><expr><call><name>AV1_OBUHasExtensionField</name><argument_list>(<argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>AV1_OBUSize</name><argument_list>(<argument><expr><name>p_obu</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i_len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_header</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_header</name> <operator>+</operator> <name>i_len</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name> <operator>-</operator> <name>i_header</name> <operator>-</operator> <name>i_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFD</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
