<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\mux\mpeg\ps.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/mpeg/timestamps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_iso_lang.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTS_TEXT</name></cpp:macro> <cpp:value>N_("DTS delay (ms)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Delay the DTS (decoding time " "stamps) and PTS (presentation timestamps) of the data in the " "stream, compared to the SCRs. This allows for some buffering inside " "the client decoder.")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PES_SIZE_TEXT</name></cpp:macro> <cpp:value>N_("PES maximum size")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PES_SIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the maximum allowed PES ""size when producing the MPEG PS streams.")</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-ps-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"PS muxer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"MPEG-PS"</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_MUX</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout mux"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"ps"</literal></argument>, <argument><literal type="string">"mpeg1"</literal></argument>, <argument><literal type="string">"dvd"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"dts-delay"</literal></argument>, <argument><literal type="number">200</literal></argument>, <argument>DTS_TEXT</argument>,
<argument>DTS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"pes-max-size"</literal></argument>, <argument>PES_PAYLOAD_SIZE_MAX</argument>,
<argument>PES_SIZE_TEXT</argument>, <argument>PES_SIZE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MuxWritePackHeader</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MuxWriteSystemHeader</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MuxWritePSM</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>StreamIdInit</name> <parameter_list>( <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_range</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>StreamIdGet</name> <parameter_list>( <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_id_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_id_max</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>StreamIdRelease</name> <parameter_list>( <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_id_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_id</name></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>ps_stream_s</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_max_buff_size</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lang</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl>;</decl_stmt>

}</block></struct></type> <name>ps_stream_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>bool</name></type> <name><name>stream_id_mpga</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name><name>stream_id_mpgv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name><name>stream_id_a52</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name><name>stream_id_spu</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name><name>stream_id_dts</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name><name>stream_id_lpcm</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_audio_bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_video_bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pes_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_system_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_rate_bound</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_instant_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_instant_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_instant_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_mpeg2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pes_max_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_psm_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>crc32_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_mux_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"dts-delay"</literal></expr>, <expr><literal type="string">"pes-max-size"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Open"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_addstream</name></name> <operator>=</operator> <name>AddStream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_delstream</name></name> <operator>=</operator> <name>DelStream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_mux</name></name> <operator>=</operator> <name>Mux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_mux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>StreamIdInit</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_a52</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StreamIdInit</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_dts</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StreamIdInit</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_mpga</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StreamIdInit</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_mpgv</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StreamIdInit</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_lpcm</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StreamIdInit</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_spu</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_audio_bound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_video_bound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_system_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_psm_version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_bitrate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate_bound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mpeg2</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument>, <argument><expr><literal type="string">"mpeg1"</literal></expr></argument> )</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"dts-delay"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_delay</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pes-max-size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_max_size</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mpeg2</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x800000</literal></expr>;</init> <condition><expr><name>j</name> <operator>!=</operator> <literal type="number">0x80000000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>k</name> <operator>^</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x04c11db7</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crc32_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Close"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_end</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_end</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_end</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>p_end</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_end</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>p_end</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xb9</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>MUX_CAN_ADD_STREAM_WHILE_MUXING</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>MUX_GET_MIME</name></expr>:</case>
<expr_stmt><expr><name>ppsz</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"video/mpeg"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ps_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adding input codec=%4.4s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_stream</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ps_stream_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x81</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<switch>switch<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_MP2V</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_MP1V</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator>
<call><name>StreamIdGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_mpgv</name></name></expr></argument>, <argument><expr><literal type="number">0xe0</literal></expr></argument>, <argument><expr><literal type="number">0xef</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator>
<call><name>StreamIdGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_mpgv</name></name></expr></argument>, <argument><expr><literal type="number">0xe0</literal></expr></argument>, <argument><expr><literal type="number">0xef</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator>
<call><name>StreamIdGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_mpgv</name></name></expr></argument>, <argument><expr><literal type="number">0xe0</literal></expr></argument>, <argument><expr><literal type="number">0xef</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x1b</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_DVD_LPCM</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator>
<literal type="number">0xbd00</literal> <operator>|</operator> <call><name>StreamIdGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_lpcm</name></name></expr></argument>, <argument><expr><literal type="number">0xa0</literal></expr></argument>, <argument><expr><literal type="number">0xaf</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator>
<literal type="number">0xbd00</literal> <operator>|</operator> <call><name>StreamIdGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_dts</name></name></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0x8f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator>
<literal type="number">0xbd00</literal> <operator>|</operator> <call><name>StreamIdGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_a52</name></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x87</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MPGA</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator>
<call><name>StreamIdGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_mpga</name></name></expr></argument>, <argument><expr><literal type="number">0xc0</literal></expr></argument>, <argument><expr><literal type="number">0xcf</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MP4A</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator>
<call><name>StreamIdGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_mpga</name></name></expr></argument>, <argument><expr><literal type="number">0xc0</literal></expr></argument>, <argument><expr><literal type="number">0xcf</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_SPU</name></expr>:</case>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator>
<literal type="number">0xbd00</literal> <operator>|</operator> <call><name>StreamIdGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_spu</name></name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0x3f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_audio_bound</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_max_buff_size</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_video_bound</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_max_buff_size</name></name> <operator>=</operator> <literal type="number">400</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt> 

</block_content>}</block></if>
<else>else
<block>{<block_content> 
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_max_buff_size</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_bitrate</name></name> <operator>+=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>+</operator> <literal type="number">1000</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate_bound</name></name> <operator>+=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <literal type="number">50</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_psm_version</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type><name>pl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_1</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_2B</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_1</name></name></expr></argument>, <argument><expr><literal type="string">"??"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_2T</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>pl</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_1</name></name></expr></argument>, <argument><expr><literal type="string">"??"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">" - lang=%c%c%c"</literal></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ps_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>=<expr><operator>(</operator><name>ps_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"removing input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>
<expr_stmt><expr><call><name>StreamIdRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_mpgv</name></name></expr></argument>, <argument><expr><literal type="number">0xe0</literal></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_DVD_LPCM</name></expr>:</case>
<expr_stmt><expr><call><name>StreamIdRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_lpcm</name></name></expr></argument>, <argument><expr><literal type="number">0xa0</literal></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>
<expr_stmt><expr><call><name>StreamIdRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_dts</name></name></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>
<expr_stmt><expr><call><name>StreamIdRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_a52</name></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MPGA</name></expr>:</case>
<expr_stmt><expr><call><name>StreamIdRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_mpga</name></name></expr></argument>, <argument><expr><literal type="number">0xc0</literal></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_SPU</name></expr>:</case>
<expr_stmt><expr><call><name>StreamIdRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_id_spu</name></name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_audio_bound</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_video_bound</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_bitrate</name></name> <operator>-=</operator> <operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>+</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate_bound</name></name> <operator>-=</operator> <operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <literal type="number">50</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_psm_version</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ps_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name> <init>= <expr><call><name>sout_MuxGetStream</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dts</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_stream</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_input</name> <operator>=</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <operator>(</operator><name>ps_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_count</name></name> <operator>%</operator> <literal type="number">30</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_mindts</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>ps_stream_t</name> <modifier>*</modifier></type><name>p_s</name> <init>= <expr><operator>(</operator><name>ps_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_s</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_mindts</name> <operator>&gt;</operator> <name><name>p_s</name><operator>-&gt;</operator><name>i_dts</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_mindts</name> <operator>=</operator> <name><name>p_s</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_mindts</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_dts</name></name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_size</name></name> <operator>&amp;&amp;</operator>
<name>i_dts</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_dts</name></name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_instant_bitrate</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_size</name></name> <operator>*</operator> <literal type="number">8000000</literal> <operator>/</operator>
<operator>(</operator> <name>i_dts</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_dts</name></name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_bitrate</name></name> <operator>+=</operator> <name>i_instant_bitrate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_bitrate</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MuxWritePackHeader</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_ps</name></expr></argument>, <argument><expr><name>i_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_count</name></name> <operator>%</operator> <literal type="number">300</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pk</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MuxWriteSystemHeader</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_ps</name></expr></argument>, <argument><expr><name>i_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>p_pk</name> <operator>=</operator> <name>p_ps</name></expr>;</init> <condition><expr><name>p_pk</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_pk</name> <operator>=</operator> <name><name>p_pk</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pk</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_HEADER</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mpeg2</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_count</name></name> <operator>%</operator> <literal type="number">300</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MuxWritePSM</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_ps</name></expr></argument>, <argument><expr><name>i_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_FifoGet</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EStoPES</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mpeg2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_max_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_ps</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>p_data</name> <operator>=</operator> <name>p_ps</name></expr>;</init> <condition><expr><name>p_data</name></expr>;</condition> <incr><expr><name>p_data</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_size</name></name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_ps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pes_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>StreamIdInit</name><parameter_list>( <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_range</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_range</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>StreamIdGet</name><parameter_list>( <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_id_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_id_max</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>i_id_max</name> <operator>-</operator> <name>i_id_min</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>i_id_min</name> <operator>+</operator> <name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>StreamIdRelease</name><parameter_list>( <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_id_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>id</name><index>[<expr><name>i_id</name> <operator>-</operator> <name>i_id_min</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MuxWritePackHeader</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bits_buffer_t</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_scr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_mux_rate</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_scr</name> <operator>=</operator> <call><name>TO_SCALE_NZ</name><argument_list>(<argument><expr><name>i_dts</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_hdr</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">18</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_hdr</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_hdr</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_initwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0x01ba</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i_mux_rate</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_instant_bitrate</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">50</literal> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <literal type="number">50</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mpeg2</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <name>i_scr</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x07</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>(</operator> <name>i_scr</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x7fff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>i_scr</name><operator>&amp;</operator><literal type="number">0x7fff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mpeg2</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><name>i_mux_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mpeg2</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0x1f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mpeg2</name></name></expr> ?</condition><then> <expr><literal type="number">14</literal></expr></then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>p_hdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MuxWriteSystemHeader</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bits_buffer_t</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_private</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_rate_bound</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_private</name></decl>, <decl><type ref="prev"/><name>i_nb_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i_nb_private</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>ps_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <operator>(</operator><name>ps_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_sys</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name><operator>&amp;</operator><literal type="number">0xff00</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0xbd00</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_nb_private</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>i_nb_stream</name> <operator>=</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name> <operator>-</operator>
<operator>(</operator> <ternary><condition><expr><name>i_nb_private</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_nb_private</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_hdr</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>i_nb_stream</name> <operator>*</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_hdr</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_hdr</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>


<expr_stmt><expr><name>i_rate_bound</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate_bound</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_initwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>i_nb_stream</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0x01bb</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>-</operator> <literal type="number">6</literal> <operator>+</operator> <name>i_nb_stream</name> <operator>*</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><name>i_rate_bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_audio_bound</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_video_bound</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b_private</name> <operator>=</operator> <name>false</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ps_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_input</name> <operator>=</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <operator>(</operator><name>ps_stream_t</name> <operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name><operator>&amp;</operator><literal type="number">0xff00</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0xbd00</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_private</name></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b_private</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xbd</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_max_buff_size</name></name> <operator>/</operator> <literal type="number">128</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_max_buff_size</name></name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_max_buff_size</name></name> <operator>/</operator> <literal type="number">128</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>p_hdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MuxWritePSM</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bits_buffer_t</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_psm_size</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_es_map_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ps_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_es_map_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_es_map_size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i_psm_size</name> <operator>+=</operator> <name>i_es_map_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_hdr</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_psm_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_hdr</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_hdr</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_initwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><name>i_psm_size</name></expr></argument>, <argument><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0x01bc</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_psm_size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0xF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_psm_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_es_map_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ps_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_stream_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0a</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>lang</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_crc</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name><name>p_hdr</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_crc</name> <operator>=</operator> <operator>(</operator><name>i_crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>crc32_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>i_crc</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>^</operator> <name><name>p_hdr</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>i_crc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>p_hdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
