<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\mux\mpeg\pes.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/mpeg/timestamps.h"</cpp:file></cpp:include>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>PESHeader</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_hdr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_pts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_dts</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_es_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_stream_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_mpeg2</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_data_alignment</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_header_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bits_buffer_t</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_private_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream_id_extension</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_stream_id</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>==</operator> <name>PES_PRIVATE_STREAM_1</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_private_id</name> <operator>=</operator> <name>i_stream_id</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_stream_id</name> <operator>=</operator> <name>PES_PRIVATE_STREAM_1</name></expr>;</expr_stmt>



<expr_stmt><expr><name>i_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_private_id</name> <operator>&amp;</operator> <literal type="number">0xf0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_extra</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>i_stream_id</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>==</operator> <name>PES_EXTENDED_STREAM_ID</name></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><name>i_stream_id_extension</name> <operator>=</operator> <name>i_stream_id</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_stream_id</name> <operator>=</operator> <name>PES_EXTENDED_STREAM_ID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bits_initwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>p_hdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_stream_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name>i_stream_id</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>PES_PROGRAM_STREAM_MAP</name></expr>:</case>
<case>case <expr><name>PES_PADDING</name></expr>:</case>
<case>case <expr><name>PES_PRIVATE_STREAM_2</name></expr>:</case>
<case>case <expr><name>PES_ECM</name></expr>:</case>
<case>case <expr><name>PES_EMM</name></expr>:</case>
<case>case <expr><name>PES_PROGRAM_STREAM_DIRECTORY</name></expr>:</case>
<case>case <expr><name>PES_DSMCC_STREAM</name></expr>:</case>
<case>case <expr><name>PES_ITU_T_H222_1_TYPE_E_STREAM</name></expr>:</case>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_es_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name><name>bits</name><operator>.</operator><name>i_data</name></name> <operator>)</operator></expr>;</return>

<default>default:</default>

<if_stmt><if>if<condition>( <expr><name>b_mpeg2</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_pts_dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_pes_extension_flag</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_dts</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_pts</name> <operator>!=</operator> <name>i_dts</name> <operator>||</operator> <operator>(</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MPGV</name> <operator>&amp;&amp;</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MP2V</name> <operator>&amp;&amp;</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MP1V</name> 
<operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_pts_dts</name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>i_header_size</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_header_size</name> <operator>=</operator> <literal type="number">0xa</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_pts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_pts_dts</name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>i_header_size</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_header_size</name> <operator>=</operator> <literal type="number">0x5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_pts_dts</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>i_header_size</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_header_size</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_stream_id</name> <operator>==</operator> <name>PES_EXTENDED_STREAM_ID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_pes_extension_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_header_size</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_pes_extension_flag</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_header_size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>( <expr><name>i_es_size</name> <operator>&gt;</operator> <name>PES_PAYLOAD_SIZE_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_es_size</name> <operator>+</operator> <name>i_extra</name> <operator>+</operator> <literal type="number">3</literal>
<operator>+</operator> <name>i_header_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b_data_alignment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_pts_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b_pes_extension_flag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_header_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_pts_dts</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_pts_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_pts</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>i_pts</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>i_header_size</name> <operator>-=</operator> <literal type="number">0x5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pts_dts</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_dts</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>i_dts</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>i_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>i_header_size</name> <operator>-=</operator> <literal type="number">0x5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>b_pes_extension_flag</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 





<if_stmt><if>if<condition>( <expr><name>i_stream_id</name> <operator>==</operator> <name>PES_EXTENDED_STREAM_ID</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>i_stream_id_extension</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_header_size</name> <operator>-=</operator> <literal type="number">0x2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_header_size</name> <operator>-=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>( <expr><name>i_header_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_header_size</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_pts_dts</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_dts</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_pts</name> <operator>!=</operator> <name>i_dts</name> <operator>||</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_es_size</name> <operator>+</operator> <name>i_extra</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pts_dts</name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_pts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_es_size</name> <operator>+</operator> <name>i_extra</name> <operator>+</operator> <literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pts_dts</name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_es_size</name> <operator>+</operator> <name>i_extra</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pts_dts</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>






<if_stmt><if>if<condition>( <expr><name>i_pts_dts</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_pts_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_pts</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>i_pts</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pts_dts</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_dts</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>i_dts</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>i_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_pts_dts</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0F</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_stream_id</name> <operator>==</operator> <name>PES_PRIVATE_STREAM_1</name> <operator>&amp;&amp;</operator> <name>i_private_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_private_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_private_id</name><operator>&amp;</operator><literal type="number">0xf0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name><name>bits</name><operator>.</operator><name>i_data</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





























<function><type><name>void</name></type> <name>EStoPES</name> <parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_stream_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>b_mpeg2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_data_alignment</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_header_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_max_pes_size</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>ts_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><operator>*</operator><name>pp_pes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_pes_payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pes_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pes_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_max_pes_size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_header_size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_max_pes_size</name> <operator>||</operator>
<operator>(</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name>i_max_pes_size</name> <operator>&gt;</operator> <name>PES_PAYLOAD_SIZE_MAX</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_max_pes_size</name> <operator>=</operator> <name>PES_PAYLOAD_SIZE_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4V</name> <operator>||</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name> <operator>||</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_HEVC</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>p_es</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name>p_es</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>offset</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>offset</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>offset</name><operator>+</operator><literal type="number">4</literal> <operator>&lt;=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">9</literal><operator>)</operator></expr> )</condition> 
<block>{<block_content>

<expr_stmt><expr><name>p_es</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x09</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_dts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_pts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_es</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <call><name>TO_SCALE_NZ</name><argument_list>(<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name>ts_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_es</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <call><name>TO_SCALE_NZ</name><argument_list>(<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name>ts_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>i_pes_payload</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>i_max_pes_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pes_header</name> <operator>=</operator> <call><name>PESHeader</name><argument_list>( <argument><expr><name>header</name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument>, <argument><expr><name>i_dts</name></expr></argument>, <argument><expr><name>i_pes_payload</name></expr></argument>,
<argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>i_stream_id</name></expr></argument>, <argument><expr><name>b_mpeg2</name></expr></argument>,
<argument><expr><name>b_data_alignment</name></expr></argument>, <argument><expr><name>i_header_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_es</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_es</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>i_pes_header</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>+</operator><name>i_pes_header</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_pes</name> <operator>=</operator> <name>p_pes</name> <operator>=</operator> <name>p_es</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_es</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_pes_header</name> <operator>+</operator> <name>i_pes_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pes</name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_pes_payload</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_pes_header</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>,
<argument><expr><name>i_pes_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_pes_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>i_pes_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <name>i_pes_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_pes_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_pes_header</name> <operator>+</operator> <name>i_pes_payload</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>i_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>;</do>


<expr_stmt><expr><name>p_pes</name> <operator>=</operator> <operator>*</operator><name>pp_pes</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_block_dts</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_pes_count</name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_pes</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_block_dts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_block_dts</name> <operator>+=</operator> <name>i_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pes</name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
