<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\mux\mpeg\bits.h">






















<typedef>typedef <type><struct>struct <name>bits_buffer_s</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>bits_buffer_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>bits_initwrite</name><parameter_list>( <parameter><decl><type><name>bits_buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_mask</name></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_data</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bits_align</name><parameter_list>( <parameter><decl><type><name>bits_buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_mask</name></name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&lt;</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_mask</name></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_data</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bits_write</name><parameter_list>( <parameter><decl><type><name>bits_buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_count</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_bits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_count</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_bits</name> <operator>&gt;&gt;</operator> <name>i_count</name> <operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_data</name></name></expr>]</index></name> <operator>|=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_mask</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_data</name></name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>i_mask</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_mask</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_mask</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_mask</name></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


</unit>
