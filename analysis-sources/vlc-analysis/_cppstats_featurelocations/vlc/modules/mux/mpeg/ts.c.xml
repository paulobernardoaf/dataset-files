<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\mux\mpeg\ts.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_iso_lang.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"csa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streams.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dvbpsi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/descriptor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pmt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/sdt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/psi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dvbpsi_compat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/jpeg2000.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/mpeg/timestamps.h"</cpp:file></cpp:include>




















<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ChangeKeyCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ActiveKeyCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ts_standards_list</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"dvb"</literal></expr>, <expr><literal type="string">"atsc"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ts_standards_list_text</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"DVB"</literal></expr>, <expr><literal type="string">"ATSC"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STANDARD_TEXT</name></cpp:macro> <cpp:value>N_("Digital TV Standard")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPID_TEXT</name></cpp:macro> <cpp:value>N_("Video PID")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPID_LONGTEXT</name></cpp:macro> <cpp:value>N_("Assign a fixed PID to the video stream. The PCR " "PID will automatically be the video.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APID_TEXT</name></cpp:macro> <cpp:value>N_("Audio PID")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APID_LONGTEXT</name></cpp:macro> <cpp:value>N_("Assign a fixed PID to the audio stream.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPUPID_TEXT</name></cpp:macro> <cpp:value>N_("SPU PID")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPUPID_LONGTEXT</name></cpp:macro> <cpp:value>N_("Assign a fixed PID to the SPU.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMTPID_TEXT</name></cpp:macro> <cpp:value>N_("PMT PID")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMTPID_LONGTEXT</name></cpp:macro> <cpp:value>N_("Assign a fixed PID to the PMT")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSID_TEXT</name></cpp:macro> <cpp:value>N_("TS ID")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSID_LONGTEXT</name></cpp:macro> <cpp:value>N_("Assign a fixed Transport Stream ID.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETID_TEXT</name></cpp:macro> <cpp:value>N_("NET ID")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETID_LONGTEXT</name></cpp:macro> <cpp:value>N_("Assign a fixed Network ID (for SDT table)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMTPROG_TEXT</name></cpp:macro> <cpp:value>N_("PMT Program numbers")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMTPROG_LONGTEXT</name></cpp:macro> <cpp:value>N_("Assign a program number to each PMT. This " "requires \"Set PID to ID of ES\" to be enabled." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUXPMT_TEXT</name></cpp:macro> <cpp:value>N_("Mux PMT (requires --sout-ts-es-id-pid)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUXPMT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Define the pids to add to each pmt. This " "requires \"Set PID to ID of ES\" to be enabled." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDTDESC_TEXT</name></cpp:macro> <cpp:value>N_("SDT Descriptors (requires --sout-ts-es-id-pid)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDTDESC_LONGTEXT</name></cpp:macro> <cpp:value>N_("Defines the descriptors of each SDT. This " "requires \"Set PID to ID of ES\" to be enabled." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PID_TEXT</name></cpp:macro> <cpp:value>N_("Set PID to ID of ES")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PID_LONGTEXT</name></cpp:macro> <cpp:value>N_("Sets PID to the ID if the incoming ES. This is for " "use with --ts-es-id-pid, and allows having the same PIDs in the input " "and output streams.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNMENT_TEXT</name></cpp:macro> <cpp:value>N_("Data alignment")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNMENT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Enforces alignment of all access units on " "PES boundaries. Disabling this might save some bandwidth but introduce incompatibilities.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHAPING_TEXT</name></cpp:macro> <cpp:value>N_("Shaping delay (ms)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHAPING_LONGTEXT</name></cpp:macro> <cpp:value>N_("Cut the " "stream in slices of the given duration, and ensure a constant bitrate " "between the two boundaries. This avoids having huge bitrate peaks, " "especially for reference frames." )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYF_TEXT</name></cpp:macro> <cpp:value>N_("Use keyframes")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYF_LONGTEXT</name></cpp:macro> <cpp:value>N_("If enabled, and shaping is specified, " "the TS muxer will place the boundaries at the end of I pictures. In " "that case, the shaping duration given by the user is a worse case " "used when no reference frame is available. This enhances the efficiency " "of the shaping algorithm, since I frames are usually the biggest " "frames in the stream.")</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCR_TEXT</name></cpp:macro> <cpp:value>N_("PCR interval (ms)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCR_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set at which interval " "PCRs (Program Clock Reference) will be sent (in milliseconds). " "This value should be below 100ms. (default is 70ms).")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMIN_TEXT</name></cpp:macro> <cpp:value>N_( "Minimum B (deprecated)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMIN_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This setting is deprecated and not used anymore" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMAX_TEXT</name></cpp:macro> <cpp:value>N_( "Maximum B (deprecated)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMAX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This setting is deprecated and not used anymore")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTS_TEXT</name></cpp:macro> <cpp:value>N_("DTS delay (ms)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Delay the DTS (decoding time " "stamps) and PTS (presentation timestamps) of the data in the " "stream, compared to the PCRs. This allows for some buffering inside " "the client decoder.")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACRYPT_TEXT</name></cpp:macro> <cpp:value>N_("Crypt audio")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACRYPT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Crypt audio using CSA")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCRYPT_TEXT</name></cpp:macro> <cpp:value>N_("Crypt video")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCRYPT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Crypt video using CSA")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_TEXT</name></cpp:macro> <cpp:value>N_("CSA Key")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_LONGTEXT</name></cpp:macro> <cpp:value>N_("CSA encryption key. This must be a " "16 char string (8 hexadecimal bytes).")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK2_TEXT</name></cpp:macro> <cpp:value>N_("Second CSA Key")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK2_LONGTEXT</name></cpp:macro> <cpp:value>N_("The even CSA encryption key. This must be a " "16 char string (8 hexadecimal bytes).")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CU_TEXT</name></cpp:macro> <cpp:value>N_("CSA Key in use")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CU_LONGTEXT</name></cpp:macro> <cpp:value>N_("CSA encryption key used. It can be the odd/first/1 " "(default) or the even/second/2 one.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPKT_TEXT</name></cpp:macro> <cpp:value>N_("Packet size in bytes to encrypt")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPKT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Size of the TS packet to encrypt. " "The encryption routines subtract the TS-header from the value before " "encrypting." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-ts-"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PMT</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PMT_PID</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAX_SDT_DESC</name> <operator>&lt;</operator> <name>MAX_PMT</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"MAX_SDT_DESC &lt; MAX_PMT"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_NO_KEYFRAME</name></cpp:macro> <cpp:value>(1 &lt;&lt; BLOCK_FLAG_PRIVATE_SHIFT)</cpp:value></cpp:define> 

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"TS muxer (libdvbpsi)"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"MPEG-TS"</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_MUX</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout mux"</literal></argument>, <argument><literal type="number">120</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"ts"</literal></argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"standard"</literal></argument>, <argument><literal type="string">"dvb"</literal></argument>, <argument>STANDARD_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>ts_standards_list</argument>, <argument>ts_standards_list_text</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"pid-video"</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument>VPID_TEXT</argument>, <argument>VPID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8190</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"pid-audio"</literal></argument>, <argument><literal type="number">200</literal></argument>, <argument>APID_TEXT</argument>, <argument>APID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8190</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"pid-spu"</literal></argument>, <argument><literal type="number">300</literal></argument>, <argument>SPUPID_TEXT</argument>, <argument>SPUPID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8190</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"pid-pmt"</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>PMTPID_TEXT</argument>, <argument>PMTPID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8190</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"tsid"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>TSID_TEXT</argument>, <argument>TSID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"netid"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>NETID_TEXT</argument>, <argument>NETID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"program-pmt"</literal></argument>, <argument>NULL</argument>, <argument>PMTPROG_TEXT</argument>, <argument>PMTPROG_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"es-id-pid"</literal></argument>, <argument>false</argument>, <argument>PID_TEXT</argument>, <argument>PID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"muxpmt"</literal></argument>, <argument>NULL</argument>, <argument>MUXPMT_TEXT</argument>, <argument>MUXPMT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"sdtdesc"</literal></argument>, <argument>NULL</argument>, <argument>SDTDESC_TEXT</argument>, <argument>SDTDESC_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"alignment"</literal></argument>, <argument>true</argument>, <argument>ALIGNMENT_TEXT</argument>, <argument>ALIGNMENT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"shaping"</literal></argument>, <argument><literal type="number">200</literal></argument>, <argument>SHAPING_TEXT</argument>, <argument>SHAPING_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"use-key-frames"</literal></argument>, <argument>false</argument>, <argument>KEYF_TEXT</argument>, <argument>KEYF_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"pcr"</literal></argument>, <argument><literal type="number">70</literal></argument>, <argument>PCR_TEXT</argument>, <argument>PCR_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"bmin"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>BMIN_TEXT</argument>, <argument>BMIN_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"bmax"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>BMAX_TEXT</argument>, <argument>BMAX_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"dts-delay"</literal></argument>, <argument><literal type="number">400</literal></argument>, <argument>DTS_TEXT</argument>, <argument>DTS_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"crypt-audio"</literal></argument>, <argument>true</argument>, <argument>ACRYPT_TEXT</argument>, <argument>ACRYPT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"crypt-video"</literal></argument>, <argument>true</argument>, <argument>VCRYPT_TEXT</argument>, <argument>VCRYPT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"csa-ck"</literal></argument>, <argument>NULL</argument>, <argument>CK_TEXT</argument>, <argument>CK_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"csa2-ck"</literal></argument>, <argument>NULL</argument>, <argument>CK2_TEXT</argument>, <argument>CK2_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"csa-use"</literal></argument>, <argument><literal type="string">"1"</literal></argument>, <argument>CU_TEXT</argument>, <argument>CU_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"csa-pkt"</literal></argument>, <argument><literal type="number">188</literal></argument>, <argument>CPKT_TEXT</argument>, <argument>CPKT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"standard"</literal></expr>,
<expr><literal type="string">"pid-video"</literal></expr>, <expr><literal type="string">"pid-audio"</literal></expr>, <expr><literal type="string">"pid-spu"</literal></expr>, <expr><literal type="string">"pid-pmt"</literal></expr>, <expr><literal type="string">"tsid"</literal></expr>,
<expr><literal type="string">"netid"</literal></expr>, <expr><literal type="string">"sdtdesc"</literal></expr>,
<expr><literal type="string">"es-id-pid"</literal></expr>, <expr><literal type="string">"shaping"</literal></expr>, <expr><literal type="string">"pcr"</literal></expr>, <expr><literal type="string">"bmin"</literal></expr>, <expr><literal type="string">"bmax"</literal></expr>, <expr><literal type="string">"use-key-frames"</literal></expr>,
<expr><literal type="string">"dts-delay"</literal></expr>, <expr><literal type="string">"csa-ck"</literal></expr>, <expr><literal type="string">"csa2-ck"</literal></expr>, <expr><literal type="string">"csa-use"</literal></expr>, <expr><literal type="string">"csa-pkt"</literal></expr>, <expr><literal type="string">"crypt-audio"</literal></expr>, <expr><literal type="string">"crypt-video"</literal></expr>,
<expr><literal type="string">"muxpmt"</literal></expr>, <expr><literal type="string">"program-pmt"</literal></expr>, <expr><literal type="string">"alignment"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>pmt_map_t</name> 
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_prog</name></decl>;</decl_stmt>
}</block></struct></type> <name>pmt_map_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_buffer_chain_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BufferChainInit</name> <parameter_list>( <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BufferChainAppend</name><parameter_list>( <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_depth</name></name><operator>++</operator></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>b</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_depth</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type><name>BufferChainGet</name><parameter_list>( <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_depth</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>p_first</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type><name>BufferChainPeek</name><parameter_list>( <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BufferChainClean</name><parameter_list>( <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>b</name> <operator>=</operator> <call><name>BufferChainGet</name><argument_list>( <argument><expr><name>c</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>BufferChainInit</name><argument_list>( <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>sout_buffer_chain_t</name></type> <name>chain_pes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pes_dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pes_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pes_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_key_frame</name></decl>;</decl_stmt>

}</block></struct></type> <name>pes_state_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>tsmux_stream_t</name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pesmux_stream_t</name></type> <name>pes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pes_state_t</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_input_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_pcr_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>csa_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>p_dvbpsi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_es_id_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pid_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pid_audio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pid_spu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_tsid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_num_pmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pmtslots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pat_version_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tsmux_stream_t</name></type> <name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pmt_version_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tsmux_stream_t</name></type> <name><name>pmt</name><index>[<expr><name>MAX_PMT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pmt_map_t</name></type> <name><name>pmtmap</name><index>[<expr><name>MAX_PMT_PID</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>i_pmt_program_number</name><index>[<expr><name>MAX_PMT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_data_alignment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sdt_psi_t</name></type> <name>sdt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ts_mux_standard</name></type> <name>standard</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>i_bitrate_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_bitrate_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_shaping_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pcr_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>first_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_use_key_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pcr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>csa_t</name> <modifier>*</modifier></type><name>csa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_csa_pkt_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_crypt_audio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_crypt_video</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_mux_sys_t</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>GetNextFreePID</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pid_start</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<label><name>restart</name>:</label>
<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><name>i_pid_start</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_num_pmt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pid</name> <operator>==</operator> <name>i_pid_start</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_pid_start</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>restart</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_input_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name> <operator>==</operator> <name>i_pid_start</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_pid_start</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>restart</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_pid_start</name> <operator>&gt;</operator> <literal type="number">8190</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_pid_start</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<goto>goto <name>restart</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_pid_start</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>AllocatePID</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_candidate_pid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_cat</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name>pi_candidate_pid</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pid_video</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name>pi_candidate_pid</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pid_audio</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>pi_candidate_pid</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pid_spu</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>pi_candidate_pid</name> <operator>=</operator> <call><name>GetNextFreePID</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_candidate_pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pid</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pi_candidate_pid</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>i_pid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pmtcompare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pb</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>pmt_map_t</name> <operator>*</operator><operator>)</operator><name>pa</name><operator>)</operator><operator>-&gt;</operator><name>i_pid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>pmt_map_t</name> <operator>*</operator><operator>)</operator><name>pb</name><operator>)</operator><operator>-&gt;</operator><name>i_pid</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>id1</name> <operator>-</operator> <name>id2</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>intcompare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pb</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>pa</name> <operator>-</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>pb</name></expr>;</return>
</block_content>}</block></function>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>FixPES</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Add_ADTS</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TSSchedule</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>p_chain_ts</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pcr_length</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pcr_dts</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TSDate</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>p_chain_ts</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pcr_length</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pcr_dts</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GetPAT</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GetPMT</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>TSNew</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_pcr</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TSSetPCR</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>csa_t</name> <modifier>*</modifier></type><name>csaSetup</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>csack</name> <init>= <expr><call><name>var_CreateGetNonEmptyStringCommand</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa-ck"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>csack</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>csa_t</name> <modifier>*</modifier></type><name>csa</name> <init>= <expr><call><name>csa_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>csa_SetCW</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>csa</name></expr></argument>, <argument><expr><name>csack</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>csack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>csa_Delete</name><argument_list>( <argument><expr><name>csa</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_crypt_audio</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"crypt-audio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_crypt_video</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"crypt-video"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>csa2ck</name> <init>= <expr><call><name>var_CreateGetNonEmptyStringCommand</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa2-ck"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>csa2ck</name> <operator>||</operator> <call><name>csa_SetCW</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>csa</name></expr></argument>, <argument><expr><name>csa2ck</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>csa_SetCW</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>csa</name></expr></argument>, <argument><expr><name>csack</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>csa2ck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa-use"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name> <operator>|</operator> <name>VLC_VAR_ISCOMMAND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa-use"</literal></expr></argument>, <argument><expr><name>ActiveKeyCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa-ck"</literal></expr></argument>, <argument><expr><name>ChangeKeyCallback</name></expr></argument>, <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa2-ck"</literal></expr></argument>, <argument><expr><name>ChangeKeyCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>use_val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa-use"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>var_Set</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa-use"</literal></expr></argument>, <argument><expr><name>use_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa-use"</literal></expr></argument>, <argument><expr><literal type="string">"odd"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>use_val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa-pkt"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name> <operator>&lt;</operator> <literal type="number">12</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name> <operator>&gt;</operator> <literal type="number">188</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"wrong packet size %d specified"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name> <operator>=</operator> <literal type="number">188</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"encrypting %d bytes of packet"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>csack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>csa</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>=<expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_mux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_num_pmt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvbpsi</name></name> <operator>=</operator> <call><name>dvbpsi_new</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dvbpsi_messages</name></expr></argument>, <argument><expr><name>DVBPSI_MSG_DEBUG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvbpsi</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvbpsi</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>p_mux</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_standard</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"standard"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_standard</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"atsc"</literal></expr></argument>, <argument><expr><name>psz_standard</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>=</operator> <name>TS_MUX_STANDARD_ATSC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_standard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_es_id_pid</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"es-id-pid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>muxpmt</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"muxpmt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name>muxpmt</name></expr></init></decl>;</init> <condition><expr><name>psz</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_pid</name> <init>= <expr><call><name>strtoul</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>psz_next</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>psz_next</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_pid</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_num_pmt</name></name> <operator>&gt;</operator> <name>MAX_PMT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Number of PMTs &gt; %d)"</literal></expr></argument>, <argument><expr><name>MAX_PMT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_num_pmt</name></name> <operator>=</operator> <name>MAX_PMT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pmtmap</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmtslots</name></name></expr>]</index></name><operator>.</operator><name>i_pid</name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pmtmap</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmtslots</name></name></expr>]</index></name><operator>.</operator><name>i_prog</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_num_pmt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>++</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmtslots</name></name> <operator>&gt;=</operator> <name>MAX_PMT_PID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Number of pids in PMT &gt; %d"</literal></expr></argument>, <argument><expr><name>MAX_PMT_PID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmtslots</name></name> <operator>=</operator> <name>MAX_PMT_PID</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pmtmap</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmtslots</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pmt_map_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pmtcompare</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>muxpmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>subi</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><name>subi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pat_version_number</name></name> <operator>=</operator> <call><name>nrand48</name><argument_list>(<argument><expr><name>subi</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>,<decl><type ref="prev"/><name>val2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"tsid"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tsid</name></name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tsid</name></name> <operator>=</operator> <call><name>nrand48</name><argument_list>(<argument><expr><name>subi</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"netid"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sdt</name><operator>.</operator><name>i_netid</name></name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sdt</name><operator>.</operator><name>i_netid</name></name> <operator>=</operator> <literal type="number">0xff00</literal> <operator>|</operator> <operator>(</operator> <call><name>nrand48</name><argument_list>(<argument><expr><name>subi</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfa</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_version_number</name></name> <operator>=</operator> <call><name>nrand48</name><argument_list>(<argument><expr><name>subi</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sdt</name><operator>.</operator><name>ts</name><operator>.</operator><name>i_pid</name></name> <operator>=</operator> <literal type="number">0x11</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sdtdesc</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"sdtdesc"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>sdtdesc</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sdttoken</name> <init>= <expr><name>sdtdesc</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SDT_DESC</name> <operator>*</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>psz_sdttoken</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_sdttoken</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>psz_end</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psz_end</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sdt</name><operator>.</operator><name>desc</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>psz_service_name</name> <operator>=</operator> <call><name>FromLocaleDup</name><argument_list>( <argument><expr><name>psz_sdttoken</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sdt</name><operator>.</operator><name>desc</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>psz_provider</name> <operator>=</operator> <call><name>FromLocaleDup</name><argument_list>( <argument><expr><name>psz_sdttoken</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>psz_sdttoken</name> <operator>=</operator> <name>psz_end</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sdtdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_data_alignment</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"alignment"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pgrpmt</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"program-pmt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>pgrpmt</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name>pgrpmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name> <init>= <expr><name>psz</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>psz</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_pid</name> <init>= <expr><call><name>strtoul</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>psz_next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <operator>&amp;</operator><name><name>psz_next</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pid</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;=</operator> <name>MAX_PMT</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Number of PMTs &gt; maximum (%d)"</literal></expr></argument>, <argument><expr><name>MAX_PMT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_program_number</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pgrpmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_num_pmt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_program_number</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pid-pmt"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_num_pmt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pid</name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pid_video</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pid-video"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pid_audio</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pid-audio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pid_spu</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pid-spu"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_min</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"bmin"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_max</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"bmax"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_min</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_max</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_min</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_max</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"incompatible minimum and maximum bitrate, "</literal>
<literal type="string">"disabling bitrate control"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_min</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_max</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"bmin and bmax no more supported "</literal>
<literal type="string">"(if you need them report it)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"shaping"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>,
<argument><expr><literal type="string">"invalid shaping (%"</literal><name>PRId64</name><literal type="string">"ms) resetting to 200ms"</literal></expr></argument>,
<argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_shaping_delay</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_shaping_delay</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pcr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>val2</name><operator>.</operator><name>i_int</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>val2</name><operator>.</operator><name>i_int</name></name> <operator>&gt;=</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>,
<argument><expr><literal type="string">"invalid pcr delay (%"</literal><name>PRId64</name><literal type="string">"ms) resetting to 70ms"</literal></expr></argument>,
<argument><expr><name><name>val2</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr_delay</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr_delay</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>val2</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"dts-delay"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_delay</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"shaping=%"</literal><name>PRId64</name><literal type="string">" pcr=%"</literal><name>PRId64</name><literal type="string">" dts_delay=%"</literal><name>PRId64</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_shaping_delay</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr_delay</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_delay</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_key_frames</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"use-key-frames"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name> <operator>=</operator> <call><name>csaSetup</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_addstream</name></name> <operator>=</operator> <name>AddStream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_delstream</name></name> <operator>=</operator> <name>DelStream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_mux</name></name> <operator>=</operator> <name>Mux</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvbpsi</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dvbpsi_delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvbpsi</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa-ck"</literal></expr></argument>, <argument><expr><name>ChangeKeyCallback</name></expr></argument>, <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa2-ck"</literal></expr></argument>, <argument><expr><name>ChangeKeyCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"csa-use"</literal></expr></argument>, <argument><expr><name>ActiveKeyCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>csa_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SDT_DESC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sdt</name><operator>.</operator><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_service_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sdt</name><operator>.</operator><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_provider</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ChangeKeyCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>csa_SetCW</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><name>p_data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ActiveKeyCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_res</name></decl>, <decl><type ref="prev"/><name>use_odd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"odd"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>use_odd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"even"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>use_odd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_odd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EBADVAR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_res</name> <operator>=</operator> <call><name>csa_UseKey</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument>, <argument><expr><name>use_odd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_res</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>MUX_CAN_ADD_STREAM_WHILE_MUXING</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>MUX_GET_MIME</name></expr>:</case>
<expr_stmt><expr><name>ppsz</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"video/mp2t"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetIso639_2LangCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type><name>pl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_1</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_2B</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_2T</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name></name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SelectPCRStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_removed_pcr_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>p_removed_pcr_input</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_input</name> <operator>==</operator> <name>p_removed_pcr_input</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name></name> <operator>=</operator> <name>p_input</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name></name> <operator>=</operator> <name>p_input</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name></name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"new PCR PID is %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>sout_input_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name><operator>-&gt;</operator><name>p_sys</name></name><operator>)</operator><operator>-&gt;</operator><name><name>ts</name><operator>.</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_stream</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_input_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_es_id_pid</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>&amp;</operator> <literal type="number">0x1fff</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name> <operator>=</operator> <call><name>AllocatePID</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FillPMTESParams</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"rejecting stream with unsupported codec %4.4s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_langs</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra_languages</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>lang</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_langs</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>lang</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adding input codec=%4.4s pid=%d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_langs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr>
</then><else>: <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>p_extra_languages</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz_language</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lang</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><call><name>GetIso639_2LangCode</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>code</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>lang</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>lang</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">" - lang=%3.3s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>lang</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>BufferChainInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_version_number</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_version_number</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator><operator>%</operator><literal type="number">32</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SelectPCRStream</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>oom</name>:</label>
<if_stmt><if>if<condition>(<expr><name>p_stream</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>lang</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_input_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"removing input pid=%d"</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name></name> <operator>==</operator> <name>p_input</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>SelectPCRStream</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>BufferChainClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pid-video"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pid</name> <operator>==</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pid_video</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"freeing video PID %d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pid-audio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pid</name> <operator>==</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pid_audio</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"freeing audio PID %d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pid-spu"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pid</name> <operator>==</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pid_spu</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"freeing spu PID %d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>lang</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_version_number</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_version_number</name></name> <operator>%=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetHeader</name><parameter_list>( <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ts</name> <init>= <expr><call><name>BufferChainPeek</name><argument_list>( <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_ts</name> <operator>=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_HEADER</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Pack_Opus</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lldiv_t</name></type> <name>d</name> <init>= <expr><call><name>lldiv</name><argument_list>(<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name><name>d</name><operator>.</operator><name>quot</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_data</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name><name>d</name><operator>.</operator><name>quot</name></name></expr>]</index></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetBlockDuration</name><parameter_list>( <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_input_sys_t</name><operator>*</operator><operator>)</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator>
<call><name>block_FifoCount</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><call><name>block_FifoShow</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_diff</name> <init>= <expr><name><name>p_next</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_diff</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_next</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_diff</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>
<name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator>
<name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(
<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,
<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator>
<name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>&amp;&amp;</operator>
<name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator>
<name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>/</operator>
<name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name><operator>.</operator><name>p_first</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_next</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_next</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_SUBT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encap_J2K</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_box</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_size</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_box</name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name> <operator>&lt;</operator> <name>i_size</name> <operator>||</operator> <name>i_size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_box</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_box</name> <operator>==</operator> <name>J2K_BOX_JP2C</name></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_box</name> <operator>!=</operator> <name>J2K_BOX_JP2C</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&lt;</operator> <literal type="number">38</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">38</literal> <operator>-</operator> <name>i_offset</name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_realloc</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <operator>(</operator><name>i_offset</name> <operator>-</operator> <literal type="number">38</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <operator>(</operator><name>i_offset</name> <operator>-</operator> <literal type="number">38</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>profile</name> <init>= <expr><call><name>j2k_get_profile</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="string">"elsmfrat"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"brat"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>min</name> <init>= <expr><name><name>j2k_profiles_rates</name><index>[<expr><name>profile</name></expr>]</index></name><operator>.</operator><name>min</name> <operator>*</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max</name> <init>= <expr><name><name>j2k_profiles_rates</name><index>[<expr><name>profile</name></expr>]</index></name><operator>.</operator><name>max</name> <operator>*</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><name>min</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"tcod"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>s</name> <init>= <expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>m</name> <init>= <expr><name>s</name> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>h</name> <init>= <expr><name>m</name> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>l</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>/</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>f</name> <init>= <expr><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>%</operator> <name>CLOCK_FREQ</name><operator>)</operator> <operator>/</operator> <name>l</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <name>m</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"bcol"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">36</literal></expr>]</index></name> <operator>=</operator> <call><name>j2k_get_color_spec</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>primaries</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>transfer</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>space</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">37</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>p_data</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>MuxStreams</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_pcr_stream</name> <init>= <expr><operator>(</operator><name>sout_input_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_buffer_chain_t</name></type> <name>chain_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_shaping_delay</name> <init>= <expr><ternary><condition><expr><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>b_key_frame</name></name></expr>
?</condition><then> <expr><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name></expr>
</then><else>: <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_shaping_delay</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><name>b_ok</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_input</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_input</name> <operator>=</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_input_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_stream</name> <operator>!=</operator> <name>p_pcr_stream</name> <operator>||</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>&gt;=</operator> <name>i_shaping_delay</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>+</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>&gt;=</operator>
<name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>+</operator> <name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>block_FifoCount</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>block_FifoCount</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><call><name>block_FifoShow</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_spu_delay</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_spu_delay</name> <operator>&gt;</operator> <name>i_shaping_delay</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_spu_delay</name> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>i_spu_delay</name> <operator>&gt;=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator> <name>i_spu_delay</name> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>BufferChainClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_stream</name> <operator>==</operator> <name>p_pcr_stream</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_data_alignment</name></name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MPGA</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MP3</name><operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_FifoGet</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4A</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>Add_ADTS</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_OPUS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>Pack_Opus</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>FixPES</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>SetBlockDuration</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"non dated packet dropped"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>first_dts</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>first_dts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>p_input</name> <operator>&amp;&amp;</operator>
<call><name>block_FifoCount</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>p_fifo</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_FifoShow</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>p_fifo</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>first_dts</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>first_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>&gt;</operator> <name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>+</operator>
<name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>)</operator> <operator>||</operator>
<name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i_shaping_delay</name> <operator>&lt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>||</operator>
<operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator>
<name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>&gt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>+</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"packet with too strange dts on pid %d (%4.4s)"</literal>
<literal type="string">"(dts=%"</literal><name>PRId64</name><literal type="string">",old=%"</literal><name>PRId64</name><literal type="string">",pcr=%"</literal><name>PRId64</name><literal type="string">")"</literal></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name></expr></argument>,
<argument><expr><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BufferChainClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>SPU_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>BufferChainClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_header_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_max_pes_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_data_alignment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition><block type="pseudo"><block_content> <switch>switch <condition>(<expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_SUBT</name></expr>:</case>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EStoPES</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_spu</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_stream_id</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>first_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_delay</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_spu</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_TELETEXT</name></expr>:</case>

<expr_stmt><expr><name>i_header_size</name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b_data_alignment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_DVBS</name></expr>:</case>

<expr_stmt><expr><name>b_data_alignment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_JPEG2000</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_INTERLACED_MASK</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Unsupported interlaced J2K content. Expect broken result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>Encap_J2K</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_data</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_stream_id</name></name> <operator>==</operator> <literal type="number">0xa0</literal> <operator>&amp;&amp;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIRAC</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_HEVC</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP2V</name><operator>)</operator></expr>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_data_alignment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>i_max_pes_size</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EStoPES</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_stream_id</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b_data_alignment</name></expr></argument>, <argument><expr><name>i_header_size</name></expr></argument>,
<argument><expr><name>i_max_pes_size</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>first_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_delay</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BufferChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_key_frames</name></name> <operator>&amp;&amp;</operator> <name>p_stream</name> <operator>==</operator> <name>p_pcr_stream</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_NO_KEYFRAME</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_shaping_delay</name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>b_key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_pcr_length</name> <init>= <expr><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>b_key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>i_packet_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_input_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pes</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</init> <condition><expr><name>p_pes</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_pes</name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_frag</name> <init>= <expr><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>+</operator>
<name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>-</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <name>i_frag</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_frag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <name>i_frag</name> <operator>/</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_packet_count</name> <operator>+=</operator> <operator>(</operator> <name>i_size</name> <operator>+</operator> <literal type="number">183</literal> <operator>)</operator> <operator>/</operator> <literal type="number">184</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>i_packet_count</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>i_pcr_length</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr_delay</name></name> <operator>+</operator> <literal type="number">175</literal><operator>)</operator> <operator>/</operator> <literal type="number">176</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>BufferChainInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>chain_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pat_was_previous</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>GetPAT</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chain_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetPMT</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chain_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_packet_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_packet_count</name> <operator>+=</operator> <name><name>chain_ts</name><operator>.</operator><name>i_depth</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_pcr_dts</name> <init>= <expr><name><name>p_pcr_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <operator>(</operator><name>sout_input_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_sys</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_stream</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>&lt;</operator> <name>i_dts</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_stream</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_stream</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>i_dts</name> <operator>&gt;</operator> <name>i_pcr_dts</name> <operator>+</operator> <name>i_pcr_length</name></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <operator>(</operator><name>sout_input_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>-&gt;</operator><name>p_sys</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_pcr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>packet_length</name> <init>= <expr><name>i_pcr_length</name> <operator>*</operator> <name>i_packet_pos</name> <operator>/</operator> <name>i_packet_count</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_stream</name> <operator>==</operator> <name>p_pcr_stream</name> <operator>&amp;&amp;</operator>
<name>i_pcr_dts</name> <operator>+</operator> <name>packet_length</name> <operator>&gt;=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr_delay</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_pcr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name>i_pcr_dts</name> <operator>+</operator> <name>packet_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ts</name> <init>= <expr><call><name>TSNew</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>b_pcr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_crypt_audio</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_crypt_video</name></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_SCRAMBLED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_packet_pos</name><operator>++</operator></expr>;</expr_stmt>




<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_use_key_frames</name></name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><operator>!</operator><name>pat_was_previous</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>startcount</name> <init>= <expr><name><name>chain_ts</name><operator>.</operator><name>i_depth</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetPAT</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chain_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetPMT</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chain_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetHeader</name><argument_list>( <argument><expr><operator>&amp;</operator><name>chain_ts</name></expr></argument>, <argument><expr><name>startcount</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_packet_count</name> <operator>+=</operator> <operator>(</operator><name><name>chain_ts</name><operator>.</operator><name>i_depth</name></name> <operator>-</operator> <name>startcount</name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>SetHeader</name><argument_list>( <argument><expr><operator>&amp;</operator><name>chain_ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pat_was_previous</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>BufferChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>chain_ts</name></expr></argument>, <argument><expr><name>p_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>TSSchedule</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chain_ts</name></expr></argument>, <argument><expr><name>i_pcr_length</name></expr></argument>, <argument><expr><name>i_pcr_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>block_FifoEmpty</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_fifo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"waiting for PCR streams"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>MuxStreams</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STD_PES_PAYLOAD</name></cpp:macro> <cpp:value>170</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>FixPES</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_FifoShow</name><argument_list>( <argument><expr><name>p_fifo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>==</operator> <name>STD_PES_PAYLOAD</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><call><name>block_FifoGet</name><argument_list>( <argument><expr><name>p_fifo</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_size</name> <operator>&gt;</operator> <name>STD_PES_PAYLOAD</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>STD_PES_PAYLOAD</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_new</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>STD_PES_PAYLOAD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_new</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_new</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_new</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>*</operator> <name>STD_PES_PAYLOAD</name>
<operator>/</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>STD_PES_PAYLOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>STD_PES_PAYLOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_NO_KEYFRAME</name></expr>;</expr_stmt>
<return>return <expr><name>p_new</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_copy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_FifoGet</name><argument_list>( <argument><expr><name>p_fifo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>STD_PES_PAYLOAD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_next</name> <operator>=</operator> <call><name>block_FifoShow</name><argument_list>( <argument><expr><name>p_fifo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_NO_KEYFRAME</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_FLAG_NO_KEYFRAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_next</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_next</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>STD_PES_PAYLOAD</name> <operator>-</operator> <name>i_size</name></expr></argument>, <argument><expr><name><name>p_next</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_size</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_next</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>offset</name> <init>= <expr><name><name>p_next</name><operator>-&gt;</operator><name>i_length</name></name> <operator>*</operator> <name>i_copy</name> <operator>/</operator> <name><name>p_next</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_next</name><operator>-&gt;</operator><name>i_pts</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_next</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_next</name><operator>-&gt;</operator><name>i_dts</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_next</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_next</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_next</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_next</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_next</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_NO_KEYFRAME</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_next</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_next</name> <operator>=</operator> <call><name>block_FifoGet</name><argument_list>( <argument><expr><name>p_fifo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_data</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Add_ADTS</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADTS_HEADER_SIZE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_data</name> <operator>||</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><name>p_extra</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_data</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>frame_length</name> <init>= <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>ADTS_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><operator>(</operator> <operator>(</operator><name><name>p_extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p_extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_profile</name> <init>= <expr><operator>(</operator><name><name>p_extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>==</operator> <literal type="number">0x0f</literal> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_data</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_channels</name> <init>= <expr><operator>(</operator><name><name>p_extra</name><index>[<expr><ternary><condition><expr><name>i_index</name> <operator>==</operator> <literal type="number">0x0f</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_new_block</name> <init>= <expr><call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>ADTS_HEADER_SIZE</name></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><name><name>p_new_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_profile</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i_index</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i_channels</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_channels</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>frame_length</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>i_fullness</name> <init>= <expr><literal type="number">0x7ff</literal></expr></init></decl>;</decl_stmt> 



<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>frame_length</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>frame_length</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i_fullness</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i_fullness</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ;</expr_stmt>

<return>return <expr><name>p_new_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TSSchedule</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>p_chain_ts</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pcr_length</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pcr_dts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_buffer_chain_t</name></type> <name>new_chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_packet_count</name> <init>= <expr><name><name>p_chain_ts</name><operator>-&gt;</operator><name>i_depth</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BufferChainInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>new_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_pcr_length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_pcr_length</name> <operator>=</operator> <name>i_packet_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_packet_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ts</name> <init>= <expr><call><name>BufferChainGet</name><argument_list>( <argument><expr><name>p_chain_ts</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_new_dts</name> <init>= <expr><name>i_pcr_dts</name> <operator>+</operator> <name>i_pcr_length</name> <operator>*</operator> <name>i</name> <operator>/</operator> <name>i_packet_count</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BufferChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>new_chain</name></expr></argument>, <argument><expr><name>p_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>||</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_delay</name></name> <operator>*</operator> <literal type="number">2</literal><operator>/</operator><literal type="number">3</literal> <operator>&gt;=</operator> <name>i_new_dts</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_max_diff</name> <init>= <expr><name>i_new_dts</name> <operator>-</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_cut_dts</name> <init>= <expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_ts</name> <operator>=</operator> <call><name>BufferChainPeek</name><argument_list>( <argument><expr><name>p_chain_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_new_dts</name> <operator>=</operator> <name>i_pcr_dts</name> <operator>+</operator> <name>i_pcr_length</name> <operator>*</operator> <name>i</name> <operator>/</operator> <name>i_packet_count</name></expr>;</expr_stmt>
<while>while <condition>( <expr><name>p_ts</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i_new_dts</name> <operator>-</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>&gt;=</operator> <name>i_max_diff</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_ts</name> <operator>=</operator> <call><name>BufferChainGet</name><argument_list>( <argument><expr><name>p_chain_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max_diff</name> <operator>=</operator> <name>i_new_dts</name> <operator>-</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_cut_dts</name> <operator>=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BufferChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>new_chain</name></expr></argument>, <argument><expr><name>p_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ts</name> <operator>=</operator> <call><name>BufferChainPeek</name><argument_list>( <argument><expr><name>p_chain_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_new_dts</name> <operator>=</operator> <name>i_pcr_dts</name> <operator>+</operator> <name>i_pcr_length</name> <operator>*</operator> <name>i</name> <operator>/</operator> <name>i_packet_count</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adjusting rate at %"</literal><name>PRId64</name><literal type="string">"/%"</literal><name>PRId64</name><literal type="string">" (%d/%d)"</literal></expr></argument>,
<argument><expr><name>i_cut_dts</name> <operator>-</operator> <name>i_pcr_dts</name></expr></argument>, <argument><expr><name>i_pcr_length</name></expr></argument>, <argument><expr><name><name>new_chain</name><operator>.</operator><name>i_depth</name></name></expr></argument>,
<argument><expr><name><name>p_chain_ts</name><operator>-&gt;</operator><name>i_depth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>new_chain</name><operator>.</operator><name>i_depth</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TSDate</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_chain</name></expr></argument>, <argument><expr><name>i_cut_dts</name> <operator>-</operator> <name>i_pcr_dts</name></expr></argument>, <argument><expr><name>i_pcr_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_chain_ts</name><operator>-&gt;</operator><name>i_depth</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TSSchedule</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_chain_ts</name></expr></argument>, <argument><expr><name>i_pcr_dts</name> <operator>+</operator> <name>i_pcr_length</name> <operator>-</operator> <name>i_cut_dts</name></expr></argument>,
<argument><expr><name>i_cut_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name><name>new_chain</name><operator>.</operator><name>i_depth</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TSDate</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_chain</name></expr></argument>, <argument><expr><name>i_pcr_length</name></expr></argument>, <argument><expr><name>i_pcr_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TSDate</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>p_chain_ts</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pcr_length</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pcr_dts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_packet_count</name> <init>= <expr><name><name>p_chain_ts</name><operator>-&gt;</operator><name>i_depth</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>i_pcr_length</name> <operator>/</operator> <literal type="number">1000</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_bitrate</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>i_packet_count</name> <operator>*</operator> <literal type="number">188</literal> <operator>*</operator> <literal type="number">8000</literal><operator>)</operator>
<operator>/</operator> <call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_pcr_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_max</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_max</name></name> <operator>&lt;</operator> <name>i_bitrate</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"max bitrate exceeded at %"</literal><name>PRId64</name>
<literal type="string">" (%d bi/s for %d pkt in %"</literal><name>PRId64</name><literal type="string">" us)"</literal></expr></argument>,
<argument><expr><name>i_pcr_dts</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_shaping_delay</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>i_bitrate</name></expr></argument>, <argument><expr><name>i_packet_count</name></expr></argument>, <argument><expr><name>i_pcr_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>i_pcr_length</name> <operator>=</operator> <name>i_packet_count</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_packet_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ts</name> <init>= <expr><call><name>BufferChainGet</name><argument_list>( <argument><expr><name>p_chain_ts</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_new_dts</name> <init>= <expr><name>i_pcr_dts</name> <operator>+</operator> <name>i_pcr_length</name> <operator>*</operator> <name>i</name> <operator>/</operator> <name>i_packet_count</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_new_dts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_pcr_length</name> <operator>/</operator> <name>i_packet_count</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CLOCK</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TSSetPCR</name><argument_list>( <argument><expr><name>p_ts</name></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>first_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_SCRAMBLED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>csa_Encrypt</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_shaping_delay</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>TSNew</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_pcr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pes</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_new_pes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_adaptation_field</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_payload_max</name> <init>= <expr><literal type="number">184</literal> <operator>-</operator> <operator>(</operator> <ternary><condition><expr><name>b_pcr</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_used</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_new_pes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_used</name></name></expr></argument>,
<argument><expr><name>i_payload_max</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_pcr</name> <operator>||</operator> <name>i_payload</name> <operator>&lt;</operator> <name>i_payload_max</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_adaptation_field</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ts</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">188</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b_new_pes</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_pes</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_NO_KEYFRAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x47</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <ternary><condition><expr><name>b_new_pes</name></expr> ?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x1f</literal> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <ternary><condition><expr><name>b_adaptation_field</name></expr> ?</condition><then> <expr><literal type="number">0x30</literal></expr> </then><else>: <expr><literal type="number">0x10</literal></expr></else></ternary> <operator>)</operator> <operator>|</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_continuity_counter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_continuity_counter</name></name> <operator>=</operator> <operator>(</operator><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_continuity_counter</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>b_discontinuity</name></name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_adaptation_field</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_stuffing</name> <init>= <expr><name>i_payload_max</name> <operator>-</operator> <name>i_payload</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_pcr</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_CLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal> <operator>+</operator> <name>i_stuffing</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>b_discontinuity</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>b_discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>i_stuffing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>--</operator><name>i_stuffing</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_stuffing</name><operator>--</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>i_stuffing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">188</literal> <operator>-</operator> <name>i_payload</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_used</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_used</name></name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_length</name></name> <operator>*</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_used</name></name> <operator>/</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>-=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_length</name></name> <operator>*</operator> <name>i_payload</name> <operator>/</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_used</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><call><name>BufferChainGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pes</name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>chain_pes</name><operator>.</operator><name>p_first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_pes</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<while>while<condition>( <expr><name>p_pes</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_length</name></name> <operator>+=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pes</name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>i_pes_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_ts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TSSetPCR</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_pcr</name> <init>= <expr><call><name>TO_SCALE_NZ</name><argument_list>(<argument><expr><name>i_dts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_pcr</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_pcr</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_pcr</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_pcr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_pcr</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x7e</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GetPAT</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BuildPAT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvbpsi</name></name></expr></argument>,
<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>PEStoTSCallback</name><operator>)</operator><name>BufferChainAppend</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tsid</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pat_version_number</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pat</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_num_pmt</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pmt</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_program_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetPMT</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_buffer_chain_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pes_mapped_stream_t</name></type> <name><name>mappeds</name><index>[<expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_input_sys_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_input_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pidinput</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pmt_map_t</name> <modifier>*</modifier></type><name>p_usepid</name> <init>= <expr><call><name>bsearch</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_pidinput</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pmtmap</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmtslots</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pmt_map_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>intcompare</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>mappeds</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>.</operator><name>i_mapped_prog</name> <operator>=</operator> <ternary><condition><expr><name>p_usepid</name></expr> ?</condition><then> <expr><name><name>p_usepid</name><operator>-&gt;</operator><name>i_prog</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mappeds</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>.</operator><name>fmt</name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mappeds</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>.</operator><name>pes</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mappeds</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>.</operator><name>ts</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>BuildPMT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvbpsi</name></name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name></expr></argument>,
<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>PEStoTSCallback</name><operator>)</operator><name>BufferChainAppend</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tsid</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_version_number</name></name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>sout_input_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pcr_input</name><operator>-&gt;</operator><name>p_sys</name></name><operator>)</operator><operator>-&gt;</operator><name><name>ts</name><operator>.</operator><name>i_pid</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sdt</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_num_pmt</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pmt</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_program_number</name></name></expr></argument>,
<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr></argument>, <argument><expr><name>mappeds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
