<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\mux\mpeg\tsutil.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsutil.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>PEStoTS</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>, <parameter><decl><type><name>PEStoTSCallback</name></type> <name>pf_callback</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>i_pid</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_discontinuity</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_continuity_counter</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_new_pes</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>











<decl_stmt><decl><type><name>int</name></type> <name>i_copy</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><literal type="number">184</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_adaptation_field</name> <init>= <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">184</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ts</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">188</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x47</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <ternary><condition><expr><name>b_new_pes</name></expr> ?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary> <operator>)</operator><operator>|</operator>
<operator>(</operator> <operator>(</operator> <name>i_pid</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x1f</literal> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i_pid</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <ternary><condition><expr><name>b_adaptation_field</name></expr> ?</condition><then> <expr><literal type="number">0x30</literal></expr> </then><else>: <expr><literal type="number">0x10</literal></expr></else></ternary> <operator>)</operator><operator>|</operator>
<operator>*</operator><name>pi_continuity_counter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_new_pes</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_continuity_counter</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pi_continuity_counter</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_adaptation_field</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_stuffing</name> <init>= <expr><literal type="number">184</literal> <operator>-</operator> <name>i_copy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>i_stuffing</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_stuffing</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pb_discontinuity</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_discontinuity</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>+</operator> <name>i_stuffing</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ts</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">188</literal> <operator>-</operator> <name>i_copy</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pf_callback</name><argument_list>( <argument><expr><name>p_opaque</name></expr></argument>, <argument><expr><name>p_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_next</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_new_pes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pes</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
