<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\kms.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xf86drm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xf86drmMode.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;drm_fourcc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture_pool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KMS_VAR</name></cpp:macro> <cpp:value>"kms"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_TEXT</name></cpp:macro> <cpp:value>"Framebuffer device"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_LONGTEXT</name></cpp:macro> <cpp:value>"Framebuffer device to use for rendering (usually /dev/dri/card0)."</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CHROMA_TEXT</name></cpp:macro> <cpp:value>"Image format used by VLC"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CHROMA_LONGTEXT</name></cpp:macro> <cpp:value>"Chroma fourcc request to VLC for output format"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRM_CHROMA_TEXT</name></cpp:macro> <cpp:value>"Image format used by DRM"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRM_CHROMA_LONGTEXT</name></cpp:macro> <cpp:value>"Chroma fourcc override for DRM framebuffer format selection"</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXHWBUF</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{ <decl><name>drvSuccess</name></decl>, <decl><name>drvTryNext</name></decl>, <decl><name>drvFail</name></decl> }</block></enum></type> <name>deviceRval</name>;</typedef>

<struct>struct <name>vout_display_sys_t</name> <block>{



<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>offsets</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>handle</name><index>[<expr><name>MAXHWBUF</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>map</name><index>[<expr><name>MAXHWBUF</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>fb</name><index>[<expr><name>MAXHWBUF</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>front_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>forced_drm_fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>drm_fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>vlc_fourcc</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>crtc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>plane_id</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>drm_fd</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>p_voutsys</name></decl>;</decl_stmt>
}</block></struct></type> <name>picture_sys_t</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroyFB</name><parameter_list>(<parameter><decl><type><name>vout_display_sys_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <specifier>const</specifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>drm_mode_destroy_dumb</name></name></type> <name>destroy_req</name> <init>= <expr><block>{ <expr><operator>.</operator><name>handle</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>handle</name><index>[<expr><name>buf</name></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>map</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drmModeRmFB</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fb</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drmIoctl</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name>DRM_IOCTL_MODE_DESTROY_DUMB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>destroy_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>deviceRval</name></type> <name>CreateFB</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>drm_mode_create_dumb</name></name></type> <name>create_req</name> <init>= <expr><block>{ <expr><operator>.</operator><name>width</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>width</name></name></expr>,
<expr><operator>.</operator><name>height</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr>,
<expr><operator>.</operator><name>bpp</name> <operator>=</operator> <literal type="number">32</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>drm_mode_destroy_dumb</name></name></type> <name>destroy_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>drm_mode_map_dumb</name></name></type> <name>modify_req</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tile_width</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>, <decl><type ref="prev"/><name>tile_height</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deviceRval</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>offsets</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>handles</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,
<decl><type ref="prev"/><name><name>pitches</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRM_FORMAT_P010</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>DRM_FORMAT_P010</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRM_FORMAT_P012</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>DRM_FORMAT_P012</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRM_FORMAT_P016</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>DRM_FORMAT_P016</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRM_FORMAT_P010</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRM_FORMAT_P012</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRM_FORMAT_P016</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>tile_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>stride</name></name><operator>*</operator><call><name>vlc_align</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>tile_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>create_req</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><call><name>vlc_align</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>tile_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>DRM_FORMAT_NV12</name></expr>:</case>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>tile_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>stride</name></name><operator>*</operator><call><name>vlc_align</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>tile_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>create_req</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><call><name>vlc_align</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>tile_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>create_req</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>tile_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>tile_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>drmIoctl</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name>DRM_IOCTL_MODE_CREATE_DUMB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>create_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Cannot create dumb buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>drvFail</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>create_req</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>handle</name><index>[<expr><name>buf</name></expr>]</index></name> <operator>=</operator> <name><name>create_req</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>handles</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>handles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>create_req</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pitches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>drmModeAddFB2</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name></expr></argument>,
<argument><expr><name>handles</name></expr></argument>, <argument><expr><name>pitches</name></expr></argument>, <argument><expr><name>offsets</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>fb</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Cannot create frame buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>drvFail</name></expr>;</expr_stmt>
<goto>goto <name>err_destroy</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>modify_req</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>handle</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>drmIoctl</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name>DRM_IOCTL_MODE_MAP_DUMB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modify_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Cannot map dumb buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>drvFail</name></expr>;</expr_stmt>
<goto>goto <name>err_fb</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>map</name><index>[<expr><name>buf</name></expr>]</index></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name><name>modify_req</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>map</name><index>[<expr><name>buf</name></expr>]</index></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Cannot mmap dumb buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>drvFail</name></expr>;</expr_stmt>
<goto>goto <name>err_fb</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>drvSuccess</name></expr>;</return>

<label><name>err_fb</name>:</label>
<expr_stmt><expr><call><name>drmModeRmFB</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fb</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>fb</name><index>[<expr><name>buf</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>err_destroy</name>:</label>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>destroy_req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>destroy_req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destroy_req</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>handle</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drmIoctl</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name>DRM_IOCTL_MODE_DESTROY_DUMB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>destroy_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>deviceRval</name></type> <name>FindCRTC</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>drmModeRes</name> <specifier>const</specifier> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>drmModeConnector</name> <specifier>const</specifier> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>drmModeEncoder</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>encoder_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>drmModeGetEncoder</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>encoder_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>crtc_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Got CRTC %d from current encoder"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>crtc_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>crtc</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>crtc_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drmModeFreeEncoder</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>drvSuccess</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>drmModeFreeEncoder</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>count_encoders</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>drmModeGetEncoder</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>encoders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>enc</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>count_crtcs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ffs</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>possible_crtcs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>j</name> <operator>&amp;&amp;</operator> <name><name>res</name><operator>-&gt;</operator><name>crtcs</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Got CRTC %d"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>crtcs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>crtc</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>crtcs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drmModeFreeEncoder</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>drvSuccess</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>drmModeFreeEncoder</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument> , <argument><expr><literal type="string">"Cannot find CRTC for connector %d"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connector_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>drvTryNext</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>deviceRval</name></type> <name>SetupDevice</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>drmModeRes</name> <specifier>const</specifier> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>drmModeConnector</name> <specifier>const</specifier> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deviceRval</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>connection</name></name> <operator>!=</operator> <name>DRM_MODE_CONNECTED</name> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>count_modes</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>drvTryNext</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>modes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>hdisplay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>modes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vdisplay</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Mode resolution for connector %u is %ux%u"</literal></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connector_id</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>FindCRTC</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>drvSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument> , <argument><expr><literal type="string">"No valid CRTC for connector %d"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connector_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>MAXHWBUF</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CreateFB</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>drvSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Cannot create framebuffer %d for connector %d"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connector_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c2</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><name>c2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyFB</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Created HW framebuffer %d/%d"</literal></expr></argument>, <argument><expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAXHWBUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>drvSuccess</name></expr>;</return>
</block_content>}</block></function>












<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>drm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>plane_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>present</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isYUV</name></decl>;</decl_stmt>
}</block> <decl><name><name>fourccmatching</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><operator>.</operator><name>drm</name> <operator>=</operator> <name>DRM_FORMAT_XRGB8888</name></expr>, <expr><operator>.</operator><name>vlc</name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>, <expr><operator>.</operator><name>isYUV</name> <operator>=</operator> <name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>drm</name> <operator>=</operator> <name>DRM_FORMAT_RGB565</name></expr>, <expr><operator>.</operator><name>vlc</name> <operator>=</operator> <name>VLC_CODEC_RGB16</name></expr>, <expr><operator>.</operator><name>isYUV</name> <operator>=</operator> <name>false</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>DRM_FORMAT_P010</name></expr></cpp:if>
<expr><block>{ <expr><operator>.</operator><name>drm</name> <operator>=</operator> <name>DRM_FORMAT_P010</name></expr>, <expr><operator>.</operator><name>vlc</name> <operator>=</operator> <name>VLC_CODEC_P010</name></expr>, <expr><operator>.</operator><name>isYUV</name> <operator>=</operator> <name>true</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><operator>.</operator><name>drm</name> <operator>=</operator> <name>DRM_FORMAT_NV12</name></expr>, <expr><operator>.</operator><name>vlc</name> <operator>=</operator> <name>VLC_CODEC_NV12</name></expr>, <expr><operator>.</operator><name>isYUV</name> <operator>=</operator> <name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>drm</name> <operator>=</operator> <name>DRM_FORMAT_YUYV</name></expr>, <expr><operator>.</operator><name>vlc</name> <operator>=</operator> <name>VLC_CODEC_YUYV</name></expr>, <expr><operator>.</operator><name>isYUV</name> <operator>=</operator> <name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>drm</name> <operator>=</operator> <name>DRM_FORMAT_YVYU</name></expr>, <expr><operator>.</operator><name>vlc</name> <operator>=</operator> <name>VLC_CODEC_YVYU</name></expr>, <expr><operator>.</operator><name>isYUV</name> <operator>=</operator> <name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>drm</name> <operator>=</operator> <name>DRM_FORMAT_UYVY</name></expr>, <expr><operator>.</operator><name>vlc</name> <operator>=</operator> <name>VLC_CODEC_UYVY</name></expr>, <expr><operator>.</operator><name>isYUV</name> <operator>=</operator> <name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>drm</name> <operator>=</operator> <name>DRM_FORMAT_VYUY</name></expr>, <expr><operator>.</operator><name>vlc</name> <operator>=</operator> <name>VLC_CODEC_VYUY</name></expr>, <expr><operator>.</operator><name>isYUV</name> <operator>=</operator> <name>true</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>


<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckFourCCList</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>drmfourcc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>plane_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>fourccmatching</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fourccmatching</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>drm</name> <operator>==</operator> <name>drmfourcc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fourccmatching</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition><block type="pseudo"><block_content>



<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fourccmatching</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>present</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fourccmatching</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>plane_id</name> <operator>=</operator> <name>plane_id</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>ChromaNegotiation</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>propi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>planetype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>types</name><index>[]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"OVERLAY"</literal></expr>, <expr><literal type="string">"PRIMARY"</literal></expr>, <expr><literal type="string">"CURSOR"</literal></expr>, <expr><literal type="string">"UNKNOWN"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>drmModePlaneRes</name> <modifier>*</modifier></type><name>plane_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>drmModePlane</name> <modifier>*</modifier></type><name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>drmModeObjectProperties</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>drmModePropertyPtr</name></type> <name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>YUVFormat</name></decl>;</decl_stmt>





<expr_stmt><expr><name>plane_res</name> <operator>=</operator> <call><name>drmModeGetPlaneResources</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plane_res</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>plane_res</name><operator>-&gt;</operator><name>count_planes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"List of DRM supported modes on this machine:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>plane_res</name><operator>-&gt;</operator><name>count_planes</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>plane</name> <operator>=</operator> <call><name>drmModeGetPlane</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name><name>plane_res</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>plane</name><operator>-&gt;</operator><name>count_formats</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>drmModeObjectGetProperties</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>,
<argument><expr><name><name>plane</name><operator>-&gt;</operator><name>plane_id</name></name></expr></argument>,
<argument><expr><name>DRM_MODE_OBJECT_PLANE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>planetype</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>propi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>propi</name> <operator>&lt;</operator> <name><name>props</name><operator>-&gt;</operator><name>count_props</name></name></expr>;</condition> <incr><expr><name>propi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>drmModeGetProperty</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>props</name><index>[<expr><name>propi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>drmModeFreeProperty</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>drmModeFreeProperty</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>planetype</name> <operator>=</operator> <name><name>props</name><operator>-&gt;</operator><name>prop_values</name><index>[<expr><name>propi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>plane</name><operator>-&gt;</operator><name>count_formats</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>CheckFourCCList</name><argument_list>(<argument><expr><name><name>plane</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>plane</name><operator>-&gt;</operator><name>plane_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>forced_drm_fourcc</name></name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>plane_id</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>plane</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane_id</name></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>plane_id</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>planetype</name> <operator>!=</operator> <name>DRM_PLANE_TYPE_CURSOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"plane id %d type %s pipe %c format %2d: %.4s"</literal></expr></argument>,
<argument><expr><name><name>plane</name><operator>-&gt;</operator><name>plane_id</name></name></expr></argument>, <argument><expr><name><name>types</name><index>[<expr><name>planetype</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><literal type="char">'@'</literal><operator>+</operator><call><name>ffs</name><argument_list>(<argument><expr><name><name>plane</name><operator>-&gt;</operator><name>possible_crtcs</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>plane</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>drmModeFreePlane</name><argument_list>(<argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Couldn't get list of DRM formats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drmModeFreePlaneResources</name><argument_list>(<argument><expr><name>plane_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>drmModeFreePlaneResources</name><argument_list>(<argument><expr><name>plane_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>forced_drm_fourcc</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>fourccmatching</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>drm</name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name> <operator>=</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>vlc</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>plane_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Forced DRM fourcc (%.4s) not available in kernel."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>fourccmatching</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>vlc</name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>forced_drm_fourcc</name></name> <operator>&amp;&amp;</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name> <operator>=</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>drm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane_id</name></name> <operator>=</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>plane_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Forced VLC fourcc (%.4s) not matching anything available in kernel, please set manually"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>YUVFormat</name> <operator>=</operator> <call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>fourccmatching</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>isYUV</name> <operator>==</operator> <name>YUVFormat</name>
<operator>&amp;&amp;</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>forced_drm_fourcc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name> <operator>=</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>drm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane_id</name></name> <operator>=</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>plane_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name> <operator>=</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>vlc</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>fourccmatching</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>isYUV</name> <operator>!=</operator> <name>YUVFormat</name>
<operator>&amp;&amp;</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>present</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>forced_drm_fourcc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name> <operator>=</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>drm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane_id</name></name> <operator>=</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>plane_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name> <operator>=</operator> <name><name>fourccmatching</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>vlc</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CustomDestroyPicture</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_t</name> <modifier>*</modifier></type><name>psys</name> <init>= <expr><operator>(</operator><name>picture_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vout_display_sys_t</name> <operator>*</operator><operator>)</operator><name><name>psys</name><operator>-&gt;</operator><name>p_voutsys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>MAXHWBUF</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyFB</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>drmSetClientCap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name>DRM_CLIENT_CAP_UNIVERSAL_PLANES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drmDropMaster</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDisplay</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dumbRet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>drmModeConnector</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>drmModeRes</name> <modifier>*</modifier></type><name>modeRes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_connector</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>psz_device</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>KMS_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_device</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Don't know which DRM device to open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>=</operator> <call><name>vlc_open</name><argument_list>(<argument><expr><name>psz_device</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot open %s"</literal></expr></argument>, <argument><expr><name>psz_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmSetClientCap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name>DRM_CLIENT_CAP_UNIVERSAL_PLANES</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ChromaNegotiation</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err_out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Using VLC chroma '%.4s', DRM chroma '%.4s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>drmGetCap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name>DRM_CAP_DUMB_BUFFER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dumbRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>dumbRet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Device '%s' does not support dumb buffers"</literal></expr></argument>, <argument><expr><name>psz_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>modeRes</name> <operator>=</operator> <call><name>drmModeGetResources</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>modeRes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Didn't get DRM resources"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_out</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>modeRes</name><operator>-&gt;</operator><name>count_connectors</name></name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>crtc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>drmModeGetConnector</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name><name>modeRes</name><operator>-&gt;</operator><name>connectors</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found_connector</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetupDevice</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>modeRes</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>drvSuccess</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>drvTryNext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Cannot do setup for connector %u:%u"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><name><name>modeRes</name><operator>-&gt;</operator><name>connectors</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drmModeFreeConnector</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drmModeFreeResources</name><argument_list>(<argument><expr><name>modeRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>drmModeFreeConnector</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found_connector</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>drmModeFreeConnector</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>drmModeFreeResources</name><argument_list>(<argument><expr><name>modeRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_connector</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err_out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_sys_t</name> <modifier>*</modifier></type><name>psys</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>psys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psys</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err_out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>rsc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>psys</name></expr>,
<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>CustomDestroyPicture</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PICTURE_PLANE_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>psys</name><operator>-&gt;</operator><name>p_voutsys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name></name> <operator>=</operator> <call><name>picture_NewFromResource</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>picture</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_out</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>err_out</name>:</label>
<expr_stmt><expr><call><name>drmDropMaster</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>vd</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>args</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_SIZE</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_FILLED</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_ZOOM</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_ASPECT</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_CROP</name></expr>:</case>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drmModeSetPlane</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>plane_id</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>crtc</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fb</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>front_buf</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Cannot do set plane for plane id %u, fb %x"</literal></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>plane_id</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fb</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>front_buf</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>front_buf</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>front_buf</name></name> <operator>%=</operator> <name>MAXHWBUF</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PICTURE_PLANE_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator>
<name><name>sys</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>front_buf</name></name></expr>]</index></name><operator>+</operator><name><name>sys</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>drmDropMaster</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>local_vlc_chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>local_drm_chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chroma</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vout_display_cfg_IsWindowed</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name> <operator>=</operator> <call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"kms-vlc-chroma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>local_vlc_chroma</name> <operator>=</operator> <call><name>vlc_fourcc_GetCodecFromString</name><argument_list>(<argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>local_vlc_chroma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name> <operator>=</operator> <name>local_vlc_chroma</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Forcing VLC to use chroma '%4s'"</literal></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name> <operator>=</operator> <name><name>fmtp</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Chroma %4s invalid, using default"</literal></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name> <operator>=</operator> <name><name>fmtp</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Chroma not defined, using default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"kms-drm-chroma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>local_drm_chroma</name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><name><name>chroma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>chroma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>chroma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>chroma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>local_drm_chroma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>forced_drm_fourcc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drm_fourcc</name></name> <operator>=</operator> <name>local_drm_chroma</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Setting DRM chroma to '%4s'"</literal></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Chroma %4s invalid, using default"</literal></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OpenDisplay</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_ApplyRotation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>fmtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>vlc_fourcc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fmtp</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>Prepare</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>Display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"kms"</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>add_loadfile</name><argument_list>(<argument>KMS_VAR</argument>, <argument><literal type="string">"/dev/dri/card0"</literal></argument>, <argument>DEVICE_TEXT</argument>, <argument>DEVICE_LONGTEXT</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"kms-vlc-chroma"</literal></argument>, <argument>NULL</argument>, <argument>VLC_CHROMA_TEXT</argument>, <argument>VLC_CHROMA_LONGTEXT</argument>,
<argument>true</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"kms-drm-chroma"</literal></argument>, <argument>NULL</argument>, <argument>DRM_CHROMA_TEXT</argument>, <argument>DRM_CHROMA_LONGTEXT</argument>,
<argument>true</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument><literal type="string">"Linux kernel mode setting video output"</literal></argument>)</argument_list></macro>
<macro><name>set_callback_display</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">30</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>
</unit>
