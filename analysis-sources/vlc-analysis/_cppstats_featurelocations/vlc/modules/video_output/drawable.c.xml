<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\drawable.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWND_TEXT</name></cpp:macro> <cpp:value>N_("Window handle (HWND)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWND_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Video will be embedded in this pre-existing window. " "If zero, a new window will be created.")</cpp:value></cpp:define>



<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"Drawable"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"Embedded window video"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name> <argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"vout window"</literal></argument>, <argument><literal type="number">70</literal></argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>
<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"embed-hwnd"</literal></argument>)</argument_list></macro>

<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"drawable-hwnd"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>HWND_TEXT</argument>, <argument>HWND_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_volatile</name> <argument_list>()</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>



<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>serializer</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uintptr_t</name> <modifier>*</modifier></type><name>used</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vout_window_operations</name></name></type> <name>ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>Close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>val</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"drawable-hwnd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uintptr_t</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init>;</init> <condition><expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"HWND 0x%"</literal> <name>PRIXPTR</name> <literal type="string">" is busy"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>used</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>tab</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>used</name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>used</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<label><name>skip</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>VOUT_WINDOW_TYPE_HWND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>hwnd</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>val</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>used</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>used</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><name><name>used</name><index>[<expr><operator>++</operator><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
