<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\win32\win32touch.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32touch.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>DecodeGestureAction</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>win32_gesture_sys_t</name> <modifier>*</modifier></type><name>p_gesture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GESTUREINFO</name><modifier>*</modifier></type> <name>p_gi</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>DecodeGestureProjection</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>win32_gesture_sys_t</name> <modifier>*</modifier></type><name>p_gesture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GESTUREINFO</name><modifier>*</modifier></type> <name>p_gi</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>LRESULT</name></type> <name>DecodeGesture</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>win32_gesture_sys_t</name> <modifier>*</modifier></type><name>p_gesture</name></decl></parameter>,
<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_gesture</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DefWindowProc</name><argument_list>( <argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>GESTUREINFO</name></type> <name>gi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>gi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>GESTUREINFO</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>GESTUREINFO</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bResult</name> <init>= <expr><call><name><name>p_gesture</name><operator>-&gt;</operator><name>OurGetGestureInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>HGESTUREINFO</name><operator>)</operator><name>lParam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>bHandled</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>bResult</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bHandled</name> <operator>=</operator> <call><name><name>p_gesture</name><operator>-&gt;</operator><name>DecodeGestureImpl</name></name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_gesture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwErr</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>dwErr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Could not retrieve a valid GESTUREINFO structure"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>bHandled</name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><call><name><name>p_gesture</name><operator>-&gt;</operator><name>OurCloseGestureInfoHandle</name></name><argument_list>(<argument><expr><operator>(</operator><name>HGESTUREINFO</name><operator>)</operator><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>DefWindowProc</name><argument_list>( <argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>DecodeGestureAction</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>win32_gesture_sys_t</name> <modifier>*</modifier></type><name>p_gesture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GESTUREINFO</name><modifier>*</modifier></type> <name>p_gi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>bHandled</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<switch>switch <condition>( <expr><name><name>p_gi</name><operator>-&gt;</operator><name>dwID</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>GID_BEGIN</name></expr>:</case>

<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_lasty</name></name> <operator>=</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GID_END</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>==</operator> <name>GESTURE_ACTION_JUMP</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>action_id</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>&gt;</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>x</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action_id</name> <operator>=</operator> <name>ACTIONID_JUMP_BACKWARD_MEDIUM</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>action_id</name> <operator>=</operator> <name>ACTIONID_JUMP_BACKWARD_SHORT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action_id</name> <operator>=</operator> <name>ACTIONID_JUMP_FORWARD_MEDIUM</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>action_id</name> <operator>=</operator> <name>ACTIONID_JUMP_FORWARD_SHORT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>action_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>=</operator> <name>GESTURE_ACTION_UNDEFINED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>=</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GID_PAN</name></expr>:</case>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>GID_PAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bHandled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_gi</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>GF_BEGIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name><name>p_gi</name><operator>-&gt;</operator><name>ullArguments</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>==</operator> <name>GESTURE_ACTION_UNDEFINED</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>-</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>x</name></name></expr></argument> )</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>( <argument><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>-</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">50</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>-</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>x</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator>
<call><name>abs</name><argument_list>( <argument><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>-</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>=</operator> <name>GESTURE_ACTION_JUMP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>=</operator> <name>GESTURE_ACTION_BRIGHTNESS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>=</operator> <name>GESTURE_ACTION_VOLUME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>==</operator> <name>GESTURE_ACTION_VOLUME</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_lasty</name></name> <operator>-</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>offset</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>ACTIONID_VOL_UP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>ACTIONID_VOL_DOWN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_lasty</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>==</operator> <name>GESTURE_ACTION_BRIGHTNESS</name></expr> )</condition>
<block>{<block_content>














</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>GID_TWOFINGERTAP</name></expr>:</case>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>GID_TWOFINGERTAP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>ACTIONID_PLAY_PAUSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bHandled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GID_ZOOM</name></expr>:</case>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>GID_ZOOM</name></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name><name>p_gi</name><operator>-&gt;</operator><name>dwFlags</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>GF_BEGIN</name></expr>:</case>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_ullArguments</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ullArguments</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GF_END</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>p_gi</name><operator>-&gt;</operator><name>ullArguments</name></name><operator>)</operator> <operator>/</operator>
<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>p_gesture</name><operator>-&gt;</operator><name>i_ullArguments</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>k</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>,
<argument><expr><name>ACTIONID_TOGGLE_FULLSCREEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>,
<argument><expr><name>ACTIONID_LEAVE_FULLSCREEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Unmanaged dwFlag: %lx"</literal></expr></argument>, <argument><expr><name><name>p_gi</name><operator>-&gt;</operator><name>dwFlags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>bHandled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WM_VSCROLL</name></expr>:</case>
<expr_stmt><expr><name>bHandled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>bHandled</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>DecodeGestureProjection</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>win32_gesture_sys_t</name> <modifier>*</modifier></type><name>p_gesture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GESTUREINFO</name><modifier>*</modifier></type> <name>p_gi</name></decl></parameter> )</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>BOOL</name></type> <name>bHandled</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<switch>switch <condition>( <expr><name><name>p_gi</name><operator>-&gt;</operator><name>dwID</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>GID_BEGIN</name></expr>:</case>

<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_lasty</name></name> <operator>=</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GID_END</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>==</operator> <name>GESTURE_ACTION_JUMP</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>action_id</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>&gt;</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>x</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action_id</name> <operator>=</operator> <name>ACTIONID_JUMP_BACKWARD_SHORT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>action_id</name> <operator>=</operator> <name>ACTIONID_JUMP_FORWARD_SHORT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>action_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>=</operator> <name>GESTURE_ACTION_UNDEFINED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>=</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GID_PAN</name></expr>:</case>

<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>GID_PAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bHandled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_gi</name><operator>-&gt;</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>GF_BEGIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name><name>p_gi</name><operator>-&gt;</operator><name>ullArguments</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name> <operator>&amp;&amp;</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>==</operator> <name>GESTURE_ACTION_UNDEFINED</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>-</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>x</name></name></expr></argument> )</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>( <argument><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>-</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">50</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>-</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>x</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator>
<call><name>abs</name><argument_list>( <argument><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>-</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>=</operator> <name>GESTURE_ACTION_JUMP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>=</operator> <name>GESTURE_ACTION_VOLUME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>==</operator> <name>GESTURE_ACTION_VOLUME</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_lasty</name></name> <operator>-</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>offset</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>ACTIONID_VOL_UP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>offset</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>ACTIONID_VOL_DOWN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_lasty</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ptsLocation</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>GID_TWOFINGERTAP</name></expr>:</case>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>GID_TWOFINGERTAP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>ACTIONID_PLAY_PAUSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bHandled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GID_ZOOM</name></expr>:</case>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>GID_ZOOM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bHandled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name><name>p_gi</name><operator>-&gt;</operator><name>dwFlags</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>GF_BEGIN</name></expr>:</case>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_ullArguments</name></name> <operator>=</operator> <name><name>p_gi</name><operator>-&gt;</operator><name>ullArguments</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>f_lastzoom</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>p_gi</name><operator>-&gt;</operator><name>ullArguments</name></name><operator>)</operator> <operator>/</operator>
<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>p_gesture</name><operator>-&gt;</operator><name>i_ullArguments</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>f_lastzoom</name></name> <operator>*</operator> <literal type="number">1.01</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>ACTIONID_VIEWPOINT_FOV_IN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>f_lastzoom</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>f_lastzoom</name></name> <operator>*</operator> <literal type="number">0.99</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>ACTIONID_VIEWPOINT_FOV_OUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>f_lastzoom</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>WM_VSCROLL</name></expr>:</case>
<expr_stmt><expr><name>bHandled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>bHandled</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BOOL</name></type> <name>InitGestures</name><parameter_list>( <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>win32_gesture_sys_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_gesture</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_isProjected</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GESTURECONFIG</name></type> <name>config</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b_isProjected</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>config</name><operator>.</operator><name>dwID</name></name> <operator>=</operator> <name>GID_PAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>dwWant</name></name> <operator>=</operator> <name>GC_PAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>dwBlock</name></name> <operator>=</operator> <name>GC_PAN_WITH_INERTIA</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>dwID</name></name> <operator>=</operator> <name>GID_PAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>dwWant</name></name> <operator>=</operator> <name>GC_PAN</name> <operator>|</operator>
<name>GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY</name> <operator>|</operator>
<name>GC_PAN_WITH_SINGLE_FINGER_VERTICALLY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>dwBlock</name></name> <operator>=</operator> <name>GC_PAN_WITH_INERTIA</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>win32_gesture_sys_t</name> <modifier>*</modifier></type><name>p_gesture</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>win32_gesture_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_gesture</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_gesture</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>h_user32_dll</name> <init>= <expr><call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"user32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>h_user32_dll</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_gesture</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_gesture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurSetGestureConfig</name>) <parameter_list>(<parameter><decl><type><name>HWND</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>PGESTURECONFIG</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>OurSetGestureConfig</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h_user32_dll</name></expr></argument>, <argument><expr><literal type="string">"SetGestureConfig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>OurCloseGestureInfoHandle</name></name> <operator>=</operator>
<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h_user32_dll</name></expr></argument>, <argument><expr><literal type="string">"CloseGestureInfoHandle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>OurGetGestureInfo</name></name> <operator>=</operator>
<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h_user32_dll</name></expr></argument>, <argument><expr><literal type="string">"GetGestureInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>OurSetGestureConfig</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>OurSetGestureConfig</name><argument_list>(
<argument><expr><name>hwnd</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>config</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>GESTURECONFIG</name></expr></argument> )</argument_list></sizeof></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b_isProjected</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>DecodeGestureImpl</name></name> <operator>=</operator> <name>DecodeGestureProjection</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>DecodeGestureImpl</name></name> <operator>=</operator> <name>DecodeGestureAction</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>b_2fingers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_action</name></name> <operator>=</operator> <name>GESTURE_ACTION_UNDEFINED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginx</name></name> <operator>=</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>i_beginy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>i_lasty</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>huser_dll</name></name> <operator>=</operator> <name>h_user32_dll</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_gesture</name> <operator>=</operator> <name>p_gesture</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CloseGestures</name><parameter_list>( <parameter><decl><type><name>win32_gesture_sys_t</name> <modifier>*</modifier></type><name>p_gesture</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_gesture</name> <operator>&amp;&amp;</operator> <name><name>p_gesture</name><operator>-&gt;</operator><name>huser_dll</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><name><name>p_gesture</name><operator>-&gt;</operator><name>huser_dll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_gesture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
