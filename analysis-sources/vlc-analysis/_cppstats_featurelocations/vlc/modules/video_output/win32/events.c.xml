<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\win32\events.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32touch.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windowsx.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>




<struct>struct <name>event_thread_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ready</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_bool</name></type> <name>b_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_error</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>is_projected</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>win32_gesture_sys_t</name> <modifier>*</modifier></type><name>p_gesture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>window_area</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>parent_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>class_video</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hparent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hvideownd</name></decl>;</decl_stmt>
}</block>;</struct>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Win32VoutCreateWindow</name><parameter_list>( <parameter><decl><type><name>event_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Win32VoutCloseWindow</name> <parameter_list>( <parameter><decl><type><name>event_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>









<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>EventThread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>event_thread_t</name> <modifier>*</modifier></type><name>p_event</name> <init>= <expr><operator>(</operator><name>event_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><call><name>Win32VoutCreateWindow</name><argument_list>( <argument><expr><name>p_event</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_error</name> <init>= <expr><name><name>p_event</name><operator>-&gt;</operator><name>b_error</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_error</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetMessage</name><argument_list>( <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>b_done</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Win32 Vout EventThread terminating"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Win32VoutCloseWindow</name><argument_list>( <argument><expr><name>p_event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>event_thread_t</name> <modifier>*</modifier></type><name>EventThreadCreate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>parent_window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parent_window</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VOUT_WINDOW_TYPE_HWND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"creating Vout EventThread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>event_thread_t</name> <modifier>*</modifier></type><name>p_event</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_event</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_event</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>b_done</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>parent_window</name></name> <operator>=</operator> <name>parent_window</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>class_video</name></name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>class_video</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"VLC video output %p"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_event</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>EventThreadDestroy</name><parameter_list>( <parameter><decl><type><name>event_thread_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>EventThreadStart</name><parameter_list>( <parameter><decl><type><name>event_thread_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter>, <parameter><decl><type><name>event_hwnd_t</name> <modifier>*</modifier></type><name>p_hwnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>event_cfg_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>is_projected</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>is_projected</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>window_area</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>window_area</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>window_area</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>window_area</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>b_done</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>EventThread</name></expr></argument>, <argument><expr><name>p_event</name></expr></argument>,
<argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cannot create Vout EventThread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><operator>!</operator><name><name>p_event</name><operator>-&gt;</operator><name>b_ready</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_error</name> <init>= <expr><name><name>p_event</name><operator>-&gt;</operator><name>b_error</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_error</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Vout EventThread running"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_hwnd</name><operator>-&gt;</operator><name>parent_window</name></name> <operator>=</operator> <name><name>p_event</name><operator>-&gt;</operator><name>parent_window</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_hwnd</name><operator>-&gt;</operator><name>hparent</name></name> <operator>=</operator> <name><name>p_event</name><operator>-&gt;</operator><name>hparent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_hwnd</name><operator>-&gt;</operator><name>hvideownd</name></name> <operator>=</operator> <name><name>p_event</name><operator>-&gt;</operator><name>hvideownd</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>EventThreadStop</name><parameter_list>( <parameter><decl><type><name>event_thread_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_event</name><operator>-&gt;</operator><name>b_ready</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>b_done</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_event</name><operator>-&gt;</operator><name>hvideownd</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>hvideownd</name></name></expr></argument>, <argument><expr><name>WM_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>long</name> <name>FAR</name> <name>PASCAL</name></type> <name>VideoEventProc</name><parameter_list>( <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,
<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>message</name> <operator>==</operator> <name>WM_CREATE</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>CREATESTRUCT</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>CREATESTRUCT</name> <operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>lpCreateParams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>LONG_PTR</name></type> <name>p_user_data</name> <init>= <expr><call><name>GetWindowLongPtr</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_user_data</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>event_thread_t</name> <modifier>*</modifier></type><name>p_event</name> <init>= <expr><operator>(</operator><name>event_thread_t</name> <operator>*</operator><operator>)</operator><name>p_user_data</name></expr></init></decl>;</decl_stmt>


<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
<switch>switch<condition>( <expr><name>message</name></expr> )</condition>
<block>{<block_content>

<case>case <expr><name>WM_CLOSE</name></expr>:</case>
<expr_stmt><expr><call><name>vout_window_ReportClose</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>parent_window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>


<case>case <expr><name>WM_DESTROY</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"WinProc WM_DESTROY"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PostQuitMessage</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>WM_GESTURE</name></expr>:</case>
<return>return <expr><call><name>DecodeGesture</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>p_gesture</name></name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument> )</argument_list></call></expr>;</return>






<case>case <expr><name>WM_ERASEBKGND</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>WM_PAINT</name></expr>:</case>

<expr_stmt><expr><call><name>ValidateRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>
<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>Win32VoutCreateWindow</name><parameter_list>( <parameter><decl><type><name>event_thread_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WNDCLASS</name></type> <name>wc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_style</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Win32VoutCreateWindow"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>hInstance</name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>parent_window</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VOUT_WINDOW_TYPE_HWND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>hparent</name></name> <operator>=</operator> <name><name>p_event</name><operator>-&gt;</operator><name>parent_window</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>hwnd</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_OWNDC</name><operator>|</operator><name>CS_DBLCLKS</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <operator>(</operator><name>WNDPROC</name><operator>)</operator><name>VideoEventProc</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>cbClsExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>cbWndExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <name>hInstance</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hbrBackground</name></name> <operator>=</operator> <call><name>GetStockObject</name><argument_list>(<argument><expr><name>BLACK_BRUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpszMenuName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name><name>p_event</name><operator>-&gt;</operator><name>class_video</name></name></expr>;</expr_stmt> 


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>RegisterClass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Win32VoutCreateWindow RegisterClass FAILED (err=%lu)"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_style</name> <operator>=</operator> <name>WS_VISIBLE</name><operator>|</operator><name>WS_CLIPCHILDREN</name><operator>|</operator><name>WS_CHILD</name><operator>|</operator><name>WS_DISABLED</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>hvideownd</name></name> <operator>=</operator>
<call><name>CreateWindowEx</name><argument_list>( <argument><expr><name>WS_EX_NOPARENTNOTIFY</name> <operator>|</operator> <name>WS_EX_NOACTIVATE</name></expr></argument>,
<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>class_video</name></name></expr></argument>, 
<argument><expr><macro><name>TEXT</name><argument_list>(<argument>VOUT_TITLE</argument>)</argument_list></macro> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" (VLC Video Output)"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>i_style</name></expr></argument>, 
<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, 
<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, 
<argument><expr><call><name>RECTWidth</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>window_area</name></name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><call><name>RECTHeight</name><argument_list>(<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>window_area</name></name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>hparent</name></name></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><name>hInstance</name></expr></argument>, 
<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><name>p_event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_event</name><operator>-&gt;</operator><name>hvideownd</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Win32VoutCreateWindow create window FAILED (err=%lu)"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"created video window"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>LONG</name></type> <name>parent_style</name> <init>= <expr><call><name>GetWindowLong</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>hparent</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>parent_style</name> <operator>&amp;</operator> <name>WS_CLIPCHILDREN</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>hparent</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>,
<argument><expr><name>parent_style</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>InitGestures</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>hvideownd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>p_gesture</name></name></expr></argument>, <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>is_projected</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ShowWindow</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>hvideownd</name></name></expr></argument>, <argument><expr><name>SW_SHOWNOACTIVATE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>Win32VoutCloseWindow</name><parameter_list>( <parameter><decl><type><name>event_thread_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Win32VoutCloseWindow"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>hvideownd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hInstance</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UnregisterClass</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>class_video</name></name></expr></argument>, <argument><expr><name>hInstance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseGestures</name><argument_list>( <argument><expr><name><name>p_event</name><operator>-&gt;</operator><name>p_gesture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
