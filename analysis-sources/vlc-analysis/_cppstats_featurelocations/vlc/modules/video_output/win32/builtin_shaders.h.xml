<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\win32\builtin_shaders.h">





















<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>shader_disabled_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"sampler2D screen;\n"</literal>
<literal type="string">"float4 main(float2 screenCoords : TEXCOORD0) : COLOR\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" return saturate(tex2D(screen, screenCoords.xy));\n"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>shader_invert_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"sampler2D screen;\n"</literal>
<literal type="string">"float4 main(float2 screenCoords : TEXCOORD0) : COLOR\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" float4 color = tex2D(screen, screenCoords.xy);\n"</literal>
<literal type="string">" color.r = 1.0 - color.r;\n"</literal>
<literal type="string">" color.g = 1.0 - color.g;\n"</literal>
<literal type="string">" color.b = 1.0 - color.b;\n"</literal>
<literal type="string">" return color;\n"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>shader_grayscale_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"sampler2D screen;\n"</literal>
<literal type="string">"float4 main(float2 screenCoords : TEXCOORD0) : COLOR0\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" float4 color = tex2D(screen, screenCoords.xy);\n"</literal>
<literal type="string">" float gray = 0.2989 * color.r + 0.5870 * color.g + 0.1140 * color.b;\n"</literal>
<literal type="string">" color.r = color.g = color.b = gray;\n"</literal>
<literal type="string">" return color;\n"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>shader_convert601to709_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"sampler2D screen;\n"</literal>
<literal type="string">"float4 rgb_to_yuv601(float4 RGB)\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" float Kr = 0.299;\n"</literal>
<literal type="string">" float Kg = 0.587;\n"</literal>
<literal type="string">" float Kb = 0.114;\n"</literal>
<literal type="string">" float Y = Kr*RGB.r + Kg*RGB.g + Kb*RGB.b;\n"</literal>
<literal type="string">" float V = (RGB.r-Y)/(1-Kr);\n"</literal>
<literal type="string">" float U = (RGB.b-Y)/(1-Kb);\n"</literal>
<literal type="string">" return float4(Y,U,V,1);\n"</literal>
<literal type="string">"}\n"</literal>

<literal type="string">"float4 yuv709_to_rgb(float4 YUV)\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" float Kr = 0.2125;\n"</literal>
<literal type="string">" float Kg = 0.7154;\n"</literal>
<literal type="string">" float Kb = 0.0721;\n"</literal>
<literal type="string">" float Y = YUV.x;\n"</literal>
<literal type="string">" float U = YUV.y;\n"</literal>
<literal type="string">" float V = YUV.z;\n"</literal>
<literal type="string">" float R = Y + V*(1-Kr);\n"</literal>
<literal type="string">" float G = Y - U*(1-Kb)*Kb/Kg - V*(1-Kr)*Kr/Kg;\n"</literal>
<literal type="string">" float B = Y + U*(1-Kb);\n"</literal>
<literal type="string">" return float4(R,G,B,1);\n"</literal>
<literal type="string">"}\n"</literal>

<literal type="string">"float4 main(float2 screenCoords : TEXCOORD0) : COLOR0\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" float4 color = tex2D(screen, screenCoords.xy);\n"</literal>
<literal type="string">" return yuv709_to_rgb(rgb_to_yuv601(color));\n"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>shader_gammacorrection18_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"sampler2D screen;\n"</literal>
<literal type="string">"float4 main(float2 screenCoords : TEXCOORD0) : COLOR0\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" float4 color = tex2D( screen, screenCoords.xy);\n"</literal>
<literal type="string">" color = pow(color,1.0/1.8);\n"</literal>
<literal type="string">" return color;\n"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>shader_gammacorrection22_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"sampler2D screen;\n"</literal>
<literal type="string">"float4 main(float2 screenCoords : TEXCOORD0) : COLOR0\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" float4 color = tex2D( screen, screenCoords.xy);\n"</literal>
<literal type="string">" color = pow(color,1.0/2.2);\n"</literal>
<literal type="string">" return color;\n"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>shader_gammacorrectionbt709_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"sampler2D screen;\n"</literal>
<literal type="string">"float4 main(float2 screenCoords : TEXCOORD0) : COLOR0\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" float4 color = tex2D(screen, screenCoords.xy);\n"</literal>
<literal type="string">" if(color.r &gt; 0.018)\n"</literal>
<literal type="string">" color.r = 1.099 * pow(color.r,0.45) - 0.099;\n"</literal>
<literal type="string">" else\n"</literal>
<literal type="string">" color.r = 4.5138 * color.r;\n"</literal>
<literal type="string">" if(color.g &gt; 0.018)\n"</literal>
<literal type="string">" color.g = 1.099 * pow(color.g,0.45) - 0.099;\n"</literal>
<literal type="string">" else\n"</literal>
<literal type="string">" color.g = 4.5138 * color.g;\n"</literal>
<literal type="string">" if(color.b &gt; 0.018)\n"</literal>
<literal type="string">" color.b = 1.099 * pow(color.b,0.45) - 0.099;\n"</literal>
<literal type="string">" else\n"</literal>
<literal type="string">" color.b = 4.5138 * color.b;\n"</literal>
<literal type="string">" return color;\n"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>shader_widencolorspace_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"sampler2D screen;\n"</literal>
<literal type="string">"float4 main(float2 screenCoords : TEXCOORD0) : COLOR0\n"</literal>
<literal type="string">"{\n"</literal>
<literal type="string">" float4 color = tex2D(screen, screenCoords.xy);\n"</literal>
<literal type="string">" color.r = max(color.r - 0.0627450980392157,0) * 1.164383561643836;\n"</literal>
<literal type="string">" color.g = max(color.g - 0.0627450980392157,0) * 1.164383561643836;\n"</literal>
<literal type="string">" color.b = max(color.b - 0.0627450980392157,0) * 1.164383561643836;\n"</literal>
<literal type="string">" return saturate(color);\n"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
}</block></struct></type> <name>builtin_shader_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>builtin_shader_t</name></type> <name><name>builtin_shaders</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"Disabled"</literal></expr>, <expr><name>shader_disabled_source</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Invert"</literal></expr>, <expr><name>shader_invert_source</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Grayscale"</literal></expr>, <expr><name>shader_grayscale_source</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Convert601to709"</literal></expr>, <expr><name>shader_convert601to709_source</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GammaCorrection18"</literal></expr>, <expr><name>shader_gammacorrection18_source</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GammaCorrection22"</literal></expr>, <expr><name>shader_gammacorrection22_source</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GammaCorrectionBT709"</literal></expr>, <expr><name>shader_gammacorrectionbt709_source</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"WidenColorSpace"</literal></expr>, <expr><name>shader_widencolorspace_source</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN_SHADERS_COUNT</name></cpp:macro> <cpp:value>(sizeof(builtin_shaders)/sizeof(builtin_shaders[0]))</cpp:value></cpp:define>
</unit>
