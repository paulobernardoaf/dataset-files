<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\win32\wgl.c">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_opengl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../opengl/vout_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glew.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/wglew.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HW_GPU_AFFINITY_TEXT</name></cpp:macro> <cpp:value>N_("GPU affinity")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"WGL"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"WGL extension for OpenGL"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"gpu-affinity"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>HW_GPU_AFFINITY_TEXT</argument>, <argument>HW_GPU_AFFINITY_TEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"opengl"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"wgl"</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>





<struct>struct <name>vout_display_sys_t</name>
<block>{
<decl_stmt><decl><type><name>HWND</name></type> <name>hvideownd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>hGLDC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLRC</name></type> <name>hGLRC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>affinityHDC</name></decl>;</decl_stmt> 

<struct>struct
<block>{
<decl_stmt><decl><type><name>PFNWGLGETEXTENSIONSSTRINGEXTPROC</name></type> <name>GetExtensionsStringEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLGETEXTENSIONSSTRINGARBPROC</name></type> <name>GetExtensionsStringARB</name></decl>;</decl_stmt>
}</block> <decl><name>exts</name></decl>;</struct>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Swap</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>OurGetProcAddress</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MakeCurrent</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseCurrent</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>GetExtensionsString</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_PFD_INITIALIZER</name></cpp:macro> <cpp:value>{ .nSize = sizeof(PIXELFORMATDESCRIPTOR), .nVersion = 1, .dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER, .iPixelType = PFD_TYPE_RGBA, .cColorBits = 24, .cDepthBits = 16, .iLayerType = PFD_MAIN_PLANE, }</cpp:value></cpp:define>










<function><type><specifier>static</specifier> <name>void</name></type> <name>CreateGPUAffinityDC</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>nVidiaAffinity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name> <init>= <expr><name>VLC_PFD_INITIALIZER</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>HDC</name></type> <name>winDC</name> <init>= <expr><call><name>GetDC</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hvideownd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetPixelFormat</name><argument_list>(<argument><expr><name>winDC</name></expr></argument>, <argument><expr><call><name>ChoosePixelFormat</name><argument_list>(<argument><expr><name>winDC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HGLRC</name></type> <name>hGLRC</name> <init>= <expr><call><name>wglCreateContext</name><argument_list>(<argument><expr><name>winDC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>winDC</name></expr></argument>, <argument><expr><name>hGLRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>PFNWGLENUMGPUSNVPROC</name></type> <name>fncEnumGpusNV</name> <init>= <expr><operator>(</operator><name>PFNWGLENUMGPUSNVPROC</name><operator>)</operator><call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglEnumGpusNV"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLCREATEAFFINITYDCNVPROC</name></type> <name>fncCreateAffinityDCNV</name> <init>= <expr><operator>(</operator><name>PFNWGLCREATEAFFINITYDCNVPROC</name><operator>)</operator><call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglCreateAffinityDCNV"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name>hGLRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fncEnumGpusNV</name> <operator>||</operator> <operator>!</operator><name>fncCreateAffinityDCNV</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>HGPUNV</name></type> <name><name>GpuMask</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>GpuMask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>GpuMask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HGPUNV</name></type> <name>hGPU</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fncEnumGpusNV</name><argument_list>(<argument><expr><name>nVidiaAffinity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hGPU</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>GpuMask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>hGPU</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>affinityHDC</name></name> <operator>=</operator> <call><name>fncCreateAffinityDCNV</name><argument_list>(<argument><expr><name>GpuMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>affinityHDC</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetPixelFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>affinityHDC</name></name></expr></argument>,
<argument><expr><call><name>ChoosePixelFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>affinityHDC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><literal type="string">"GPU affinity set to adapter: %d"</literal></expr></argument>, <argument><expr><name>nVidiaAffinity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroyGPUAffinityDC</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>affinityHDC</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name> <init>= <expr><name>VLC_PFD_INITIALIZER</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>HDC</name></type> <name>winDC</name> <init>= <expr><call><name>GetDC</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hvideownd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetPixelFormat</name><argument_list>(<argument><expr><name>winDC</name></expr></argument>, <argument><expr><call><name>ChoosePixelFormat</name><argument_list>(<argument><expr><name>winDC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HGLRC</name></type> <name>hGLRC</name> <init>= <expr><call><name>wglCreateContext</name><argument_list>(<argument><expr><name>winDC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name>winDC</name></expr></argument>, <argument><expr><name>hGLRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>PFNWGLDELETEDCNVPROC</name></type> <name>fncDeleteDCNV</name> <init>= <expr><operator>(</operator><name>PFNWGLDELETEDCNVPROC</name><operator>)</operator><call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglDeleteDCNV"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name>hGLRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fncDeleteDCNV</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>fncDeleteDCNV</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>affinityHDC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>nVidiaAffinity</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><literal type="string">"gpu-affinity"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nVidiaAffinity</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CreateGPUAffinityDC</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><name>nVidiaAffinity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>surface</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wnd</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VOUT_WINDOW_TYPE_HWND</name> <operator>||</operator> <name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>hwnd</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hvideownd</name></name> <operator>=</operator> <name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>hwnd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hvideownd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><literal type="string">"Could not get the device context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>PIXELFORMATDESCRIPTOR</name></type> <name>pfd</name> <init>= <expr><name>VLC_PFD_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetPixelFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr></argument>, <argument><expr><call><name>ChoosePixelFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLRC</name></name> <operator>=</operator> <call><name>wglCreateContext</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>affinityHDC</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>affinityHDC</name></name></expr> </then><else>: <expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hGLRC</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><literal type="string">"Could not create the OpenGL rendering context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLRC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
int attribsDesired[] = {
WGL_DRAW_TO_WINDOW_ARB, 1,
WGL_ACCELERATION_ARB, WGL_FULL_ACCELERATION_ARB,
WGL_RED_BITS_ARB, 10,
WGL_GREEN_BITS_ARB, 10,
WGL_BLUE_BITS_ARB, 10,
WGL_ALPHA_BITS_ARB, 2,
WGL_DOUBLE_BUFFER_ARB, 1,
0,0
};

UINT nMatchingFormats;
int index = 0;
PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB__ = (PFNWGLCHOOSEPIXELFORMATARBPROC)wglGetProcAddress( "wglChoosePixelFormatARB" );
if (wglChoosePixelFormatARB__!= NULL)
wglChoosePixelFormatARB__(sys-&gt;hGLDC, attribsDesired, NULL, 1, &amp;index, &amp;nMatchingFormats);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WGL_EXT_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensions</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>, <argument><expr><literal type="string">"WGL_EXT_swap_control"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PFNWGLSWAPINTERVALEXTPROC</name></type> <name>SwapIntervalEXT</name> <init>= <expr><operator>(</operator><name>PFNWGLSWAPINTERVALEXTPROC</name><operator>)</operator><call><name>wglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"wglSwapIntervalEXT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>SwapIntervalEXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SwapIntervalEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_EXT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys-&gt;exts.name = (type) wglGetProcAddress("wgl" #name )</cpp:value></cpp:define>


<expr_stmt><expr><call><name>LOAD_EXT</name><argument_list>(<argument><expr><name>GetExtensionsStringEXT</name></expr></argument>, <argument><expr><name>PFNWGLGETEXTENSIONSSTRINGEXTPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>exts</name><operator>.</operator><name>GetExtensionsStringEXT</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LOAD_EXT</name><argument_list>(<argument><expr><name>GetExtensionsStringARB</name></expr></argument>, <argument><expr><name>PFNWGLGETEXTENSIONSSTRINGARBPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>ext</name></name> <operator>=</operator> <name>VLC_GL_EXT_WGL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>makeCurrent</name></name> <operator>=</operator> <name>MakeCurrent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>releaseCurrent</name></name> <operator>=</operator> <name>ReleaseCurrent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>resize</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>swap</name></name> <operator>=</operator> <name>Swap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>getProcAddress</name></name> <operator>=</operator> <name>OurGetProcAddress</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>exts</name><operator>.</operator><name>GetExtensionsStringEXT</name></name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>exts</name><operator>.</operator><name>GetExtensionsStringARB</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>wgl</name><operator>.</operator><name>getExtensionsString</name></name> <operator>=</operator> <name>GetExtensionsString</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>width</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>height</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hGLRC</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wglDeleteContext</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLRC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hvideownd</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DestroyGPUAffinityDC</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Swap</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SwapBuffers</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>OurGetProcAddress</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>wglGetProcAddress</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MakeCurrent</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>wglMakeCurrent</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLRC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseCurrent</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wglMakeCurrent</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetExtensionsString</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>exts</name><operator>.</operator><name>GetExtensionsStringEXT</name></name></expr> ?</condition><then>
<expr><call><name><name>sys</name><operator>-&gt;</operator><name>exts</name><operator>.</operator><name>GetExtensionsStringEXT</name></name><argument_list>()</argument_list></call></expr> </then><else>:
<expr><call><name><name>sys</name><operator>-&gt;</operator><name>exts</name><operator>.</operator><name>GetExtensionsStringARB</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hGLDC</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
