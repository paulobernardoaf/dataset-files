<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\win32\window.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECTWidth</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LONG)((r).right - (r).left)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECTHeight</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LONG)((r).bottom - (r).top)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_VLC_CHANGE_TEXT</name></cpp:macro> <cpp:value>(WM_APP + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_VLC_SET_TOP_STATE</name></cpp:macro> <cpp:value>(WM_APP + 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDM_TOGGLE_ON_TOP</name></cpp:macro> <cpp:value>(WM_USER + 1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>vout_window_sys_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_sem_t</name></type> <name>ready</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>class_main</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HICON</name></type> <name>vlc_icon</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>button_pressed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>is_cursor_hidden</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCURSOR</name></type> <name>cursor_arrow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCURSOR</name></type> <name>cursor_empty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>hide_timeout</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_moved</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>WINDOWPLACEMENT</name></type> <name>window_placement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>i_window_style</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier><specifier>_Atomic</specifier></type> <name>pwz_title</name></decl>;</decl_stmt>
}</block></struct></type> <name>vout_window_sys_t</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Resize</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>RECT</name></type> <name>decorated_window</name> <init>= <expr><block>{
<expr><operator>.</operator><name>right</name> <operator>=</operator> <name>width</name></expr>,
<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name>height</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>i_window_style</name> <init>= <expr><call><name>GetWindowLong</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AdjustWindowRect</name><argument_list>( <argument><expr><operator>&amp;</operator><name>decorated_window</name></expr></argument>, <argument><expr><name>i_window_style</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>RECTWidth</name><argument_list>(<argument><expr><name>decorated_window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RECTHeight</name><argument_list>(<argument><expr><name>decorated_window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SWP_NOZORDER</name><operator>|</operator><name>SWP_NOMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Enable</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_window_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>i_window_style</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>is_decorated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_window_style</name> <operator>=</operator> <name>WS_OVERLAPPEDWINDOW</name> <operator>|</operator> <name>WS_SIZEBOX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_window_style</name> <operator>=</operator> <name>WS_POPUP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>i_window_style</name> <operator>|=</operator> <name>WS_CLIPCHILDREN</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_mouse_support</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"mouse-events"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_key_support</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"keyboard-events"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_mouse_support</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_key_support</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_window_style</name> <operator>|=</operator> <name>WS_DISABLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>i_window_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>x</name></name> <operator>||</operator> <name><name>cfg</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MoveWindow</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Resize</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetState</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_VLC_SET_TOP_STATE</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetTitle</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"video-title"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pwz_title</name> <init>= <expr><call><name>ToWide</name><argument_list>(<argument><expr><ternary><condition><expr><name>psz_title</name></expr> ?</condition><then> <expr><name>psz_title</name></expr> </then><else>: <expr><name>title</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pwz_title</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>atomic_exchange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pwz_title</name></name></expr></argument>, <argument><expr><name>pwz_title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_VLC_CHANGE_TEXT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetFullscreen</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"entering fullscreen mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window_placement</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WINDOWPLACEMENT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetWindowPlacement</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_placement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_window_style</name></name> <operator>=</operator> <call><name>GetWindowLong</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name>WS_CLIPCHILDREN</name> <operator>|</operator> <name>WS_VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>HMONITOR</name></type> <name>hmon</name> <init>= <expr><call><name>MonitorFromWindow</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>MONITOR_DEFAULTTONEAREST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MONITORINFO</name></type> <name>mi</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MONITORINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetMonitorInfo</name><argument_list>(<argument><expr><name>hmon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><call><name>RECTWidth</name><argument_list>(<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>RECTHeight</name><argument_list>(<argument><expr><name><name>mi</name><operator>.</operator><name>rcMonitor</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SWP_NOZORDER</name><operator>|</operator><name>SWP_FRAMECHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UnsetFullscreen</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"leaving fullscreen mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>window_placement</name><operator>.</operator><name>length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetWindowLong</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>GWL_STYLE</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_window_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPlacement</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>window_placement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window_placement</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>SW_SHOWNORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetAbove</name><parameter_list>( <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vout_window_state</name></name></type> <name>state</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VOUT_WINDOW_STATE_NORMAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetWindowLong</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>WS_EX_TOPMOST</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>HMENU</name></type> <name>hMenu</name> <init>= <expr><call><name>GetSystemMenu</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CheckMenuItem</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>IDM_TOGGLE_ON_TOP</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name> <operator>|</operator> <name>MFS_UNCHECKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>HWND_NOTOPMOST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOSIZE</name><operator>|</operator><name>SWP_NOMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VOUT_WINDOW_STATE_ABOVE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>GetWindowLong</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>GWL_EXSTYLE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>WS_EX_TOPMOST</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>HMENU</name></type> <name>hMenu</name> <init>= <expr><call><name>GetSystemMenu</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CheckMenuItem</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>IDM_TOGGLE_ON_TOP</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name> <operator>|</operator> <name>MFS_CHECKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>HWND_TOPMOST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VOUT_WINDOW_STATE_BELOW</name></expr>:</case>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>HWND_BOTTOM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_NOSIZE</name> <operator>|</operator> <name>SWP_NOMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MousePressed</name><parameter_list>( <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>button</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetCapture</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>button</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_window_ReportMousePressed</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MouseReleased</name><parameter_list>( <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>button</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>button</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseCapture</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vout_window_ReportMouseReleased</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_dxkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_vlckey</name></decl>;</decl_stmt>

}</block> <decl><name><name>dxkeys_to_vlckeys</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>VK_F1</name></expr>, <expr><name>KEY_F1</name></expr> }</block></expr>, <expr><block>{ <expr><name>VK_F2</name></expr>, <expr><name>KEY_F2</name></expr> }</block></expr>, <expr><block>{ <expr><name>VK_F3</name></expr>, <expr><name>KEY_F3</name></expr> }</block></expr>, <expr><block>{ <expr><name>VK_F4</name></expr>, <expr><name>KEY_F4</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_F5</name></expr>, <expr><name>KEY_F5</name></expr> }</block></expr>, <expr><block>{ <expr><name>VK_F6</name></expr>, <expr><name>KEY_F6</name></expr> }</block></expr>, <expr><block>{ <expr><name>VK_F7</name></expr>, <expr><name>KEY_F7</name></expr> }</block></expr>, <expr><block>{ <expr><name>VK_F8</name></expr>, <expr><name>KEY_F8</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_F9</name></expr>, <expr><name>KEY_F9</name></expr> }</block></expr>, <expr><block>{ <expr><name>VK_F10</name></expr>, <expr><name>KEY_F10</name></expr> }</block></expr>, <expr><block>{ <expr><name>VK_F11</name></expr>, <expr><name>KEY_F11</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_F12</name></expr>, <expr><name>KEY_F12</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_RETURN</name></expr>, <expr><name>KEY_ENTER</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_SPACE</name></expr>, <expr><literal type="char">' '</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_ESCAPE</name></expr>, <expr><name>KEY_ESC</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_LEFT</name></expr>, <expr><name>KEY_LEFT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_RIGHT</name></expr>, <expr><name>KEY_RIGHT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_UP</name></expr>, <expr><name>KEY_UP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_DOWN</name></expr>, <expr><name>KEY_DOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_HOME</name></expr>, <expr><name>KEY_HOME</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_END</name></expr>, <expr><name>KEY_END</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_PRIOR</name></expr>, <expr><name>KEY_PAGEUP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_NEXT</name></expr>, <expr><name>KEY_PAGEDOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_INSERT</name></expr>, <expr><name>KEY_INSERT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_DELETE</name></expr>, <expr><name>KEY_DELETE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_CONTROL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_SHIFT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_MENU</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_BROWSER_BACK</name></expr>, <expr><name>KEY_BROWSER_BACK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_BROWSER_FORWARD</name></expr>, <expr><name>KEY_BROWSER_FORWARD</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_BROWSER_REFRESH</name></expr>, <expr><name>KEY_BROWSER_REFRESH</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_BROWSER_STOP</name></expr>, <expr><name>KEY_BROWSER_STOP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_BROWSER_SEARCH</name></expr>, <expr><name>KEY_BROWSER_SEARCH</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_BROWSER_FAVORITES</name></expr>, <expr><name>KEY_BROWSER_FAVORITES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_BROWSER_HOME</name></expr>, <expr><name>KEY_BROWSER_HOME</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_VOLUME_MUTE</name></expr>, <expr><name>KEY_VOLUME_MUTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_VOLUME_DOWN</name></expr>, <expr><name>KEY_VOLUME_DOWN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_VOLUME_UP</name></expr>, <expr><name>KEY_VOLUME_UP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_MEDIA_NEXT_TRACK</name></expr>, <expr><name>KEY_MEDIA_NEXT_TRACK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_MEDIA_PREV_TRACK</name></expr>, <expr><name>KEY_MEDIA_PREV_TRACK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_MEDIA_STOP</name></expr>, <expr><name>KEY_MEDIA_STOP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VK_MEDIA_PLAY_PAUSE</name></expr>, <expr><name>KEY_MEDIA_PLAY_PAUSE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Win32VoutConvertKey</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>dxkeys_to_vlckeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_dxkey</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>dxkeys_to_vlckeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_dxkey</name> <operator>==</operator> <name>i_key</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name><name>dxkeys_to_vlckeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_vlckey</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>long</name> <name>FAR</name> <name>PASCAL</name></type> <name>WinVoutEventProc</name><parameter_list>( <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,
<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>message</name> <operator>==</operator> <name>WM_CREATE</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>CREATESTRUCT</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>CREATESTRUCT</name> <operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>lpCreateParams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>LONG_PTR</name></type> <name>p_user_data</name> <init>= <expr><call><name>GetWindowLongPtr</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_user_data</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><operator>(</operator><name>vout_window_t</name> <operator>*</operator><operator>)</operator><name>p_user_data</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>message</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>WM_CLOSE</name></expr>:</case>
<expr_stmt><expr><call><name>vout_window_ReportClose</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>WM_DESTROY</name></expr>:</case>
<expr_stmt><expr><call><name>PostQuitMessage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>WM_SIZE</name></expr>:</case>
<expr_stmt><expr><call><name>vout_window_ReportSize</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>WM_MOUSEMOVE</name></expr>:</case>
<expr_stmt><expr><call><name>vout_window_ReportMouseMoved</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WM_NCMOUSEMOVE</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>WM_CAPTURECHANGED</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>button</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name></expr>;</condition> <incr><expr><name>button</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>button</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name> <operator>&amp;</operator> <name>m</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_window_ReportMouseReleased</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name> <operator>&amp;=</operator> <operator>~</operator><name>m</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_LBUTTONDOWN</name></expr>:</case>
<expr_stmt><expr><call><name>MousePressed</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>WM_LBUTTONUP</name></expr>:</case>
<expr_stmt><expr><call><name>MouseReleased</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>WM_LBUTTONDBLCLK</name></expr>:</case>
<expr_stmt><expr><call><name>vout_window_ReportMouseDoubleClick</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>WM_MBUTTONDOWN</name></expr>:</case>
<expr_stmt><expr><call><name>MousePressed</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_CENTER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>WM_MBUTTONUP</name></expr>:</case>
<expr_stmt><expr><call><name>MouseReleased</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_CENTER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>WM_MBUTTONDBLCLK</name></expr>:</case>
<expr_stmt><expr><call><name>vout_window_ReportMouseDoubleClick</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>WM_RBUTTONDOWN</name></expr>:</case>
<expr_stmt><expr><call><name>MousePressed</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_RIGHT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>WM_RBUTTONUP</name></expr>:</case>
<expr_stmt><expr><call><name>MouseReleased</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_RIGHT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>WM_RBUTTONDBLCLK</name></expr>:</case>
<expr_stmt><expr><call><name>vout_window_ReportMouseDoubleClick</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>WM_KEYDOWN</name></expr>:</case>
<case>case <expr><name>WM_SYSKEYDOWN</name></expr>:</case>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>i_key</name> <init>= <expr><call><name>Win32VoutConvertKey</name><argument_list>( <argument><expr><name>wParam</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_key</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_key</name> <operator>=</operator> <call><name>tolower</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>MapVirtualKey</name><argument_list>( <argument><expr><name>wParam</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_key</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>KF_UP</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_key</name> <operator>|=</operator> <name>KEY_MODIFIER_CTRL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_SHIFT</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>KF_UP</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_key</name> <operator>|=</operator> <name>KEY_MODIFIER_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>GetKeyState</name><argument_list>(<argument><expr><name>VK_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>KF_UP</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_key</name> <operator>|=</operator> <name>KEY_MODIFIER_ALT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vout_window_ReportKeyPress</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>i_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>WM_SYSCOMMAND</name></expr>:</case>
<switch>switch <condition>(<expr><name>wParam</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>IDM_TOGGLE_ON_TOP</name></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>HMENU</name></type> <name>hMenu</name> <init>= <expr><call><name>GetSystemMenu</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_on_top</name> <init>= <expr><operator>(</operator><call><name>GetMenuState</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>IDM_TOGGLE_ON_TOP</name></expr></argument>, <argument><expr><name>MF_BYCOMMAND</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>MF_CHECKED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetAbove</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_on_top</name></expr> ?</condition><then> <expr><name>VOUT_WINDOW_STATE_ABOVE</name></expr> </then><else>: <expr><name>VOUT_WINDOW_STATE_NORMAL</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>WM_VLC_SET_TOP_STATE</name></expr>:</case>
<expr_stmt><expr><call><name>SetAbove</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><operator>(</operator>enum <name>vout_window_state</name><operator>)</operator> <name>wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>WM_VLC_CHANGE_TEXT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pwz_title</name> <init>= <expr><call><name>atomic_exchange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pwz_title</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>pwz_title</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetWindowTextW</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>pwz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pwz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>

<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CLOSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pwz_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hInstance</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UnregisterClass</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>class_main</name></name></expr></argument>, <argument><expr><name>hInstance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyCursor</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_empty</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_icon</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_icon</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>CALLBACK</name></type> <name>enumWindowsProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><operator>(</operator><name>HWND</name> <operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetClassNameA</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"WorkerW"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>FindWindowEx</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"SHELLDLL_DefView"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>hwnd</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>FindWindowEx</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"SysListView32"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>hwnd</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>wnd</name> <operator>=</operator> <name>hwnd</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type> <name>GetDesktopHandle</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><call><name>FindWindow</name><argument_list>( <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Progman"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>hwnd</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>FindWindowEx</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"SHELLDLL_DefView"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>hwnd</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>FindWindowEx</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"SysListView32"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>hwnd</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>hwnd</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find desktop icon window,. Trying the hard way."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumWindows</name><argument_list>( <argument><expr><name>enumWindowsProc</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><operator>&amp;</operator><name>hwnd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hwnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateCursor</name><parameter_list>( <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_show</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>is_cursor_hidden</name></name> <operator>==</operator> <operator>!</operator><name>b_show</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_cursor_hidden</name></name> <operator>=</operator> <operator>!</operator><name>b_show</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HCURSOR</name></type> <name>cursor</name> <init>= <expr><ternary><condition><expr><name>b_show</name></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_arrow</name></name></expr> </then><else>: <expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_empty</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetClassLongPtr</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>GCLP_HCURSOR</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator><name>cursor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SetCursor</name><argument_list>( <argument><expr><name>cursor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>CALLBACK</name></type> <name>HideMouse</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>, <parameter><decl><type><name>UINT_PTR</name></type> <name>idEvent</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>uMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>dwTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hwnd</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><operator>(</operator><name>vout_window_t</name> <operator>*</operator><operator>)</operator><name>idEvent</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UpdateCursor</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateCursorMoved</name><parameter_list>( <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UpdateCursor</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_moved</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetTimer</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>UINT_PTR</name><operator>)</operator><name>wnd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hide_timeout</name></name></expr></argument>, <argument><expr><name>HideMouse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HCURSOR</name></type> <name>EmptyCursor</name><parameter_list>( <parameter><decl><type><name>HINSTANCE</name></type> <name>instance</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cw</name> <init>= <expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXCURSOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ch</name> <init>= <expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYCURSOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HCURSOR</name></type> <name>cursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>and</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>cw</name> <operator>*</operator> <name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>xor</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>cw</name> <operator>*</operator> <name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>and</name> <operator>&amp;&amp;</operator> <name>xor</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>and</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>cw</name> <operator>*</operator> <name>ch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>xor</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>cw</name> <operator>*</operator> <name>ch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>CreateCursor</name><argument_list>( <argument><expr><name>instance</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cw</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>and</name></expr></argument>, <argument><expr><name>xor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>and</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>xor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cursor</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>isMouseEvent</name><parameter_list>( <parameter><decl><type><name>WPARAM</name></type> <name>type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name>type</name> <operator>&gt;=</operator> <name>WM_MOUSEFIRST</name> <operator>&amp;&amp;</operator>
<name>type</name> <operator>&lt;=</operator> <name>WM_MOUSELAST</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>EventThread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><operator>(</operator><name>vout_window_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hInstance</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>i_window_style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwParent</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"video-wallpaper"</literal></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hwParent</name> <operator>=</operator> <call><name>GetDesktopHandle</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_window_style</name> <operator>=</operator> <name>WS_CLIPCHILDREN</name><operator>|</operator><name>WS_CHILD</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>hwParent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_window_style</name> <operator>=</operator> <name>WS_OVERLAPPEDWINDOW</name> <operator>|</operator> <name>WS_SIZEBOX</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_mouse_support</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"mouse-events"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_key_support</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"keyboard-events"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_mouse_support</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_key_support</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_window_style</name> <operator>|=</operator> <name>WS_DISABLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>=</operator>
<call><name>CreateWindowEx</name><argument_list>( <argument><expr><name>WS_EX_NOPARENTNOTIFY</name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>class_main</name></name></expr></argument>, 
<argument><expr><macro><name>TEXT</name><argument_list>(<argument>VOUT_TITLE</argument>)</argument_list></macro> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">" (VLC Video Output)"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>i_window_style</name></expr></argument>, 
<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, 
<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, 
<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, 
<argument><expr><name>CW_USEDEFAULT</name></expr></argument>, 
<argument><expr><name>hwParent</name></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><name>hInstance</name></expr></argument>, 
<argument><expr><name>wnd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>HMENU</name></type> <name>hMenu</name> <init>= <expr><call><name>GetSystemMenu</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AppendMenu</name><argument_list>( <argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>MF_SEPARATOR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AppendMenu</name><argument_list>( <argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>MF_STRING</name> <operator>|</operator> <name>MF_UNCHECKED</name></expr></argument>,
<argument><expr><name>IDM_TOGGLE_ON_TOP</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Always on &amp;Top"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name>mouse_pos</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>old_mouse_pos</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetMessage</name><argument_list>( <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_MOUSEMOVE</name> <operator>||</operator> <name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_NCMOUSEMOVE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mouse_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>mouse_pos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>old_mouse_pos</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator>
<operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>mouse_pos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>old_mouse_pos</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">2</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>old_mouse_pos</name> <operator>=</operator> <name>mouse_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateCursorMoved</name><argument_list>( <argument><expr><name>wnd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>isMouseEvent</name><argument_list>( <argument><expr><name><name>msg</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateCursorMoved</name><argument_list>( <argument><expr><name>wnd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vout_window_operations</name></name></type> <name>ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>enable</name> <operator>=</operator> <name>Enable</name></expr>,
<expr><operator>.</operator><name>disable</name> <operator>=</operator> <name>Disable</name></expr>,
<expr><operator>.</operator><name>resize</name> <operator>=</operator> <name>Resize</name></expr>,
<expr><operator>.</operator><name>set_title</name> <operator>=</operator> <name>SetTitle</name></expr>,
<expr><operator>.</operator><name>set_state</name> <operator>=</operator> <name>SetState</name></expr>,
<expr><operator>.</operator><name>set_fullscreen</name> <operator>=</operator> <name>SetFullscreen</name></expr>,
<expr><operator>.</operator><name>unset_fullscreen</name> <operator>=</operator> <name>UnsetFullscreen</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>Close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vout_window_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>class_main</name></name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>class_main</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"VLC standalone window %p"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hInstance</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>app_path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>GetModuleFileName</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>app_path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_icon</name></name> <operator>=</operator> <call><name>ExtractIcon</name><argument_list>( <argument><expr><name>hInstance</name></expr></argument>, <argument><expr><name>app_path</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_cursor_hidden</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hide_timeout</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"mouse-hide-timeout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_arrow</name></name> <operator>=</operator> <call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_empty</name></name> <operator>=</operator> <call><name>EmptyCursor</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WNDCLASS</name></type> <name>wc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_OWNDC</name><operator>|</operator><name>CS_DBLCLKS</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <operator>(</operator><name>WNDPROC</name><operator>)</operator><name>WinVoutEventProc</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <name>hInstance</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>vlc_icon</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>class_main</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wc</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>cursor_arrow</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>RegisterClass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_icon</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vlc_icon</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"RegisterClass FAILED (err=%lu)"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>EventThread</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_sem_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>VOUT_WINDOW_TYPE_HWND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>hwnd</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>hwnd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>has_double_click</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Win32 window"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Win32 window"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"vout window"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
