<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\opengl\interop_dxva2.c">




































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d9.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/d3d9_fmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxvahd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../opengl/interop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../opengl/renderer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glew.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/wglew.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GLConvOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GLConvClose</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"dxva2"</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument><literal type="string">"DXVA2 surface converter"</literal></argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"glinterop"</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>GLConvOpen</argument>, <argument>GLConvClose</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"direct3d9-dxvahd"</literal></argument>, <argument>true</argument>, <argument>DXVAHD_TEXT</argument>, <argument>DXVAHD_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<struct>struct <name>wgl_vt</name> <block>{
<decl_stmt><decl><type><name>PFNWGLDXSETRESOURCESHAREHANDLENVPROC</name></type> <name>DXSetResourceShareHandleNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXOPENDEVICENVPROC</name></type> <name>DXOpenDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXCLOSEDEVICENVPROC</name></type> <name>DXCloseDeviceNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXREGISTEROBJECTNVPROC</name></type> <name>DXRegisterObjectNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXUNREGISTEROBJECTNVPROC</name></type> <name>DXUnregisterObjectNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXLOCKOBJECTSNVPROC</name></type> <name>DXLockObjectsNV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNWGLDXUNLOCKOBJECTSNVPROC</name></type> <name>DXUnlockObjectsNV</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>glpriv</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>wgl_vt</name></name></type> <name>vt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>gl_handle_d3d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>gl_render</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>dx_render</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>OutputFormat</name></decl>;</decl_stmt>


<struct>struct <block>{
<decl_stmt><decl><type><name>HMODULE</name></type> <name>dll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDXVAHD_VideoProcessor</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
}</block> <decl><name>processor</name></decl>;</struct>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>GLConvUpdate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>plane_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>textures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>tex_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>tex_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>plane_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>glpriv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>picsys</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>picsys</name> <operator>||</operator> <operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXUnlockObjectsNV</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"DXUnlockObjectsNV failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>d3d9_decoder</name> <init>= <expr><call><name>GetD3D9OpaqueContext</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>DXVAHD_STREAM_DATA</name></type> <name>inputStream</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>inputStream</name><operator>.</operator><name>Enable</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inputStream</name><operator>.</operator><name>pInputSurface</name></name> <operator>=</operator> <name><name>picsys</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_VideoProcessBltHD</name><argument_list>( <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dx_render</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputStream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>D3DSURFACE_DESC</name></type> <name>srcDesc</name></decl>, <decl><type ref="prev"/><name>dstDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>IDirect3DSurface9_GetDesc</name><argument_list>(<argument><expr><name><name>picsys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirect3DSurface9_GetDesc</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dx_render</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"Failed VideoProcessBltHD src:%4.4s (%d) dst:%4.4s (%d) (hr=0x%lX)"</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>srcDesc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name><name>srcDesc</name><operator>.</operator><name>Format</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dstDesc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name><name>dstDesc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RECT</name></type> <name>rect</name> <init>= <expr><block>{
<expr><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_width</name></name></expr>,
<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9Ex_StretchRect</name><argument_list>(<argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>devex</name></name></expr></argument>, <argument><expr><name><name>picsys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dx_render</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D3DTEXF_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"IDirect3DDevice9Ex_StretchRect failed. (0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXLockObjectsNV</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"DXLockObjectsNV failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXUnregisterObjectNV</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>GLConvAllocateTextures</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>tex_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>tex_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>glpriv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name> <operator>=</operator>
<call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXRegisterObjectNV</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dx_render</name></name></expr></argument>,
<argument><expr><name><name>textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>WGL_ACCESS_WRITE_DISCARD_NV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"DXRegisterObjectNV failed: %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXLockObjectsNV</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"DXLockObjectsNV failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXUnregisterObjectNV</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>GLConvClose</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>glpriv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXUnlockObjectsNV</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXUnregisterObjectNV</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXCloseDeviceNV</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IDXVAHD_VideoProcessor_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>dll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>dx_render</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dx_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupProcessorInput</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>D3DFORMAT</name></type> <name>src_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>glpriv</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVAHD_STREAM_STATE_D3DFORMAT_DATA</name></type> <name>d3dformat</name> <init>= <expr><block>{ <expr><name>src_format</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessStreamState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DXVAHD_STREAM_STATE_D3DFORMAT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d3dformat</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3dformat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA</name></type> <name>frame_format</name> <init>= <expr><block>{ <expr><name>DXVAHD_FRAME_FORMAT_PROGRESSIVE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessStreamState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DXVAHD_STREAM_STATE_FRAME_FORMAT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>frame_format</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA</name></type> <name>colorspace</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>RGB_Range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>YCbCr_xvYCC</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>YCbCr_Matrix</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>space</name></name> <operator>==</operator> <name>COLOR_SPACE_BT601</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessStreamState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>colorspace</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVAHD_STREAM_STATE_SOURCE_RECT_DATA</name></type> <name>srcRect</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>Enable</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>SourceRect</name></name> <operator>=</operator> <operator>(</operator><name>RECT</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>left</name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_x_offset</name></name></expr>,
<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>,
<expr><operator>.</operator><name>top</name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_y_offset</name></name></expr>,
<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>,
}</block></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessStreamState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DXVAHD_STREAM_STATE_SOURCE_RECT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>srcRect</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcRect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVAHD_BLT_STATE_TARGET_RECT_DATA</name></type> <name>dstRect</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dstRect</name><operator>.</operator><name>Enable</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstRect</name><operator>.</operator><name>TargetRect</name></name> <operator>=</operator> <operator>(</operator><name>RECT</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>,
<expr><operator>.</operator><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessBltState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><name>DXVAHD_BLT_STATE_TARGET_RECT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dstRect</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetFrameRate</name><parameter_list>(<parameter><decl><type><name>DXVAHD_RATIONAL</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Numerator</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Denominator</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Numerator</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Denominator</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitRangeProcessor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>IDirect3DDevice9Ex</name> <modifier>*</modifier></type><name>devex</name></decl></parameter>, <parameter><decl><type><name>D3DFORMAT</name></type> <name>src_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>glpriv</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>dll</name></name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"DXVA2.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>dll</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Failed to load DXVA2.DLL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name> <modifier>*</modifier></type><name>formatsList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVAHD_VPCAPS</name> <modifier>*</modifier></type><name>capsList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDXVAHD_Device</name> <modifier>*</modifier></type><name>hd_device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>CreateDevice</name>)<parameter_list>(<parameter><decl><type><name>IDirect3DDevice9Ex</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>DXVAHD_CONTENT_DESC</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>DXVAHD_DEVICE_USAGE</name></type></decl></parameter>,<parameter><decl><type><name>PDXVAHDSW_Plugin</name></type></decl></parameter>,<parameter><decl><type><name>IDXVAHD_Device</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>CreateDevice</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>dll</name></name></expr></argument>, <argument><expr><literal type="string">"DXVAHD_CreateDevice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>CreateDevice</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Can't create HD device (not Windows 7+)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DXVAHD_CONTENT_DESC</name></type> <name>desc</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>InputFrameFormat</name></name> <operator>=</operator> <name>DXVAHD_FRAME_FORMAT_PROGRESSIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetFrameRate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>desc</name><operator>.</operator><name>InputFrameRate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>interop</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>InputWidth</name></name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>InputHeight</name></name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>OutputFrameRate</name></name> <operator>=</operator> <name><name>desc</name><operator>.</operator><name>InputFrameRate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>OutputWidth</name></name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>OutputHeight</name></name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CreateDevice</name><argument_list>(<argument><expr><name>devex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><name>DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hd_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the device (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DXVAHD_VPDEVCAPS</name></type> <name>devcaps</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_Device_GetVideoProcessorDeviceCaps</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>devcaps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Failed to get the device capabilities (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>devcaps</name><operator>.</operator><name>VideoProcessorCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"No good video processor found for range conversion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>formatsList</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>devcaps</name><operator>.</operator><name>InputFormatCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>formatsList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>formatsList</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate %u input formats"</literal></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>InputFormatCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_Device_GetVideoProcessorInputFormats</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>InputFormatCount</name></name></expr></argument>, <argument><expr><name>formatsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>devcaps</name><operator>.</operator><name>InputFormatCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>formatsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>src_format</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>devcaps</name><operator>.</operator><name>InputFormatCount</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Input format %4.4s not supported for range conversion"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>src_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>formatsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>formatsList</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>devcaps</name><operator>.</operator><name>OutputFormatCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>formatsList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>formatsList</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate %u output formats"</literal></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>OutputFormatCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_Device_GetVideoProcessorOutputFormats</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>OutputFormatCount</name></name></expr></argument>, <argument><expr><name>formatsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>devcaps</name><operator>.</operator><name>OutputFormatCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>formatsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>OutputFormat</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>devcaps</name><operator>.</operator><name>OutputFormatCount</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Output format %d not supported for range conversion"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>OutputFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>capsList</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>devcaps</name><operator>.</operator><name>VideoProcessorCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>capsList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>capsList</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate %u video processors"</literal></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>VideoProcessorCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_Device_GetVideoProcessorCaps</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>VideoProcessorCount</name></name></expr></argument>, <argument><expr><name>capsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Failed to get the processor caps (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_Device_CreateVideoProcessor</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>capsList</name><operator>-&gt;</operator><name>VPGuid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the processor (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>IDXVAHD_Device_Release</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetupProcessorInput</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>interop</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>src_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA</name></type> <name>colorspace</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>RGB_Range</name></name> <operator>=</operator> <ternary><condition><expr><name>true</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>YCbCr_xvYCC</name></name> <operator>=</operator> <ternary><condition><expr><name>true</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>YCbCr_Matrix</name></name> <operator>=</operator> <ternary><condition><expr><name>false</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessBltState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><name>DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>colorspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>capsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>formatsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hd_device</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDXVAHD_Device_Release</name><argument_list>(<argument><expr><name>hd_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>dll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>GLConvOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE</name>
<operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>d3d9_video_context_t</name> <modifier>*</modifier></type><name>vctx_sys</name> <init>= <expr><call><name>GetD3D9ContextPrivate</name><argument_list>( <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>d3d9_decoder</name> <init>= <expr><call><name>GetD3D9OpaqueContext</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>vctx_sys</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>d3d9_decoder</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>hd3d</name><operator>.</operator><name>use_ex</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"DX/GL interrop only working on d3d9x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>ext</name></name> <operator>!=</operator> <name>VLC_GL_EXT_WGL</name> <operator>||</operator> <operator>!</operator><name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>wgl</name><operator>.</operator><name>getExtensionsString</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wglExt</name> <init>= <expr><call><name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>wgl</name><operator>.</operator><name>getExtensionsString</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wglExt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name>wglExt</name></expr></argument>, <argument><expr><literal type="string">"WGL_NV_DX_interop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wgl_vt</name></name></type> <name>vt</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_EXT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vt.name = (type) vlc_gl_GetProcAddress(interop-&gt;gl, "wgl" #name); if (!vt.name) { msg_Warn(obj, "'wgl " #name "' could not be loaded"); return VLC_EGENERIC; } } while(0)</cpp:value></cpp:define>







<expr_stmt><expr><call><name>LOAD_EXT</name><argument_list>(<argument><expr><name>DXSetResourceShareHandleNV</name></expr></argument>, <argument><expr><name>PFNWGLDXSETRESOURCESHAREHANDLENVPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_EXT</name><argument_list>(<argument><expr><name>DXOpenDeviceNV</name></expr></argument>, <argument><expr><name>PFNWGLDXOPENDEVICENVPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_EXT</name><argument_list>(<argument><expr><name>DXCloseDeviceNV</name></expr></argument>, <argument><expr><name>PFNWGLDXCLOSEDEVICENVPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_EXT</name><argument_list>(<argument><expr><name>DXRegisterObjectNV</name></expr></argument>, <argument><expr><name>PFNWGLDXREGISTEROBJECTNVPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_EXT</name><argument_list>(<argument><expr><name>DXUnregisterObjectNV</name></expr></argument>, <argument><expr><name>PFNWGLDXUNREGISTEROBJECTNVPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_EXT</name><argument_list>(<argument><expr><name>DXLockObjectsNV</name></expr></argument>, <argument><expr><name>PFNWGLDXLOCKOBJECTSNVPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_EXT</name><argument_list>(<argument><expr><name>DXUnlockObjectsNV</name></expr></argument>, <argument><expr><name>PFNWGLDXUNLOCKOBJECTSNVPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>glpriv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>glpriv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>OutputFormat</name></name> <operator>=</operator> <name>D3DFMT_X8R8G8B8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>force_dxva_hd</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"direct3d9-dxvahd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>force_dxva_hd</name> <operator>||</operator> <operator>(</operator><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>color_range</name></name> <operator>!=</operator> <name>COLOR_RANGE_FULL</name> <operator>&amp;&amp;</operator>
<name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>identifier</name><operator>.</operator><name>VendorId</name></name> <operator>==</operator> <name>GPU_MANUFACTURER_NVIDIA</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"init DXVA-HD processor from %4.4s to RGB"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vctx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>InitRangeProcessor</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>devex</name></name></expr></argument>, <argument><expr><name><name>vctx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>force_dxva_hd</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_dxva_hd</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3D9_CheckDeviceFormatConversion</name><argument_list>(<argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>hd3d</name><operator>.</operator><name>obj</name></name></expr></argument>,
<argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>adapterId</name></name></expr></argument>,
<argument><expr><name>D3DDEVTYPE_HAL</name></expr></argument>,
<argument><expr><name><name>vctx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>OutputFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"Unsupported conversion from %4.4s to RGB"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vctx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"using StrecthRect from %4.4s to RGB"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vctx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>shared_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9Ex_CreateRenderTarget</name><argument_list>(<argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>devex</name></name></expr></argument>,
<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,
<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>OutputFormat</name></name></expr></argument>,
<argument><expr><name>D3DMULTISAMPLE_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>dx_render</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shared_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"IDirect3DDevice9Ex_CreateRenderTarget failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shared_handle</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXSetResourceShareHandleNV</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dx_render</name></name></expr></argument>, <argument><expr><name>shared_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name> <operator>=</operator> <call><name><name>priv</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>DXOpenDeviceNV</name></name><argument_list>(<argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>devex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>gl_handle_d3d</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"DXOpenDeviceNV failed: %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop_ops</name></name></type> <name>ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>allocate_textures</name> <operator>=</operator> <name>GLConvAllocateTextures</name></expr>,
<expr><operator>.</operator><name>update_textures</name> <operator>=</operator> <name>GLConvUpdate</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>VLC_CODEC_RGB32</name></expr></argument>,
<argument><expr><name>COLOR_SPACE_UNDEF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>GLConvClose</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>
</unit>
