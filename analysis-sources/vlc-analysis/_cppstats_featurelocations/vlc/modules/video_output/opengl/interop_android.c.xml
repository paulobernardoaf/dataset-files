<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\opengl\interop_android.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> this file must be built from android</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../android/utils.h"</cpp:file></cpp:include>

<struct>struct <name>priv</name>
<block>{
<decl_stmt><decl><type><name>android_video_context_t</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>awh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>transform_mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>stex_attached</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tc_anop_allocate_textures</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tex_width</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tex_height</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SurfaceTexture_attachToGLContext</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>awh</name></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"SurfaceTexture_attachToGLContext failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>stex_attached</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tc_anop_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>plane_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tex_width</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tex_height</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>plane_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plane_offset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>priv</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>render</name></name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>SurfaceTexture_waitAndUpdateTexImage</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>awh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>transform_mtx</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>transform_mtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>ActiveTexture</name></name><argument_list>(<argument><expr><name>GL_TEXTURE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name> <modifier>*</modifier></type>
<name>tc_get_transform_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>priv</name><operator>-&gt;</operator><name>transform_mtx</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>stex_attached</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SurfaceTexture_detachFromGLContext</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>awh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_ANDROID_OPAQUE</name>
<operator>||</operator> <operator>!</operator><name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>anativewindow</name></name>
<operator>||</operator> <operator>!</operator><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>android_video_context_t</name> <modifier>*</modifier></type><name>avctx</name> <init>=
<expr><call><name>vlc_video_context_GetPrivate</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_AWINDOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>AWindow_SurfaceTexture</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>awh</name></name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>anativewindow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>transform_mtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>stex_attached</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop_ops</name></name></type> <name>ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>allocate_textures</name> <operator>=</operator> <name>tc_anop_allocate_textures</name></expr>,
<expr><operator>.</operator><name>update_textures</name> <operator>=</operator> <name>tc_anop_update</name></expr>,
<expr><operator>.</operator><name>get_transform_matrix</name> <operator>=</operator> <name>tc_get_transform_matrix</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>Close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>




<switch>switch <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>ORIENT_TOP_LEFT</name></expr>:</case>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_BOTTOM_LEFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_TOP_RIGHT</name></expr>:</case>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_BOTTOM_RIGHT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_BOTTOM_LEFT</name></expr>:</case>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_TOP_LEFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_BOTTOM_RIGHT</name></expr>:</case>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_TOP_RIGHT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_LEFT_TOP</name></expr>:</case>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_RIGHT_TOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_LEFT_BOTTOM</name></expr>:</case>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_RIGHT_BOTTOM</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_RIGHT_TOP</name></expr>:</case>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_LEFT_TOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_RIGHT_BOTTOM</name></expr>:</case>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_LEFT_BOTTOM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>GL_TEXTURE_EXTERNAL_OES</name></expr></argument>,
<argument><expr><name>VLC_CODEC_RGB32</name></expr></argument>,
<argument><expr><name>COLOR_SPACE_UNDEF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument><literal type="string">"Android OpenGL SurfaceTexture converter"</literal></argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"glinterop"</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>
</unit>
