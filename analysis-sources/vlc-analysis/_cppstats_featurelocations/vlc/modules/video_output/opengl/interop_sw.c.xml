<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\opengl\interop_sw.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PBO_DISPLAY_COUNT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>PFNGLDELETEBUFFERSPROC</name></type> <name>DeleteBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLuint</name></type> <name><name>buffers</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>bytes</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>picture_sys_t</name>;</typedef>

<struct>struct <name>priv</name>
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>has_unpack_subimage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>texture_temp_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>texture_temp_buf_size</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>display_pics</name><index>[<expr><name>PBO_DISPLAY_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>display_idx</name></decl>;</decl_stmt>
}</block> <decl><name>pbo</name></decl>;</struct>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pbo_picture_destroy</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_t</name> <modifier>*</modifier></type><name>picsys</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>picsys</name><operator>-&gt;</operator><name>DeleteBuffers</name></name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><name><name>picsys</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>picsys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type>
<name>pbo_picture_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_t</name> <modifier>*</modifier></type><name>picsys</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>picsys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>picsys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>rsc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>picsys</name></expr>,
<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>pbo_picture_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>picture_NewFromResource</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>interop</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>picsys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GenBuffers</name></name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><name><name>picsys</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picsys</name><operator>-&gt;</operator><name>DeleteBuffers</name></name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>DeleteBuffers</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>picture_Setup</name><argument_list>(<argument><expr><name>pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>interop</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>==</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>&gt;</operator> <name>SIZE_MAX</name><operator>/</operator><name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>picsys</name><operator>-&gt;</operator><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pbo_data_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_t</name> <modifier>*</modifier></type><name>picsys</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetError</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><name><name>picsys</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BufferData</name></name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><name><name>picsys</name><operator>-&gt;</operator><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetError</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>GL_NO_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"could not alloc PBO buffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>DeleteBuffers</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>picsys</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pbo_pics_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PBO_DISPLAY_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>pbo</name><operator>.</operator><name>display_pics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>pbo_picture_create</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pbo_data_alloc</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PBO_DISPLAY_COUNT</name> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>pbo</name><operator>.</operator><name>display_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>pbo</name><operator>.</operator><name>display_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tc_pbo_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>plane_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>plane_offset</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>plane_offset</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>display_pic</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>pbo</name><operator>.</operator><name>display_pics</name><index>[<expr><name><name>priv</name><operator>-&gt;</operator><name>pbo</name><operator>.</operator><name>display_idx</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>display_pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>pbo</name><operator>.</operator><name>display_idx</name></name> <operator>=</operator> <operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>pbo</name><operator>.</operator><name>display_idx</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>PBO_DISPLAY_COUNT</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>GLsizeiptr</name></type> <name>size</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLvoid</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BufferSubData</name></name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>ActiveTexture</name></name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>PixelStorei</name></name><argument_list>(<argument><expr><name>GL_UNPACK_ROW_LENGTH</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>*</operator> <name><name>tex_width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr> ?</condition><then> <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexSubImage2D</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>tex_width</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tex_height</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>PixelStorei</name></name><argument_list>(<argument><expr><name>GL_UNPACK_ROW_LENGTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tc_common_allocate_textures</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexImage2D</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>internal</name></expr></argument>,
<argument><expr><name><name>tex_width</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tex_height</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>,
<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>upload_plane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tex_idx</name></decl></parameter>,
<parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>visible_pitch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>tex_format</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>tex_idx</name></expr>]</index></name><operator>.</operator><name>format</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>tex_type</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>tex_idx</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>PixelStorei</name></name><argument_list>(<argument><expr><name>GL_UNPACK_ALIGNMENT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>has_unpack_subimage</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pitch</name> <operator>!=</operator> <name>visible_pitch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>visible_pitch</name> <operator>=</operator> <call><name>vlc_align</name><argument_list>(<argument><expr><name>visible_pitch</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buf_size</name> <init>= <expr><name>visible_pitch</name> <operator>*</operator> <name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>destination</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>texture_temp_buf_size</name></name> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>texture_temp_buf</name></name> <operator>=</operator>
<call><name>realloc_or_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>texture_temp_buf</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>texture_temp_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>texture_temp_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>texture_temp_buf_size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>destination</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>texture_temp_buf</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>GLsizei</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>height</name></expr> ;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>visible_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>destination</name> <operator>+=</operator> <name>visible_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexSubImage2D</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name>tex_format</name></expr></argument>, <argument><expr><name>tex_type</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>texture_temp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexSubImage2D</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name>tex_format</name></expr></argument>, <argument><expr><name>tex_type</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>PixelStorei</name></name><argument_list>(<argument><expr><name>GL_UNPACK_ROW_LENGTH</name></expr></argument>, <argument><expr><name>pitch</name> <operator>*</operator> <name>width</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>visible_pitch</name></expr> ?</condition><then> <expr><name>visible_pitch</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexSubImage2D</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name>tex_format</name></expr></argument>, <argument><expr><name>tex_type</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>PixelStorei</name></name><argument_list>(<argument><expr><name>GL_UNPACK_ROW_LENGTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tc_common_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>plane_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>ActiveTexture</name></name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><ternary><condition><expr><name>plane_offset</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then>
<expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name><name>plane_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> </then><else>:
<expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>upload_plane</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tex_width</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tex_height</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>opengl_interop_generic_deinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PBO_DISPLAY_COUNT</name> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>pbo</name><operator>.</operator><name>display_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>pbo</name><operator>.</operator><name>display_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>texture_temp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>opengl_interop_generic_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>allow_dr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_color_space_t</name></type> <name>space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>max_texture_units</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetIntegerv</name></name><argument_list>(<argument><expr><name>GL_MAX_TEXTURE_IMAGE_UNITS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_texture_units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max_texture_units</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>vlc_fourcc_GetYUVFallback</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>space</name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_XYZ12</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>xyz12_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>VLC_CODEC_XYZ12</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name>xyz12_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>space</name> <operator>=</operator> <name>COLOR_SPACE_UNDEF</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>vlc_fourcc_GetRGBFallback</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>space</name> <operator>=</operator> <name>COLOR_SPACE_UNDEF</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>list</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><operator>*</operator><name>list</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB32</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0xff000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x00ff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x00ff0000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>interop</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>priv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop_ops</name></name></type> <name>ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>allocate_textures</name> <operator>=</operator> <name>tc_common_allocate_textures</name></expr>,
<expr><operator>.</operator><name>update_textures</name> <operator>=</operator> <name>tc_common_update</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>opengl_interop_generic_deinit</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>has_unpack_subimage</name></name> <operator>=</operator>
<operator>!</operator><name><name>interop</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>is_gles</name></name> <operator>||</operator> <call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><literal type="string">"GL_EXT_unpack_subimage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>allow_dr</name> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>has_unpack_subimage</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ogl_version</name> <init>= <expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetString</name></name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>glver_ok</name> <init>= <expr><call><name>strverscmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>ogl_version</name></expr></argument>, <argument><expr><literal type="string">"3.0"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>has_pbo</name> <init>= <expr><name>glver_ok</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><literal type="string">"GL_ARB_pixel_buffer_object"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><literal type="string">"GL_EXT_pixel_buffer_object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>supports_pbo</name> <init>= <expr><name>has_pbo</name> <operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BufferData</name></name>
<operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BufferSubData</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>supports_pbo</name> <operator>&amp;&amp;</operator> <call><name>pbo_pics_alloc</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop_ops</name></name></type> <name>pbo_ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>allocate_textures</name> <operator>=</operator> <name>tc_common_allocate_textures</name></expr>,
<expr><operator>.</operator><name>update_textures</name> <operator>=</operator> <name>tc_pbo_update</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>opengl_interop_generic_deinit</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>pbo_ops</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"PBO support enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
