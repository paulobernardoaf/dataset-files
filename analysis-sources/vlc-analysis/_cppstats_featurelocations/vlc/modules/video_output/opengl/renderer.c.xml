<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\opengl\renderer.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"renderer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_helper.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPHERE_RADIUS</name></cpp:macro> <cpp:value>1.f</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GLfloat</name></type> <name><name>identity</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getZoomMatrix</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>zoom</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name><name>matrix</name><index>[<expr><specifier>static</specifier> <literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLfloat</name></type> <name><name>m</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><name>zoom</name></expr>, <expr><literal type="number">1.0f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>getProjectionMatrix</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>sar</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fovy</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name><name>matrix</name><index>[<expr><specifier>static</specifier> <literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>zFar</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>zNear</name> <init>= <expr><literal type="number">0.01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><literal type="number">1.f</literal> <operator>/</operator> <call><name>tanf</name><argument_list>(<argument><expr><name>fovy</name> <operator>/</operator> <literal type="number">2.f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLfloat</name></type> <name><name>m</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>f</name> <operator>/</operator> <name>sar</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,
<expr><literal type="number">0.f</literal></expr>, <expr><name>f</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,
<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>(</operator><name>zNear</name> <operator>+</operator> <name>zFar</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>zNear</name> <operator>-</operator> <name>zFar</name><operator>)</operator></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>,
<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>zNear</name> <operator>*</operator> <name>zFar</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>zNear</name> <operator>-</operator> <name>zFar</name><operator>)</operator></expr>, <expr><literal type="number">0.f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getViewpointMatrixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>,
<parameter><decl><type><name>video_projection_mode_t</name></type> <name>projection_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>projection_mode</name> <operator>==</operator> <name>PROJECTION_MODE_EQUIRECTANGULAR</name>
<operator>||</operator> <name>projection_mode</name> <operator>==</operator> <name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>getProjectionMatrix</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_sar</name></name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_fovy</name></name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>ProjectionMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getZoomMatrix</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_z</name></name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>ZoomMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_viewpoint_to_4x4</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>renderer</name><operator>-&gt;</operator><name>vp</name></name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>ViewMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>ProjectionMatrix</name></name></expr></argument>, <argument><expr><name>identity</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>ZoomMatrix</name></name></expr></argument>, <argument><expr><name>identity</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>ViewMatrix</name></name></expr></argument>, <argument><expr><name>identity</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getOrientationTransformMatrix</name><parameter_list>(<parameter><decl><type><name>video_orientation_t</name></type> <name>orientation</name></decl></parameter>,
<parameter><decl><type><name>GLfloat</name></type> <name><name>matrix</name><index>[<expr><specifier>static</specifier> <literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>identity</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k_cos_pi</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k_cos_pi_2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k_cos_n_pi_2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k_sin_pi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k_sin_pi_2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k_sin_n_pi_2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>orientation</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ORIENT_ROTATED_90</name></expr>:</case>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k_cos_pi_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>k_sin_pi_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k_sin_pi_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>k_cos_pi_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_ROTATED_180</name></expr>:</case>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k_cos_pi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>k_sin_pi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k_sin_pi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>k_cos_pi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_ROTATED_270</name></expr>:</case>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k_cos_n_pi_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>k_sin_n_pi_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k_sin_n_pi_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>k_cos_n_pi_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_HFLIPPED</name></expr>:</case>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_VFLIPPED</name></expr>:</case>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_TRANSPOSED</name></expr>:</case>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ORIENT_ANTI_TRANSPOSED</name></expr>:</case>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitStereoMatrix</name><parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name><name>matrix_out</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>video_multiview_mode_t</name></type> <name>multiview_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x*3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>matrix_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix_out</name><index>[<expr><call><name>COL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix_out</name><index>[<expr><call><name>COL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix_out</name><index>[<expr><call><name>COL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROW</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>multiview_mode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>MULTIVIEW_STEREO_SBS</name></expr>:</case>















<expr_stmt><expr><name><name>matrix_out</name><index>[<expr><call><name>COL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MULTIVIEW_STEREO_TB</name></expr>:</case>




















<expr_stmt><expr><name><name>matrix_out</name><index>[<expr><call><name>COL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ROW</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>BuildVertexShader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template</name> <init>=
<expr><literal type="string">"#version %u\n"</literal>
<literal type="string">"attribute vec2 PicCoordsIn;\n"</literal>
<literal type="string">"varying vec2 PicCoords;\n"</literal>
<literal type="string">"attribute vec3 VertexPosition;\n"</literal>
<literal type="string">"uniform mat3 StereoMatrix;\n"</literal>
<literal type="string">"uniform mat4 ProjectionMatrix;\n"</literal>
<literal type="string">"uniform mat4 ZoomMatrix;\n"</literal>
<literal type="string">"uniform mat4 ViewMatrix;\n"</literal>
<literal type="string">"void main() {\n"</literal>
<literal type="string">" PicCoords = (StereoMatrix * vec3(PicCoordsIn, 1.0)).st;\n"</literal>
<literal type="string">" gl_Position = ProjectionMatrix * ZoomMatrix * ViewMatrix\n"</literal>
<literal type="string">" * vec4(VertexPosition, 1.0);\n"</literal>
<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><name>template</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>glsl_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>b_dump_shaders</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"\n=== Vertex shader for fourcc: %4.4s ===\n%s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>renderer</name><operator>-&gt;</operator><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>BuildFragmentShader</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>interop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vlc_texture</name> <init>=
<expr><call><name>opengl_fragment_shader_init</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>,
<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>sw_fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,
<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>sw_fmt</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vlc_texture</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template</name> <init>=
<expr><literal type="string">"#version %u\n"</literal>
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"varying vec2 PicCoords;\n"</literal>
<literal type="string">"void main() {\n"</literal>
<literal type="string">" gl_FragColor = vlc_texture(PicCoords);\n"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensions</name> <init>= <expr><ternary><condition><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name> <operator>==</operator> <name>GL_TEXTURE_EXTERNAL_OES</name></expr>
?</condition><then> <expr><literal type="string">"#extension GL_OES_EGL_image_external : require\n"</literal></expr>
</then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><name>template</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>glsl_version</name></name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>glsl_precision_header</name></name></expr></argument>, <argument><expr><name>vlc_texture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vlc_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>b_dump_shaders</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"\n=== Fragment shader for fourcc: %4.4s, colorspace: %d ===\n%s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>interop</name><operator>-&gt;</operator><name>sw_fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,
<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>sw_fmt</name><operator>.</operator><name>space</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>opengl_link_program</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>interop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vertex_shader</name> <init>= <expr><call><name>BuildVertexShader</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vertex_shader</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fragment_shader</name> <init>= <expr><call><name>BuildFragmentShader</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment_shader</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vertex_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>interop</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>update_textures</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>renderer</name><operator>-&gt;</operator><name>pf_fetch_locations</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>renderer</name><operator>-&gt;</operator><name>pf_prepare_shader</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>program_id</name> <init>=
<expr><call><name>vlc_gl_BuildProgram</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vt</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>vertex_shader</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>fragment_shader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vertex_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fragment_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>program_id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LOC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { x = vt-&gt;Get##type##Location(program_id, str); assert(x != -1); if (x == -1) { msg_Err(renderer-&gt;gl, "Unable to Get"#type"Location(%s)", str); goto error; } } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ULOC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_LOC(Uniform, renderer-&gt;uloc.x, str)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ALOC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_LOC(Attrib, renderer-&gt;aloc.x, str)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name>TransformMatrix</name></expr></argument>, <argument><expr><literal type="string">"TransformMatrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name>OrientationMatrix</name></expr></argument>, <argument><expr><literal type="string">"OrientationMatrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name>StereoMatrix</name></expr></argument>, <argument><expr><literal type="string">"StereoMatrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name>ProjectionMatrix</name></expr></argument>, <argument><expr><literal type="string">"ProjectionMatrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name>ViewMatrix</name></expr></argument>, <argument><expr><literal type="string">"ViewMatrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name>ZoomMatrix</name></expr></argument>, <argument><expr><literal type="string">"ZoomMatrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ALOC</name><argument_list>(<argument><expr><name>PicCoordsIn</name></expr></argument>, <argument><expr><literal type="string">"PicCoordsIn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ALOC</name><argument_list>(<argument><expr><name>VertexPosition</name></expr></argument>, <argument><expr><literal type="string">"VertexPosition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name><name>TexCoordsMap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"TexCoordsMap0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name><name>TexCoordsMap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"TexCoordsMap1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>TexCoordsMap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name><name>TexCoordsMap</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"TexCoordsMap2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>TexCoordsMap</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_LOC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_ULOC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_ALOC</name></cpp:undef>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>renderer</name><operator>-&gt;</operator><name>pf_fetch_locations</name></name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name>program_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to get locations from tex_conv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>program_id</name></name> <operator>=</operator> <name>program_id</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteProgram</name></name><argument_list>(<argument><expr><name>program_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>program_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_gl_renderer_Delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>interop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteBuffers</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>renderer</name><operator>-&gt;</operator><name>vertex_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteBuffers</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>renderer</name><operator>-&gt;</operator><name>index_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteBuffers</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>renderer</name><operator>-&gt;</operator><name>texture_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>interop</name><operator>-&gt;</operator><name>handle_texs_gen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteTextures</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_gl_interop_Delete</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>program_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteProgram</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>program_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPLACEBO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>pl_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pl_context_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>renderer</name><operator>-&gt;</operator><name>pl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SetupCoords</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type>
<name>vlc_gl_renderer_New</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_api</name></name> <modifier>*</modifier></type><name>api</name></decl></parameter>,
<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_dump_shaders</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><operator>&amp;</operator><name><name>api</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>renderer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>renderer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>=
<expr><call><name>vlc_gl_interop_New</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><name>api</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interop</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>interop</name></name> <operator>=</operator> <name>interop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name> <operator>=</operator> <name>gl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>api</name></name> <operator>=</operator> <name>api</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>b_dump_shaders</name></name> <operator>=</operator> <name>b_dump_shaders</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>glsl_version</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>glsl_precision_header</name></name> <operator>=</operator> <literal type="string">"precision highp float;\n"</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>glsl_version</name></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>glsl_precision_header</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPLACEBO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_ctx</name></name> <operator>=</operator> <call><name>vlc_placebo_Create</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_ctx</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PL_API_VER</name> <operator>&gt;=</operator> <literal type="number">20</literal></expr></cpp:if>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_sh</name></name> <operator>=</operator> <call><name>pl_shader_alloc</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>PL_API_VER</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr></cpp:elif>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_sh</name></name> <operator>=</operator> <call><name>pl_shader_alloc</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_sh</name></name> <operator>=</operator> <call><name>pl_shader_alloc</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>opengl_link_program</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_gl_renderer_Delete</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>InitStereoMatrix</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>StereoMatrix</name></name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>multiview_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getOrientationTransformMatrix</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>OrientationMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getViewpointMatrixes</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>projection_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>orientation</name></name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLsizei</name></type> <name>w</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>*</operator> <name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name>
<operator>/</operator> <name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GLsizei</name></type> <name>h</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>*</operator> <name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name>
<operator>/</operator> <name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>supports_npot</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>tex_width</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>tex_height</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>tex_width</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_align_pot</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>tex_height</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_align_pot</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>interop</name><operator>-&gt;</operator><name>handle_texs_gen</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_gl_interop_GenerateTextures</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>tex_width</name></name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>tex_height</name></name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_gl_renderer_Delete</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Disable</name></name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Disable</name></name><argument_list>(<argument><expr><name>GL_DEPTH_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DepthMask</name></name><argument_list>(<argument><expr><name>GL_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Enable</name></name><argument_list>(<argument><expr><name>GL_CULL_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>ClearColor</name></name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Clear</name></name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GenBuffers</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>renderer</name><operator>-&gt;</operator><name>vertex_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GenBuffers</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>renderer</name><operator>-&gt;</operator><name>index_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GenBuffers</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>renderer</name><operator>-&gt;</operator><name>texture_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetupCoords</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_gl_renderer_Delete</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>renderer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateZ</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>float</name></type> <name>tan_fovx_2</name> <init>= <expr><call><name>tanf</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_fovx</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tan_fovy_2</name> <init>= <expr><call><name>tanf</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_fovy</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z_min</name> <init>= <expr><operator>-</operator> <name>SPHERE_RADIUS</name> <operator>/</operator> <call><name>sinf</name><argument_list>(<argument><expr><call><name>atanf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(
<argument><expr><name>tan_fovx_2</name> <operator>*</operator> <name>tan_fovx_2</name> <operator>+</operator> <name>tan_fovy_2</name> <operator>*</operator> <name>tan_fovy_2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>z_thresh</name> <init>= <expr><literal type="number">90.f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>f_fovx</name></name> <operator>&lt;=</operator> <name>z_thresh</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">180</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_z</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><name>z_min</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>FIELD_OF_VIEW_DEGREES_MAX</name> <operator>-</operator> <name>z_thresh</name><operator>)</operator> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">180</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_z</name></name> <operator>=</operator> <name>f</name> <operator>*</operator> <name><name>renderer</name><operator>-&gt;</operator><name>f_fovx</name></name> <operator>-</operator> <name>f</name> <operator>*</operator> <name>z_thresh</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">180</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>f_z</name></name> <operator>&lt;</operator> <name>z_min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_z</name></name> <operator>=</operator> <name>z_min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateFOVy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_fovy</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>atanf</name><argument_list>(<argument><expr><call><name>tanf</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_fovx</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>renderer</name><operator>-&gt;</operator><name>f_sar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_gl_renderer_SetViewpoint</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>p_vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_vp</name><operator>-&gt;</operator><name>fov</name></name> <operator>&gt;</operator> <name>FIELD_OF_VIEW_DEGREES_MAX</name>
<operator>||</operator> <name><name>p_vp</name><operator>-&gt;</operator><name>fov</name></name> <operator>&lt;</operator> <name>FIELD_OF_VIEW_DEGREES_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EBADVAR</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>f_fovx</name> <init>= <expr><name><name>p_vp</name><operator>-&gt;</operator><name>fov</name></name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>M_PI</name> <operator>/</operator> <literal type="number">180.f</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_viewpoint_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>renderer</name><operator>-&gt;</operator><name>vp</name></name></expr></argument>, <argument><expr><name>p_vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name>f_fovx</name> <operator>-</operator> <name><name>renderer</name><operator>-&gt;</operator><name>f_fovx</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0.001f</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_fovx</name></name> <operator>=</operator> <name>f_fovx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateFOVy</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateZ</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>getViewpointMatrixes</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>projection_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_gl_renderer_SetWindowAspectRatio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>f_sar</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>f_sar</name></name> <operator>=</operator> <name>f_sar</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateFOVy</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateZ</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getViewpointMatrixes</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>projection_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>BuildSphere</name><parameter_list>(<parameter><decl><type><name>GLfloat</name> <modifier>*</modifier><modifier>*</modifier></type><name>vertexCoord</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier><modifier>*</modifier></type><name>textureCoord</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nbVertices</name></decl></parameter>,
<parameter><decl><type><name>GLushort</name> <modifier>*</modifier><modifier>*</modifier></type><name>indices</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nbIndices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nbLatBands</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nbLonBands</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>nbVertices</name> <operator>=</operator> <operator>(</operator><name>nbLatBands</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>nbLonBands</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nbIndices</name> <operator>=</operator> <name>nbLatBands</name> <operator>*</operator> <name>nbLonBands</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vertexCoord</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><operator>*</operator><name>nbVertices</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>vertexCoord</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>textureCoord</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><operator>*</operator><name>nbVertices</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>textureCoord</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>vertexCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>indices</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><operator>*</operator><name>nbIndices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLushort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>indices</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>textureCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>vertexCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>lat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lat</name> <operator>&lt;=</operator> <name>nbLatBands</name></expr>;</condition> <incr><expr><name>lat</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>theta</name> <init>= <expr><name>lat</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>/</operator> <name>nbLatBands</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sinTheta</name></decl>, <decl><type ref="prev"/><name>cosTheta</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sincosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sinTheta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cosTheta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>lon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lon</name> <operator>&lt;=</operator> <name>nbLonBands</name></expr>;</condition> <incr><expr><name>lon</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>phi</name> <init>= <expr><name>lon</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>/</operator> <name>nbLonBands</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sinPhi</name></decl>, <decl><type ref="prev"/><name>cosPhi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sincosf</name><argument_list>(<argument><expr><name>phi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sinPhi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cosPhi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name>cosPhi</name> <operator>*</operator> <name>sinTheta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name>cosTheta</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name>sinPhi</name> <operator>*</operator> <name>sinTheta</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off1</name> <init>= <expr><operator>(</operator><name>lat</name> <operator>*</operator> <operator>(</operator><name>nbLonBands</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>lon</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>vertexCoord</name><operator>)</operator><index>[<expr><name>off1</name></expr>]</index> <operator>=</operator> <name>SPHERE_RADIUS</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>vertexCoord</name><operator>)</operator><index>[<expr><name>off1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>SPHERE_RADIUS</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>vertexCoord</name><operator>)</operator><index>[<expr><name>off1</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>SPHERE_RADIUS</name> <operator>*</operator> <name>z</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off2</name> <init>= <expr><operator>(</operator><name>lat</name> <operator>*</operator> <operator>(</operator><name>nbLonBands</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>lon</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>lon</name> <operator>/</operator> <name>nbLonBands</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>lat</name> <operator>/</operator> <name>nbLatBands</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>textureCoord</name><operator>)</operator><index>[<expr><name>off2</name></expr>]</index> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>textureCoord</name><operator>)</operator><index>[<expr><name>off2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>lat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lat</name> <operator>&lt;</operator> <name>nbLatBands</name></expr>;</condition> <incr><expr><name>lat</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>lon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lon</name> <operator>&lt;</operator> <name>nbLonBands</name></expr>;</condition> <incr><expr><name>lon</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>first</name> <init>= <expr><operator>(</operator><name>lat</name> <operator>*</operator> <operator>(</operator><name>nbLonBands</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>lon</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>second</name> <init>= <expr><name>first</name> <operator>+</operator> <name>nbLonBands</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>lat</name> <operator>*</operator> <name>nbLatBands</name> <operator>+</operator> <name>lon</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>indices</name><operator>)</operator><index>[<expr><name>off</name></expr>]</index> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>indices</name><operator>)</operator><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>second</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>indices</name><operator>)</operator><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>first</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>indices</name><operator>)</operator><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index> <operator>=</operator> <name>second</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>indices</name><operator>)</operator><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index> <operator>=</operator> <name>second</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>indices</name><operator>)</operator><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index> <operator>=</operator> <name>first</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>BuildCube</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>padW</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>padH</name></decl></parameter>,
<parameter><decl><type><name>GLfloat</name> <modifier>*</modifier><modifier>*</modifier></type><name>vertexCoord</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier><modifier>*</modifier></type><name>textureCoord</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nbVertices</name></decl></parameter>,
<parameter><decl><type><name>GLushort</name> <modifier>*</modifier><modifier>*</modifier></type><name>indices</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nbIndices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nbVertices</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nbIndices</name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vertexCoord</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><operator>*</operator><name>nbVertices</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>vertexCoord</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>textureCoord</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><operator>*</operator><name>nbVertices</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>textureCoord</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>vertexCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>indices</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><operator>*</operator><name>nbIndices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLushort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>indices</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>textureCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>vertexCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GLfloat</name></type> <name><name>coord</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, 
<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, 
<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, 
<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, 
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, 
<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, 
<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>vertexCoord</name></expr></argument>, <argument><expr><name>coord</name></expr></argument>, <argument><expr><operator>*</operator><name>nbVertices</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>col</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal><operator>/</operator><literal type="number">3</literal></expr>, <expr><literal type="number">2.f</literal><operator>/</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1.f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>row</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal><operator>/</operator><literal type="number">2</literal></expr>, <expr><literal type="number">1.0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLfloat</name></type> <name><name>tex</name><index>[]</index></name> <init>= <expr><block>{
<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>, 
<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>, 
<expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>, 
<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>, 
<expr><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>, 
<expr><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>, 
<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>padH</name></expr>,
<expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>padW</name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>padH</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>textureCoord</name></expr></argument>, <argument><expr><name>tex</name></expr></argument>,
<argument><expr><operator>*</operator><name>nbVertices</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLushort</name></type> <name><name>ind</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, 
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, 
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, 
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">17</literal></expr>, 
<expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>indices</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><operator>*</operator><name>nbIndices</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLushort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>BuildRectangle</name><parameter_list>(<parameter><decl><type><name>GLfloat</name> <modifier>*</modifier><modifier>*</modifier></type><name>vertexCoord</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name> <modifier>*</modifier><modifier>*</modifier></type><name>textureCoord</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nbVertices</name></decl></parameter>,
<parameter><decl><type><name>GLushort</name> <modifier>*</modifier><modifier>*</modifier></type><name>indices</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nbIndices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nbVertices</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nbIndices</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vertexCoord</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><operator>*</operator><name>nbVertices</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>vertexCoord</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>textureCoord</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><operator>*</operator><name>nbVertices</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>textureCoord</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>vertexCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>indices</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><operator>*</operator><name>nbIndices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLushort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>indices</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>textureCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>vertexCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GLfloat</name></type> <name><name>coord</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>vertexCoord</name></expr></argument>, <argument><expr><name>coord</name></expr></argument>, <argument><expr><operator>*</operator><name>nbVertices</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GLfloat</name></type> <name><name>tex</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>,
<expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>,
<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>textureCoord</name></expr></argument>, <argument><expr><name>tex</name></expr></argument>, <argument><expr><operator>*</operator><name>nbVertices</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLushort</name></type> <name><name>ind</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>indices</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><operator>*</operator><name>nbIndices</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLushort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetupCoords</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLfloat</name> <modifier>*</modifier></type><name>vertexCoord</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>textureCoord</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLushort</name> <modifier>*</modifier></type><name>indices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nbVertices</name></decl>, <decl><type ref="prev"/><name>nbIndices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>projection_mode</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PROJECTION_MODE_RECTANGULAR</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>BuildRectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vertexCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>textureCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbVertices</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>indices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbIndices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PROJECTION_MODE_EQUIRECTANGULAR</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>BuildSphere</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vertexCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>textureCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbVertices</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>indices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbIndices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>BuildCube</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cubemap_padding</name></name> <operator>/</operator> <name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cubemap_padding</name></name> <operator>/</operator> <name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>vertexCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>textureCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbVertices</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>indices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbIndices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>texture_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BufferData</name></name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>nbVertices</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>textureCoord</name></expr></argument>, <argument><expr><name>GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>vertex_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BufferData</name></name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>nbVertices</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLfloat</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>vertexCoord</name></expr></argument>, <argument><expr><name>GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>index_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BufferData</name></name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>nbIndices</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLushort</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>indices</name></expr></argument>, <argument><expr><name>GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>textureCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vertexCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>nb_indices</name></name> <operator>=</operator> <name>nbIndices</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawWithShaders</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>interop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>renderer</name><operator>-&gt;</operator><name>pf_prepare_shader</name></name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>tex_width</name></name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>tex_height</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>textures</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>ActiveTexture</name></name><argument_list>(<argument><expr><name>GL_TEXTURE0</name><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>textures</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix3fv</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>TexCoordsMap</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>TexCoordsMap</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>texture_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>PicCoordsIn</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>EnableVertexAttribArray</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>PicCoordsIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>VertexAttribPointer</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>PicCoordsIn</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>vertex_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>index_buffer_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>EnableVertexAttribArray</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>VertexPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>VertexAttribPointer</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>VertexPosition</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>get_transform_matrix</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name><name>interop</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>get_transform_matrix</name></name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <name>identity</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix4fv</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>TransformMatrix</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix4fv</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>OrientationMatrix</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>OrientationMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix3fv</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>StereoMatrix</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>StereoMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix4fv</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>ProjectionMatrix</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>ProjectionMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix4fv</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>ViewMatrix</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>ViewMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix4fv</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>ZoomMatrix</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>ZoomMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DrawElements</name></name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>nb_indices</name></name></expr></argument>, <argument><expr><name>GL_UNSIGNED_SHORT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_gl_renderer_Prepare</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>interop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>!=</operator> <name><name>renderer</name><operator>-&gt;</operator><name>last_source</name><operator>.</operator><name>i_x_offset</name></name>
<operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>!=</operator> <name><name>renderer</name><operator>-&gt;</operator><name>last_source</name><operator>.</operator><name>i_y_offset</name></name>
<operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>!=</operator> <name><name>renderer</name><operator>-&gt;</operator><name>last_source</name><operator>.</operator><name>i_visible_width</name></name>
<operator>||</operator> <name><name>source</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>!=</operator> <name><name>renderer</name><operator>-&gt;</operator><name>last_source</name><operator>.</operator><name>i_visible_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>TexCoordsMap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>TexCoordsMap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>scale_w</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name>
<operator>/</operator> <name><name>renderer</name><operator>-&gt;</operator><name>tex_width</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale_h</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name>
<operator>/</operator> <name><name>renderer</name><operator>-&gt;</operator><name>tex_height</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>












<decl_stmt><decl><type><name>float</name></type> <name>left</name> <init>= <expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>+</operator> <literal type="number">0</literal> <operator>)</operator> <operator>*</operator> <name>scale_w</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>top</name> <init>= <expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>+</operator> <literal type="number">0</literal> <operator>)</operator> <operator>*</operator> <name>scale_h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>right</name> <init>= <expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>source</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>)</operator> <operator>*</operator> <name>scale_w</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bottom</name> <init>= <expr><operator>(</operator><name><name>source</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>source</name><operator>-&gt;</operator><name>i_visible_height</name></name><operator>)</operator> <operator>*</operator> <name>scale_h</name></expr></init></decl>;</decl_stmt>


































<decl_stmt><decl><type><name>GLfloat</name> <modifier>*</modifier></type><name>matrix</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>TexCoordsMap</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x*3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><call><name>COL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>right</name> <operator>-</operator> <name>left</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><call><name>COL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>bottom</name> <operator>-</operator> <name>top</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><call><name>COL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><call><name>COL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ROW</name></cpp:undef>
</block_content>}</block></for>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>last_source</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>i_x_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>last_source</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>i_y_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>last_source</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>last_source</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><call><name><name>interop</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>update_textures</name></name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>tex_width</name></name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>tex_height</name></name></expr></argument>, <argument><expr><name>picture</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_gl_renderer_Draw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Clear</name></name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UseProgram</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>program_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawWithShaders</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
