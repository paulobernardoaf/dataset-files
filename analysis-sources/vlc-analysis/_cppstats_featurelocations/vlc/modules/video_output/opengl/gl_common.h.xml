<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\opengl\gl_common.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_GL_COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_GL_COMMON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_OPENGL_ES2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MACOS_OPENGL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/gl.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_OPENGL_ES2</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGLES/ES1/gl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGLES/ES2/gl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGLES/ES2/glext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES2/gl2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES2/gl2ext.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GL_WGLEW_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glew.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/gl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLCGL_PICTURE_MAX</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_TEXTURE_RECTANGLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RECTANGLE</name></cpp:macro> <cpp:value>0x84F5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_TEXTURE_EXTERNAL_OES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_EXTERNAL_OES</name></cpp:macro> <cpp:value>0x8D65</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_RED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED</name></cpp:macro> <cpp:value>0x1903</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_RG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG</name></cpp:macro> <cpp:value>0x8227</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_R16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16</name></cpp:macro> <cpp:value>0x822A</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_BGRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_RG16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16</name></cpp:macro> <cpp:value>0x822C</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_LUMINANCE16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16</name></cpp:macro> <cpp:value>0x8042</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_TEXTURE_RED_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_SIZE</name></cpp:macro> <cpp:value>0x805C</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_TEXTURE_LUMINANCE_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_SIZE</name></cpp:macro> <cpp:value>0x8060</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_EDGE</name></cpp:macro> <cpp:value>0x812F</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_UNPACK_ROW_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ROW_LENGTH</name></cpp:macro> <cpp:value>0x0CF2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_PIXEL_UNPACK_BUFFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER</name></cpp:macro> <cpp:value>0x88EC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_DRAW</name></cpp:macro> <cpp:value>0x88E8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_READ_FRAMEBUFFER_BINDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_DRAW_FRAMEBUFFER_BINDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MULTISAMPLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COLOR_ATTACHMENT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COLOR_ATTACHMENT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COLOR_ATTACHMENT3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COLOR_ATTACHMENT4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COLOR_ATTACHMENT5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COLOR_ATTACHMENT6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COLOR_ATTACHMENT7</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GL_ASSERT_NOERROR</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GL_ASSERT_NOERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASSERT_NOERROR</name><parameter_list>(<parameter><type><name>vt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { GLenum glError = (vt)-&gt;GetError(); switch (glError) { case GL_NO_ERROR: break; case GL_INVALID_ENUM: assert(!"GL_INVALID_ENUM"); case GL_INVALID_VALUE: assert(!"GL_INVALID_VALUE"); case GL_INVALID_OPERATION: assert(!"GL_INVALID_OPERATION"); case GL_INVALID_FRAMEBUFFER_OPERATION: assert(!"GL_INVALID_FRAMEBUFFER_OPERATION"); case GL_OUT_OF_MEMORY: assert(!"GL_OUT_OF_MEMORY"); default: assert(!"GL_UNKNOWN_ERROR"); } } while(0)</cpp:value></cpp:define>












<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ASSERT_NOERROR</name><parameter_list>(<parameter><type><name>vt</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>PFNGLACTIVETEXTUREPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLBINDTEXTUREPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLBLENDFUNCPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>sfactor</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dfactor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLBUFFERSTORAGEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLCLEARCOLORPROC</name>) <parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLCLEARPROC</name>) <parameter_list>(<parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLDELETETEXTURESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLDEPTHMASKPROC</name>) <parameter_list>(<parameter><decl><type><name>GLboolean</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLDISABLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLDRAWARRAYSPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLDRAWELEMENTSPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>indices</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLENABLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLFINISHPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLFLUSHPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLGENTEXTURESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLGETERRORPROC</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLGETINTEGERVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>GLubyte</name> <modifier>*</modifier></type>(<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLGETSTRINGPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLGETTEXLEVELPARAMETERIVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLPIXELSTOREIPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLTEXENVFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLTEXIMAGE2DPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLTEXPARAMETERFPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLTEXPARAMETERIPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLTEXSUBIMAGE2DPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLVIEWPORTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLGETPROGRAMIVPROC</name></cpp:macro> <cpp:value>typeof(glGetProgramiv)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLGETPROGRAMINFOLOGPROC</name></cpp:macro> <cpp:value>typeof(glGetProgramInfoLog)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLGETSHADERIVPROC</name></cpp:macro> <cpp:value>typeof(glGetShaderiv)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLGETSHADERINFOLOGPROC</name></cpp:macro> <cpp:value>typeof(glGetShaderInfoLog)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLGETUNIFORMLOCATIONPROC</name></cpp:macro> <cpp:value>typeof(glGetUniformLocation)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLGETATTRIBLOCATIONPROC</name></cpp:macro> <cpp:value>typeof(glGetAttribLocation)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLVERTEXATTRIBPOINTERPROC</name></cpp:macro> <cpp:value>typeof(glVertexAttribPointer)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name></cpp:macro> <cpp:value>typeof(glEnableVertexAttribArray)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLUNIFORMMATRIX4FVPROC</name></cpp:macro> <cpp:value>typeof(glUniformMatrix4fv)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLUNIFORMMATRIX3FVPROC</name></cpp:macro> <cpp:value>typeof(glUniformMatrix3fv)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLUNIFORMMATRIX2FVPROC</name></cpp:macro> <cpp:value>typeof(glUniformMatrix2fv)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLUNIFORM4FVPROC</name></cpp:macro> <cpp:value>typeof(glUniform4fv)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLUNIFORM4FPROC</name></cpp:macro> <cpp:value>typeof(glUniform4f)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLUNIFORM3FPROC</name></cpp:macro> <cpp:value>typeof(glUniform3f)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLUNIFORM2FPROC</name></cpp:macro> <cpp:value>typeof(glUniform2f)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLUNIFORM1FPROC</name></cpp:macro> <cpp:value>typeof(glUniform1f)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLUNIFORM1IPROC</name></cpp:macro> <cpp:value>typeof(glUniform1i)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLCREATESHADERPROC</name></cpp:macro> <cpp:value>typeof(glCreateShader)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLSHADERSOURCEPROC</name></cpp:macro> <cpp:value>typeof(glShaderSource)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLCOMPILESHADERPROC</name></cpp:macro> <cpp:value>typeof(glCompileShader)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLDELETESHADERPROC</name></cpp:macro> <cpp:value>typeof(glDeleteShader)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLCREATEPROGRAMPROC</name></cpp:macro> <cpp:value>typeof(glCreateProgram)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLLINKPROGRAMPROC</name></cpp:macro> <cpp:value>typeof(glLinkProgram)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLUSEPROGRAMPROC</name></cpp:macro> <cpp:value>typeof(glUseProgram)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLDELETEPROGRAMPROC</name></cpp:macro> <cpp:value>typeof(glDeleteProgram)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLATTACHSHADERPROC</name></cpp:macro> <cpp:value>typeof(glAttachShader)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLGENBUFFERSPROC</name></cpp:macro> <cpp:value>typeof(glGenBuffers)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLBINDBUFFERPROC</name></cpp:macro> <cpp:value>typeof(glBindBuffer)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLBUFFERDATAPROC</name></cpp:macro> <cpp:value>typeof(glBufferData)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLBUFFERSUBDATAPROC</name></cpp:macro> <cpp:value>typeof(glBufferSubData)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLDELETEBUFFERSPROC</name></cpp:macro> <cpp:value>typeof(glDeleteBuffers)*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name></cpp:macro> <cpp:value>typeof(glGetFramebufferAttachmentParameteriv)*</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#import &lt;CoreFoundation/CoreFoundation.h&gt;</cpp:empty>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>__GLsync</name></name> <modifier>*</modifier></type><name>GLsync</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>GLuint64</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLMAPBUFFERRANGEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLUNMAPBUFFERPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLsync</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLFENCESYNCPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLDELETESYNCPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>PFNGLCLIENTWAITSYNCPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><name>PFNGLBINDTEXTUREPROC</name></type> <name>BindTexture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDFUNCPROC</name></type> <name>BlendFunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARCOLORPROC</name></type> <name>ClearColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARPROC</name></type> <name>Clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETETEXTURESPROC</name></type> <name>DeleteTextures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEPTHMASKPROC</name></type> <name>DepthMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDISABLEPROC</name></type> <name>Disable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWARRAYSPROC</name></type> <name>DrawArrays</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWELEMENTSPROC</name></type> <name>DrawElements</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENABLEPROC</name></type> <name>Enable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFINISHPROC</name></type> <name>Finish</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFLUSHPROC</name></type> <name>Flush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENTEXTURESPROC</name></type> <name>GenTextures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETERRORPROC</name></type> <name>GetError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETINTEGERVPROC</name></type> <name>GetIntegerv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSTRINGPROC</name></type> <name>GetString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPIXELSTOREIPROC</name></type> <name>PixelStorei</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXIMAGE2DPROC</name></type> <name>TexImage2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXPARAMETERFPROC</name></type> <name>TexParameterf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXPARAMETERIPROC</name></type> <name>TexParameteri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXSUBIMAGE2DPROC</name></type> <name>TexSubImage2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVIEWPORTPROC</name></type> <name>Viewport</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PFNGLGETTEXLEVELPARAMETERIVPROC</name></type> <name>GetTexLevelParameteriv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PFNGLTEXENVFPROC</name></type> <name>TexEnvf</name></decl>;</decl_stmt> 






<decl_stmt><decl><type><name>PFNGLCREATESHADERPROC</name></type> <name>CreateShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSHADERSOURCEPROC</name></type> <name>ShaderSource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPILESHADERPROC</name></type> <name>CompileShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLATTACHSHADERPROC</name></type> <name>AttachShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETESHADERPROC</name></type> <name>DeleteShader</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PFNGLGETPROGRAMIVPROC</name></type> <name>GetProgramiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSHADERIVPROC</name></type> <name>GetShaderiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETPROGRAMINFOLOGPROC</name></type> <name>GetProgramInfoLog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSHADERINFOLOGPROC</name></type> <name>GetShaderInfoLog</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PFNGLGETUNIFORMLOCATIONPROC</name></type> <name>GetUniformLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETATTRIBLOCATIONPROC</name></type> <name>GetAttribLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBPOINTERPROC</name></type> <name>VertexAttribPointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name></type> <name>EnableVertexAttribArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX4FVPROC</name></type> <name>UniformMatrix4fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX3FVPROC</name></type> <name>UniformMatrix3fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX2FVPROC</name></type> <name>UniformMatrix2fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM4FVPROC</name></type> <name>Uniform4fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM4FPROC</name></type> <name>Uniform4f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM3FPROC</name></type> <name>Uniform3f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM2FPROC</name></type> <name>Uniform2f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM1FPROC</name></type> <name>Uniform1f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM1IPROC</name></type> <name>Uniform1i</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PFNGLCREATEPROGRAMPROC</name></type> <name>CreateProgram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLLINKPROGRAMPROC</name></type> <name>LinkProgram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUSEPROGRAMPROC</name></type> <name>UseProgram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEPROGRAMPROC</name></type> <name>DeleteProgram</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PFNGLACTIVETEXTUREPROC</name></type> <name>ActiveTexture</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PFNGLGENBUFFERSPROC</name></type> <name>GenBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDBUFFERPROC</name></type> <name>BindBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBUFFERDATAPROC</name></type> <name>BufferData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEBUFFERSPROC</name></type> <name>DeleteBuffers</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name></type> <name>GetFramebufferAttachmentParameteriv</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PFNGLBUFFERSUBDATAPROC</name></type> <name>BufferSubData</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PFNGLBUFFERSTORAGEPROC</name></type> <name>BufferStorage</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PFNGLMAPBUFFERRANGEPROC</name></type> <name>MapBufferRange</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name></type> <name>FlushMappedBufferRange</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PFNGLUNMAPBUFFERPROC</name></type> <name>UnmapBuffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PFNGLFENCESYNCPROC</name></type> <name>FenceSync</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PFNGLDELETESYNCPROC</name></type> <name>DeleteSync</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PFNGLCLIENTWAITSYNCPROC</name></type> <name>ClientWaitSync</name></decl>;</decl_stmt> 
}</block></struct></type> <name>opengl_vtable_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
