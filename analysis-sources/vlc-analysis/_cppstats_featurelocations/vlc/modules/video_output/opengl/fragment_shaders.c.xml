<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\opengl\fragment_shaders.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPLACEBO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libplacebo/shaders.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libplacebo/shaders/colorspace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../placebo_utils.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_helper.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>MATRIX_COLOR_RANGE_LIMITED</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">255.0</literal><operator>/</operator><literal type="number">219</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">219</literal> <operator>*</operator> <literal type="number">16.0</literal><operator>/</operator><literal type="number">255</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">255.0</literal><operator>/</operator><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224</literal> <operator>*</operator> <literal type="number">128.0</literal><operator>/</operator><literal type="number">255</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255.0</literal><operator>/</operator><literal type="number">224</literal></expr>, <expr><operator>-</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224</literal> <operator>*</operator> <literal type="number">128.0</literal><operator>/</operator><literal type="number">255</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>MATRIX_COLOR_RANGE_FULL</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">128.0</literal><operator>/</operator><literal type="number">255</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">128.0</literal><operator>/</operator><literal type="number">255</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATRIX_YUV_TO_RGB</name><parameter_list>(<parameter><type><name>KR</name></type></parameter>, <parameter><type><name>KB</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MATRIX_YUV_TO_RGB_(KR, (1-(KR)-(KB)), KB)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATRIX_YUV_TO_RGB_</name><parameter_list>(<parameter><type><name>KR</name></type></parameter>, <parameter><type><name>KG</name></type></parameter>, <parameter><type><name>KB</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ 1, 0, 2*(1.0-(KR)), 1, -2*(1.0-(KB))*((KB)/(KG)), -2*(1.0-(KR))*((KR)/(KG)), 1, 2*(1.0-(KB)), 0, }</cpp:value></cpp:define>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>MATRIX_BT601</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><call><name>MATRIX_YUV_TO_RGB</name><argument_list>(<argument><expr><literal type="number">0.299</literal></expr></argument>, <argument><expr><literal type="number">0.114</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>MATRIX_BT709</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><call><name>MATRIX_YUV_TO_RGB</name><argument_list>(<argument><expr><literal type="number">0.2126</literal></expr></argument>, <argument><expr><literal type="number">0.0722</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>MATRIX_BT2020</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><call><name>MATRIX_YUV_TO_RGB</name><argument_list>(<argument><expr><literal type="number">0.2627</literal></expr></argument>, <argument><expr><literal type="number">0.0593</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_conv_matrix</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>conv_matrix_out</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>video_color_space_t</name></type> <name>color_space</name></decl></parameter>,
<parameter><decl><type><name>video_color_range_t</name></type> <name>color_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>space_matrix</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>color_space</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COLOR_SPACE_BT601</name></expr>:</case>
<expr_stmt><expr><name>space_matrix</name> <operator>=</operator> <name>MATRIX_BT601</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_SPACE_BT2020</name></expr>:</case>
<expr_stmt><expr><name>space_matrix</name> <operator>=</operator> <name>MATRIX_BT2020</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>space_matrix</name> <operator>=</operator> <name>MATRIX_BT709</name></expr>;</expr_stmt>
</block_content>}</block></switch>





<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>range_matrix</name> <init>= <expr><ternary><condition><expr><name>color_range</name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr>
?</condition><then> <expr><name>MATRIX_COLOR_RANGE_FULL</name></expr>
</then><else>: <expr><name>MATRIX_COLOR_RANGE_LIMITED</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control>
<block>{<block_content>


<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>space_matrix</name><index>[<expr><name>y</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name><name>range_matrix</name><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>conv_matrix_out</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>



<expr_stmt><expr><name><name>conv_matrix_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_matrix_out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_matrix_out</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_matrix_out</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>renderer_yuv_base_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
<parameter><decl><type><name>video_color_space_t</name></type> <name>yuv_space</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_color_range_t</name></type> <name>range</name> <init>= <expr><name>COLOR_RANGE_LIMITED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>matrix</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>conv_matrix</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_conv_matrix</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>yuv_space</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma</name> <operator>!=</operator> <name>VLC_CODEC_P010</name> <operator>&amp;&amp;</operator> <name>chroma</name> <operator>!=</operator> <name>VLC_CODEC_P016</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>yuv_range_correction</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>/</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>pixel_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>



















<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>yuv_range_correction</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>yuv_color</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

















<decl_stmt><decl><type><name>bool</name></type> <name>swap_uv</name> <init>= <expr><name>chroma</name> <operator>==</operator> <name>VLC_CODEC_YV12</name> <operator>||</operator> <name>chroma</name> <operator>==</operator> <name>VLC_CODEC_YV9</name> <operator>||</operator>
<name>chroma</name> <operator>==</operator> <name>VLC_CODEC_NV21</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>swap_uv</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>matrix</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>matrix</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>matrix</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>matrix</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>renderer_base_fetch_locations</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>interop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>yuv_color</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>ConvMatrix</name></name> <operator>=</operator> <call><name><name>vt</name><operator>-&gt;</operator><name>GetUniformLocation</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>,
<argument><expr><literal type="string">"ConvMatrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>ConvMatrix</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"TextureX"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Texture%1u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>Texture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>vt</name><operator>-&gt;</operator><name>GetUniformLocation</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>Texture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name> <operator>==</operator> <name>GL_TEXTURE_RECTANGLE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"TexSize%1u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>TexSize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>vt</name><operator>-&gt;</operator><name>GetUniformLocation</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>TexSize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>FillColor</name></name> <operator>=</operator> <call><name><name>vt</name><operator>-&gt;</operator><name>GetUniformLocation</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="string">"FillColor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>FillColor</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPLACEBO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_shader_res</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_sh_res</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>res</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>num_variables</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pl_shader_var</name></name></type> <name>sv</name> <init>= <expr><name><name>res</name><operator>-&gt;</operator><name>variables</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>pl_vars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>vt</name><operator>-&gt;</operator><name>GetUniformLocation</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name><name>sv</name><operator>.</operator><name>var</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>renderer_base_prepare_shader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tex_width</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tex_height</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>interop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>yuv_color</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix4fv</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>ConvMatrix</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>,
<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>conv_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Uniform1i</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>Texture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Uniform4f</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>FillColor</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name> <operator>==</operator> <name>GL_TEXTURE_RECTANGLE</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Uniform2f</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>TexSize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tex_width</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tex_height</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPLACEBO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_shader_res</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_sh_res</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>res</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>num_variables</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>loc</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>pl_vars</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_shader_var</name></name></type> <name>sv</name> <init>= <expr><name><name>res</name><operator>-&gt;</operator><name>variables</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pl_var</name></name></type> <name>var</name> <init>= <expr><name><name>sv</name><operator>.</operator><name>var</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>PL_VAR_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>.</operator><name>dim_m</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>var</name><operator>.</operator><name>dim_m</name></name> <operator>!=</operator> <name><name>var</name><operator>.</operator><name>dim_v</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>sv</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>var</name><operator>.</operator><name>dim_m</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix4fv</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix3fv</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UniformMatrix2fv</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<switch>switch <condition>(<expr><name><name>var</name><operator>.</operator><name>dim_v</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Uniform1f</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Uniform2f</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Uniform3f</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Uniform4f</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>renderer_xyz12_fetch_locations</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>Texture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>vt</name><operator>-&gt;</operator><name>GetUniformLocation</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="string">"Texture0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>Texture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>renderer_xyz12_prepare_shader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tex_width</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tex_height</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>alpha</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Uniform1i</name></name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>Texture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xyz12_shader_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>pf_fetch_locations</name></name> <operator>=</operator> <name>renderer_xyz12_fetch_locations</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>pf_prepare_shader</name></name> <operator>=</operator> <name>renderer_xyz12_prepare_shader</name></expr>;</expr_stmt>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template</name> <init>=
<expr><literal type="string">"uniform sampler2D Texture0;"</literal>
<literal type="string">"uniform vec4 xyz_gamma = vec4(2.6);"</literal>
<literal type="string">"uniform vec4 rgb_gamma = vec4(1.0/2.2);"</literal>

<literal type="string">"uniform mat4 matrix_xyz_rgb = mat4("</literal>
<literal type="string">" 3.240454 , -0.9692660, 0.0556434, 0.0,"</literal>
<literal type="string">" -1.5371385, 1.8760108, -0.2040259, 0.0,"</literal>
<literal type="string">" -0.4985314, 0.0415560, 1.0572252, 0.0,"</literal>
<literal type="string">" 0.0, 0.0, 0.0, 1.0 "</literal>
<literal type="string">" );"</literal>

<literal type="string">"uniform mat4 TransformMatrix;\n"</literal>
<literal type="string">"uniform mat4 OrientationMatrix;\n"</literal>
<literal type="string">"uniform mat3 TexCoordsMap0;\n"</literal>
<literal type="string">"vec4 vlc_texture(vec2 pic_coords)\n"</literal>
<literal type="string">"{ "</literal>
<literal type="string">" vec4 v_in, v_out;"</literal>

<literal type="string">" vec3 pic_hcoords = vec3((TransformMatrix * OrientationMatrix * vec4(pic_coords, 0.0, 1.0)).st, 1.0);\n"</literal>
<literal type="string">" vec2 tex_coords = (TexCoordsMap0 * pic_hcoords).st;\n"</literal>
<literal type="string">" v_in = texture2D(Texture0, tex_coords);\n"</literal>
<literal type="string">" v_in = pow(v_in, xyz_gamma);"</literal>
<literal type="string">" v_out = matrix_xyz_rgb * v_in ;"</literal>
<literal type="string">" v_out = pow(v_out, rgb_gamma) ;"</literal>
<literal type="string">" v_out = clamp(v_out, 0.0, 1.0) ;"</literal>
<literal type="string">" return v_out;"</literal>
<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>opengl_init_swizzle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>swizzle_per_tex</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>oneplane_texfmt</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><literal type="string">"GL_ARB_texture_rg"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oneplane_texfmt</name> <operator>=</operator> <name>GL_RED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>oneplane_texfmt</name> <operator>=</operator> <name>GL_LUMINANCE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>swizzle_per_tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>swizzle_per_tex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>swizzle_per_tex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"r"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>oneplane_texfmt</name> <operator>==</operator> <name>GL_RED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>swizzle_per_tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"r"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swizzle_per_tex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"rg"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>swizzle_per_tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>swizzle_per_tex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"xa"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>








<switch>switch <condition>(<expr><name>chroma</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case>
<expr_stmt><expr><name><name>swizzle_per_tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"grb"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>
<expr_stmt><expr><name><name>swizzle_per_tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"rga"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_VYUY</name></expr>:</case>
<expr_stmt><expr><name><name>swizzle_per_tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"gbr"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YVYU</name></expr>:</case>
<expr_stmt><expr><name><name>swizzle_per_tex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"rag"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"missing chroma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>opengl_fragment_shader_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>tex_target</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name></decl></parameter>, <parameter><decl><type><name>video_color_space_t</name></type> <name>yuv_space</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>interop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>swizzle_per_tex</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_yuv</name> <init>= <expr><call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name> <operator>==</operator> <name>VLC_CODEC_XYZ12</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>xyz12_shader_init</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>renderer_yuv_base_init</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>yuv_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opengl_init_swizzle</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>interop</name></name></expr></argument>, <argument><expr><name>swizzle_per_tex</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sampler</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lookup</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>tex_target</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GL_TEXTURE_EXTERNAL_OES</name></expr>:</case>
<expr_stmt><expr><name>sampler</name> <operator>=</operator> <literal type="string">"samplerExternalOES"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lookup</name> <operator>=</operator> <literal type="string">"texture2D"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_TEXTURE_2D</name></expr>:</case>
<expr_stmt><expr><name>sampler</name> <operator>=</operator> <literal type="string">"sampler2D"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lookup</name> <operator>=</operator> <literal type="string">"texture2D"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GL_TEXTURE_RECTANGLE</name></expr>:</case>
<expr_stmt><expr><name>sampler</name> <operator>=</operator> <literal type="string">"sampler2DRect"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lookup</name> <operator>=</operator> <literal type="string">"texture2DRect"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>ms</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_memstream_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_memstream_puts(&amp;ms, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vlc_memstream_printf(&amp;ms, x, ##__VA_ARGS__)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><literal type="string">"uniform mat4 TransformMatrix;\n"</literal>
<literal type="string">"uniform mat4 OrientationMatrix;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADDF</name><argument_list>(<argument><expr><literal type="string">"uniform %s Texture%u;\n"</literal>
<literal type="string">"uniform mat3 TexCoordsMap%u;\n"</literal></expr></argument>, <argument><expr><name>sampler</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPLACEBO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_sh</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pl_shader</name></name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_sh</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pl_color_map_params</name></name></type> <name>color_params</name> <init>= <expr><name>pl_color_map_default_params</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>color_params</name><operator>.</operator><name>intent</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"rendering-intent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_params</name><operator>.</operator><name>tone_mapping_algo</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"tone-mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_params</name><operator>.</operator><name>tone_mapping_param</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"tone-mapping-param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PL_API_VER</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr></cpp:if>
<expr_stmt><expr><name><name>color_params</name><operator>.</operator><name>desaturation_strength</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"desat-strength"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_params</name><operator>.</operator><name>desaturation_exponent</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"desat-exponent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_params</name><operator>.</operator><name>desaturation_base</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"desat-base"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>color_params</name><operator>.</operator><name>tone_mapping_desaturate</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"tone-mapping-desat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>color_params</name><operator>.</operator><name>gamut_warning</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"tone-mapping-warn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_color_space</name></name></type> <name>dst_space</name> <init>= <expr><name>pl_color_space_unknown</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst_space</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"target-prim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_space</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"target-trc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pl_shader_color_map</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color_params</name></expr></argument>,
<argument><expr><call><name>vlc_placebo_ColorSpace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>interop</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dst_space</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_shader_obj</name></name> <modifier>*</modifier></type><name>dither_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"dither-algo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>out_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>override</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"dither-depth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>override</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_bits</name> <operator>=</operator> <name>override</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>fb_depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>GetFramebufferAttachmentParameteriv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GetFramebufferAttachmentParameteriv</name></name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_BACK_LEFT</name></expr></argument>,
<argument><expr><name>GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fb_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>fb_depth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fb_depth</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out_bits</name> <operator>=</operator> <name>fb_depth</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<macro><name>pl_shader_dither</name><argument_list>(<argument>sh</argument>, <argument>out_bits</argument>, <argument>&amp;dither_state</argument>, <argument>&amp;(struct pl_dither_params) {
.method = method</argument>,
<argument>.lut_size = <literal type="number">4</literal></argument>, 
<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_shader_res</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_sh_res</name></name> <operator>=</operator> <call><name>pl_shader_finalize</name><argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pl_shader_obj_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dither_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>pl_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>pl_vars</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>num_variables</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>num_variables</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pl_shader_var</name></name></type> <name>sv</name> <init>= <expr><name><name>res</name><operator>-&gt;</operator><name>variables</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glsl_type_name</name> <init>= <expr><call><name>pl_var_glsl_type_name</name><argument_list>(<argument><expr><name><name>sv</name><operator>.</operator><name>var</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADDF</name><argument_list>(<argument><expr><literal type="string">"uniform %s %s;\n"</literal></expr></argument>, <argument><expr><name>glsl_type_name</name></expr></argument>, <argument><expr><name><name>sv</name><operator>.</operator><name>var</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>num_vertex_attribs</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>num_descriptors</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>glsl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>transfer</name></name> <operator>==</operator> <name>TRANSFER_FUNC_SMPTE_ST2084</name> <operator>||</operator>
<name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_BT2020</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>renderer</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"VLC needs to be built with support for libplacebo "</literal>
<literal type="string">"in order to display wide gamut or HDR signals correctly."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>tex_target</name> <operator>==</operator> <name>GL_TEXTURE_RECTANGLE</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADDF</name><argument_list>(<argument><expr><literal type="string">"uniform vec2 TexSize%u;\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><literal type="string">"uniform mat4 ConvMatrix;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><literal type="string">"uniform vec4 FillColor;\n"</literal>
<literal type="string">"vec4 vlc_texture(vec2 pic_coords) {\n"</literal>

<literal type="string">" vec3 pic_hcoords = vec3((TransformMatrix * OrientationMatrix * vec4(pic_coords, 0.0, 1.0)).st, 1.0);\n"</literal>
<literal type="string">" vec2 tex_coords;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>color_count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><literal type="string">" vec4 texel;\n"</literal>
<literal type="string">" vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>color_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>swizzle</name> <init>= <expr><name><name>swizzle_per_tex</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>swizzle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>swizzle_count</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>swizzle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADDF</name><argument_list>(<argument><expr><literal type="string">" tex_coords = (TexCoordsMap%u * pic_hcoords).st;\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tex_target</name> <operator>==</operator> <name>GL_TEXTURE_RECTANGLE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>ADDF</name><argument_list>(<argument><expr><literal type="string">" tex_coords = vec2(tex_coords.x * TexSize%u.x,\n"</literal>
<literal type="string">" tex_coords.y * TexSize%u.y);\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ADDF</name><argument_list>(<argument><expr><literal type="string">" texel = %s(Texture%u, tex_coords);\n"</literal></expr></argument>, <argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>swizzle_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>ADDF</name><argument_list>(<argument><expr><literal type="string">" pixel[%u] = texel.%c;\n"</literal></expr></argument>, <argument><expr><name>color_idx</name></expr></argument>, <argument><expr><name><name>swizzle</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>color_idx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>color_idx</name> <operator>&lt;=</operator> <name>PICTURE_PLANE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><literal type="string">" vec4 result = ConvMatrix * pixel;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>color_count</name> <operator>=</operator> <name>color_idx</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><literal type="string">" tex_coords = (TexCoordsMap0 * pic_hcoords).st;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDF</name><argument_list>(<argument><expr><literal type="string">" vec4 result = %s(Texture0, tex_coords);\n"</literal></expr></argument>, <argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>color_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>yuv_space</name> <operator>==</operator> <name>COLOR_SPACE_UNDEF</name> <operator>||</operator> <name>color_count</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPLACEBO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_sh_res</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_shader_res</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>renderer</name><operator>-&gt;</operator><name>pl_sh_res</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>input</name></name> <operator>==</operator> <name>PL_SHADER_SIG_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>output</name></name> <operator>==</operator> <name>PL_SHADER_SIG_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDF</name><argument_list>(<argument><expr><literal type="string">" result = %s(result);\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><literal type="string">" return result * FillColor;\n"</literal>
<literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADDF</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><call><name>vlc_memstream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>pf_fetch_locations</name></name> <operator>=</operator> <name>renderer_base_fetch_locations</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderer</name><operator>-&gt;</operator><name>pf_prepare_shader</name></name> <operator>=</operator> <name>renderer_base_prepare_shader</name></expr>;</expr_stmt>

<return>return <expr><name><name>ms</name><operator>.</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
