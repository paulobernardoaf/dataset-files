<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\opengl\vout_helper.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_opengl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_viewpoint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"renderer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sub_renderer.h"</cpp:file></cpp:include>

<struct>struct <name>vout_display_opengl_t</name> <block>{

<decl_stmt><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_api</name></name></type> <name>api</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_sub_renderer</name></name> <modifier>*</modifier></type><name>sub_renderer</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>gl_subpicture_chromas</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VLC_CODEC_RGBA</name></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ResizeFormatToGLMaxTexSize</name><parameter_list>(<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>max_tex_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&gt;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>vis_w</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>vis_h</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>nw_w</name> <init>= <expr><name>max_tex_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>nw_vis_w</name> <init>= <expr><name>nw_w</name> <operator>*</operator> <name>vis_w</name> <operator>/</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name>nw_w</name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name>nw_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name>nw_vis_w</name> <operator>*</operator> <name>vis_h</name> <operator>/</operator> <name>vis_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name>nw_vis_w</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>vis_w</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>vis_h</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>nw_h</name> <init>= <expr><name>max_tex_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>nw_vis_h</name> <init>= <expr><name>nw_h</name> <operator>*</operator> <name>vis_h</name> <operator>/</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name>nw_h</name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name>nw_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name>nw_vis_h</name> <operator>*</operator> <name>vis_w</name> <operator>/</operator> <name>vis_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name>nw_vis_h</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>vout_display_opengl_t</name> <modifier>*</modifier></type><name>vout_display_opengl_New</name><parameter_list>(<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>subpicture_chromas</name></decl></parameter>,
<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>viewpoint</name></decl></parameter>,
<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_opengl_t</name> <modifier>*</modifier></type><name>vgl</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vgl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vgl</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vgl</name><operator>-&gt;</operator><name>gl</name></name> <operator>=</operator> <name>gl</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_gl_api_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vgl</name><operator>-&gt;</operator><name>api</name></name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vgl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><operator>&amp;</operator><name><name>vgl</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ogl_version</name> <init>= <expr><call><name><name>vt</name><operator>-&gt;</operator><name>GetString</name></name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>supports_shaders</name> <init>= <expr><call><name>strverscmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>ogl_version</name></expr></argument>, <argument><expr><literal type="string">"2.0"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>supports_shaders</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><literal type="string">"shaders not supported, bailing out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vgl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name>GLint</name></type> <name>max_tex_size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GetIntegerv</name></name><argument_list>(<argument><expr><name>GL_MAX_TEXTURE_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_tex_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>GLint</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&gt;</operator> <name>max_tex_size</name> <operator>||</operator>
<operator>(</operator><name>GLint</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&gt;</operator> <name>max_tex_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ResizeFormatToGLMaxTexSize</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>max_tex_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_dump_shaders</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><literal type="string">"verbose"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name> <init>= <expr><name><name>vgl</name><operator>-&gt;</operator><name>renderer</name></name> <operator>=</operator>
<call><name>vlc_gl_renderer_New</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vgl</name><operator>-&gt;</operator><name>api</name></name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>b_dump_shaders</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vgl</name><operator>-&gt;</operator><name>renderer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><literal type="string">"Could not create renderer for %4.4s"</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vgl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vgl</name><operator>-&gt;</operator><name>sub_renderer</name></name> <operator>=</operator> <call><name>vlc_gl_sub_renderer_New</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vgl</name><operator>-&gt;</operator><name>api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vgl</name><operator>-&gt;</operator><name>sub_renderer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><literal type="string">"Could not create sub renderer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_gl_renderer_Delete</name><argument_list>(<argument><expr><name><name>vgl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vgl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>renderer</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>projection_mode</name></name> <operator>!=</operator> <name>PROJECTION_MODE_RECTANGULAR</name>
<operator>&amp;&amp;</operator> <call><name>vout_display_opengl_SetViewpoint</name><argument_list>(<argument><expr><name>vgl</name></expr></argument>, <argument><expr><name>viewpoint</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_display_opengl_Delete</name><argument_list>(<argument><expr><name>vgl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fmt</name> <operator>=</operator> <name><name>renderer</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subpicture_chromas</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>subpicture_chromas</name> <operator>=</operator> <name>gl_subpicture_chromas</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>vgl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_display_opengl_Delete</name><parameter_list>(<parameter><decl><type><name>vout_display_opengl_t</name> <modifier>*</modifier></type><name>vgl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><operator>&amp;</operator><name><name>vgl</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_gl_sub_renderer_Delete</name><argument_list>(<argument><expr><name><name>vgl</name><operator>-&gt;</operator><name>sub_renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_gl_renderer_Delete</name><argument_list>(<argument><expr><name><name>vgl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vgl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vout_display_opengl_SetViewpoint</name><parameter_list>(<parameter><decl><type><name>vout_display_opengl_t</name> <modifier>*</modifier></type><name>vgl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>p_vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_gl_renderer_SetViewpoint</name><argument_list>(<argument><expr><name><name>vgl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>, <argument><expr><name>p_vp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_display_opengl_SetWindowAspectRatio</name><parameter_list>(<parameter><decl><type><name>vout_display_opengl_t</name> <modifier>*</modifier></type><name>vgl</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>f_sar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_gl_renderer_SetWindowAspectRatio</name><argument_list>(<argument><expr><name><name>vgl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>, <argument><expr><name>f_sar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vout_display_opengl_Viewport</name><parameter_list>(<parameter><decl><type><name>vout_display_opengl_t</name> <modifier>*</modifier></type><name>vgl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><operator>&amp;</operator><name><name>vgl</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Viewport</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vout_display_opengl_Prepare</name><parameter_list>(<parameter><decl><type><name>vout_display_opengl_t</name> <modifier>*</modifier></type><name>vgl</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vgl</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_gl_renderer_Prepare</name><argument_list>(<argument><expr><name><name>vgl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_gl_sub_renderer_Prepare</name><argument_list>(<argument><expr><name><name>vgl</name><operator>-&gt;</operator><name>sub_renderer</name></name></expr></argument>, <argument><expr><name>subpicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vgl</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>vout_display_opengl_Display</name><parameter_list>(<parameter><decl><type><name>vout_display_opengl_t</name> <modifier>*</modifier></type><name>vgl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vgl</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_gl_renderer_Draw</name><argument_list>(<argument><expr><name><name>vgl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_gl_sub_renderer_Draw</name><argument_list>(<argument><expr><name><name>vgl</name><operator>-&gt;</operator><name>sub_renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_gl_Swap</name><argument_list>(<argument><expr><name><name>vgl</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vgl</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

</unit>
