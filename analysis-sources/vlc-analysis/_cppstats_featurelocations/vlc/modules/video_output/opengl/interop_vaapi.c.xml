<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\opengl\interop_vaapi.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/egl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/eglext.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_drmcommon.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../hw/vaapi/vlc_vaapi.h"</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_EGL_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_EGL_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>GLeglImageOES</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>PFNGLEGLIMAGETARGETTEXTURE2DOESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLeglImageOES</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>priv</name>
<block>{
<decl_stmt><decl><type><name>VADisplay</name></type> <name>vadpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name> <modifier>*</modifier></type><name>va_surface_ids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLEGLIMAGETARGETTEXTURE2DOESPROC</name></type> <name>glEGLImageTargetTexture2DOES</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EGLint</name></type> <name><name>drm_fourccs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAImage</name></type> <name>va_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VABufferInfo</name></type> <name>va_buffer_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name><name>egl_images</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>last</name></decl>;</struct>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>EGLImageKHR</name></type>
<name>vaegl_image_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>EGLint</name></type> <name>fourcc</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>pitch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EGLint</name></type> <name><name>attribs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>EGL_WIDTH</name></expr>, <expr><name>w</name></expr>,
<expr><name>EGL_HEIGHT</name></expr>, <expr><name>h</name></expr>,
<expr><name>EGL_LINUX_DRM_FOURCC_EXT</name></expr>, <expr><name>fourcc</name></expr>,
<expr><name>EGL_DMA_BUF_PLANE0_FD_EXT</name></expr>, <expr><name>fd</name></expr>,
<expr><name>EGL_DMA_BUF_PLANE0_OFFSET_EXT</name></expr>, <expr><name>offset</name></expr>,
<expr><name>EGL_DMA_BUF_PLANE0_PITCH_EXT</name></expr>, <expr><name>pitch</name></expr>,
<expr><name>EGL_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>egl</name><operator>.</operator><name>createImageKHR</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><name>EGL_LINUX_DMA_BUF_EXT</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>attribs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vaegl_image_destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>EGLImageKHR</name></type> <name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>egl</name><operator>.</operator><name>destroyImageKHR</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vaegl_release_last_pic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>va_image</name><operator>.</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vaegl_image_destroy</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>egl_images</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_vaapi_ReleaseBufferHandle</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>va_image</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vaapi_DestroyImage</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>va_image</name><operator>.</operator><name>image_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vaegl_init_fourcc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>va_fourcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>va_fourcc</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VA_FOURCC_NV12</name></expr>:</case>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fourccs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'8'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fourccs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'8'</literal></expr></argument>, <argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VA_FOURCC_P010</name></expr>:</case>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fourccs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fourccs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

case VA_FOURCC_RGBA:
priv-&gt;drm_fourccs[0] = VLC_FOURCC('G', 'R', '3', '2');
break;
case VA_FOURCC_BGRA:
priv-&gt;drm_fourccs[0] = VLC_FOURCC('G', 'R', '3', '2');
break;
case VA_FOURCC_YV12:
priv-&gt;drm_fourccs[0] = VLC_FOURCC('R', '8', ' ', ' ');
priv-&gt;drm_fourccs[1] = VLC_FOURCC('R', '8', ' ', ' ');
priv-&gt;drm_fourccs[2] = VLC_FOURCC('R', '8', ' ', ' ');
break;
case VA_FOURCC_422H:
priv-&gt;drm_fourccs[0] = VLC_FOURCC('R', '8', ' ', ' ');
priv-&gt;drm_fourccs[1] = VLC_FOURCC('R', '8', ' ', ' ');
priv-&gt;drm_fourccs[2] = VLC_FOURCC('R', '8', ' ', ' ');
break;
case VA_FOURCC_UYVY:
priv-&gt;drm_fourccs[0] = VLC_FOURCC('R', '1', '6', ' ');
break;
case VA_FOURCC_444P:
priv-&gt;drm_fourccs[0] = VLC_FOURCC('R', '1', '6', ' ');
priv-&gt;drm_fourccs[1] = VLC_FOURCC('R', '1', '6', ' ');
priv-&gt;drm_fourccs[2] = VLC_FOURCC('R', '1', '6', ' ');
break;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>=</operator> <name>va_fourcc</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tc_vaegl_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>plane_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>plane_offset</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAImage</name></type> <name>va_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VABufferInfo</name></type> <name>va_buffer_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EGLImageKHR</name></type> <name><name>egl_images</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>release_image</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>release_buffer_info</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name> <operator>==</operator> <name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>pic</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>va_image</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>va_image</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>va_buffer_info</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>va_buffer_info</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>va_image</name><operator>.</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>egl_images</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>egl_images</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_vaapi_DeriveImage</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><call><name>vlc_vaapi_PicGetSurface</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>va_image</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>release_image</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>va_image</name><operator>.</operator><name>format</name><operator>.</operator><name>fourcc</name></name> <operator>==</operator> <name><name>priv</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>va_buffer_info</name> <operator>=</operator> <operator>(</operator><name>VABufferInfo</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>mem_type</name> <operator>=</operator> <name>VA_SURFACE_ATTRIB_MEM_TYPE_DRM_PRIME</name></expr>
}</block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_vaapi_AcquireBufferHandle</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><name><name>va_image</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>va_buffer_info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>release_buffer_info</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>va_image</name><operator>.</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>egl_images</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>vaegl_image_create</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name><name>tex_width</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tex_height</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fourccs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>va_buffer_info</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>va_image</name><operator>.</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>va_image</name><operator>.</operator><name>pitches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>egl_images</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>glEGLImageTargetTexture2DOES</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>egl_images</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pic</name> <operator>!=</operator> <name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>pic</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>pic</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vaegl_release_last_pic</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>pic</name></name> <operator>=</operator> <call><name>picture_Hold</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>va_image</name></name> <operator>=</operator> <name>va_image</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>va_buffer_info</name></name> <operator>=</operator> <name>va_buffer_info</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>va_image</name><operator>.</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>egl_images</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>egl_images</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>release_image</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>release_buffer_info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_vaapi_ReleaseBufferHandle</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><name><name>va_image</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>egl_images</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vaegl_image_destroy</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name><name>egl_images</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_vaapi_DestroyImage</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><name><name>va_image</name><operator>.</operator><name>image_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>pic</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vaegl_release_last_pic</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>strcasecmp_void</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tc_va_check_interop_blacklist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name> <modifier>*</modifier></type><name>vadpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vendor</name> <init>= <expr><call><name>vaQueryVendorString</name><argument_list>(<argument><expr><name>vadpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vendor</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL_SIZE_MAX</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>blacklist_prefix</name><index>[]</index><index>[<expr><name>BL_SIZE_MAX</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"mesa gallium vaapi"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>vendor_prefix</name><index>[<expr><name>BL_SIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>vendor_prefix</name></expr></argument>, <argument><expr><name>vendor</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vendor_prefix</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vendor_prefix</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>vendor_prefix</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>found</name> <init>= <expr><call><name>bsearch</name><argument_list>(<argument><expr><name>vendor_prefix</name></expr></argument>, <argument><expr><name>blacklist_prefix</name></expr></argument>,
<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>blacklist_prefix</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>BL_SIZE_MAX</name></expr></argument>, <argument><expr><name>strcasecmp_void</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"The '%s' driver is blacklisted: no interop"</literal></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tc_va_check_derive_image</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name> <modifier>*</modifier></type><name>va_surface_ids</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>vlc_vaapi_PoolNew</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>va_surface_ids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>interop</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>VAImage</name></type> <name>va_image</name> <init>= <expr><block>{ <expr><operator>.</operator><name>image_id</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_vaapi_DeriveImage</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><name><name>va_surface_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>va_image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>va_image</name><operator>.</operator><name>format</name><operator>.</operator><name>fourcc</name></name> <operator>==</operator> <name><name>priv</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>image_desc</name> <init>=
<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>va_image</name><operator>.</operator><name>format</name><operator>.</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>image_desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <name><name>va_image</name><operator>.</operator><name>num_planes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VABufferInfo</name></type> <name>va_buffer_info</name> <init>= <expr><operator>(</operator><name>VABufferInfo</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>mem_type</name> <operator>=</operator> <name>VA_SURFACE_ATTRIB_MEM_TYPE_DRM_PRIME</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_vaapi_AcquireBufferHandle</name><argument_list>(<argument><expr><name>o</name></expr></argument> ,<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><name><name>va_image</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>va_buffer_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image_desc</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>w_num</name> <init>= <expr><name><name>image_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>image_desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w_num</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>EGLint</name></type> <name>w</name> <init>= <expr><operator>(</operator><name><name>va_image</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name>w_num</name><operator>)</operator> <operator>/</operator> <name><name>image_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EGLint</name></type> <name>h</name> <init>= <expr><operator>(</operator><name><name>va_image</name><operator>.</operator><name>height</name></name> <operator>*</operator> <name><name>image_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <name><name>image_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EGLImageKHR</name></type> <name>egl_image</name> <init>=
<expr><call><name>vaegl_image_create</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fourccs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>va_buffer_info</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>va_image</name><operator>.</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>va_image</name><operator>.</operator><name>pitches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>egl_image</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Can't create Image KHR: kernel too old ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vaegl_image_destroy</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>egl_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>va_image</name><operator>.</operator><name>image_id</name></name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>va_image</name><operator>.</operator><name>buf</name></name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_vaapi_ReleaseBufferHandle</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><name><name>va_image</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_vaapi_DestroyImage</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>, <argument><expr><name><name>va_image</name><operator>.</operator><name>image_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_pool_Release</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name> <init>= <expr><call><name>vlc_video_context_HoldDevice</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dec_device</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VLC_DECODER_DEVICE_VAAPI</name>
<operator>||</operator> <operator>!</operator><call><name>vlc_vaapi_IsChromaOpaque</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>ext</name></name> <operator>!=</operator> <name>VLC_GL_EXT_EGL</name>
<operator>||</operator> <name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>egl</name><operator>.</operator><name>createImageKHR</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>egl</name><operator>.</operator><name>destroyImageKHR</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><literal type="string">"GL_OES_EGL_image"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eglexts</name> <init>= <expr><call><name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>egl</name><operator>.</operator><name>queryString</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><name>EGL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>eglexts</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name>eglexts</name></expr></argument>, <argument><expr><literal type="string">"EGL_EXT_image_dma_buf_import"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>priv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>va_fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vlc_sw_chroma</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_VAAPI_420</name></expr>:</case>
<expr_stmt><expr><name>va_fourcc</name> <operator>=</operator> <name>VA_FOURCC_NV12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc_sw_chroma</name> <operator>=</operator> <name>VLC_CODEC_NV12</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_VAAPI_420_10BPP</name></expr>:</case>
<expr_stmt><expr><name>va_fourcc</name> <operator>=</operator> <name>VA_FOURCC_P010</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc_sw_chroma</name> <operator>=</operator> <name>VLC_CODEC_P010</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>vaegl_init_fourcc</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>va_fourcc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>glEGLImageTargetTexture2DOES</name></name> <operator>=</operator>
<call><name>vlc_gl_GetProcAddress</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"glEGLImageTargetTexture2DOES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>glEGLImageTargetTexture2DOES</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name> <operator>=</operator> <name><name>dec_device</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tc_va_check_interop_blacklist</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>vadpy</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tc_va_check_derive_image</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>vlc_sw_chroma</name></expr></argument>,
<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop_ops</name></name></type> <name>ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>update_textures</name> <operator>=</operator> <name>tc_vaegl_update</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>Close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument><literal type="string">"VA-API OpenGL surface converter"</literal></argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"glinterop"</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"vaapi"</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>
</unit>
