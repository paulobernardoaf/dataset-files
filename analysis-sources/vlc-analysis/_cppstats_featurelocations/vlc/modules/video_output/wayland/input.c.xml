<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\wayland\input.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/input-event-codes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wayland-client.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xkbcommon/xkbcommon.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../xcb/vlc_xkb.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>

<struct>struct <name>seat_data</name>
<block>{
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_seat</name></name> <modifier>*</modifier></type><name>seat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>cursor_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>cursor_deadline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cursor_serial</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_context</name></name> <modifier>*</modifier></type><name>xkb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_keyboard</name></name> <modifier>*</modifier></type><name>keyboard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_keymap</name></name> <modifier>*</modifier></type><name>keymap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_state</name></name> <modifier>*</modifier></type><name>keystate</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_list</name></name></type> <name>node</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_show</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hsx</name></decl>, <decl><type ref="prev"/><name>hsy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>surface</name> <init>= <expr><call><name>window_get_cursor</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hsx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hsy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>surface</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wl_pointer_set_cursor</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>cursor_serial</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>hsx</name></expr></argument>, <argument><expr><name>hsy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>cursor_deadline</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>sd</name><operator>-&gt;</operator><name>cursor_timeout</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_enter_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl></parameter>,
<parameter><decl><type><name>wl_fixed_t</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>wl_fixed_t</name></type> <name>sy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>cursor_serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pointer_show</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>surface</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>sx</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>sy</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_leave_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>pointer</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>serial</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>surface</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_motion_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>wl_fixed_t</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>wl_fixed_t</name></type> <name>sy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pointer_show</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_window_ReportMouseMoved</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>,
<argument><expr><call><name>wl_fixed_to_int</name><argument_list>(<argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>wl_fixed_to_int</name><argument_list>(<argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>time</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_button_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>time</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>keycode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pointer_show</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>keycode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BTN_LEFT</name></expr>:</case>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_BUTTON_LEFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BTN_RIGHT</name></expr>:</case>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_BUTTON_RIGHT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BTN_MIDDLE</name></expr>:</case>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_BUTTON_CENTER</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WL_POINTER_BUTTON_STATE_RELEASED</name></expr>:</case>
<expr_stmt><expr><call><name>vout_window_ReportMouseReleased</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WL_POINTER_BUTTON_STATE_PRESSED</name></expr>:</case>
<expr_stmt><expr><call><name>vout_window_ReportMousePressed</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>serial</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>time</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_axis_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>wl_fixed_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>plus</name> <init>= <expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pointer_show</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>WL_POINTER_AXIS_VERTICAL_SCROLL</name></expr>:</case>
<expr_stmt><expr><name>button</name> <operator>=</operator> <ternary><condition><expr><name>plus</name></expr> ?</condition><then> <expr><name>MOUSE_BUTTON_WHEEL_DOWN</name></expr> </then><else>: <expr><name>MOUSE_BUTTON_WHEEL_UP</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WL_POINTER_AXIS_HORIZONTAL_SCROLL</name></expr>:</case>
<expr_stmt><expr><name>button</name> <operator>=</operator> <ternary><condition><expr><name>plus</name></expr> ?</condition><then> <expr><name>MOUSE_BUTTON_WHEEL_RIGHT</name></expr> </then><else>: <expr><name>MOUSE_BUTTON_WHEEL_LEFT</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>

<while>while <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_window_ReportMousePressed</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_window_ReportMouseReleased</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>-=</operator> <call><name>wl_fixed_from_int</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>serial</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_frame_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>pointer</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_axis_source</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>pointer</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>source</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_axis_stop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>axis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>pointer</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>time</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>axis</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_axis_discrete</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_pointer</name></name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>steps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>pointer</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>type</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>steps</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_pointer_listener</name></name></type> <name>pointer_cbs</name> <init>=
<expr><block>{
<expr><name>pointer_enter_cb</name></expr>,
<expr><name>pointer_leave_cb</name></expr>,
<expr><name>pointer_motion_cb</name></expr>,
<expr><name>pointer_button_cb</name></expr>,
<expr><name>pointer_axis_cb</name></expr>,
<expr><name>pointer_frame_cb</name></expr>,
<expr><name>pointer_axis_source</name></expr>,
<expr><name>pointer_axis_stop</name></expr>,
<expr><name>pointer_axis_discrete</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <call><name>wl_seat_get_pointer</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>seat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_pointer_add_listener</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pointer_cbs</name></expr></argument>, <argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>cursor_timeout</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="string">"mouse-hide-timeout"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>cursor_deadline</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pointer_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name>WL_POINTER_RELEASE_SINCE_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_pointer_release</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_pointer_destroy</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboard_keymap_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name> <modifier>*</modifier></type><name>keyboard</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"format %"</literal><name>PRIu32</name><literal type="string">" keymap of %"</literal><name>PRIu32</name><literal type="string">" bytes"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>!=</operator> <name>WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"unsupported keymap format %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>map</name><operator>)</operator><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>keymap</name></name> <operator>=</operator> <call><name>xkb_keymap_new_from_string</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>xkb</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>,
<argument><expr><name>XKB_KEYMAP_FORMAT_TEXT_V1</name></expr></argument>,
<argument><expr><name>XKB_KEYMAP_COMPILE_NO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>keymap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>keystate</name></name> <operator>=</operator> <call><name>xkb_state_new</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keymap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"keymap parse error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>keyboard</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboard_enter_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name> <modifier>*</modifier></type><name>keyboard</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_array</name></name> <modifier>*</modifier></type><name>keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>keyboard</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>serial</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>surface</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>keys</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboard_leave_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name> <modifier>*</modifier></type><name>keyboard</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>keyboard</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>serial</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>surface</name></expr>;</expr_stmt></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboard_key_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name> <modifier>*</modifier></type><name>keyboard</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>keycode</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>vk</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>WL_KEYBOARD_KEY_STATE_PRESSED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keystate</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vk</name> <operator>=</operator> <call><name>vlc_xkb_get_one</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keystate</name></name></expr></argument>, <argument><expr><name>keycode</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vk</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"key: 0x%08"</literal><name>PRIxFAST32</name><literal type="string">" (XKB: 0x%04"</literal><name>PRIx32</name><literal type="string">")"</literal></expr></argument>,
<argument><expr><name>vk</name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_window_ReportKeyPress</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>vk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>keyboard</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>serial</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>time</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboard_modifiers_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name> <modifier>*</modifier></type><name>keyboard</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>depressed</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>latched</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>locked</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keystate</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xkb_state_update_mask</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keystate</name></name></expr></argument>, <argument><expr><name>depressed</name></expr></argument>, <argument><expr><name>latched</name></expr></argument>, <argument><expr><name>locked</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>keyboard</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>serial</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboard_repeat_info_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_keyboard</name></name> <modifier>*</modifier></type><name>keyboard</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"keyboard repeat info: %d Hz after %d ms"</literal></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>keyboard</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_keyboard_listener</name></name></type> <name>keyboard_cbs</name> <init>=
<expr><block>{
<expr><name>keyboard_keymap_cb</name></expr>,
<expr><name>keyboard_enter_cb</name></expr>,
<expr><name>keyboard_leave_cb</name></expr>,
<expr><name>keyboard_key_cb</name></expr>,
<expr><name>keyboard_modifiers_cb</name></expr>,
<expr><name>keyboard_repeat_info_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboard_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>keyboard</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>keyboard</name></name> <operator>=</operator> <call><name>wl_seat_get_keyboard</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>seat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keyboard</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>keymap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_keyboard_add_listener</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keyboard</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyboard_cbs</name></expr></argument>, <argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keyboard_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>keyboard</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name>WL_KEYBOARD_RELEASE_SINCE_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_keyboard_release</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keyboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_keyboard_destroy</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keyboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>keymap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>keystate</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xkb_state_unref</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keystate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xkb_keymap_unref</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>keymap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>keyboard</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>seat_capabilities_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_seat</name></name> <modifier>*</modifier></type><name>seat</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>capabilities</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vout_window_t</name></name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"seat capabilities: 0x%"</literal><name>PRIx32</name></expr></argument>, <argument><expr><name>capabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>seat</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>capabilities</name> <operator>&amp;</operator> <name>WL_SEAT_CAPABILITY_POINTER</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"mouse-events"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pointer_create</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pointer_destroy</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>capabilities</name> <operator>&amp;</operator> <name>WL_SEAT_CAPABILITY_KEYBOARD</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>xkb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>keyboard_create</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>keyboard_destroy</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>seat_name_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_seat</name></name> <modifier>*</modifier></type><name>seat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><literal type="string">"seat name: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>seat</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_seat_listener</name></name></type> <name>seat_cbs</name> <init>=
<expr><block>{
<expr><name>seat_capabilities_cb</name></expr>,
<expr><name>seat_name_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>seat_create</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sd</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>seat</name></name> <operator>=</operator> <call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wl_seat_interface</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>seat</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>wnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"keyboard-events"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>xkb</name></name> <operator>=</operator> <call><name>xkb_context_new</name><argument_list>(<argument><expr><name>XKB_CONTEXT_NO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>keyboard</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_seat_add_listener</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>seat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seat_cbs</name></expr></argument>, <argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_list_insert</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>seat_next_deadline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>sd</name><operator>-&gt;</operator><name>cursor_deadline</name></name></expr> </then><else>: <expr><name>INT64_MAX</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>seat_refresh</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sd</name><operator>-&gt;</operator><name>cursor_deadline</name></name> <operator>&lt;=</operator> <name>now</name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>wl_pointer_set_cursor</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>cursor_serial</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sd</name><operator>-&gt;</operator><name>cursor_deadline</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>seat_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wl_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sd</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>keyboard_destroy</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>xkb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xkb_context_unref</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>xkb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>pointer_destroy</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name>WL_SEAT_RELEASE_SINCE_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_seat_release</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>seat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_seat_destroy</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>seat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>seat_destroy_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>

<macro><name>wl_list_for_each</name><argument_list>(<argument>sd</argument>, <argument>list</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>name</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>seat_destroy</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>seat_destroy_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>wl_list_empty</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>seat_destroy</name><argument_list>(<argument><expr><call><name>container_of</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr>struct <name>seat_data</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>seat_next_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wl_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>deadline</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<macro><name>wl_list_for_each</name><argument_list>(<argument>sd</argument>, <argument>list</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>d</name> <init>= <expr><call><name>seat_next_deadline</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>deadline</name> <operator>&gt;</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>deadline</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>deadline</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;=</operator> <name>deadline</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>deadline</name> <operator>-</operator> <name>now</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>seat_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>seat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>wl_list_for_each</name><argument_list>(<argument>sd</argument>, <argument>list</argument>, <argument>node</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>seat_refresh</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
