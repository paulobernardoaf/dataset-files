<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\wayland\registry.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wayland-client.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"registry.h"</cpp:file></cpp:include>

<struct_decl>struct <name>vlc_wl_interface</name>;</struct_decl>

<struct>struct <name>vlc_wl_global</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type><name>interface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_list</name></name></type> <name>node</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_wl_interface</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>wl_list</name></name></type> <name>globals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>interface</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_wl_global</name></name> <modifier>*</modifier></type><name>vlc_wl_global_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type><name>vi</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_global</name></name> <modifier>*</modifier></type><name>vg</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>vg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>vg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>vg</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vg</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vg</name><operator>-&gt;</operator><name>interface</name></name> <operator>=</operator> <name>vi</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vi</name><operator>-&gt;</operator><name>globals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vg</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>vg</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_wl_global_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_wl_global</name></name> <modifier>*</modifier></type><name>vg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wl_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vg</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type><name>vlc_wl_interface_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type><name>vi</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>vi</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>vi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vi</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vi</name><operator>-&gt;</operator><name>globals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>vi</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_wl_interface_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type><name>vi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>wl_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vi</name><operator>-&gt;</operator><name>globals</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>vlc_wl_registry</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>interfaces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vwimatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type><name>iface</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>iface</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type>
<name>vlc_wl_interface_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pvi</name> <init>= <expr><call><name>tfind</name><argument_list>(<argument><expr><name>interface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vr</name><operator>-&gt;</operator><name>interfaces</name></name></expr></argument>, <argument><expr><name>vwimatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>pvi</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>pvi</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_wl_global</name></name> <modifier>*</modifier></type>
<name>vlc_wl_global_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type><name>vi</name> <init>= <expr><call><name>vlc_wl_interface_find</name><argument_list>(<argument><expr><name>vr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vi</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>wl_list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vi</name><operator>-&gt;</operator><name>globals</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>container_of</name><argument_list>(<argument><expr><name><name>vi</name><operator>-&gt;</operator><name>globals</name><operator>.</operator><name>next</name></name></expr></argument>, <argument><expr>struct <name>vlc_wl_global</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint_fast32_t</name></type> <name>vlc_wl_interface_get_version</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_wl_global</name></name> <modifier>*</modifier></type><name>vg</name> <init>= <expr><call><name>vlc_wl_global_find</name><argument_list>(<argument><expr><name>vr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>vg</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>vg</name><operator>-&gt;</operator><name>version</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>wl_proxy</name></name> <modifier>*</modifier></type><name>vlc_wl_interface_bind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interface</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wl_interface</name></name> <modifier>*</modifier></type><name>wi</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_wl_global</name></name> <modifier>*</modifier></type><name>vg</name> <init>= <expr><call><name>vlc_wl_global_find</name><argument_list>(<argument><expr><name>vr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>vers</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>version</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vers</name> <operator>&gt;</operator> <name><name>vg</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>version</name> <operator>=</operator> <name>vers</name> <operator>=</operator> <name><name>vg</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>wl_registry_bind</name><argument_list>(<argument><expr><name><name>vr</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>, <argument><expr><name><name>vg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>wi</name></expr></argument>, <argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vwicmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type><name>ia</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type><name>ib</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ia</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name><name>ib</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vwncmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_wl_global</name></name> <modifier>*</modifier></type><name>ga</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_wl_global</name></name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ga</name><operator>-&gt;</operator><name>name</name></name> <operator>&lt;</operator> <name><name>gb</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>ga</name><operator>-&gt;</operator><name>name</name></name> <operator>&gt;</operator> <name><name>gb</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>registry_global_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>vers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vr</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_interface</name></name> <modifier>*</modifier></type><name>vi</name> <init>= <expr><call><name>vlc_wl_interface_create</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pvi</name> <init>= <expr><call><name>tsearch</name><argument_list>(<argument><expr><name>vi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vr</name><operator>-&gt;</operator><name>interfaces</name></name></expr></argument>, <argument><expr><name>vwicmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pvi</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_wl_interface_destroy</name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pvi</name> <operator>!=</operator> <name>vi</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_wl_interface_destroy</name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vi</name> <operator>=</operator> <operator>*</operator><name>pvi</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_global</name></name> <modifier>*</modifier></type><name>vg</name> <init>= <expr><call><name>vlc_wl_global_add</name><argument_list>(<argument><expr><name>vi</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>vg</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pvg</name> <init>= <expr><call><name>tsearch</name><argument_list>(<argument><expr><name>vg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vr</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>vwncmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pvg</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call> 
<operator>||</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>pvg</name> <operator>!=</operator> <name>vg</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_wl_global_remove</name><argument_list>(<argument><expr><name>vg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>registry</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>registry_global_remove_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vr</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_global</name></name></type> <name>key</name> <init>= <expr><block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pvg</name> <init>= <expr><call><name>tfind</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vr</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>vwncmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>pvg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_global</name></name> <modifier>*</modifier></type><name>vg</name> <init>= <expr><operator>*</operator><name>pvg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tdelete</name><argument_list>(<argument><expr><name>vg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vr</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>vwncmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_wl_global_remove</name><argument_list>(<argument><expr><name>vg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>registry</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_registry_listener</name></name></type> <name>registry_cbs</name> <init>=
<expr><block>{
<expr><name>registry_global_cb</name></expr>,
<expr><name>registry_global_remove_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vlc_wl_registry_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wl_display</name></name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_event_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>vr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>vr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_display</name></name> <modifier>*</modifier></type><name>wrapper</name> <init>= <expr><call><name>wl_proxy_create_wrapper</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>wrapper</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wl_proxy_set_queue</name><argument_list>(<argument><expr><operator>(</operator>struct <name>wl_proxy</name> <operator>*</operator><operator>)</operator><name>wrapper</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vr</name><operator>-&gt;</operator><name>registry</name></name> <operator>=</operator> <call><name>wl_display_get_registry</name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_proxy_wrapper_destroy</name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>vr</name><operator>-&gt;</operator><name>registry</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vr</name><operator>-&gt;</operator><name>interfaces</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vr</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_registry_add_listener</name><argument_list>(<argument><expr><name><name>vr</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>registry_cbs</name></expr></argument>, <argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>wl_display_roundtrip_queue</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_wl_registry_destroy</name><argument_list>(<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>vr</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>vr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>name_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_wl_global_remove</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interface_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_wl_interface_destroy</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_wl_registry_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wl_registry_destroy</name><argument_list>(<argument><expr><name><name>vr</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdestroy</name><argument_list>(<argument><expr><name><name>vr</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>name_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdestroy</name><argument_list>(<argument><expr><name><name>vr</name><operator>-&gt;</operator><name>interfaces</name></name></expr></argument>, <argument><expr><name>interface_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>wl_compositor</name></name> <modifier>*</modifier></type><name>vlc_wl_compositor_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>wl_compositor</name> <operator>*</operator><operator>)</operator><call><name>vlc_wl_interface_bind</name><argument_list>(<argument><expr><name>vr</name></expr></argument>, <argument><expr><literal type="string">"wl_compositor"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wl_compositor_interface</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>wl_shm</name></name> <modifier>*</modifier></type><name>vlc_wl_shm_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_wl_registry</name></name> <modifier>*</modifier></type><name>vr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>wl_shm</name> <operator>*</operator><operator>)</operator><call><name>vlc_wl_interface_bind</name><argument_list>(<argument><expr><name>vr</name></expr></argument>, <argument><expr><literal type="string">"wl_shm"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wl_shm_interface</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
