<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\wayland\xdg-shell.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wayland-client.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wayland-cursor.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdg-shell-client-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdg-decoration-client-protocol.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_wm_base</name></cpp:macro> <cpp:value>wl_shell</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_wm_base_add_listener</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_wm_base_destroy</name></cpp:macro> <cpp:value>wl_shell_destroy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_wm_base_get_xdg_surface</name></cpp:macro> <cpp:value>wl_shell_get_shell_surface</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_wm_base_pong</name></cpp:macro> <cpp:value>wl_shell_pong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_surface</name></cpp:macro> <cpp:value>wl_shell_surface</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_surface_listener</name></cpp:macro> <cpp:value>wl_shell_surface_listener</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_surface_add_listener</name></cpp:macro> <cpp:value>wl_shell_surface_add_listener</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_surface_destroy</name></cpp:macro> <cpp:value>wl_shell_surface_destroy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_surface_get_toplevel</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_surface_set_window_geometry</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_toplevel</name></cpp:macro> <cpp:value>wl_shell_surface</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_toplevel_add_listener</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_toplevel_destroy</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_toplevel_set_title</name></cpp:macro> <cpp:value>wl_shell_surface_set_title</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_toplevel_set_app_id</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_toplevel_set_fullscreen</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wl_shell_surface_set_fullscreen(s, 1, 0, o)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_toplevel_unset_fullscreen</name></cpp:macro> <cpp:value>wl_shell_surface_set_toplevel</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"output.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_compositor</name></name> <modifier>*</modifier></type><name>compositor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_shm</name></name> <modifier>*</modifier></type><name>shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xdg_wm_base</name></name> <modifier>*</modifier></type><name>wm_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xdg_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xdg_toplevel</name></name> <modifier>*</modifier></type><name>toplevel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>zxdg_decoration_manager_v1</name></name> <modifier>*</modifier></type><name>deco_manager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>zxdg_toplevel_decoration_v1</name></name> <modifier>*</modifier></type><name>deco</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>default_output</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>height</name></decl>;</decl_stmt>
}</block> <decl><name>set</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>height</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fullscreen</name></decl>;</decl_stmt>
}</block> <decl><name>latch</name></decl>;</struct>
<decl_stmt><decl><type><name>bool</name></type> <name>configured</name></decl>;</decl_stmt>
}</block> <decl><name>wm</name></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>output_list</name></name> <modifier>*</modifier></type><name>outputs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_list</name></name></type> <name>seats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor_theme</name></name> <modifier>*</modifier></type><name>cursor_theme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor</name></name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>cursor_surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
}</block></struct></type> <name>vout_window_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_wl_display_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_display</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wl_display_cancel_read</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_display</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>wl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_push</name><argument_list>(<argument><expr><name>cleanup_wl_display_read</name></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>wl_display_get_fd</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>wl_display_prepare_read</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_display_dispatch_pending</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>wl_display_flush</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>seat_next_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>seats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>poll</name><argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>seat_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>seats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wl_display_read_events</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_display_dispatch_pending</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReportSize</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name> <init>= <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>width</name></name></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>width</name></name></expr> </then><else>: <expr><name><name>sys</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>height</name></name></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>height</name></name></expr> </then><else>: <expr><name><name>sys</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_window_ReportSize</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdg_surface_set_window_geometry</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Resize</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>xdg_toplevel_set_min_size</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdg_toplevel_set_max_size</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdg_toplevel_set_min_size</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReportSize</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_display_flush</name><argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>wl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UnsetFullscreen</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xdg_toplevel_unset_fullscreen</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_display_flush</name><argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>wl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetFullscreen</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_output</name></name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>name</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>idstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>name</name> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>wl_registry_bind</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wl_output_interface</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>default_output</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>wl_registry_bind</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>default_output</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wl_output_interface</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xdg_toplevel_set_fullscreen</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_output_destroy</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wl_display_flush</name><argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>wl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SetDecoration</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>decorated</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint_fast32_t</name></type> <name>deco_mode</name> <init>= <expr><ternary><condition><expr><name>decorated</name></expr>
?</condition><then> <expr><name>ZXDG_TOPLEVEL_DECORATION_V1_MODE_SERVER_SIDE</name></expr>
</then><else>: <expr><name>ZXDG_TOPLEVEL_DECORATION_V1_MODE_CLIENT_SIDE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>deco</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zxdg_toplevel_decoration_v1_set_mode</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>deco</name></name></expr></argument>, <argument><expr><name>deco_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><name>deco_mode</name> <operator>!=</operator> <name>ZXDG_TOPLEVEL_DECORATION_V1_MODE_CLIENT_SIDE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"server-side decoration not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Enable</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_window_cfg_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_display</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>wl</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>is_fullscreen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_fullscreen</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_unset_fullscreen</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDecoration</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>is_decorated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>is_decorated</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vout_window_SetSize</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>wl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_display_flush</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>configured</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_display_dispatch</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vout_window_operations</name></name></type> <name>ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>enable</name> <operator>=</operator> <name>Enable</name></expr>,
<expr><operator>.</operator><name>resize</name> <operator>=</operator> <name>Resize</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>Close</name></expr>,
<expr><operator>.</operator><name>unset_fullscreen</name> <operator>=</operator> <name>UnsetFullscreen</name></expr>,
<expr><operator>.</operator><name>set_fullscreen</name> <operator>=</operator> <name>SetFullscreen</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xdg_toplevel_configure_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>xdg_toplevel</name></name> <modifier>*</modifier></type><name>toplevel</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_array</name></name> <modifier>*</modifier></type><name>states</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"new configuration: %"</literal><name>PRId32</name><literal type="string">"x%"</literal><name>PRId32</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>latch</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>latch</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>latch</name><operator>.</operator><name>fullscreen</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<macro><name>wl_array_for_each</name><argument_list>(<argument>state</argument>, <argument>states</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">" - state 0x%04"</literal><name>PRIX32</name></expr></argument>, <argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>XDG_TOPLEVEL_STATE_FULLSCREEN</name></expr>:</case>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>latch</name><operator>.</operator><name>fullscreen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>toplevel</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdg_toplevel_close_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xdg_toplevel</name></name> <modifier>*</modifier></type><name>toplevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_window_ReportClose</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>toplevel</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>xdg_toplevel_listener</name></name></type> <name>xdg_toplevel_cbs</name> <init>=
<expr><block>{
<expr><name>xdg_toplevel_configure_cb</name></expr>,
<expr><name>xdg_toplevel_close_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdg_surface_configure_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xdg_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>latch</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>latch</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReportSize</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>latch</name><operator>.</operator><name>fullscreen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_window_ReportFullscreen</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vout_window_ReportWindowed</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>xdg_surface_ack_configure</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>configured</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>xdg_surface_listener</name></name></type> <name>xdg_surface_cbs</name> <init>=
<expr><block>{
<expr><name>xdg_surface_configure_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdg_wm_base_ping_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>xdg_wm_base</name></name> <modifier>*</modifier></type><name>wm_base</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdg_wm_base_pong</name><argument_list>(<argument><expr><name>wm_base</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>xdg_wm_base_listener</name></name></type> <name>xdg_wm_base_cbs</name> <init>=
<expr><block>{
<expr><name>xdg_wm_base_ping_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdg_toplevel_decoration_configure_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>zxdg_toplevel_decoration_v1</name></name> <modifier>*</modifier></type><name>deco</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"new decoration mode: %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>deco</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>zxdg_toplevel_decoration_v1_listener</name></name></type>
<name>xdg_toplevel_decoration_cbs</name> <init>=
<expr><block>{
<expr><name>xdg_toplevel_decoration_configure_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>wl_shell_surface_configure_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_shell_surface</name></name> <modifier>*</modifier></type><name>toplevel</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>edges</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"new configuration: %"</literal><name>PRId32</name><literal type="string">"x%"</literal><name>PRId32</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_window_ReportSize</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>toplevel</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>edges</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wl_shell_surface_ping_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_shell_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_shell_surface_pong</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wl_shell_surface_popup_done_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_shell_surface</name></name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>surface</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_shell_surface_listener</name></name></type> <name>wl_shell_surface_cbs</name> <init>=
<expr><block>{
<expr><name>wl_shell_surface_ping_cb</name></expr>,
<expr><name>wl_shell_surface_configure_cb</name></expr>,
<expr><name>wl_shell_surface_popup_done_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdg_surface_cbs</name></cpp:macro> <cpp:value>wl_shell_surface_cbs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_wl_compositor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>vers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>compositor</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>compositor</name></name> <operator>=</operator> <call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wl_compositor_interface</name></expr></argument>, <argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_wl_output</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>vers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>output_create</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_wl_seat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>vers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>seat_create</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>vers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>seats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_wl_shell</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>vers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name> <operator>=</operator> <call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wl_shell_interface</name></expr></argument>,
<argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_wl_shm</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>vers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>shm</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>shm</name></name> <operator>=</operator> <call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wl_shm_interface</name></expr></argument>, <argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_xdg_wm_base</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>vers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name> <operator>=</operator> <call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xdg_wm_base_interface</name></expr></argument>,
<argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_xdg_decoration_manager</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>vers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>deco_manager</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>deco_manager</name></name> <operator>=</operator> <call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>zxdg_decoration_manager_v1_interface</name></expr></argument>, <argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>registry_handler</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>global</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_version</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>registry_handler</name></name></type> <name><name>global_handlers</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"wl_compositor"</literal></expr>, <expr><name>register_wl_compositor</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wl_output"</literal></expr>, <expr><name>register_wl_output</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"wl_seat"</literal></expr>, <expr><name>register_wl_seat</name></expr>, <macro><name>UINT32_C</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"wl_shell"</literal></expr>, <expr><name>register_wl_shell</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"wl_shm"</literal></expr>, <expr><name>register_wl_shm</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"xdg_wm_base"</literal></expr>, <expr><name>register_xdg_wm_base</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"zxdg_decoration_manager_v1"</literal></expr>, <expr><name>register_xdg_decoration_manager</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rghcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>registry_handler</name></name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>iface</name></expr></argument>, <argument><expr><name><name>handler</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>registry_global_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>vers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>registry_handler</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"global %3"</literal><name>PRIu32</name><literal type="string">": %s version %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>iface</name></expr></argument>, <argument><expr><name>global_handlers</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>global_handlers</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rghcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>vers</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>max_version</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>vers</name></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>max_version</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>global</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>registry_global_remove_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"global remove %3"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>seat_destroy_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>seats</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>output_destroy_by_name</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>registry</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_registry_listener</name></name></type> <name>registry_cbs</name> <init>=
<expr><block>{
<expr><name>registry_global_cb</name></expr>,
<expr><name>registry_global_remove_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>window_get_cursor</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>hsx</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>hsy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>image_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>wl_cursor_image</name></name> <modifier>*</modifier></type><name>img</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>images</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>surface</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_surface</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>surface</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wl_surface_attach</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><call><name>wl_cursor_image_get_buffer</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_damage</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_commit</name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>hsx</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>hotspot_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hsy</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>hotspot_y</name></name></expr>;</expr_stmt>
<return>return <expr><name>surface</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>compositor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>shm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_theme</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>deco_manager</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>deco</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>default_output</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"wl-output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>latch</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>latch</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>latch</name><operator>.</operator><name>fullscreen</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm</name><operator>.</operator><name>configured</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>outputs</name></name> <operator>=</operator> <call><name>output_list_create</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>seats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_theme</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>wl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dpy_name</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"wl-display"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_display</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>wl_display_connect</name><argument_list>(<argument><expr><name>dpy_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dpy_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>output_list_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>registry</name></name> <operator>=</operator> <call><name>wl_display_get_registry</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>registry</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wl_registry_add_listener</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>registry_cbs</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_display_roundtrip</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>compositor</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>wl_surface</name></name> <modifier>*</modifier></type><name>surface</name> <init>= <expr><call><name>wl_compositor_create_surface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>compositor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>surface</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xdg_wm_base_add_listener</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xdg_wm_base_cbs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>xdg_surface</name></name> <modifier>*</modifier></type><name>xdg_surface</name> <init>=
<expr><call><name>xdg_wm_base_get_xdg_surface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>xdg_surface</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <name>xdg_surface</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdg_surface_add_listener</name><argument_list>(<argument><expr><name>xdg_surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xdg_surface_cbs</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>xdg_toplevel</name></name> <modifier>*</modifier></type><name>toplevel</name> <init>= <expr><call><name>xdg_surface_get_toplevel</name><argument_list>(<argument><expr><name>xdg_surface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>toplevel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name> <operator>=</operator> <name>toplevel</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdg_toplevel_add_listener</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xdg_toplevel_cbs</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"video-title"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xdg_toplevel_set_title</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>title</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>title</name></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC media player"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>app_id</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"app-id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>app_id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xdg_toplevel_set_app_id</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>app_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>app_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>shm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_theme</name></name> <operator>=</operator> <call><name>wl_cursor_theme_load</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_theme</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <call><name>wl_cursor_theme_get_cursor</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_theme</name></name></expr></argument>,
<argument><expr><literal type="string">"left_ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_surface</name></name> <operator>=</operator> <call><name>wl_compositor_create_surface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>compositor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"failed to load cursor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>deco_manager</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>deco</name></name> <operator>=</operator> <call><name>zxdg_decoration_manager_v1_get_toplevel_decoration</name><argument_list>(
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>deco_manager</name></name></expr></argument>, <argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>deco</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zxdg_toplevel_decoration_v1_add_listener</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>deco</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>xdg_toplevel_decoration_cbs</name></expr></argument>,
<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>VOUT_WINDOW_TYPE_WAYLAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>wl</name></name> <operator>=</operator> <name>surface</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>wl</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Thread</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>seat_destroy_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>seats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_list_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>deco</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zxdg_toplevel_decoration_v1_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>deco</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>deco_manager</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zxdg_decoration_manager_v1_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>deco_manager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_surface</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_surface_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_theme</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_cursor_theme_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_theme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_toplevel_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_surface_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xdg_wm_base_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>wl</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_surface_destroy</name><argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>wl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>shm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_shm_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>compositor</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_compositor_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>compositor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>registry</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_registry_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wl_display_disconnect</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>seat_destroy_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>seats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_list_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>deco</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zxdg_toplevel_decoration_v1_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>deco</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>deco_manager</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>zxdg_decoration_manager_v1_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>deco_manager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_surface</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_surface_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_theme</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_cursor_theme_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_theme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xdg_toplevel_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>toplevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdg_surface_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdg_wm_base_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_surface_destroy</name><argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>wl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>shm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_shm_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wl_compositor_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>compositor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_registry_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_display_disconnect</name><argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>wl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPLAY_TEXT</name></cpp:macro> <cpp:value>N_("Wayland display")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPLAY_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Video will be rendered with this Wayland display. " "If empty, the default display will be used.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_TEXT</name></cpp:macro> <cpp:value>N_("Fullscreen output")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Fullscreen mode with use the output with this name by default.")</cpp:value></cpp:define>


<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"XDG shell"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"XDG shell surface"</literal>)</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"WL shell"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Wayland shell surface"</literal>)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XDG_SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"vout window"</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"vout window"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"wl-display"</literal></argument>, <argument>NULL</argument>, <argument>DISPLAY_TEXT</argument>, <argument>DISPLAY_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"wl-output"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>OUTPUT_TEXT</argument>, <argument>OUTPUT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>UINT32_MAX</argument>)</argument_list></macro>
<macro><name>change_volatile</name><argument_list>()</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
