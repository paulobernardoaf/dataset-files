<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\wayland\output.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wayland-client.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"output.h"</cpp:file></cpp:include>



<struct>struct <name>output_list</name>
<block>{
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_list</name></name></type> <name>outputs</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>output_data</name>
<block>{
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_output</name></name> <modifier>*</modifier></type><name>wl_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wl_list</name></name></type> <name>node</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_geometry_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>make</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>model</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>transform</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>output_data</name></name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name><name>od</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>idstr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"output %"</literal><name>PRIu32</name><literal type="string">" geometry: %"</literal><name>PRId32</name><literal type="string">"x%"</literal><name>PRId32</name><literal type="string">"mm"</literal>
<literal type="string">"+%"</literal><name>PRId32</name><literal type="string">"+%"</literal><name>PRId32</name><literal type="string">", subpixel %"</literal><name>PRId32</name><literal type="string">", transform %"</literal><name>PRId32</name></expr></argument>,
<argument><expr><name><name>od</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>idstr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"%s - %s"</literal></expr></argument>, <argument><expr><name>make</name></expr></argument>, <argument><expr><name>model</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_window_ReportOutputDevice</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>idstr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>output</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_mode_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>output_data</name></name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name><name>od</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>div_t</name></type> <name>d</name> <init>= <expr><call><name>div</name><argument_list>(<argument><expr><name>vr</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"output %"</literal><name>PRIu32</name><literal type="string">" mode: 0x%"</literal><name>PRIx32</name><literal type="string">" %"</literal><name>PRId32</name><literal type="string">"x%"</literal><name>PRId32</name>
<literal type="string">", %d.%03d Hz"</literal></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>rem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>output</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_done_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>output</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_scale_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_output</name></name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>output_data</name></name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name><name>od</name><operator>-&gt;</operator><name>owner</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"output %"</literal><name>PRIu32</name><literal type="string">" scale: %"</literal><name>PRId32</name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>output</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>wl_output_listener</name></name></type> <name>wl_output_cbs</name> <init>=
<expr><block>{
<expr><name>output_geometry_cb</name></expr>,
<expr><name>output_mode_cb</name></expr>,
<expr><name>output_done_cb</name></expr>,
<expr><name>output_scale_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>output_list</name></name> <modifier>*</modifier></type><name>output_list_create</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>output_list</name></name> <modifier>*</modifier></type><name>ol</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ol</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ol</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>wnd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ol</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ol</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>output_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>output_list</name></name> <modifier>*</modifier></type><name>ol</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wl_registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ol</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>output_data</name></name> <modifier>*</modifier></type><name>od</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>od</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>od</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>wl_output</name></name> <operator>=</operator> <call><name>wl_registry_bind</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wl_output_interface</name></expr></argument>,
<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>wl_output</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>od</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name><name>ol</name><operator>-&gt;</operator><name>owner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_output_add_listener</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>wl_output</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wl_output_cbs</name></expr></argument>, <argument><expr><name>od</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wl_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ol</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>output_list</name></name> <modifier>*</modifier></type><name>ol</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>output_data</name></name> <modifier>*</modifier></type><name>od</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>idstr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>idstr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_window_ReportOutputDevice</name><argument_list>(<argument><expr><name><name>ol</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>idstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wl_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>od</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name>WL_OUTPUT_RELEASE_SINCE_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_output_release</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>wl_output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wl_output_destroy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>wl_output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>od</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>output_destroy_by_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>output_list</name></name> <modifier>*</modifier></type><name>ol</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ol</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>&amp;</operator><name><name>ol</name><operator>-&gt;</operator><name>outputs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>output_data</name></name> <modifier>*</modifier></type><name>od</name></decl>;</decl_stmt>

<macro><name>wl_list_for_each</name><argument_list>(<argument>od</argument>, <argument>list</argument>, <argument>node</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>od</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>name</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>output_destroy</name><argument_list>(<argument><expr><name>ol</name></expr></argument>, <argument><expr><name>od</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>output_list_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>output_list</name></name> <modifier>*</modifier></type><name>ol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ol</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>&amp;</operator><name><name>ol</name><operator>-&gt;</operator><name>outputs</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>wl_list_empty</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>output_destroy</name><argument_list>(<argument><expr><name>ol</name></expr></argument>, <argument><expr><call><name>container_of</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr>struct <name>output_data</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
