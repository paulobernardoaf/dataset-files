<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\vmem.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_WIDTH</name></cpp:macro> <cpp:value>N_("Width")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_WIDTH</name></cpp:macro> <cpp:value>N_("Video memory buffer width.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_HEIGHT</name></cpp:macro> <cpp:value>N_("Height")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_HEIGHT</name></cpp:macro> <cpp:value>N_("Video memory buffer height.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_PITCH</name></cpp:macro> <cpp:value>N_("Pitch")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_PITCH</name></cpp:macro> <cpp:value>N_("Video memory buffer pitch in bytes.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_CHROMA</name></cpp:macro> <cpp:value>N_("Chroma")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_CHROMA</name></cpp:macro> <cpp:value>N_("Output chroma for the memory image as a 4-character " "string, eg. \"RV32\".")</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Video memory output"</literal>)</argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Video memory"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"vmem-width"</literal></argument>, <argument><literal type="number">320</literal></argument>, <argument>T_WIDTH</argument>, <argument>LT_WIDTH</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_private</name><argument_list>()</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"vmem-height"</literal></argument>, <argument><literal type="number">200</literal></argument>, <argument>T_HEIGHT</argument>, <argument>LT_HEIGHT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_private</name><argument_list>()</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"vmem-pitch"</literal></argument>, <argument><literal type="number">640</literal></argument>, <argument>T_PITCH</argument>, <argument>LT_PITCH</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_private</name><argument_list>()</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"vmem-chroma"</literal></argument>, <argument><literal type="string">"RV16"</literal></argument>, <argument>T_CHROMA</argument>, <argument>LT_CHROMA</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_private</name><argument_list>()</argument_list></macro>
<macro><name>add_obsolete_string</name><argument_list>(<argument><literal type="string">"vmem-lock"</literal></argument>)</argument_list></macro> 
<macro><name>add_obsolete_string</name><argument_list>(<argument><literal type="string">"vmem-unlock"</literal></argument>)</argument_list></macro> 
<macro><name>add_obsolete_string</name><argument_list>(<argument><literal type="string">"vmem-data"</literal></argument>)</argument_list></macro> 

<macro><name>set_callback_display</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
}</block></struct></type> <name>picture_sys_t</name>;</typedef>


<struct>struct <name>vout_display_sys_t</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pic_opaque</name></decl>;</decl_stmt>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>lock</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>plane</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>unlock</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>plane</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>display</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cleanup</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pitches</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>lines</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <function_decl><type><name>unsigned</name></type> (<modifier>*</modifier><name>vlc_format_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>sys</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>vlc_format_cb</name></type> <name>setup</name> <init>= <expr><call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-setup"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"missing lock callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>unlock</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-unlock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-cleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>video_format_ApplyRotation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>fmtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>setup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>chroma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chroma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pitches</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pitches</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>widths</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>heights</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>widths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>widths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heights</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>widths</name></expr></argument>, <argument><expr><name>heights</name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pitches</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"video format setup failure (no pictures)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodecFromString</name><argument_list>(<argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>widths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>heights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chroma</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-chroma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodecFromString</name><argument_list>(<argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pitches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-pitch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PICTURE_PLANE_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pitches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pitches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vmem-chroma should be 4 characters long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x001f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x03e0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x7c00</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x001f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x07e0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0xf800</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0xff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x00ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x0000ff</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><operator>*</operator><name>fmtp</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>Prepare</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>Display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cfg</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cleanup</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>cleanup</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>rsc</name> <init>= <expr><block>{ <expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>planes</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pic_opaque</name></name> <operator>=</operator> <call><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>planes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PICTURE_PLANE_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator> <name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pitches</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>locked</name> <init>= <expr><call><name>picture_NewFromResource</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>locked</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>(<argument><expr><name>locked</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>locked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>unlock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pic_opaque</name></name></expr></argument>, <argument><expr><name>planes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>subpic</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>display</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pic_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>vd</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>args</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_SIZE</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_FILLED</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_ZOOM</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_ASPECT</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_CROP</name></expr>:</case>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>
</unit>
