<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\yuv.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV_FILE_TEXT</name></cpp:macro> <cpp:value>N_("device, fifo or filename")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV_FILE_LONGTEXT</name></cpp:macro> <cpp:value>N_("device, fifo or filename to write yuv frames too.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_TEXT</name></cpp:macro> <cpp:value>N_("Chroma used")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_LONGTEXT</name></cpp:macro> <cpp:value>N_("Force use of a specific chroma for output.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV4MPEG2_TEXT</name></cpp:macro> <cpp:value>N_("Add a YUV4MPEG2 header")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV4MPEG2_LONGTEXT</name></cpp:macro> <cpp:value>N_("The YUV4MPEG2 header is compatible " "with mplayer yuv video output and requires YV12/I420 fourcc.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"yuv-"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"YUV output"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"YUV video output"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"file"</literal></argument>, <argument><literal type="string">"stream.yuv"</literal></argument>,
<argument>YUV_FILE_TEXT</argument>, <argument>YUV_FILE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"chroma"</literal></argument>, <argument>NULL</argument>,
<argument>CHROMA_TEXT</argument>, <argument>CHROMA_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_bool</name> <argument_list>(<argument>CFG_PREFIX <literal type="string">"yuv4mpeg2"</literal></argument>, <argument>false</argument>,
<argument>YUV4MPEG2_TEXT</argument>, <argument>YUV4MPEG2_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>set_callback_display</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>






<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>




<struct>struct <name>vout_display_sys_t</name> <block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_yuv4mpeg2</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_yuv4mpeg2</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"yuv4mpeg2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fcc</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"chroma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>requested_chroma</name> <init>= <expr><call><name>vlc_fourcc_GetCodecFromString</name><argument_list>(<argument><expr><name>VIDEO_ES</name></expr></argument>,
<argument><expr><name>psz_fcc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_fcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>chroma</name> <init>= <expr><ternary><condition><expr><name>requested_chroma</name></expr> ?</condition><then> <expr><name>requested_chroma</name></expr> </then><else>:
<expr><name>VLC_CODEC_I420</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>is_yuv4mpeg2</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_J420</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"YUV4MPEG2 mode needs chroma YV12 not %4.4s as requested"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Using chroma %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Empty file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Writing data to %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>video_format_ApplyRotation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>fmtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>chroma</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>fmtp</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>Display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cfg</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ORIENT_IS_SWAP</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>orientation</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>picture</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>picture</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Received a non progressive frame, "</literal>
<literal type="string">"it will be written as progressive."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>is_first</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>is_yuv4mpeg2</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>header</name> <operator>=</operator> <literal type="string">"YUV4MPEG2"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%4.4s"</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>header</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="string">"%s W%d H%d F%d:%d I%c A%d:%d\n"</literal></expr></argument>,
<argument><expr><name>header</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="string">"FRAME\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>plane</name> <init>= <expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><name><name>plane</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <operator>(</operator><name><name>vd</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>*</operator> <name><name>plane</name><operator>-&gt;</operator><name>i_visible_pitch</name></name><operator>)</operator>
<operator>/</operator> <name><name>vd</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>plane</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>written</name> <init>= <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>plane</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>plane</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"only %zd of %d bytes written"</literal></expr></argument>,
<argument><expr><name>written</name></expr></argument>, <argument><expr><name><name>plane</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name><name>plane</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>vd</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>args</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_SIZE</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_FILLED</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_ZOOM</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_ASPECT</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_CROP</name></expr>:</case>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>
</unit>
