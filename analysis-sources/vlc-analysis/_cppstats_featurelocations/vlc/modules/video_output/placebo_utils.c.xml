<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\placebo_utils.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"placebo_utils.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Log</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>pl_log_level</name></name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PL_LOG_FATAL</name></expr>:</case> 
<case>case <expr><name>PL_LOG_ERR</name></expr>:</case> <expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>PL_LOG_WARN</name></expr>:</case> <expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>PL_LOG_INFO</name></expr>:</case> <expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>PL_LOG_DEBUG</name></expr>:</case> <expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>pl_context</name></name> <modifier>*</modifier></type><name>vlc_placebo_Create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>pl_context_create</name><argument_list>(<argument>PL_API_VER</argument>, <argument>&amp;(struct pl_context_params) {
.log_level = PL_LOG_DEBUG</argument>,
<argument>.log_cb = Log</argument>,
<argument>.log_priv = obj</argument>,
<argument>}</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<struct>struct <name>plane_desc</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>components</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pixel_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>comp_bits</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>comp_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w_denom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_denom</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fmt_desc</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>pl_fmt_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>plane_desc</name></name></type> <name><name>planes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color_bits</name></decl>;</decl_stmt> 
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>pad</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((n) * (bits) + (pad) + 7) / 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPS</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{__VA_ARGS__}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>map</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>hd</name></type></parameter>, <parameter><type><name>pad</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .components = n, .pixel_size = SIZE(n, bits, pad), .comp_bits = {bits, bits, bits, bits}, .comp_map = map, .w_denom = wd, .h_denom = hd, }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PLANAR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>hd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.type = PL_FMT_UNORM, .num_planes = n, .planes = { PLANE(1, bits, {0}, 1, 1, 0), PLANE(1, bits, {1}, wd, hd, 0), PLANE(1, bits, {2}, wd, hd, 0), PLANE(1, bits, {3}, 1, 1, 0), }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SEMIPLANAR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>hd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.type = PL_FMT_UNORM, .num_planes = n, .planes = { PLANE(1, bits, {0}, 1, 1, 0), PLANE(2, bits, COMPS(1, 2), wd, hd, 0), PLANE(1, bits, {3}, 1, 1, 0), }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKED</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>pad</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.type = PL_FMT_UNORM, .num_planes = 1, .planes = { PLANE(n, bits, COMPS(0, 1, 2, 3), 1, 1, pad), }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SINGLE</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>.type = PL_FMT_##t, .num_planes = 1, .planes = { PLANE(1, bits, {0}, 1, 1, 0), }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_PLANAR(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEMIPLANAR</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_SEMIPLANAR(__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_410</name></cpp:macro> <cpp:value>4, 2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_411</name></cpp:macro> <cpp:value>4, 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_420</name></cpp:macro> <cpp:value>2, 2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_422</name></cpp:macro> <cpp:value>2, 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_440</name></cpp:macro> <cpp:value>1, 2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_444</name></cpp:macro> <cpp:value>1, 1</cpp:value></cpp:define>




<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>struct</name> <name>fmt_desc</name></name></type> <name>desc</name></decl>;</decl_stmt> }</block> <decl><name><name>formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>VLC_CODEC_YV9</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_410</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I410</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_410</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I411</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_411</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I440</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_440</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_J440</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_440</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_GREY</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_444</argument>)</argument_list></macro>}</block></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I420</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_420</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_J420</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_420</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>VLC_CODEC_I420_9B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_420</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">9</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I420_10B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_420</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">10</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I420_12B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_420</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">12</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I420_16B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_420</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>}</block></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><name>VLC_CODEC_I420_9L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_420</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">9</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_420</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">10</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I420_12L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_420</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">12</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I420_16L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_420</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>}</block></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>VLC_CODEC_I422</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_422</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_J422</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_422</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>VLC_CODEC_I422_9B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_422</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">9</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I422_10B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_422</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">10</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I422_12B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_422</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">12</literal></expr>}</block></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><name>VLC_CODEC_I422_9L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_422</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">9</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I422_10L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_422</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">10</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I422_12L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_422</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">12</literal></expr>}</block></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>VLC_CODEC_I444</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_444</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_J444</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_444</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>VLC_CODEC_I444_9B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">9</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I444_10B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">10</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I444_12B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">12</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I444_16B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>}</block></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><name>VLC_CODEC_I444_9L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">9</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I444_10L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">10</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I444_12L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">12</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I444_16L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>}</block></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>VLC_CODEC_YUVA</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_444</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_YUV422A</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_422</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>VLC_CODEC_YUVA_444_10B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">10</literal></expr>}</block></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><name>VLC_CODEC_YUVA_444_10L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">10</literal></expr>}</block></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>VLC_CODEC_NV12</name></expr>, <expr><block>{<macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_420</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_NV21</name></expr>, <expr><block>{<macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_420</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_P010</name></expr>, <expr><block>{<macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>_420</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_P016</name></expr>, <expr><block>{<macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>_420</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_NV16</name></expr>, <expr><block>{<macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_422</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_NV61</name></expr>, <expr><block>{<macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_422</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_NV24</name></expr>, <expr><block>{<macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_444</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_NV42</name></expr>, <expr><block>{<macro><name>SEMIPLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_444</argument>)</argument_list></macro>}</block></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RGB8</name></expr>, <expr><block>{<macro><name>PACKED</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGB12</name></expr>, <expr><block>{<macro><name>PACKED</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGB15</name></expr>, <expr><block>{<macro><name>PACKED</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGB16</name></expr>, <expr><block>{<macro><name>PACKED</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGB24</name></expr>, <expr><block>{<macro><name>PACKED</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGB32</name></expr>, <expr><block>{<macro><name>PACKED</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGBA</name></expr>, <expr><block>{<macro><name>PACKED</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_BGRA</name></expr>, <expr><block>{<macro><name>PACKED</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR</name></expr>, <expr><block>{<macro><name>PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>_444</argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_9B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">9</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_10B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">10</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_16B</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>}</block></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_9L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">9</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_10L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">10</literal></expr>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_16L</name></expr>, <expr><block>{<expr><call><name>PLANAR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_444</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>color_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>}</block></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>VLC_CODEC_U8</name></expr>, <expr><block>{<macro><name>SINGLE</name><argument_list>(<argument>UNORM</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_S8</name></expr>, <expr><block>{<macro><name>SINGLE</name><argument_list>(<argument>SNORM</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_U16N</name></expr>, <expr><block>{<macro><name>SINGLE</name><argument_list>(<argument>UNORM</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_S16N</name></expr>, <expr><block>{<macro><name>SINGLE</name><argument_list>(<argument>SNORM</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_U24N</name></expr>, <expr><block>{<macro><name>SINGLE</name><argument_list>(<argument>UNORM</argument>, <argument><literal type="number">24</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_S24N</name></expr>, <expr><block>{<macro><name>SINGLE</name><argument_list>(<argument>SNORM</argument>, <argument><literal type="number">24</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_U32N</name></expr>, <expr><block>{<macro><name>SINGLE</name><argument_list>(<argument>UNORM</argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_S32N</name></expr>, <expr><block>{<macro><name>SINGLE</name><argument_list>(<argument>SNORM</argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_FL32</name></expr>, <expr><block>{<macro><name>SINGLE</name><argument_list>(<argument>FLOAT</argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_FL64</name></expr>, <expr><block>{<macro><name>SINGLE</name><argument_list>(<argument>FLOAT</argument>, <argument><literal type="number">64</literal></argument>)</argument_list></macro>}</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fmt_desc</name></name> <modifier>*</modifier></type><name>FindDesc</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fcc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fcc</name> <operator>==</operator> <name>fcc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>FillDesc</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fmt_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>pl_plane_data</name></name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane_desc</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>pl_plane_data</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>type</name></name></expr>,
<expr><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>height</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>pixel_stride</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>,
}</block></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>components</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>component_size</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>comp_bits</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>comp_map</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<switch>switch <condition>(<expr><name>fcc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VLC_CODEC_YV9</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_BGRA</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_GBR_PLANAR</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_GBR_PLANAR_9L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_GBR_PLANAR_10L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_GBR_PLANAR_16L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_GBR_PLANAR_9B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_GBR_PLANAR_10B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_GBR_PLANAR_16B</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>component_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>component_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB8</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>component_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>component_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_placebo_PlaneFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pl_plane_data</name></name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fmt_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>FindDesc</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FillDesc</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>plane_desc</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>w_denom</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>w_denom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>h_denom</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>h_denom</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_placebo_PlaneData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pl_plane_data</name></name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_buf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><call><name>vlc_placebo_PlaneFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>planes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>planes</name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>row_stride</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf_offset</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>-</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pixels</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>planes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_placebo_FormatSupported</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_gpu</name></name> <modifier>*</modifier></type><name>gpu</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fmt_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>FindDesc</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_plane_data</name></name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FillDesc</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pl_plane_find_fmt</name><argument_list>(<argument><expr><name>gpu</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>pl_color_space</name></name></type> <name>vlc_placebo_ColorSpace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>pl_color_primaries</name></name></type> <name><name>primaries</name><index>[<expr><name>COLOR_PRIMARIES_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>COLOR_PRIMARIES_UNDEF</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_PRIM_UNKNOWN</name></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_BT601_525</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_PRIM_BT_601_525</name></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_BT601_625</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_PRIM_BT_601_625</name></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_BT709</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_PRIM_BT_709</name></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_BT2020</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_PRIM_BT_2020</name></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_DCI_P3</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_PRIM_DCI_P3</name></expr>,
<expr><index>[<expr><name>COLOR_PRIMARIES_BT470_M</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_PRIM_BT_470M</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>pl_color_transfer</name></name></type> <name><name>transfers</name><index>[<expr><name>TRANSFER_FUNC_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>TRANSFER_FUNC_UNDEF</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_TRC_UNKNOWN</name></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_LINEAR</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_TRC_LINEAR</name></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_SRGB</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_TRC_SRGB</name></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_SMPTE_ST2084</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_TRC_PQ</name></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_HLG</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_TRC_HLG</name></expr>,


<expr><index>[<expr><name>TRANSFER_FUNC_BT470_BG</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_TRC_BT_1886</name></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_BT470_M</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_TRC_BT_1886</name></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_BT709</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_TRC_BT_1886</name></expr>,
<expr><index>[<expr><name>TRANSFER_FUNC_SMPTE_240</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_TRC_BT_1886</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>sig_peak</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name> <operator>/</operator> <name>PL_COLOR_REF_WHITE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sig_avg</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name> <operator>/</operator> <name>PL_COLOR_REF_WHITE</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sig_peak</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sig_peak</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name> <operator>/</operator> <operator>(</operator><literal type="number">10000.0</literal> <operator>*</operator> <name>PL_COLOR_REF_WHITE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>sig_peak</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sig_peak</name> <operator>&gt;</operator> <literal type="number">1.0</literal> <operator>&amp;&amp;</operator> <name>sig_peak</name> <operator>&lt;=</operator> <literal type="number">100.0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sig_peak</name></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>sig_avg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sig_avg</name> <operator>&gt;=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>sig_avg</name> <operator>&lt;=</operator> <literal type="number">1.0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sig_avg</name></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator>struct <name>pl_color_space</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>primaries</name> <operator>=</operator> <name><name>primaries</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>primaries</name></name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>transfer</name> <operator>=</operator> <name><name>transfers</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>light</name> <operator>=</operator> <name>PL_COLOR_LIGHT_UNKNOWN</name></expr>,
<expr><operator>.</operator><name>sig_peak</name> <operator>=</operator> <name>sig_peak</name></expr>,
<expr><operator>.</operator><name>sig_avg</name> <operator>=</operator> <name>sig_avg</name></expr>,
}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>pl_color_repr</name></name></type> <name>vlc_placebo_ColorRepr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>pl_color_system</name></name></type> <name><name>yuv_systems</name><index>[<expr><name>COLOR_SPACE_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>COLOR_SPACE_UNDEF</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_SYSTEM_BT_709</name></expr>, 
<expr><index>[<expr><name>COLOR_SPACE_BT601</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_SYSTEM_BT_601</name></expr>,
<expr><index>[<expr><name>COLOR_SPACE_BT709</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_SYSTEM_BT_709</name></expr>,
<expr><index>[<expr><name>COLOR_SPACE_BT2020</name></expr>]</index> <operator>=</operator> <name>PL_COLOR_SYSTEM_BT_2020_NC</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>enum</name> <name>pl_color_system</name></name></type> <name>sys</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sys</name> <operator>=</operator> <name><name>yuv_systems</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>space</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_XYZ12</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sys</name> <operator>=</operator> <name>PL_COLOR_SYSTEM_XYZ</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sys</name> <operator>=</operator> <name>PL_COLOR_SYSTEM_RGB</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fmt_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>FindDesc</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_depth</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>comp_bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<return>return <expr><operator>(</operator>struct <name>pl_color_repr</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>sys</name> <operator>=</operator> <name>sys</name></expr>,
<expr><operator>.</operator><name>alpha</name> <operator>=</operator> <name>PL_ALPHA_PREMULTIPLIED</name></expr>,
<expr><operator>.</operator><name>levels</name> <operator>=</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr></argument>)</argument_list></call>
<operator>?</operator> <name>PL_COLOR_LEVELS_PC</name>
<operator>:</operator> <name>PL_COLOR_LEVELS_TV</name></expr>,
<expr><operator>.</operator><name>bits</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>sample_depth</name> <operator>=</operator> <name>sample_depth</name></expr>,
<expr><operator>.</operator><name>color_depth</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>color_bits</name></name> <operator>?</operator> <name><name>desc</name><operator>-&gt;</operator><name>color_bits</name></name> <operator>:</operator> <name>sample_depth</name></expr>,
<expr><operator>.</operator><name>bit_shift</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr>,
}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>pl_chroma_location</name></name></type> <name>vlc_placebo_ChromaLoc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>pl_chroma_location</name></name></type> <name><name>locs</name><index>[<expr><name>CHROMA_LOCATION_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>CHROMA_LOCATION_UNDEF</name></expr>]</index> <operator>=</operator> <name>PL_CHROMA_UNKNOWN</name></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_LEFT</name></expr>]</index> <operator>=</operator> <name>PL_CHROMA_LEFT</name></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_CENTER</name></expr>]</index> <operator>=</operator> <name>PL_CHROMA_CENTER</name></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_TOP_LEFT</name></expr>]</index> <operator>=</operator> <name>PL_CHROMA_TOP_LEFT</name></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_TOP_CENTER</name></expr>]</index> <operator>=</operator> <name>PL_CHROMA_TOP_CENTER</name></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_BOTTOM_LEFT</name></expr>]</index> <operator>=</operator> <name>PL_CHROMA_BOTTOM_LEFT</name></expr>,
<expr><index>[<expr><name>CHROMA_LOCATION_BOTTOM_CENTER</name></expr>]</index> <operator>=</operator> <name>PL_CHROMA_BOTTOM_CENTER</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>locs</name><index>[<expr><name><name>fmt</name><operator>-&gt;</operator><name>chroma_location</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
