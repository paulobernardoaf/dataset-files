<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\xcb\window.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xkb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xkbcommon/xkbcommon-x11.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_xkb.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>xcb_atom_t</name></type> <name>Atom</name>;</typedef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name>wm_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name>wm_state_above</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name>wm_state_below</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name>wm_state_fullscreen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name>motif_wm_hints</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_keymap</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xkb_state</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>base</name></decl>;</decl_stmt>
}</block> <decl><name>xkb</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>vout_window_sys_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>InitKeyboard</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>core</name> <init>= <expr><call><name>xkb_x11_get_core_keyboard_device_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>map</name></name> <operator>=</operator> <call><name>xkb_x11_keymap_new_from_device</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>core</name></expr></argument>,
<argument><expr><name>XKB_KEYMAP_COMPILE_NO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>map</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>state</name></name> <operator>=</operator> <call><name>xkb_x11_state_new_from_device</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>map</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xkb_keymap_unref</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeinitKeyboard</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>map</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xkb_state_unref</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xkb_keymap_unref</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ProcessKeyboardEvent</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>xcb_generic_event_t</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>pad0</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>XCB_XKB_NEW_KEYBOARD_NOTIFY</name></expr>:</case>
<case>case <expr><name>XCB_XKB_MAP_NOTIFY</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"refreshing keyboard mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeinitKeyboard</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitKeyboard</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XCB_XKB_STATE_NOTIFY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>map</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_xkb_state_notify_event_t</name> <modifier>*</modifier></type><name>ne</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ev</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xkb_state_update_mask</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>ne</name><operator>-&gt;</operator><name>baseMods</name></name></expr></argument>,
<argument><expr><name><name>ne</name><operator>-&gt;</operator><name>latchedMods</name></name></expr></argument>, <argument><expr><name><name>ne</name><operator>-&gt;</operator><name>lockedMods</name></name></expr></argument>,
<argument><expr><name><name>ne</name><operator>-&gt;</operator><name>baseGroup</name></name></expr></argument>, <argument><expr><name><name>ne</name><operator>-&gt;</operator><name>latchedGroup</name></name></expr></argument>,
<argument><expr><name><name>ne</name><operator>-&gt;</operator><name>lockedGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitKeyboardExtension</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>maj</name></decl>, <decl><type ref="prev"/><name>min</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xkb_x11_setup_xkb_extension</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XKB_X11_MIN_MAJOR_XKB_VERSION</name></expr></argument>,
<argument><expr><name>XKB_X11_MIN_MINOR_XKB_VERSION</name></expr></argument>,
<argument><expr><name>XKB_X11_SETUP_XKB_EXTENSION_NO_FLAGS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>maj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"XKeyboard initialization error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"XKeyboard v%"</literal><name>PRIu16</name><literal type="string">".%"</literal><name>PRIu16</name><literal type="string">" initialized"</literal></expr></argument>, <argument><expr><name>maj</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <call><name>xkb_context_new</name><argument_list>(<argument><expr><name>XKB_CONTEXT_NO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>ctx</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>affect</name> <init>= <expr><name>XCB_XKB_EVENT_TYPE_NEW_KEYBOARD_NOTIFY</name>
<operator>|</operator> <name>XCB_XKB_EVENT_TYPE_MAP_NOTIFY</name>
<operator>|</operator> <name>XCB_XKB_EVENT_TYPE_STATE_NOTIFY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>map_parts</name> <init>= <expr><name>XCB_XKB_MAP_PART_KEY_TYPES</name>
<operator>|</operator> <name>XCB_XKB_MAP_PART_KEY_SYMS</name>
<operator>|</operator> <name>XCB_XKB_MAP_PART_MODIFIER_MAP</name>
<operator>|</operator> <name>XCB_XKB_MAP_PART_EXPLICIT_COMPONENTS</name>
<operator>|</operator> <name>XCB_XKB_MAP_PART_KEY_ACTIONS</name>
<operator>|</operator> <name>XCB_XKB_MAP_PART_VIRTUAL_MODS</name>
<operator>|</operator> <name>XCB_XKB_MAP_PART_VIRTUAL_MOD_MAP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>xcb_xkb_select_events_details_t</name></type> <name>details</name> <init>=
<expr><block>{

<expr><operator>.</operator><name>affectNewKeyboard</name> <operator>=</operator> <name>XCB_XKB_NKN_DETAIL_KEYCODES</name></expr>,
<expr><operator>.</operator><name>newKeyboardDetails</name> <operator>=</operator> <name>XCB_XKB_NKN_DETAIL_KEYCODES</name></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_PARTS</name></cpp:macro> <cpp:value>XCB_XKB_STATE_PART_MODIFIER_BASE | XCB_XKB_STATE_PART_MODIFIER_LATCH | XCB_XKB_STATE_PART_MODIFIER_LOCK | XCB_XKB_STATE_PART_GROUP_BASE | XCB_XKB_STATE_PART_GROUP_LATCH | XCB_XKB_STATE_PART_GROUP_LOCK</cpp:value></cpp:define>





<expr><operator>.</operator><name>affectState</name> <operator>=</operator> <name>STATE_PARTS</name></expr>,
<expr><operator>.</operator><name>stateDetails</name> <operator>=</operator> <name>STATE_PARTS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>core</name> <init>= <expr><call><name>xkb_x11_get_core_keyboard_device_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>core</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xkb_context_unref</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_xkb_select_events_aux</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>core</name></expr></argument>, <argument><expr><name>affect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>map_parts</name></expr></argument>, <argument><expr><name>map_parts</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitKeyboard</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeinitKeyboardExtension</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DeinitKeyboard</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xkb_context_unref</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DeinitKeyboardExtension</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(w))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>xcb_cursor_t</name></type> <name>CursorCreate</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>xcb_window_t</name></type> <name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_cursor_t</name></type> <name>cur</name> <init>= <expr><call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_pixmap_t</name></type> <name>pix</name> <init>= <expr><call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_create_pixmap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_create_cursor</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cur</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessEvent</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>xcb_generic_event_t</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>response_type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>XCB_KEY_PRESS</name></expr>:</case>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>xcb_key_press_event_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>xcb_key_press_event_t</name> <operator>*</operator><operator>)</operator><name>ev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>vk</name> <init>= <expr><call><name>vlc_xkb_get_one</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>detail</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"key: 0x%08"</literal><name>PRIxFAST32</name><literal type="string">" (X11: 0x%04"</literal><name>PRIx32</name><literal type="string">")"</literal></expr></argument>,
<argument><expr><name>vk</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>detail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vk</name> <operator>==</operator> <name>KEY_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_window_ReportKeyPress</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>vk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>XCB_KEY_RELEASE</name></expr>:</case>
<break>break;</break>


<case>case <expr><name>XCB_BUTTON_PRESS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_button_release_event_t</name> <modifier>*</modifier></type><name>bpe</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ev</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_window_ReportMousePressed</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name><name>bpe</name><operator>-&gt;</operator><name>detail</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>XCB_BUTTON_RELEASE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_button_release_event_t</name> <modifier>*</modifier></type><name>bre</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ev</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_window_ReportMouseReleased</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name><name>bre</name><operator>-&gt;</operator><name>detail</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>XCB_MOTION_NOTIFY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_motion_notify_event_t</name> <modifier>*</modifier></type><name>mne</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ev</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_window_ReportMouseMoved</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name><name>mne</name><operator>-&gt;</operator><name>event_x</name></name></expr></argument>, <argument><expr><name><name>mne</name><operator>-&gt;</operator><name>event_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>XCB_CONFIGURE_NOTIFY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_configure_notify_event_t</name> <modifier>*</modifier></type><name>cne</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vout_window_ReportSize</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name><name>cne</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cne</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>XCB_DESTROY_NOTIFY</name></expr>:</case>
<expr_stmt><expr><call><name>vout_window_ReportClose</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XCB_MAPPING_NOTIFY</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>ctx</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>response_type</name></name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>base</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ProcessKeyboardEvent</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"unhandled event %"</literal><name>PRIu8</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>response_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>ufd</name> <init>= <expr><block>{
<expr><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>xcb_get_file_descriptor</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_cursor_t</name></type> <name>cursor</name> <init>= <expr><call><name>CursorCreate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>lifetime</name> <init>= <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"mouse-hide-timeout"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>deadline</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ufd</name><operator>.</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>deadline</name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><name>deadline</name> <operator>-</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>delay</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ufd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>xcb_change_window_attributes</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>,
<argument><expr><name>XCB_CW_CURSOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>deadline</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_generic_event_t</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_cursor</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ev</name> <operator>=</operator> <call><name>xcb_poll_for_event</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>show_cursor</name> <operator>=</operator> <call><name>ProcessEvent</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>show_cursor</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>show_cursor</name></expr>)</condition>
<block>{<block_content>
<macro><name>xcb_change_window_attributes</name><argument_list>(<argument>conn</argument>, <argument>wnd-&gt;handle.xid</argument>,
<argument>XCB_CW_CURSOR</argument>,
<argument>&amp;(uint32_t){ XCB_CURSOR_NONE }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>deadline</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name>lifetime</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xcb_connection_has_error</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"X server failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_WM_STATE_REMOVE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_WM_STATE_ADD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_WM_STATE_TOGGLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>change_wm_state</name> <parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>xcb_atom_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_client_message_event_t</name></type> <name>ev</name> <init>= <expr><block>{
<expr><operator>.</operator><name>response_type</name> <operator>=</operator> <name>XCB_CLIENT_MESSAGE</name></expr>,
<expr><operator>.</operator><name>format</name> <operator>=</operator> <literal type="number">32</literal></expr>,
<expr><operator>.</operator><name>window</name> <operator>=</operator> <name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>wm_state</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>data32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>on</name></expr> ?</condition><then> <expr><name>NET_WM_STATE_ADD</name></expr> </then><else>: <expr><name>NET_WM_STATE_REMOVE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>data32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>data32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>data32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>xcb_send_event</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
<argument><expr><name>XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY</name> <operator>|</operator>
<name>XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Resize</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>values</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>width</name></expr>, <expr><name>height</name></expr>, }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_configure_window</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>,
<argument><expr><name>XCB_CONFIG_WINDOW_WIDTH</name> <operator>|</operator> <name>XCB_CONFIG_WINDOW_HEIGHT</name></expr></argument>,
<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetState</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>above</name> <init>= <expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>VOUT_WINDOW_STATE_ABOVE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>below</name> <init>= <expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>VOUT_WINDOW_STATE_BELOW</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>change_wm_state</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>above</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_state_above</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>change_wm_state</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>below</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_state_below</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UnsetFullscreen</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>change_wm_state</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_state_fullscreen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetFullscreen</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>idstr</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>change_wm_state</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_state_fullscreen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>void</name></type> <name>set_string</name> <parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>xcb_window_t</name></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>xcb_atom_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>xcb_atom_t</name></type> <name>atom</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xcb_change_property</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_PROP_MODE_REPLACE</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>void</name></type> <name>set_ascii_prop</name> <parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>xcb_window_t</name></type> <name>window</name></decl></parameter>,
<parameter><decl><type><name>xcb_atom_t</name></type> <name>atom</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>set_string</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>XA_STRING</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>void</name></type> <name>set_wm_hints</name> <parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>xcb_window_t</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>wm_hints</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xcb_change_property</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_PROP_MODE_REPLACE</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>XA_WM_HINTS</name></expr></argument>,
<argument><expr><name>XA_WM_HINTS</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>wm_hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>void</name></type> <name>set_hostname_prop</name> <parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>xcb_window_t</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>host_name_max</name> <init>= <expr><call><name>sysconf</name> <argument_list>(<argument><expr><name>_SC_HOST_NAME_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>host_name_max</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>host_name_max</name> <operator>=</operator> <name>_POSIX_HOST_NAME_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>size_t</name></type> <name>host_name_max</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>hostname</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>host_name_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hostname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gethostname</name> <argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>host_name_max</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>host_name_max</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_ascii_prop</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>XA_WM_CLIENT_MACHINE</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>xcb_intern_atom_cookie_t</name></type> <name>intern_string</name> <parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xcb_intern_atom</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier>
<name>xcb_atom_t</name></type> <name>get_atom</name> <parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>xcb_intern_atom_cookie_t</name></type> <name>ck</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_intern_atom_reply_t</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name>atom</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>xcb_intern_atom_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reply</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>atom</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>atom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>atom</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Enable</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_window_cfg_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>is_fullscreen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>wm_state_fullscreen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_change_property</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>XCB_PROP_MODE_REPLACE</name></expr></argument>, <argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_state</name></name></expr></argument>, <argument><expr><name>XA_ATOM</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>is_decorated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xcb_delete_property</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>motif_wm_hints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>motif_wm_hints</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_change_property</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>XCB_PROP_MODE_REPLACE</name></expr></argument>, <argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>motif_wm_hints</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>motif_wm_hints</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>motif_wm_hints</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>motif_wm_hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>values</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>cfg</name><operator>-&gt;</operator><name>width</name></name></expr>, <expr><name><name>cfg</name><operator>-&gt;</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_configure_window</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>,
<argument><expr><name>XCB_CONFIG_WINDOW_WIDTH</name> <operator>|</operator> <name>XCB_CONFIG_WINDOW_HEIGHT</name></expr></argument>,
<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>xcb_map_window</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Disable</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_unmap_window</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vout_window_operations</name></name></type> <name>ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>enable</name> <operator>=</operator> <name>Enable</name></expr>,
<expr><operator>.</operator><name>disable</name> <operator>=</operator> <name>Disable</name></expr>,
<expr><operator>.</operator><name>resize</name> <operator>=</operator> <name>Resize</name></expr>,
<expr><operator>.</operator><name>set_fullscreen</name> <operator>=</operator> <name>SetFullscreen</name></expr>,
<expr><operator>.</operator><name>unset_fullscreen</name> <operator>=</operator> <name>UnsetFullscreen</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>Close</name></expr>,
<expr><operator>.</operator><name>set_state</name> <operator>=</operator> <name>SetState</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>xcb_window_t</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>xcb_window_t</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>VOUT_WINDOW_TYPE_XID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>x11</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"keyboard-events"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>InitKeyboardExtension</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>xkb</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>set_ascii_prop</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>XA_WM_NAME</name></expr></argument>,





<argument><expr><call><name>vlc_pgettext</name><argument_list>(<argument><expr><literal type="string">"ASCII"</literal></expr></argument>, <argument><expr><literal type="string">"VLC media player"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_ascii_prop</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>XA_WM_ICON_NAME</name></expr></argument>,


<argument><expr><call><name>vlc_pgettext</name><argument_list>(<argument><expr><literal type="string">"ASCII"</literal></expr></argument>, <argument><expr><literal type="string">"VLC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_wm_hints</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_change_property</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_PROP_MODE_REPLACE</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>XA_WM_CLASS</name></expr></argument>,
<argument><expr><name>XA_STRING</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"vlc\0Vlc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hostname_prop</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>xcb_intern_atom_cookie_t</name></type> <name>utf8_string_ck</name> <init>=
<expr><call><name>intern_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"UTF8_STRING"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_intern_atom_cookie_t</name></type> <name>net_wm_name_ck</name> <init>=
<expr><call><name>intern_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_NAME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_intern_atom_cookie_t</name></type> <name>net_wm_icon_name_ck</name> <init>=
<expr><call><name>intern_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_ICON_NAME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_intern_atom_cookie_t</name></type> <name>wm_window_role_ck</name> <init>=
<expr><call><name>intern_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"WM_WINDOW_ROLE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_intern_atom_cookie_t</name></type> <name>wm_state_ck</name> <init>=
<expr><call><name>intern_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_STATE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_intern_atom_cookie_t</name></type> <name>wm_state_above_ck</name> <init>=
<expr><call><name>intern_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_STATE_ABOVE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_intern_atom_cookie_t</name></type> <name>wm_state_below_ck</name> <init>=
<expr><call><name>intern_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_STATE_BELOW"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_intern_atom_cookie_t</name></type> <name>wm_state_fs_ck</name> <init>=
<expr><call><name>intern_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"_NET_WM_STATE_FULLSCREEN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_intern_atom_cookie_t</name></type> <name>motif_wm_hints_ck</name> <init>=
<expr><call><name>intern_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"_MOTIF_WM_HINTS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name>utf8</name> <init>= <expr><call><name>get_atom</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>utf8_string_ck</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name>net_wm_name</name> <init>= <expr><call><name>get_atom</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>net_wm_name_ck</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"video-title"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name>net_wm_name</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name>net_wm_name</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC media player"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name>net_wm_icon_name</name> <init>= <expr><call><name>get_atom</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>net_wm_icon_name_ck</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name>net_wm_icon_name</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_atom_t</name></type> <name>wm_window_role</name> <init>= <expr><call><name>get_atom</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>wm_window_role_ck</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_ascii_prop</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>wm_window_role</name></expr></argument>, <argument><expr><literal type="string">"vlc-video"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_state</name></name> <operator>=</operator> <call><name>get_atom</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>wm_state_ck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_state_above</name></name> <operator>=</operator> <call><name>get_atom</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>wm_state_above_ck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_state_below</name></name> <operator>=</operator> <call><name>get_atom</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>wm_state_below_ck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_state_fullscreen</name></name> <operator>=</operator> <call><name>get_atom</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>wm_state_fs_ck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>motif_wm_hints</name></name> <operator>=</operator> <call><name>get_atom</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>motif_wm_hints_ck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Thread</name></expr></argument>, <argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DeinitKeyboardExtension</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_generic_error_t</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_void_cookie_t</name></type> <name>ck</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"x11-display"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>snum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>xcb_connect</name> <argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xcb_connection_has_error</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><call><name>xcb_get_setup</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>scr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>xcb_screen_iterator_t</name></type> <name>i</name> <init>= <expr><call><name>xcb_setup_roots_iterator</name> <argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</init>
<condition><expr><name><name>i</name><operator>.</operator><name>rem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><call><name>xcb_screen_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>snum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>scr</name> <operator>=</operator> <name><name>i</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>snum</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>scr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"bad X11 screen number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>mask</name> <init>= <expr><name>XCB_CW_BACK_PIXEL</name> <operator>|</operator> <name>XCB_CW_EVENT_MASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name><name>scr</name><operator>-&gt;</operator><name>black_pixel</name></name></expr>,

<expr><name>XCB_EVENT_MASK_KEY_PRESS</name> <operator>|</operator> <name>XCB_EVENT_MASK_POINTER_MOTION</name> <operator>|</operator>
<name>XCB_EVENT_MASK_STRUCTURE_NOTIFY</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"mouse-events"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>XCB_EVENT_MASK_BUTTON_PRESS</name>
<operator>|</operator> <name>XCB_EVENT_MASK_BUTTON_RELEASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name> <init>= <expr><call><name>xcb_generate_id</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ck</name> <operator>=</operator> <call><name>xcb_create_window_checked</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>scr</name><operator>-&gt;</operator><name>root_depth</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>scr</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>XCB_WINDOW_CLASS_INPUT_OUTPUT</name></expr></argument>,
<argument><expr><name><name>scr</name><operator>-&gt;</operator><name>root_visual</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>xcb_request_check</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"creating window: X11 error %d"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>-&gt;</operator><name>error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>OpenCommon</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>display</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>scr</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>xcb_disconnect</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeinitKeyboardExtension</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_disconnect</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>x11</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>EmEnable</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_window_cfg_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_window_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>change_wm_state</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>is_fullscreen</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>wm_state_fullscreen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>serializer</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type> <name>AcquireDrawable</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>xcb_window_t</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_window_t</name> <modifier>*</modifier></type><name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"xid-in-use"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>var_GetAddress</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"xid-in-use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>window</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>used</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>used</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"xid-in-use"</literal></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<label><name>skip</name>:</label>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"X11 drawable 0x%08"</literal><name>PRIx8</name><literal type="string">" is busy"</literal></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>window</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>window</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_EGENERIC</name></expr> </then><else>: <expr><name>VLC_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseDrawable</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>xcb_window_t</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_window_t</name> <modifier>*</modifier></type><name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>var_GetAddress</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"xid-in-use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>used</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>used</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><name><name>used</name><index>[<expr><operator>++</operator><name>n</name></expr>]</index></name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"xid-in-use"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>used</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"xid-in-use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EmClose</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vout_window_operations</name></name></type> <name>em_ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>enable</name> <operator>=</operator> <name>EmEnable</name></expr>,
<expr><operator>.</operator><name>set_fullscreen</name> <operator>=</operator> <name>SetFullscreen</name></expr>,
<expr><operator>.</operator><name>unset_fullscreen</name> <operator>=</operator> <name>UnsetFullscreen</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>EmClose</name></expr>,
<expr><operator>.</operator><name>set_state</name> <operator>=</operator> <name>SetState</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>EmOpen</name> <parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"drawable-xid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AcquireDrawable</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>xcb_connect</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xcb_connection_has_error</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><name>XCB_CW_EVENT_MASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name> <init>= <expr><name>XCB_EVENT_MASK_POINTER_MOTION</name>
<operator>|</operator> <name>XCB_EVENT_MASK_STRUCTURE_NOTIFY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>root</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_change_window_attributes</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>geo</name> <init>=
<expr><call><name>xcb_get_geometry_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>xcb_get_geometry</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>geo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"bad X11 window 0x%08"</literal><name>PRIx8</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>root</name> <operator>=</operator> <name><name>geo</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_window_ReportSize</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>geo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>value</name> <operator>|=</operator> <name>XCB_EVENT_MASK_KEY_PRESS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"mouse-events"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>|=</operator> <name>XCB_EVENT_MASK_BUTTON_PRESS</name> <operator>|</operator> <name>XCB_EVENT_MASK_BUTTON_RELEASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_change_window_attributes</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>XCB_CW_EVENT_MASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>OpenCommon</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wnd</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>em_ops</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>xcb_disconnect</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseDrawable</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EmClose</name> <parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name> <init>= <expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Close</name> <argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseDrawable</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPLAY_TEXT</name></cpp:macro> <cpp:value>N_("X11 display")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPLAY_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Video will be rendered with this X11 display. " "If empty, the default display will be used.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XID_TEXT</name></cpp:macro> <cpp:value>N_("X11 window ID")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XID_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Video will be embedded in this pre-existing window. " "If zero, a new window will be created.")</cpp:value></cpp:define>






<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"X window"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"X11 video window (XCB)"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name> <argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"vout window"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>


<macro><name>add_obsolete_bool</name> <argument_list>(<argument><literal type="string">"x11-altfullscreen"</literal></argument>)</argument_list></macro>
<macro><name>add_obsolete_bool</name> <argument_list>(<argument><literal type="string">"xvideo-altfullscreen"</literal></argument>)</argument_list></macro>
<macro><name>add_obsolete_bool</name> <argument_list>(<argument><literal type="string">"xvmc-altfullscreen"</literal></argument>)</argument_list></macro>
<macro><name>add_obsolete_bool</name> <argument_list>(<argument><literal type="string">"glx-altfullscreen"</literal></argument>)</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"Drawable"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"Embedded window video"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name> <argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"vout window"</literal></argument>, <argument><literal type="number">70</literal></argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>EmOpen</argument>)</argument_list></macro>
<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"embed-xid"</literal></argument>)</argument_list></macro>

<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"x11-display"</literal></argument>, <argument>NULL</argument>, <argument>DISPLAY_TEXT</argument>, <argument>DISPLAY_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"drawable-xid"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>XID_TEXT</argument>, <argument>XID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_volatile</name> <argument_list>()</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>
</unit>
