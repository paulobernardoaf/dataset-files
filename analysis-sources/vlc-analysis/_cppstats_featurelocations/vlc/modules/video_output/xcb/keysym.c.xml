<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\xcb\keysym.c">





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<struct>struct <name>keysym</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>xname</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>uname</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>xsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>usym</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmpkey</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>keysym</name></name> <modifier>*</modifier></type><name>ka</name> <init>= <expr><name>va</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kb</name> <init>= <expr><name>vb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ka</name><operator>-&gt;</operator><name>xsym</name></name> <operator>&gt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>xsym</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ka</name><operator>-&gt;</operator><name>xsym</name></name> <operator>&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>xsym</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printkey</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VISIT</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>which</name> <operator>!=</operator> <name>postorder</name> <operator>&amp;&amp;</operator> <name>which</name> <operator>!=</operator> <name>leaf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>keysym</name></name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>psym</name> <init>= <expr><name>node</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sym</name> <init>= <expr><operator>*</operator><name>psym</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>xsym</name></name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>xsym</name></name> <operator>&gt;=</operator> <literal type="number">0x1000100</literal> <operator>&amp;&amp;</operator> <name><name>sym</name><operator>-&gt;</operator><name>xsym</name></name> <operator>&lt;=</operator> <literal type="number">0x110ffff</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"/* XK_%-20s: %s*/\n"</literal></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>xname</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"{ 0x%08"</literal><name>PRIx32</name><literal type="string">", 0x%04"</literal><name>PRIx32</name><literal type="string">" },\n"</literal></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>xsym</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>usym</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>depth</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>getline</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>keysym</name></name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sym</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>,
<argument><expr><literal type="string">"#define XK_%31s 0x%"</literal><name>SCNx32</name><literal type="string">" /*%*cU+%"</literal><name>SCNx32</name><literal type="string">" %63[^*]"</literal></expr></argument>,
<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>xname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sym</name><operator>-&gt;</operator><name>xsym</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sym</name><operator>-&gt;</operator><name>usym</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>uname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>psym</name> <init>= <expr><call><name>tsearch</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><name>cmpkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psym</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psym</name> <operator>!=</operator> <name>sym</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"/* This file is generated automatically. Do not edit! */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"/* Entries are sorted from the smallest to the largest XK */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>twalk</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>printkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdestroy</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><literal type="string">"Read error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>-</operator><call><name>parse</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
