<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\xcb\pictures.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/shm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pictures.h"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>xcb_format_t</name> <modifier>*</modifier></type><name>vlc_xcb_DepthToPixmapFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name></decl></parameter>,
<parameter><decl><type><name>uint_fast8_t</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>xcb_setup_pixmap_formats</name><argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>xcb_setup_pixmap_formats_length</name><argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>fmt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>depth</name></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>&lt;</operator> <name>depth</name>
<operator>||</operator> <operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>scanline_pad</name></name> <operator>%</operator> <name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>fmt</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>vlc_xcb_VisualToFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name></decl></parameter>, <parameter><decl><type><name>uint_fast8_t</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>xcb_visualtype_t</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>_class</name></name> <operator>==</operator> <name>XCB_VISUAL_CLASS_TRUE_COLOR</name></expr>)</condition>
<block>{<block_content>

<switch>switch <condition>(<expr><name>depth</name></expr>)</condition>
<block>{<block_content>


<case>case <expr><literal type="number">24</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>red_mask</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal>
<operator>&amp;&amp;</operator> <call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>green_mask</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal>
<operator>&amp;&amp;</operator> <call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>red_mask</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>red_mask</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal>
<operator>&amp;&amp;</operator> <call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>green_mask</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>depth</name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>red_mask</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><literal type="number">8</literal></expr>:</case>

<break>break;</break>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>_class</name></name> <operator>==</operator> <name>XCB_VISUAL_CLASS_STATIC_GRAY</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>vlc_xcb_DepthToPixmapFormat</name><argument_list>(<argument><expr><name>setup</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>setup</name><operator>-&gt;</operator><name>image_byte_order</name></name> <operator>!=</operator> <name>ORDER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGB24</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGB16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGB15</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>_class</name></name> <operator>==</operator> <name>XCB_VISUAL_CLASS_TRUE_COLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGB8</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_GREY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>red_mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>green_mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>i_bmask</name></name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>blue_mask</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>XCB_shm_Check</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_shm_query_version_cookie_t</name></type> <name>ck</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_shm_query_version_reply_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ck</name> <operator>=</operator> <call><name>xcb_shm_query_version</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>xcb_shm_query_version_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"MIT-SHM extension not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"MIT-SHM extension version %"</literal><name>PRIu16</name><literal type="string">".%"</literal><name>PRIu16</name></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>minor_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>major_version</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>minor_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"MIT-SHM extension too old"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"display will be slow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
