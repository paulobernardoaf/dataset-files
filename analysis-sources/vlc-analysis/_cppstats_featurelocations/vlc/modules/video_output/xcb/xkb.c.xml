<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\xcb\xkb.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/keysym.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XF86keysym.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video_output/xcb/vlc_xkb.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>keysymcmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pa</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>pb</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>a</name> <operator>-</operator> <name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint_fast32_t</name></type> <name>vlc_xkb_convert_keysym</name><parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vlc</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>res</name></decl>, <decl><type ref="prev"/><name><name>tab</name><index>[]</index></name> <init>= <expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xcb_keysym.h"</cpp:file></cpp:include>
}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>old</name><index>[]</index></name> <init>= <expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"keysym.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</struct>


<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sym</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>&gt;=</operator> <literal type="number">0x1000100</literal> <operator>&amp;&amp;</operator> <name>sym</name> <operator>&lt;=</operator> <literal type="number">0x110ffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sym</name> <operator>-</operator> <literal type="number">0x1000000</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
for (size_t i = 0; i &lt; sizeof (tab) / sizeof (tab[0]); i++)
if (i &gt; 0 &amp;&amp; tab[i-1].x11 &gt;= tab[i].x11)
{
fprintf (stderr, "key %x and %x are not ordered properly\n",
tab[i-1].x11, tab[i].x11);
abort ();
}
for (size_t i = 0; i &lt; sizeof (old) / sizeof (old[0]); i++)
if (i &gt; 0 &amp;&amp; old[i-1].x11 &gt;= old[i].x11)
{
fprintf (stderr, "key %x and %x are not ordered properly\n",
old[i-1].x11, old[i].x11);
abort ();
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bsearch</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>keysymcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>res</name><operator>-&gt;</operator><name>vlc</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bsearch</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>keysymcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>res</name><operator>-&gt;</operator><name>vlc</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>KEY_UNSET</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XKBCOMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xkbcommon/xkbcommon.h&gt;</cpp:file></cpp:include>

<struct>struct <name>modifiers</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>modifiers</name></name></type> <name><name>modifiers</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>XKB_MOD_NAME_SHIFT</name></expr>, <expr><name>KEY_MODIFIER_SHIFT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>XKB_MOD_NAME_CTRL</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>XKB_MOD_NAME_ALT</name></expr>, <expr><name>KEY_MODIFIER_ALT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>XKB_MOD_NAME_LOGO</name></expr>, <expr><name>KEY_MODIFIER_META</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>uint_fast32_t</name></type> <name>vlc_xkb_get_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>xkb_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>keycode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xkb_keysym_t</name></type> <name>keysym</name> <init>= <expr><call><name>xkb_state_key_get_one_sym</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>vk</name> <init>= <expr><call><name>vlc_xkb_convert_keysym</name><argument_list>(<argument><expr><name>keysym</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vk</name> <operator>!=</operator> <name>KEY_UNSET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vk</name> <operator>&lt;</operator> <literal type="number">0x110000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vk</name> <operator>=</operator> <call><name>towlower</name><argument_list>(<argument><expr><name>vk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>xkb_state_mod_name_is_active</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>modifiers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name>XKB_STATE_MODS_EFFECTIVE</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vk</name> <operator>|=</operator> <name><name>modifiers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>vk</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
