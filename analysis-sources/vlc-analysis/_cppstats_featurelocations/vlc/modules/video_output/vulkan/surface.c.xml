<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\vulkan\surface.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../placebo_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"instance.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_vk_t</name> <modifier>*</modifier></type><name>vk</name> <init>= <expr><operator>(</operator><name>vlc_vk_t</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_vk_InitPlatform</name><argument_list>(<argument><expr><name>vk</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>vk</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>vlc_placebo_Create</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vk</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vk</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <macro><name>pl_vk_inst_create</name><argument_list>(<argument>vk-&gt;ctx</argument>, <argument>&amp;(struct pl_vk_inst_params) {
.debug = var_InheritBool(vk, <literal type="string">"vk-debug"</literal>)</argument>,
<argument>.extensions = (const char *[]) {
VK_KHR_SURFACE_EXTENSION_NAME</argument>,
<argument>vlc_vk_PlatformExt</argument>,
<argument>}</argument>,
<argument>.num_extensions = <literal type="number">2</literal></argument>,
<argument>}</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vk</name><operator>-&gt;</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vlc_vk_CreateSurface</name><argument_list>(<argument><expr><name>vk</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device_name</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>vk</name></expr></argument>, <argument><expr><literal type="string">"vk-device"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vk</name><operator>-&gt;</operator><name>vulkan</name></name> <operator>=</operator> <macro><name>pl_vulkan_create</name><argument_list>(<argument>vk-&gt;ctx</argument>, <argument>&amp;(struct pl_vulkan_params) {
.instance = vk-&gt;instance-&gt;instance</argument>,
<argument>.surface = vk-&gt;surface</argument>,
<argument>.device_name = device_name</argument>,
<argument>.allow_software = var_InheritBool(vk, <literal type="string">"allow-sw"</literal>)</argument>,
<argument>.async_transfer = var_InheritBool(vk, <literal type="string">"async-xfer"</literal>)</argument>,
<argument>.async_compute = var_InheritBool(vk, <literal type="string">"async-comp"</literal>)</argument>,
<argument>.queue_count = var_InheritInteger(vk, <literal type="string">"queue-count"</literal>)</argument>,
<argument>}</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vk</name><operator>-&gt;</operator><name>vulkan</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>pl_vulkan_swapchain_params</name></name></type> <name>swap_params</name> <init>= <expr><block>{
<expr><operator>.</operator><name>surface</name> <operator>=</operator> <name><name>vk</name><operator>-&gt;</operator><name>surface</name></name></expr>,
<expr><operator>.</operator><name>present_mode</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vk</name></expr></argument>, <argument><expr><literal type="string">"present-mode"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>swapchain_depth</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vk</name></expr></argument>, <argument><expr><literal type="string">"queue-depth"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vk</name><operator>-&gt;</operator><name>swapchain</name></name> <operator>=</operator> <call><name>pl_vulkan_create_swapchain</name><argument_list>(<argument><expr><name><name>vk</name><operator>-&gt;</operator><name>vulkan</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>swap_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vk</name><operator>-&gt;</operator><name>swapchain</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>pl_swapchain_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vk</name><operator>-&gt;</operator><name>swapchain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vk</name><operator>-&gt;</operator><name>surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vkDestroySurfaceKHR</name><argument_list>(<argument><expr><name><name>vk</name><operator>-&gt;</operator><name>instance</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name><name>vk</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pl_vulkan_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vk</name><operator>-&gt;</operator><name>vulkan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pl_vk_inst_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vk</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pl_context_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vk</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_vk_ClosePlatform</name><argument_list>(<argument><expr><name>vk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_vk_t</name> <modifier>*</modifier></type><name>vk</name> <init>= <expr><operator>(</operator><name>vlc_vk_t</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pl_swapchain_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vk</name><operator>-&gt;</operator><name>swapchain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vkDestroySurfaceKHR</name><argument_list>(<argument><expr><name><name>vk</name><operator>-&gt;</operator><name>instance</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>, <argument><expr><name><name>vk</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pl_vulkan_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vk</name><operator>-&gt;</operator><name>vulkan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pl_vk_inst_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vk</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pl_context_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vk</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_vk_ClosePlatform</name><argument_list>(<argument><expr><name>vk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_TEXT</name></cpp:macro> <cpp:value>"Enable API debugging"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LONGTEXT</name></cpp:macro> <cpp:value>"This loads the vulkan standard validation layers, which can help catch API usage errors. Comes at a small performance penalty."</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_TEXT</name></cpp:macro> <cpp:value>"Device name override"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_LONGTEXT</name></cpp:macro> <cpp:value>"If set to something non-empty, only a device with this exact name will be used. To see a list of devices and their names, run vlc -v with this module active."</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOWSW_TEXT</name></cpp:macro> <cpp:value>"Allow software devices"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOWSW_LONGTEXT</name></cpp:macro> <cpp:value>"If enabled, allow the use of software emulation devices, which are not real devices and therefore typically very slow. (This option has no effect if forcing a specific device name)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_XFER_TEXT</name></cpp:macro> <cpp:value>"Allow asynchronous transfer"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_XFER_LONGTEXT</name></cpp:macro> <cpp:value>"Allows the use of an asynchronous transfer queue if the device has one. Typically this maps to a DMA engine, which can perform texture uploads/downloads without blocking the GPU's compute units. Highly recommended for 4K and above."</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_COMP_TEXT</name></cpp:macro> <cpp:value>"Allow asynchronous compute"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_COMP_LONGTEXT</name></cpp:macro> <cpp:value>"Allows the use of dedicated compute queue families if the device has one. Sometimes these will schedule concurrent compute work better than the main graphics queue. Turn this off if you have any issues."</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_COUNT_TEXT</name></cpp:macro> <cpp:value>"Queue count"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_COUNT_LONGTEXT</name></cpp:macro> <cpp:value>"How many queues to use on the device. Increasing this might improve rendering throughput for GPUs capable of concurrent scheduling. Increasing this past the driver's limit has no effect."</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_DEPTH_TEXT</name></cpp:macro> <cpp:value>"Maximum frame latency"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_DEPTH_LONGTEXT</name></cpp:macro> <cpp:value>"Affects how many frames to render/present in advance. Increasing this can improve performance at the cost of latency, by allowing better pipelining between frames. May have no effect, depending on the VLC clock settings."</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>present_values</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VK_PRESENT_MODE_IMMEDIATE_KHR</name></expr>,
<expr><name>VK_PRESENT_MODE_MAILBOX_KHR</name></expr>,
<expr><name>VK_PRESENT_MODE_FIFO_KHR</name></expr>,
<expr><name>VK_PRESENT_MODE_FIFO_RELAXED_KHR</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>present_text</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Immediate (non-blocking, tearing)"</literal></expr>,
<expr><literal type="string">"Mailbox (non-blocking, non-tearing)"</literal></expr>,
<expr><literal type="string">"FIFO (blocking, non-tearing)"</literal></expr>,
<expr><literal type="string">"Relaxed FIFO (blocking, tearing)"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRESENT_MODE_TEXT</name></cpp:macro> <cpp:value>"Preferred present mode"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRESENT_MODE_LONGTEXT</name></cpp:macro> <cpp:value>"Which present mode to use when creating the swapchain. If the chosen mode is not supported, VLC will fall back to using FIFO."</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XSTR(x)</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name> <argument_list>(<argument><literal type="string">"Vulkan/"</literal> STR(PLATFORM_NAME)</argument>)</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument><literal type="string">"Vulkan context ("</literal> STR(PLATFORM_NAME) <literal type="string">")"</literal></argument>)</argument_list></macro>
<macro><name>set_category</name> <argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"vulkan"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name> <argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>(<argument><literal type="string">"Device selection"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"vk-debug"</literal></argument>, <argument>false</argument>, <argument>DEBUG_TEXT</argument>, <argument>DEBUG_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"vk-device"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>DEVICE_TEXT</argument>, <argument>DEVICE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"allow-sw"</literal></argument>, <argument>pl_vulkan_default_params.allow_software</argument>,
<argument>ALLOWSW_TEXT</argument>, <argument>ALLOWSW_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>(<argument><literal type="string">"Performance tuning"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"async-xfer"</literal></argument>, <argument>pl_vulkan_default_params.async_transfer</argument>,
<argument>ASYNC_XFER_TEXT</argument>, <argument>ASYNC_XFER_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"async-comp"</literal></argument>, <argument>pl_vulkan_default_params.async_compute</argument>,
<argument>ASYNC_COMP_TEXT</argument>, <argument>ASYNC_COMP_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>(<argument><literal type="string">"queue-count"</literal></argument>, <argument>pl_vulkan_default_params.queue_count</argument>,
<argument><literal type="number">1</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>QUEUE_COUNT_TEXT</argument>, <argument>QUEUE_COUNT_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>(<argument><literal type="string">"queue-depth"</literal></argument>, <argument><literal type="number">3</literal></argument>,
<argument><literal type="number">1</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>QUEUE_DEPTH_TEXT</argument>, <argument>QUEUE_DEPTH_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"present-mode"</literal></argument>, <argument>VK_PRESENT_MODE_FIFO_KHR</argument>,
<argument>PRESENT_MODE_TEXT</argument>, <argument>PRESENT_MODE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>(<argument>present_values</argument>, <argument>present_text</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>
</unit>
