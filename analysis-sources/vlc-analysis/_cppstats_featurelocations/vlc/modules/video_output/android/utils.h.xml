<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\android\utils.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;android/native_window.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;android/native_window_jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;android/input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>AWindowHandler</name></name></type> <name>AWindowHandler</name>;</typedef>

<enum>enum <name>AWindow_ID</name> <block>{
<decl><name>AWindow_Video</name></decl>,
<decl><name>AWindow_Subtitles</name></decl>,
<decl><name>AWindow_SurfaceTexture</name></decl>,
<decl><name>AWindow_Max</name></decl>,
}</block>;</enum>




<typedef>typedef <type><struct>struct
<block>{
<function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>winLock</name>)<parameter_list>(<parameter><decl><type><name>ANativeWindow</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ANativeWindow_Buffer</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ARect</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>unlockAndPost</name>)<parameter_list>(<parameter><decl><type><name>ANativeWindow</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>setBuffersGeometry</name>)<parameter_list>(<parameter><decl><type><name>ANativeWindow</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type></decl></parameter>, <parameter><decl><type><name>int32_t</name></type></decl></parameter>)</parameter_list>;</function_decl> 
}</block></struct></type> <name>native_window_api_t</name>;</typedef>

<struct>struct <name>awh_mouse_coords</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_button</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_y</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_new_window_size</name>)<parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_width</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_new_mouse_coords</name>)<parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>awh_mouse_coords</name></name> <modifier>*</modifier></type><name>coords</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>awh_events_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>android_video_context_t</name></name></type> <name>android_video_context_t</name>;</typedef>

<struct>struct <name>android_video_context_t</name>
<block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AWindow_ID</name></name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dec_opaque</name></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>render</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>render_ts</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>








<function_decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>android_getEnv</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_thread_name</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>AWindowHandler_new</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>awh_events_t</name> <modifier>*</modifier></type><name>p_events</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AWindowHandler_destroy</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>native_window_api_t</name> <modifier>*</modifier></type><name>AWindowHandler_getANativeWindowAPI</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>jobject</name></type> <name>AWindowHandler_getSurface</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AWindow_ID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>ANativeWindow</name> <modifier>*</modifier></type><name>AWindowHandler_getANativeWindow</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AWindow_ID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>AWindowHandler_releaseANativeWindow</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AWindow_ID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>AWindowHandler_canSetVideoLayout</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>AWindowHandler_setVideoLayout</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_visible_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_visible_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_sar_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sar_den</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type>
<name>SurfaceTexture_attachToGLContext</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tex_name</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type>
<name>SurfaceTexture_detachFromGLContext</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>jobject</name></type>
<name>SurfaceTexture_getSurface</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>AWindowHandler_getSurface</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>, <argument><expr><name>AWindow_SurfaceTexture</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ANativeWindow</name> <modifier>*</modifier></type>
<name>SurfaceTexture_getANativeWindow</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>AWindowHandler_getANativeWindow</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>, <argument><expr><name>AWindow_SurfaceTexture</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function_decl><type><name>int</name></type>
<name>SurfaceTexture_waitAndUpdateTexImage</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_transform_mtx</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
