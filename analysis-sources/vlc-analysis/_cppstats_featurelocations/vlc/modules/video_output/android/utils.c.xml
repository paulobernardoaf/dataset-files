<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_output\android\utils.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>ANativeWindow</name><modifier>*</modifier></type> (<modifier>*</modifier><name>ptr_ANativeWindow_fromSurface</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ANativeWindow</name><modifier>*</modifier></type> (<modifier>*</modifier><name>ptr_ANativeWindow_fromSurfaceTexture</name>)<parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ptr_ANativeWindow_release</name>)<parameter_list>(<parameter><decl><type><name>ANativeWindow</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>AWindowHandler</name>
<block>{
<decl_stmt><decl><type><name>JavaVM</name> <modifier>*</modifier></type><name>p_jvm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>jobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>jobject</name></type> <name>jsurface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ANativeWindow</name> <modifier>*</modifier></type><name>p_anw</name></decl>;</decl_stmt>
}</block> <decl><name><name>views</name><index>[<expr><name>AWindow_Max</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_anw_dl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptr_ANativeWindow_fromSurface</name></type> <name>pf_winFromSurface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptr_ANativeWindow_release</name></type> <name>pf_winRelease</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>native_window_api_t</name></type> <name>anw_api</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>awh_events_t</name></type> <name>cb</name></decl>;</decl_stmt>
}</block> <decl><name>event</name></decl>;</struct>
<decl_stmt><decl><type><name>bool</name></type> <name>b_has_video_layout_listener</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>jfloatArray</name></type> <name>jtransform_mtx_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfloat</name> <modifier>*</modifier></type><name>jtransform_mtx</name></decl>;</decl_stmt>
}</block> <decl><name>stex</name></decl>;</struct>
}</block>;</struct>

<struct>struct <name>SurfaceTexture</name>
<block>{
<decl_stmt><decl><type><name>JavaVM</name> <modifier>*</modifier></type><name>p_jvm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_anw_dl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptr_ANativeWindow_fromSurface</name></type> <name>pf_winFromSurface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptr_ANativeWindow_release</name></type> <name>pf_winRelease</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>thiz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>jsurface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ANativeWindow</name> <modifier>*</modifier></type><name>p_anw</name></decl>;</decl_stmt>

}</block>;</struct>

<struct><specifier>static</specifier> struct
<block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getVideoSurface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getSubtitlesSurface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>registerNative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>unregisterNative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>setVideoLayout</name></decl>;</decl_stmt>
}</block> <decl><name>AndroidNativeWindow</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>jmethodID</name></type> <name>attachToGLContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>detachFromGLContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>waitAndUpdateTexImage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getSurface</name></decl>;</decl_stmt>
}</block> <decl><name>SurfaceTexture</name></decl>;</struct>
}</block> <decl><name>jfields</name></decl>;</struct>





<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>jni_AndroidJavaSurfaceToNativeSurface</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>surf</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ANDROID_SYM_S_LOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDROID_SYM_S_LOCK</name></cpp:macro> <cpp:value>"_ZN7android7Surface4lockEPNS0_11SurfaceInfoEb"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ANDROID_SYM_S_LOCK2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDROID_SYM_S_LOCK2</name></cpp:macro> <cpp:value>"_ZN7android7Surface4lockEPNS0_11SurfaceInfoEPNS_6RegionE"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ANDROID_SYM_S_UNLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDROID_SYM_S_UNLOCK</name></cpp:macro> <cpp:value>"_ZN7android7Surface13unlockAndPostEv"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>AndroidSurface_lock</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>AndroidSurface_lock2</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>AndroidSurface_unlockAndPost</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_dl_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_surface_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AndroidSurface_lock</name></type> <name>pf_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AndroidSurface_lock2</name></type> <name>pf_lock2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AndroidSurface_unlockAndPost</name></type> <name>pf_unlockAndPost</name></decl>;</decl_stmt>
}</block></struct></type> <name>NativeSurface</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>
<name>NativeSurface_Load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_lib</name></decl></parameter>, <parameter><decl><type><name>NativeSurface</name> <modifier>*</modifier></type><name>p_ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_lib</name> <init>= <expr><call><name>dlopen</name><argument_list>(<argument><expr><name>psz_lib</name></expr></argument>, <argument><expr><name>RTLD_NOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_lib</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ns</name><operator>-&gt;</operator><name>pf_lock</name></name> <operator>=</operator> <operator>(</operator><name>AndroidSurface_lock</name><operator>)</operator><operator>(</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>p_lib</name></expr></argument>, <argument><expr><name>ANDROID_SYM_S_LOCK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ns</name><operator>-&gt;</operator><name>pf_lock2</name></name> <operator>=</operator> <operator>(</operator><name>AndroidSurface_lock2</name><operator>)</operator><operator>(</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>p_lib</name></expr></argument>, <argument><expr><name>ANDROID_SYM_S_LOCK2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ns</name><operator>-&gt;</operator><name>pf_unlockAndPost</name></name> <operator>=</operator>
<operator>(</operator><name>AndroidSurface_unlockAndPost</name><operator>)</operator><operator>(</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>p_lib</name></expr></argument>, <argument><expr><name>ANDROID_SYM_S_UNLOCK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_ns</name><operator>-&gt;</operator><name>pf_lock</name></name> <operator>||</operator> <name><name>p_ns</name><operator>-&gt;</operator><name>pf_lock2</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_ns</name><operator>-&gt;</operator><name>pf_unlockAndPost</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_lib</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>p_lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>NativeSurface_getHandle</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jsurf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jclass</name></type> <name>clz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>p_surface_handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>clz</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jsurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fid</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>clz</name></expr></argument>, <argument><expr><literal type="string">"mSurface"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fid</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>clz</name></expr></argument>, <argument><expr><literal type="string">"mNativeSurface"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_surface_handle</name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jsurf</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>clz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_surface_handle</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ANativeWindow</name><modifier>*</modifier></type>
<name>NativeSurface_fromSurface</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jsurf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_surface_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NativeSurface</name> <modifier>*</modifier></type><name>p_ns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>libs</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"libsurfaceflinger_client.so"</literal></expr>,
<expr><literal type="string">"libgui.so"</literal></expr>,
<expr><literal type="string">"libui.so"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_surface_handle</name> <operator>=</operator> <call><name>NativeSurface_getHandle</name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jsurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_surface_handle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_ns</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NativeSurface</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ns</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_ns</name><operator>-&gt;</operator><name>p_surface_handle</name></name> <operator>=</operator> <name>p_surface_handle</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>libs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_dl_handle</name> <init>= <expr><call><name>NativeSurface_Load</name><argument_list>(<argument><expr><name><name>libs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_ns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_dl_handle</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ns</name><operator>-&gt;</operator><name>p_dl_handle</name></name> <operator>=</operator> <name>p_dl_handle</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ANativeWindow</name><operator>*</operator><operator>)</operator><name>p_ns</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>NativeSurface_release</name><parameter_list>(<parameter><decl><type><name>ANativeWindow</name><modifier>*</modifier></type> <name>p_anw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NativeSurface</name> <modifier>*</modifier></type><name>p_ns</name> <init>= <expr><operator>(</operator><name>NativeSurface</name> <operator>*</operator><operator>)</operator><name>p_anw</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>p_ns</name><operator>-&gt;</operator><name>p_dl_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type>
<name>NativeSurface_lock</name><parameter_list>(<parameter><decl><type><name>ANativeWindow</name> <modifier>*</modifier></type><name>p_anw</name></decl></parameter>, <parameter><decl><type><name>ANativeWindow_Buffer</name> <modifier>*</modifier></type><name>p_anb</name></decl></parameter>,
<parameter><decl><type><name>ARect</name> <modifier>*</modifier></type><name>p_rect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_rect</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>NativeSurface</name> <modifier>*</modifier></type><name>p_ns</name> <init>= <expr><operator>(</operator><name>NativeSurface</name> <operator>*</operator><operator>)</operator><name>p_anw</name></expr></init></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>info</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</struct>

<if_stmt><if>if <condition>(<expr><name><name>p_ns</name><operator>-&gt;</operator><name>pf_lock</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_ns</name><operator>-&gt;</operator><name>pf_lock</name></name><argument_list>(<argument><expr><name><name>p_ns</name><operator>-&gt;</operator><name>p_surface_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_ns</name><operator>-&gt;</operator><name>pf_lock2</name></name><argument_list>(<argument><expr><name><name>p_ns</name><operator>-&gt;</operator><name>p_surface_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>w</name></name> <operator>||</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>p_ns</name><operator>-&gt;</operator><name>pf_unlockAndPost</name></name><argument_list>(<argument><expr><name><name>p_ns</name><operator>-&gt;</operator><name>p_surface_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_anb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_anb</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_anb</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_anb</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_anb</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_anb</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>format</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>NativeSurface_unlockAndPost</name><parameter_list>(<parameter><decl><type><name>ANativeWindow</name> <modifier>*</modifier></type><name>p_anw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NativeSurface</name> <modifier>*</modifier></type><name>p_ns</name> <init>= <expr><operator>(</operator><name>NativeSurface</name> <operator>*</operator><operator>)</operator><name>p_anw</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>p_ns</name><operator>-&gt;</operator><name>pf_unlockAndPost</name></name><argument_list>(<argument><expr><name><name>p_ns</name><operator>-&gt;</operator><name>p_surface_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>LoadNativeSurfaceAPI</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>pf_winFromSurface</name></name> <operator>=</operator> <name>NativeSurface_fromSurface</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>pf_winRelease</name></name> <operator>=</operator> <name>NativeSurface_release</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>anw_api</name><operator>.</operator><name>winLock</name></name> <operator>=</operator> <name>NativeSurface_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>anw_api</name><operator>.</operator><name>unlockAndPost</name></name> <operator>=</operator> <name>NativeSurface_unlockAndPost</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>anw_api</name><operator>.</operator><name>setBuffersGeometry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>LoadNativeWindowAPI</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_library</name> <init>= <expr><call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"libandroid.so"</literal></expr></argument>, <argument><expr><name>RTLD_NOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_library</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LoadNativeSurfaceAPI</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>pf_winFromSurface</name></name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>p_library</name></expr></argument>, <argument><expr><literal type="string">"ANativeWindow_fromSurface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>pf_winRelease</name></name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>p_library</name></expr></argument>, <argument><expr><literal type="string">"ANativeWindow_release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>anw_api</name><operator>.</operator><name>winLock</name></name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>p_library</name></expr></argument>, <argument><expr><literal type="string">"ANativeWindow_lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>anw_api</name><operator>.</operator><name>unlockAndPost</name></name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>p_library</name></expr></argument>, <argument><expr><literal type="string">"ANativeWindow_unlockAndPost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>anw_api</name><operator>.</operator><name>setBuffersGeometry</name></name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>p_library</name></expr></argument>, <argument><expr><literal type="string">"ANativeWindow_setBuffersGeometry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_awh</name><operator>-&gt;</operator><name>pf_winFromSurface</name></name> <operator>&amp;&amp;</operator> <name><name>p_awh</name><operator>-&gt;</operator><name>pf_winRelease</name></name>
<operator>&amp;&amp;</operator> <name><name>p_awh</name><operator>-&gt;</operator><name>anw_api</name><operator>.</operator><name>winLock</name></name> <operator>&amp;&amp;</operator> <name><name>p_awh</name><operator>-&gt;</operator><name>anw_api</name><operator>.</operator><name>unlockAndPost</name></name>
<operator>&amp;&amp;</operator> <name><name>p_awh</name><operator>-&gt;</operator><name>anw_api</name><operator>.</operator><name>setBuffersGeometry</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>p_anw_dl</name></name> <operator>=</operator> <name>p_library</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>p_library</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LoadNativeSurfaceAPI</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type> <name>jni_env_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>jni_env_key_once</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>jni_detach_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JavaVM</name> <modifier>*</modifier></type><name>jvm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetJavaVM</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jvm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jvm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>jvm</name><operator>)</operator><operator>-&gt;</operator><name>DetachCurrentThread</name></name><argument_list>(<argument><expr><name>jvm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jni_env_key_create</name><parameter_list>()</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jni_env_key</name></expr></argument>, <argument><expr><name>jni_detach_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JNIEnv</name> <modifier>*</modifier></type>
<name>android_getEnvCommon</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>JavaVM</name> <modifier>*</modifier></type><name>jvm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>p_obj</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>jvm</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>p_obj</name> <operator>&amp;&amp;</operator> <name>jvm</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jni_env_key_once</name></expr></argument>, <argument><expr><name>jni_env_key_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>jni_env_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>env</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jvm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jvm</name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"android-jvm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jvm</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>jvm</name><operator>)</operator><operator>-&gt;</operator><name>GetEnv</name></name><argument_list>(<argument><expr><name>jvm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>JNI_VERSION_1_2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JNI_OK</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>JavaVMAttachArgs</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>JNI_VERSION_1_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>psz_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>group</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>jvm</name><operator>)</operator><operator>-&gt;</operator><name>AttachCurrentThread</name></name><argument_list>(<argument><expr><name>jvm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JNI_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>jni_env_key</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>jvm</name><operator>)</operator><operator>-&gt;</operator><name>DetachCurrentThread</name></name><argument_list>(<argument><expr><name>jvm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>env</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEnv</name> <modifier>*</modifier></type>
<name>android_getEnv</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>android_getEnvCommon</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>AndroidNativeWindow_onMouseEvent</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jlong</name></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>AndroidNativeWindow_onWindowSize</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jobject</name></type></decl></parameter>, <parameter><decl><type><name>jlong</name></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter>, <parameter><decl><type><name>jint</name></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>JNINativeMethod</name></type> <name><name>jni_callbacks</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"nativeOnMouseEvent"</literal></expr>, <expr><literal type="string">"(JIIII)V"</literal></expr>,
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>AndroidNativeWindow_onMouseEvent</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nativeOnWindowSize"</literal></expr>, <expr><literal type="string">"(JII)V"</literal></expr>,
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>AndroidNativeWindow_onWindowSize</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>InitJNIFields</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>jobject</name> <modifier>*</modifier></type><name>jobj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>lock</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>i_init_state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_init_state</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EXCEPTION</name><parameter_list>(<parameter><type><name>what</name></type></parameter>, <parameter><type><name>critical</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if( (*env)-&gt;ExceptionCheck(env) ) { msg_Err(p_obj, "%s failed", what); (*env)-&gt;ExceptionClear(env); if (critical) { i_init_state = 0; goto end; } } } while( 0 )</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_METHOD</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>args</name></type></parameter>, <parameter><type><name>critical</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { jfields.id = (*env)-&gt;GetMethodID(env, clazz, (str), (args)); CHECK_EXCEPTION("GetMethodID("str")", critical); } while( 0 )</cpp:value></cpp:define>




<expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EXCEPTION</name><argument_list>(<argument><expr><literal type="string">"AndroidNativeWindow clazz"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_METHOD</name><argument_list>(<argument><expr><name><name>AndroidNativeWindow</name><operator>.</operator><name>getVideoSurface</name></name></expr></argument>,
<argument><expr><literal type="string">"getVideoSurface"</literal></expr></argument>, <argument><expr><literal type="string">"()Landroid/view/Surface;"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_METHOD</name><argument_list>(<argument><expr><name><name>AndroidNativeWindow</name><operator>.</operator><name>getSubtitlesSurface</name></name></expr></argument>,
<argument><expr><literal type="string">"getSubtitlesSurface"</literal></expr></argument>, <argument><expr><literal type="string">"()Landroid/view/Surface;"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_METHOD</name><argument_list>(<argument><expr><name><name>AndroidNativeWindow</name><operator>.</operator><name>registerNative</name></name></expr></argument>,
<argument><expr><literal type="string">"registerNative"</literal></expr></argument>, <argument><expr><literal type="string">"(J)I"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_METHOD</name><argument_list>(<argument><expr><name><name>AndroidNativeWindow</name><operator>.</operator><name>unregisterNative</name></name></expr></argument>,
<argument><expr><literal type="string">"unregisterNative"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_METHOD</name><argument_list>(<argument><expr><name><name>AndroidNativeWindow</name><operator>.</operator><name>setVideoLayout</name></name></expr></argument>,
<argument><expr><literal type="string">"setVideoLayout"</literal></expr></argument>, <argument><expr><literal type="string">"(IIIIII)V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_METHOD</name><argument_list>(<argument><expr><name><name>SurfaceTexture</name><operator>.</operator><name>attachToGLContext</name></name></expr></argument>,
<argument><expr><literal type="string">"SurfaceTexture_attachToGLContext"</literal></expr></argument>, <argument><expr><literal type="string">"(I)Z"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_METHOD</name><argument_list>(<argument><expr><name><name>SurfaceTexture</name><operator>.</operator><name>detachFromGLContext</name></name></expr></argument>,
<argument><expr><literal type="string">"SurfaceTexture_detachFromGLContext"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_METHOD</name><argument_list>(<argument><expr><name><name>SurfaceTexture</name><operator>.</operator><name>waitAndUpdateTexImage</name></name></expr></argument>,
<argument><expr><literal type="string">"SurfaceTexture_waitAndUpdateTexImage"</literal></expr></argument>, <argument><expr><literal type="string">"([F)Z"</literal></expr></argument>,
<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_METHOD</name><argument_list>(<argument><expr><name><name>SurfaceTexture</name><operator>.</operator><name>getSurface</name></name></expr></argument>,
<argument><expr><literal type="string">"SurfaceTexture_getSurface"</literal></expr></argument>, <argument><expr><literal type="string">"()Landroid/view/Surface;"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>RegisterNatives</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>jni_callbacks</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"RegisterNatives failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_init_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AndroidNativeWindow</name><operator>.</operator><name>clazz</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_METHOD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_EXCEPTION</name></cpp:undef>

<expr_stmt><expr><name>i_init_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>i_init_state</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"AndroidNativeWindow jni init failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_CALL</name><parameter_list>(<parameter><type><name>what</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*p_env)-&gt;what(p_env, obj, jfields.method, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_ANWCALL</name><parameter_list>(<parameter><type><name>what</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*p_env)-&gt;what(p_env, p_awh-&gt;jobj, jfields.AndroidNativeWindow.method, ##__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_STEXCALL</name><parameter_list>(<parameter><type><name>what</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*p_env)-&gt;what(p_env, p_awh-&gt;jobj, jfields.SurfaceTexture.method, ##__VA_ARGS__)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>JNIEnv</name><modifier>*</modifier></type>
<name>AWindowHandler_getEnv</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>android_getEnvCommon</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>p_jvm</name></name></expr></argument>, <argument><expr><literal type="string">"AWindowHandler"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>AWindowHandler</name> <modifier>*</modifier></type>
<name>AWindowHandler_new</name><parameter_list>(<parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>, <parameter><decl><type><name>awh_events_t</name> <modifier>*</modifier></type><name>p_events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AWINDOW_REGISTER_FLAGS_SUCCESS</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AWINDOW_REGISTER_FLAGS_HAS_VIDEO_LAYOUT_LISTENER</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JavaVM</name> <modifier>*</modifier></type><name>p_jvm</name> <init>= <expr><call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"android-jvm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>jobj</name> <init>= <expr><call><name>var_InheritAddress</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"drawable-androidwindow"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_jvm</name> <operator>||</operator> <operator>!</operator><name>jobj</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"libvlc_media_player options not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_env</name> <operator>=</operator> <call><name>android_getEnvCommon</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_jvm</name></expr></argument>, <argument><expr><literal type="string">"AWindowHandler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_env</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"can't get JNIEnv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>InitJNIFields</name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"InitJNIFields failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"InitJNIFields success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_awh</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AWindowHandler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_awh</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>p_jvm</name></name> <operator>=</operator> <name>p_jvm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>jobj</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>wnd</name></name> <operator>=</operator> <name>wnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <operator>*</operator><name>p_events</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>jfloatArray</name></type> <name>jarray</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>NewFloatArray</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx_array</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>jint</name></type> <name>flags</name> <init>= <expr><call><name>JNI_ANWCALL</name><argument_list>(<argument><expr><name>CallIntMethod</name></expr></argument>, <argument><expr><name>registerNative</name></expr></argument>,
<argument><expr><operator>(</operator><name>jlong</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p_awh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AWINDOW_REGISTER_FLAGS_SUCCESS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"AWindow already registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>jobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LoadNativeWindowAPI</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>b_has_video_layout_listener</name></name> <operator>=</operator>
<name>flags</name> <operator>&amp;</operator> <name>AWINDOW_REGISTER_FLAGS_HAS_VIDEO_LAYOUT_LISTENER</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_awh</name><operator>-&gt;</operator><name>b_has_video_layout_listener</name></name></expr>)</condition>
<block>{<block_content>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vout_modules</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>wnd</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vout_modules</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>vout_modules</name></expr></argument>, <argument><expr><literal type="string">"gles2"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"gles2"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>vout_modules</name></expr></argument>, <argument><expr><literal type="string">"opengles2"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"opengles2"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>b_has_video_layout_listener</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vout_modules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_awh</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AWindowHandler_releaseANativeWindowEnv</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>, <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AWindow_ID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>id</name> <operator>&lt;</operator> <name>AWindow_Max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>p_anw</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>p_awh</name><operator>-&gt;</operator><name>pf_winRelease</name></name><argument_list>(<argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>p_anw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>p_anw</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>jsurface</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>jsurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>jsurface</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>AWindowHandler_destroy</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name> <init>= <expr><call><name>AWindowHandler_getEnv</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_env</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>JNI_ANWCALL</name><argument_list>(<argument><expr><name>CallVoidMethod</name></expr></argument>, <argument><expr><name>unregisterNative</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AWindowHandler_releaseANativeWindowEnv</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>AWindow_Video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AWindowHandler_releaseANativeWindowEnv</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>AWindow_Subtitles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>jobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_awh</name><operator>-&gt;</operator><name>p_anw_dl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>p_anw_dl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>native_window_api_t</name> <modifier>*</modifier></type>
<name>AWindowHandler_getANativeWindowAPI</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_awh</name><operator>-&gt;</operator><name>anw_api</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>WindowHandler_NewSurfaceEnv</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>, <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AWindow_ID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jobject</name></type> <name>jsurface</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AWindow_Video</name></expr>:</case>
<expr_stmt><expr><name>jsurface</name> <operator>=</operator> <call><name>JNI_ANWCALL</name><argument_list>(<argument><expr><name>CallObjectMethod</name></expr></argument>, <argument><expr><name>getVideoSurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AWindow_Subtitles</name></expr>:</case>
<expr_stmt><expr><name>jsurface</name> <operator>=</operator> <call><name>JNI_ANWCALL</name><argument_list>(<argument><expr><name>CallObjectMethod</name></expr></argument>, <argument><expr><name>getSubtitlesSurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AWindow_SurfaceTexture</name></expr>:</case>
<expr_stmt><expr><name>jsurface</name> <operator>=</operator> <call><name>JNI_STEXCALL</name><argument_list>(<argument><expr><name>CallObjectMethod</name></expr></argument>, <argument><expr><name>getSurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jsurface</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>jsurface</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jsurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jsurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ANativeWindow</name> <modifier>*</modifier></type>
<name>AWindowHandler_getANativeWindow</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AWindow_ID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>id</name> <operator>&lt;</operator> <name>AWindow_Max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>p_anw</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>p_anw</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_env</name> <operator>=</operator> <call><name>AWindowHandler_getEnv</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_env</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WindowHandler_NewSurfaceEnv</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>jsurface</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>p_anw</name> <operator>=</operator> <call><name><name>p_awh</name><operator>-&gt;</operator><name>pf_winFromSurface</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>,
<argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>jsurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>p_anw</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>jobject</name></type>
<name>AWindowHandler_getSurface</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AWindow_ID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>id</name> <operator>&lt;</operator> <name>AWindow_Max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>jsurface</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>jsurface</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AWindowHandler_getANativeWindow</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>p_awh</name><operator>-&gt;</operator><name>views</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>jsurface</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>AWindowHandler_releaseANativeWindow</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AWindow_ID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name> <init>= <expr><call><name>AWindowHandler_getEnv</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_env</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AWindowHandler_releaseANativeWindowEnv</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>AWindowHandler</name> <modifier>*</modifier></type><name>jlong_AWindowHandler</name><parameter_list>(<parameter><decl><type><name>jlong</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>AWindowHandler</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>handle</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AndroidNativeWindow_onMouseEvent</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>env</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>clazz</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name> <init>= <expr><call><name>jlong_AWindowHandler</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>p_awh</name></macro><expr_stmt><expr><operator>-&gt;</operator><macro><name>event</name></macro><operator>.</operator><macro><name>cb</name></macro><operator>.</operator><macro><name>on_new_mouse_coords</name><argument_list>(<argument>p_awh-&gt;wnd</argument>,
<argument>&amp; (struct awh_mouse_coords) { action</argument>, <argument>button</argument>, <argument>x</argument>, <argument>y }</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AndroidNativeWindow_onWindowSize</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>handle</name></decl></parameter>,
<parameter><decl><type><name>jint</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>env</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>clazz</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name> <init>= <expr><call><name>jlong_AWindowHandler</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_awh</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>cb</name><operator>.</operator><name>on_new_window_size</name></name><argument_list>(<argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>wnd</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>AWindowHandler_canSetVideoLayout</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_awh</name><operator>-&gt;</operator><name>b_has_video_layout_listener</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>AWindowHandler_setVideoLayout</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_visible_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_visible_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_sar_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sar_den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>b_has_video_layout_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name> <init>= <expr><call><name>AWindowHandler_getEnv</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_env</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>JNI_ANWCALL</name><argument_list>(<argument><expr><name>CallVoidMethod</name></expr></argument>, <argument><expr><name>setVideoLayout</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument>,
<argument><expr><name>i_visible_width</name></expr></argument>,<argument><expr><name>i_visible_height</name></expr></argument>, <argument><expr><name>i_sar_num</name></expr></argument>, <argument><expr><name>i_sar_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>SurfaceTexture_attachToGLContext</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tex_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name> <init>= <expr><call><name>android_getEnvCommon</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>p_jvm</name></name></expr></argument>, <argument><expr><literal type="string">"SurfaceTexture"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_env</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>JNI_STEXCALL</name><argument_list>(<argument><expr><name>CallBooleanMethod</name></expr></argument>, <argument><expr><name>attachToGLContext</name></expr></argument>, <argument><expr><name>tex_name</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>SurfaceTexture_detachFromGLContext</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name> <init>= <expr><call><name>android_getEnvCommon</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>p_jvm</name></name></expr></argument>, <argument><expr><literal type="string">"SurfaceTexture"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_env</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>JNI_STEXCALL</name><argument_list>(<argument><expr><name>CallVoidMethod</name></expr></argument>, <argument><expr><name>detachFromGLContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AWindowHandler_releaseANativeWindowEnv</name><argument_list>(<argument><expr><name>p_awh</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>AWindow_SurfaceTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseFloatArrayElements</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx_array</name></name></expr></argument>,
<argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx</name></name></expr></argument>,
<argument><expr><name>JNI_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>SurfaceTexture_waitAndUpdateTexImage</name><parameter_list>(<parameter><decl><type><name>AWindowHandler</name> <modifier>*</modifier></type><name>p_awh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_transform_mtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name> <init>= <expr><call><name>android_getEnvCommon</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>p_jvm</name></name></expr></argument>, <argument><expr><literal type="string">"SurfaceTexture"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_env</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseFloatArrayElements</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx_array</name></name></expr></argument>,
<argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx</name></name></expr></argument>,
<argument><expr><name>JNI_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>JNI_STEXCALL</name><argument_list>(<argument><expr><name>CallBooleanMethod</name></expr></argument>, <argument><expr><name>waitAndUpdateTexImage</name></expr></argument>,
<argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx_array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetFloatArrayElements</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>,
<argument><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx_array</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_transform_mtx</name> <operator>=</operator> <name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_awh</name><operator>-&gt;</operator><name>stex</name><operator>.</operator><name>jtransform_mtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
