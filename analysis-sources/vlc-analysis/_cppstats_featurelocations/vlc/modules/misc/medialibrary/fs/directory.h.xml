<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\medialibrary\fs\directory.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SD_DIRECTORY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD_DIRECTORY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;medialibrary/filesystem/IDirectory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;medialibrary/filesystem/IFile.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>vlc</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>medialibrary</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>namespace</name> <operator>::</operator><name>medialibrary</name><operator>::</operator><name>fs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SDDirectory</name> <range>: <expr><name>public</name> <name>IDirectory</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>SDDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>mrl</name></expr></argument>, <argument><expr><name>SDFileSystemFactory</name> <operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>mrl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>files</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IDirectory</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>dirs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IDevice</name></expr></argument>&gt;</argument_list></name> <macro><name>device</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IFile</name></expr></argument>&gt;</argument_list></name> <macro><name>file</name><argument_list>( <argument>const std::string&amp; mrl</argument> )</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>read</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>m_mrl</name></expr>;
<expr><name>SDFileSystemFactory</name> <operator>&amp;</operator><name>m_fs</name></expr>;

<expr><name>mutable</name> <name>bool</name> <name>m_read_done</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_files</name></expr>;
<expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IDirectory</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_dirs</name></expr>;
<expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IDevice</name></expr></argument>&gt;</argument_list></name> <name>m_device</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt> 
</block_content>}</block></decl></decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
