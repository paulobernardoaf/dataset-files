<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\medialibrary\fs\file.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SD_FILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD_FILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;medialibrary/filesystem/IFile.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>vlc</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>medialibrary</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>namespace</name> <operator>::</operator><name>medialibrary</name><operator>::</operator><name>fs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SDFile</name> <range>: <expr><name>public</name> <name>IFile</name>
<block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>SDFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>mrl</name></expr></argument>)</argument_list></call></expr>;
<expr><name>virtual</name> <operator>~</operator><call><name>SDFile</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>mrl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>extension</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>unsigned</name> <name>int</name> <macro><name>lastModificationDate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>int64_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>inline</specifier> <name>bool</name> <macro><name>isNetwork</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>m_mrl</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>m_extension</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt> 
</block_content>}</block></decl></decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
