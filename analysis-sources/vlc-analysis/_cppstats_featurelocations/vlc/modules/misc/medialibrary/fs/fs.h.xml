<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\medialibrary\fs\fs.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SD_FS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD_FS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_threads.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cxx_helpers.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;medialibrary/filesystem/IFileSystemFactory.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>input_item_t</name>;</struct_decl>
<struct_decl>struct <name>services_discovery_t</name>;</struct_decl>
<struct_decl>struct <name>libvlc_int_t</name>;</struct_decl>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<function_decl><type><name>void</name></type> <name>vlc_sd_Destroy</name><parameter_list>(<parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></extern>

<decl_stmt><decl><type><name>namespace</name></type> <name>medialibrary</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>IDeviceListerCb</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>vlc</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>medialibrary</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>namespace</name> <operator>::</operator><name>medialibrary</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>namespace</name> <operator>::</operator><name>medialibrary</name><operator>::</operator><name>fs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SDFileSystemFactory</name> <range>: <expr><name>public</name> <name>IFileSystemFactory</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SDFileSystemFactory</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator><name>m_parent</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>scheme</name></expr></argument>)</argument_list></call></expr>;

<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IDirectory</name></expr></argument>&gt;</argument_list></name>
<macro><name>createDirectory</name><argument_list>(<argument>const std::string &amp;mrl</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>fs</name><operator>::</operator><name>IFile</name></expr></argument>&gt;</argument_list></name>
<macro><name>createFile</name><argument_list>(<argument>const std::string&amp; mrl</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IDevice</name></expr></argument>&gt;</argument_list></name>
<macro><name>createDevice</name><argument_list>(<argument>const std::string &amp;uuid</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IDevice</name></expr></argument>&gt;</argument_list></name>
<macro><name>createDeviceFromMrl</name><argument_list>(<argument>const std::string &amp;path</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name>
<macro><name>refreshDevices</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name>
<macro><name>isMrlSupported</name><argument_list>(<argument>const std::string &amp;path</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name>
<macro><name>isNetworkFileSystem</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator>
<macro><name>scheme</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name>
<macro><name>start</name><argument_list>(<argument>IFileSystemFactoryCb *m_callbacks</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name>
<macro><name>stop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>libvlc_int_t</name> <operator>*</operator>
<macro><name>libvlc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>void</name> <call><name>onDeviceAdded</name><argument_list>(<argument><expr><name>input_item_t</name> <operator>*</operator><name>media</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>onDeviceRemoved</name><argument_list>(<argument><expr><name>input_item_t</name> <operator>*</operator><name>media</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>vlc_object_t</name> <operator>*</operator><specifier>const</specifier> <name>m_parent</name></expr>;
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>m_scheme</name></expr>;
<expr><name>IFileSystemFactoryCb</name> <operator>*</operator><name>m_callbacks</name></expr>;

<expr><name>vlc</name><operator>::</operator><name>threads</name><operator>::</operator><name>mutex</name> <name>m_mutex</name></expr>;
<expr><name>vlc</name><operator>::</operator><name>threads</name><operator>::</operator><name>condition_variable</name> <name>m_itemAddedCond</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IDevice</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_devices</name></expr>;
<expr><name>using</name> <name>SdPtr</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>services_discovery_t</name></expr></argument>, <argument><expr><name>decltype</name><operator>(</operator><operator>&amp;</operator><name>vlc_sd_Destroy</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SdPtr</name></expr></argument>&gt;</argument_list></name> <name>m_sds</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt> 
</block_content>}</block></decl></decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
