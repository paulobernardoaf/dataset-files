<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\medialibrary\fs\device.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SD_DEVICE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD_DEVICE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;medialibrary/filesystem/IDevice.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>vlc</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>medialibrary</name> <block>{<block_content>

<expr_stmt><expr><name>using</name> <name>namespace</name> <operator>::</operator><name>medialibrary</name><operator>::</operator><name>fs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SDDevice</name> <range>: <expr><name>public</name> <name>IDevice</name>
<block>{
<expr><name>public</name><operator>:</operator>
<macro><name>SDDevice</name><argument_list>( <argument>const std::string&amp; uuid</argument>, <argument>std::string mrl</argument> )</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>uuid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isRemovable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPresent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>mountpoint</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>addMountpoint</name><argument_list>( <argument>std::string mrl</argument> )</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>removeMountpoint</name><argument_list>( <argument>const std::string&amp; mrl</argument> )</argument_list></macro> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>matchesMountpoint</name><argument_list>( <argument>const std::string&amp; mrl</argument> )</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>relativeMrl</name><argument_list>( <argument>const std::string&amp; absoluteMrl</argument> )</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>absoluteMrl</name><argument_list>( <argument>const std::string&amp; relativeMrl</argument> )</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;


<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>m_uuid</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_mountpoints</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt> 
</block_content>}</block></decl></decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
