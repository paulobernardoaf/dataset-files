<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\inhibit\dbus.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbus/dbus.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_inhibit.h&gt;</cpp:file></cpp:include>

<enum>enum <name>vlc_inhibit_api</name>
<block>{
<decl><name>FDO_SS</name></decl>, 
<decl><name>FDO_PM</name></decl>, 
<decl><name>MATE</name></decl>, 
<decl><name>GNOME</name></decl>, 
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_API</name></cpp:macro> <cpp:value>(GNOME+1)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>dbus_service</name><index>[]</index><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><index>[<expr><name>FDO_SS</name></expr>]</index> <operator>=</operator> <literal type="string">"org.freedesktop.ScreenSaver"</literal></expr>,
<expr><index>[<expr><name>FDO_PM</name></expr>]</index> <operator>=</operator> <literal type="string">"org.freedesktop.PowerManagement.Inhibit"</literal></expr>,
<expr><index>[<expr><name>MATE</name></expr>]</index> <operator>=</operator> <literal type="string">"org.mate.SessionManager"</literal></expr>,
<expr><index>[<expr><name>GNOME</name></expr>]</index> <operator>=</operator> <literal type="string">"org.gnome.SessionManager"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>dbus_path</name><index>[]</index><index>[<expr><literal type="number">33</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><index>[<expr><name>FDO_SS</name></expr>]</index> <operator>=</operator> <literal type="string">"/ScreenSaver"</literal></expr>,
<expr><index>[<expr><name>FDO_PM</name></expr>]</index> <operator>=</operator> <literal type="string">"/org/freedesktop/PowerManagement"</literal></expr>,
<expr><index>[<expr><name>MATE</name></expr>]</index> <operator>=</operator> <literal type="string">"/org/mate/SessionManager"</literal></expr>,
<expr><index>[<expr><name>GNOME</name></expr>]</index> <operator>=</operator> <literal type="string">"/org/gnome/SessionManager"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>dbus_method_uninhibit</name><index>[]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><index>[<expr><name>FDO_SS</name></expr>]</index> <operator>=</operator> <literal type="string">"UnInhibit"</literal></expr>,
<expr><index>[<expr><name>FDO_PM</name></expr>]</index> <operator>=</operator> <literal type="string">"UnInhibit"</literal></expr>,
<expr><index>[<expr><name>MATE</name></expr>]</index> <operator>=</operator> <literal type="string">"Uninhibit"</literal></expr>,
<expr><index>[<expr><name>GNOME</name></expr>]</index> <operator>=</operator> <literal type="string">"Uninhibit"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>vlc_inhibit_sys</name>
<block>{
<decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusPendingCall</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_uint32_t</name></type> <name>cookie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_inhibit_api</name></name></type> <name>api</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Inhibit</name><parameter_list>(<parameter><decl><type><name>vlc_inhibit_t</name> <modifier>*</modifier></type><name>ih</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_inhibit_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>ih</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_inhibit_api</name></name></type> <name>type</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>api</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>dbus_pending_call_block</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>dbus_pending_call_steal_reply</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_pending_call_unref</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_get_args</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cookie</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"got cookie %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>cookie</name></name> <operator>==</operator> <operator>!</operator><name>flags</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><ternary><condition><expr><name>flags</name></expr> ?</condition><then> <expr><literal type="string">"Inhibit"</literal></expr> </then><else>: <expr><name><name>dbus_method_uninhibit</name><index>[<expr><name>type</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>dbus_message_new_method_call</name><argument_list>(<argument><expr><name><name>dbus_service</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dbus_path</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dbus_service</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>app</name> <init>= <expr><name>PACKAGE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Playing some media."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cookie</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>MATE</name></expr>:</case>
<case>case <expr><name>GNOME</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>dbus_uint32_t</name></type> <name>xid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>dbus_uint32_t</name></type> <name>gflags</name> <init>= <expr><literal type="number">0xC</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dbus_message_append_args</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>app</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xid</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reason</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gflags</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dbus_message_append_args</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>app</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reason</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name>
<operator>||</operator> <operator>!</operator><call><name>dbus_connection_send_with_reply</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cookie</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dbus_message_append_args</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>DBUS_TYPE_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>dbus_connection_send</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cookie</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dbus_connection_flush</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_inhibit_t</name> <modifier>*</modifier></type><name>ih</name> <init>= <expr><operator>(</operator><name>vlc_inhibit_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_inhibit_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>dbus_bus_get_private</name> <argument_list>(<argument><expr><name>DBUS_BUS_SESSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"cannot connect to session bus: %s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cookie</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ih</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_API</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dbus_bus_name_has_owner</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>dbus_service</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"found service %s"</literal></expr></argument>, <argument><expr><name><name>dbus_service</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>api</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ih</name><operator>-&gt;</operator><name>inhibit</name></name> <operator>=</operator> <name>Inhibit</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"cannot find service %s"</literal></expr></argument>, <argument><expr><name><name>dbus_service</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_inhibit_t</name> <modifier>*</modifier></type><name>ih</name> <init>= <expr><operator>(</operator><name>vlc_inhibit_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_inhibit_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>ih</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dbus_pending_call_cancel</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_pending_call_unref</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dbus_connection_close</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_connection_unref</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"D-Bus screensaver"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"D-Bus screen saver inhibition"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name> <argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>
<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"inhibit"</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name> <argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>
</unit>
