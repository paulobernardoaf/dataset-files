<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\securetransport.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/Security.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/SecureTransport.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ioErr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ioErr</name></cpp:macro> <cpp:value>-36</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <name>CFMutableArrayRef</name></type> <name>alpnToCFArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>alpn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CFMutableArrayRef</name></type> <name>alpnValues</name> <init>=
<expr><call><name>CFArrayCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kCFTypeArrayCallBacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>alpn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>alpnVal</name> <init>=
<expr><call><name>CFStringCreateWithCString</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name><name>alpn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>kCFStringEncodingASCII</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alpnVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>alpnValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CFArrayAppendValue</name><argument_list>(<argument><expr><name>alpnValues</name></expr></argument>, <argument><expr><name>alpnVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>alpnVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>alpnValues</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>CFArrayALPNCopyFirst</name><parameter_list>(<parameter><decl><type><name>CFArrayRef</name></type> <name>alpnArray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CFIndex</name></type> <name>count</name> <init>= <expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>alpnArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>alpnVal</name> <init>= <expr><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>alpnArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>FromCFString</name><argument_list>(<argument><expr><name>alpnVal</name></expr></argument>, <argument><expr><name>kCFStringEncodingASCII</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenClient</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenServer</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"TLS support for OS X and iOS"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"tls client"</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>OpenClient</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_NETWORK</argument>)</argument_list></macro>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"TLS server support for OS X"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"tls server"</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>OpenServer</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_NETWORK</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cfKeyHost</name></cpp:macro> <cpp:value>CFSTR("host")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cfKeyCertificate</name></cpp:macro> <cpp:value>CFSTR("certificate")</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>CFMutableArrayRef</name></type> <name>whitelist</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>server_cert_chain</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_tls_creds_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>vlc_tls_t</name></type> <name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLContextRef</name></type> <name>p_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tls_creds_sys_t</name> <modifier>*</modifier></type><name>p_cred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_send_buffered_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_blocking_send</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_handshaked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_server_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_tls_st_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>st_Error</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>errSSLWouldBlock</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>errSSLClosedGraceful</name></expr>:</case>
<case>case <expr><name>errSSLClosedAbort</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Connection closed with code %d"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Found error %d"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>st_SocketReadFunc</name> <parameter_list>(<parameter><decl><type><name>SSLConnectionRef</name></type> <name>connection</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dataLength</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><operator>(</operator><name>vlc_tls_t</name> <operator>*</operator><operator>)</operator><name>connection</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>session</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name> <init>= <expr><block>{
<expr><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>data</name></expr>,
<expr><operator>.</operator><name>iov_len</name> <operator>=</operator> <operator>*</operator><name>dataLength</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>retValue</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name><name>sys</name><operator>-&gt;</operator><name>sock</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>readv</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"found eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>errSSLClosedGraceful</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENOENT</name></expr>:</case>

<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>errSSLClosedGraceful</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ECONNRESET</name></expr>:</case>
<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>errSSLClosedAbort</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EAGAIN</name></expr>:</case>
<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>errSSLWouldBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_blocking_send</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"try to read %zu bytes, "</literal>
<literal type="string">"got error %d"</literal></expr></argument>, <argument><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>ioErr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>+</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>-=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>dataLength</name> <operator>-=</operator> <name><name>iov</name><operator>.</operator><name>iov_len</name></name></expr>;</expr_stmt>
<return>return <expr><name>retValue</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>st_SocketWriteFunc</name> <parameter_list>(<parameter><decl><type><name>SSLConnectionRef</name></type> <name>connection</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dataLength</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><operator>(</operator><name>vlc_tls_t</name> <operator>*</operator><operator>)</operator><name>connection</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>session</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name> <init>= <expr><block>{
<expr><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>data</name></expr>,
<expr><operator>.</operator><name>iov_len</name> <operator>=</operator> <operator>*</operator><name>dataLength</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>retValue</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name><name>sys</name><operator>-&gt;</operator><name>sock</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>writev</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EAGAIN</name></expr>:</case>
<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>errSSLWouldBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_blocking_send</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EPIPE</name></expr>:</case>
<case>case <expr><name>ECONNRESET</name></expr>:</case>
<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>errSSLClosedAbort</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"error while writing: %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>ioErr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>+</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>-=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>dataLength</name> <operator>-=</operator> <name><name>iov</name><operator>.</operator><name>iov_len</name></name></expr>;</expr_stmt>
<return>return <expr><name>retValue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>st_validateServerCertificate</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>session</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecCertificateRef</name></type> <name>leaf_cert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecTrustRef</name></type> <name>trust</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name> <init>= <expr><call><name>SSLCopyPeerTrust</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trust</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name> <operator>||</operator> <name>trust</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"error getting certifictate chain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>cfHostname</name> <init>= <expr><call><name>CFStringCreateWithCString</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>,
<argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecTrustSetAnchorCertificates</name><argument_list>(<argument><expr><name>trust</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"error setting anchor certificates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SecTrustResultType</name></type> <name>trust_eval_result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecTrustEvaluate</name><argument_list>(<argument><expr><name>trust</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trust_eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"error calling SecTrustEvaluate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>trust_eval_result</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kSecTrustResultUnspecified</name></expr>:</case>
<case>case <expr><name>kSecTrustResultProceed</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cerfificate verification successful, result is %d"</literal></expr></argument>, <argument><expr><name>trust_eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>

<case>case <expr><name>kSecTrustResultRecoverableTrustFailure</name></expr>:</case>
<case>case <expr><name>kSecTrustResultDeny</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cerfificate verification failed, result is %d"</literal></expr></argument>, <argument><expr><name>trust_eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>cert_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSLCopyPeerCertificates</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name> <operator>||</operator> <operator>!</operator><name>cert_chain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>cert_chain</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cert_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>leaf_cert</name> <operator>=</operator> <operator>(</operator><name>SecCertificateRef</name><operator>)</operator><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>cert_chain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRetain</name><argument_list>(<argument><expr><name>leaf_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cert_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>SecTrustGetCertificateCount</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>leaf_cert</name> <operator>=</operator> <call><name>SecTrustGetCertificateAtIndex</name><argument_list>(<argument><expr><name>trust</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRetain</name><argument_list>(<argument><expr><name>leaf_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name>CFIndex</name></type> <name>max</name> <init>= <expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_cred</name><operator>-&gt;</operator><name>whitelist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>CFIndex</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>dict</name> <init>= <expr><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_cred</name><operator>-&gt;</operator><name>whitelist</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>knownHost</name> <init>= <expr><operator>(</operator><name>CFStringRef</name><operator>)</operator><call><name>CFDictionaryGetValue</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>cfKeyHost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecCertificateRef</name></type> <name>knownCert</name> <init>= <expr><operator>(</operator><name>SecCertificateRef</name><operator>)</operator><call><name>CFDictionaryGetValue</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>cfKeyCertificate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>knownHost</name> <operator>||</operator> <operator>!</operator><name>knownCert</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CFEqual</name><argument_list>(<argument><expr><name>knownHost</name></expr></argument>, <argument><expr><name>cfHostname</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>CFEqual</name><argument_list>(<argument><expr><name>knownCert</name></expr></argument>, <argument><expr><name>leaf_cert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"certificate already accepted, continuing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>











<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"You attempted to reach %s. "</literal>
<literal type="string">"However the security certificate presented by the server "</literal>
<literal type="string">"is unknown and could not be authenticated by any trusted "</literal>
<literal type="string">"Certification Authority. "</literal>
<literal type="string">"This problem may be caused by a configuration error "</literal>
<literal type="string">"or an attempt to breach your security or your privacy.\n\n"</literal>
<literal type="string">"If in doubt, abort now.\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>answer</name> <init>= <expr><call><name>vlc_dialog_wait_question</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>,
<argument><expr><name>VLC_DIALOG_QUESTION_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Abort"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Accept certificate temporarily"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Insecure site"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vlc_gettext</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>answer</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Proceeding despite of failed certificate validation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>keys</name><index>[]</index></name> <init>= <expr><block>{<expr><name>cfKeyHost</name></expr>, <expr><name>cfKeyCertificate</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>values</name><index>[]</index></name> <init>= <expr><block>{<expr><name>cfHostname</name></expr>, <expr><name>leaf_cert</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>dict</name> <init>= <expr><call><name>CFDictionaryCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryKeyCallBacks</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"error creating dict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFArrayAppendValue</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_cred</name><operator>-&gt;</operator><name>whitelist</name></name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></else></if_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfHostname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cfHostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>leaf_cert</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>leaf_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>st_Handshake</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>alp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>session</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>retValue</name> <init>= <expr><call><name>SSLHandshake</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>TARGET_OS_OSX</name> <operator>&amp;&amp;</operator> <name>MAC_OS_X_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">101302</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>TARGET_OS_IPHONE</name> <operator>&amp;&amp;</operator> <name>__IPHONE_OS_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">110000</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>TARGET_OS_TV</name> <operator>&amp;&amp;</operator> <name>__TV_OS_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">110000</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>TARGET_OS_WATCH</name> <operator>&amp;&amp;</operator> <name>__WATCH_OS_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">40000</literal><operator>)</operator></expr></cpp:if>



<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wpartial-availability"</cpp:literal></cpp:pragma>


<if_stmt><if>if <condition>(<expr><name>alp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SSLCopyALPNProtocols</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>alpnArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>res</name> <init>= <expr><call><name>SSLCopyALPNProtocols</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alpnArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <name>alpnArray</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>alp</name> <operator>=</operator> <call><name>CFArrayALPNCopyFirst</name><argument_list>(<argument><expr><name>alpnArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>alpnArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>alp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>alp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>alp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<if_stmt><if>if <condition>(<expr><name>alp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>alp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>retValue</name> <operator>==</operator> <name>errSSLWouldBlock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"handshake is blocked, try again later"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>b_blocking_send</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>retValue</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>noErr</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>b_server_mode</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <call><name>st_validateServerCertificate</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"handshake completed successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_handshaked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>errSSLServerAuthCompleted</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"SSLHandshake returned errSSLServerAuthCompleted, continuing handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>st_Handshake</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>alp</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>errSSLConnectionRefused</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"connection was refused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>errSSLNegotiation</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"cipher suite negotiation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>errSSLFatalAlert</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"fatal error occurred during handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"handshake returned error %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>retValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>st_GetFD</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>session</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>sock</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_tls_GetPollFD</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>st_Send</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>session</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

















<decl_stmt><decl><type><name>int</name></type> <name>againErr</name> <init>= <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>b_server_mode</name></name></expr> ?</condition><then> <expr><name>EAGAIN</name></expr> </then><else>: <expr><name>EINTR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>actualSize</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>i_send_buffered_bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSLWrite</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>actualSize</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_send_buffered_bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_send_buffered_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>errSSLWouldBlock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>againErr</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSLWrite</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actualSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>errSSLWouldBlock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_send_buffered_bytes</name></name> <operator>=</operator> <name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>againErr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr> ?</condition><then> <expr><call><name>st_Error</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>actualSize</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>st_Recv</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>session</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>actualSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name> <init>= <expr><call><name>SSLRead</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actualSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>errSSLWouldBlock</name> <operator>&amp;&amp;</operator> <name>actualSize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>actualSize</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>errSSLClosedNoNotify</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>errSSLClosedGraceful</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Got close notification with code %i"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr> ?</condition><then> <expr><call><name>st_Error</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>actualSize</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>st_SessionShutdown</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>duplex</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>session</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"shutdown TLS session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>duplex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>b_handshaked</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSLClose</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot close ssl context (%i)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>st_SessionClose</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>session</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"close TLS session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>SSLDisposeContext</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"error deleting context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_tls_operations</name></name></type> <name>st_ops</name> <init>=
<expr><block>{
<expr><name>st_GetFD</name></expr>,
<expr><name>st_Recv</name></expr>,
<expr><name>st_Send</name></expr>,
<expr><name>st_SessionShutdown</name></expr>,
<expr><name>st_SessionClose</name></expr>,
}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>vlc_tls_t</name> <modifier>*</modifier></type><name>st_SessionOpenCommon</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name>vlc_tls_creds_sys_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>,
<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_cred</name></name> <operator>=</operator> <name>crd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_handshaked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_blocking_send</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_send_buffered_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_server_mode</name></name> <operator>=</operator> <name>b_server</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>tls</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>st_ops</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SSLContextRef</name></type> <name>p_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<expr_stmt><expr><name>p_context</name> <operator>=</operator> <call><name>SSLCreateContext</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_server</name></expr> ?</condition><then> <expr><name>kSSLServerSide</name></expr> </then><else>: <expr><name>kSSLClientSide</name></expr></else></ternary></expr></argument>, <argument><expr><name>kSSLStreamType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_context</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot create ssl context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>SSLNewContext</name><argument_list>(<argument><expr><name>b_server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_context</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"error calling SSLNewContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name> <operator>=</operator> <name>p_context</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name> <init>= <expr><call><name>SSLSetIOFuncs</name><argument_list>(<argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>st_SocketReadFunc</name></expr></argument>, <argument><expr><name>st_SocketWriteFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot set io functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSLSetConnection</name><argument_list>(<argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot set connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>tls</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>st_SessionClose</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tls_t</name> <modifier>*</modifier></type><name>st_ClientSessionOpen</name><parameter_list>(<parameter><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>, <parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>alpn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"open TLS session for %s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name> <init>= <expr><call><name>st_SessionOpenCommon</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>crd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tls</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name> <init>= <expr><call><name>SSLSetPeerDomainName</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot set peer domain name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>TARGET_OS_OSX</name> <operator>&amp;&amp;</operator> <name>MAC_OS_X_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">101302</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>TARGET_OS_IPHONE</name> <operator>&amp;&amp;</operator> <name>__IPHONE_OS_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">110000</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>TARGET_OS_TV</name> <operator>&amp;&amp;</operator> <name>__TV_OS_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">110000</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>TARGET_OS_WATCH</name> <operator>&amp;&amp;</operator> <name>__WATCH_OS_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">40000</literal><operator>)</operator></expr></cpp:if>



<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wpartial-availability"</cpp:literal></cpp:pragma>


<if_stmt><if>if <condition>(<expr><name>alpn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SSLSetALPNProtocols</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CFMutableArrayRef</name></type> <name>alpnValues</name> <init>= <expr><call><name>alpnToCFArray</name><argument_list>(<argument><expr><name>alpn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpnValues</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot create CFMutableArray for ALPN values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name> <init>= <expr><call><name>SSLSetALPNProtocols</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><name>alpnValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"failed setting ALPN protocols (%i)"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>alpnValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"Ignoring ALPN request due to lack of support in the backend. Proxy behavior potentially undefined."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<if_stmt><if>if <condition>(<expr><name>alpn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"Compiled in SDK without ALPN support. Proxy behavior potentially undefined."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:warning>#<cpp:directive>warning</cpp:directive> ALPN support in your SDK version missing (need 10.13.2), proxy behavior potentially undefined (rdar:</cpp:warning>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSLSetSessionOption</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><name>kSSLSessionOptionBreakOnServerAuth</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot set session option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSLSetEnableCertVerify</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"error setting enable cert verify"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>tls</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>st_SessionShutdown</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>st_SessionClose</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>st_ClientDestroy</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"close secure transport client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tls_creds_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>whitelist</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>whitelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_tls_client_operations</name></name></type> <name>st_ClientOps</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>st_ClientSessionOpen</name></expr>,
<expr><operator>.</operator><name>handshake</name> <operator>=</operator> <name>st_Handshake</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>st_ClientDestroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenClient</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"open st client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tls_creds_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>whitelist</name></name> <operator>=</operator> <call><name>CFArrayCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kCFTypeArrayCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>server_cert_chain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crd</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>st_ClientOps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>




<function><type><specifier>static</specifier> <name>vlc_tls_t</name> <modifier>*</modifier></type><name>st_ServerSessionOpen</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>, <parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>alpn</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>alpn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"open TLS server session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name> <init>= <expr><call><name>st_SessionOpenCommon</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>crd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tls</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tls_st_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>vlc_tls_st_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tls_creds_sys_t</name> <modifier>*</modifier></type><name>p_cred_sys</name> <init>= <expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name> <init>= <expr><call><name>SSLSetCertificate</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><name><name>p_cred_sys</name><operator>-&gt;</operator><name>server_cert_chain</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot set server certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>tls</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>st_SessionShutdown</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>st_SessionClose</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>st_ServerHandshake</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>alp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>st_Handshake</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>alp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>st_ServerDestroy</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"close secure transport server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tls_creds_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>server_cert_chain</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>server_cert_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_tls_server_operations</name></name></type> <name>st_ServerOps</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>st_ServerSessionOpen</name></expr>,
<expr><operator>.</operator><name>handshake</name> <operator>=</operator> <name>st_ServerHandshake</name></expr>,
<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>st_ServerDestroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenServer</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>





<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"open st server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<decl_stmt><decl><type><name>SecKeychainAttribute</name></type> <name>attrib</name> <init>= <expr><block>{ <expr><name>kSecLabelItemAttr</name></expr>, <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cert</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecKeychainAttributeList</name></type> <name>attrList</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>attrib</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecKeychainSearchRef</name></type> <name>searchReference</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecKeychainSearchCreateFromAttributes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kSecCertificateItemClass</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>attrList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>searchReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name> <operator>||</operator> <name>searchReference</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"Cannot find certificate with alias %s"</literal></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SecKeychainItemRef</name></type> <name>itemRef</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecKeychainSearchCopyNext</name><argument_list>(<argument><expr><name>searchReference</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"Cannot get certificate with alias %s, error: %d"</literal></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>searchReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>SecCertificateRef</name></type> <name>certificate</name> <init>= <expr><operator>(</operator><name>SecCertificateRef</name><operator>)</operator><name>itemRef</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecIdentityRef</name></type> <name>cert_identity</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecIdentityCreateWithCertificate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>certificate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"Cannot get private key for certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<decl_stmt><decl><type><name>SecPolicyRef</name></type> <name>policy</name> <init>= <expr><call><name>SecPolicyCreateSSL</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecTrustRef</name></type> <name>trust_ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecTrustCreateWithCertificates</name><argument_list>(<argument><expr><operator>(</operator><name>CFArrayRef</name><operator>)</operator><name>certificate</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trust_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"Cannot create trust"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SecTrustResultType</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecTrustEvaluate</name><argument_list>(<argument><expr><name>trust_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"Error evaluating trust"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>cert_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CSSM_TP_APPLE_EVIDENCE_INFO</name> <modifier>*</modifier></type><name>status_chain</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecTrustGetResult</name><argument_list>(<argument><expr><name>trust_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_chain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name> <operator>||</operator> <operator>!</operator><name>cert_chain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"error while getting certificate chain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>num_cert_chain</name> <init>= <expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>cert_chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CFMutableArrayRef</name></type> <name>server_cert_chain</name> <init>= <expr><call><name>CFArrayCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>num_cert_chain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kCFTypeArrayCallBacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CFArrayAppendValue</name><argument_list>(<argument><expr><name>server_cert_chain</name></expr></argument>, <argument><expr><name>cert_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"Found certificate chain with %ld entries for server certificate"</literal></expr></argument>, <argument><expr><name>num_cert_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_cert_chain</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFArrayAppendArray</name><argument_list>(<argument><expr><name>server_cert_chain</name></expr></argument>, <argument><expr><name>cert_chain</name></expr></argument>, <argument><expr><call><name>CFRangeMake</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>num_cert_chain</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cert_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tls_creds_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>server_cert_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>server_cert_chain</name></name> <operator>=</operator> <name>server_cert_chain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>whitelist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crd</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>st_ServerOps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>policy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>trust_ref</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>trust_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>certificate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cert_identity</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cert_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
