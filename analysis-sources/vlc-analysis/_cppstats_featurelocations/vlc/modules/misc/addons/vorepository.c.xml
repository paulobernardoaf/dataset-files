<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\addons\vorepository.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream_extractor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_addons.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmlreading.h"</cpp:file></cpp:include>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Retrieve</name> <parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter>, <parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDesignated</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FindDesignated</name> <parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDONS_MODULE_SHORTCUT</name></cpp:macro> <cpp:value>"addons.vo"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDONS_REPO_SCHEMEHOST</name></cpp:macro> <cpp:value>"https://api-addons.videolan.org"</cpp:value></cpp:define>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Videolan.org's addons finder"</literal>)</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument>ADDONS_MODULE_SHORTCUT</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"addons.videolan.org addons finder"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"addons finder"</literal></argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Videolan.org's single archive addons finder"</literal>)</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument>ADDONS_MODULE_SHORTCUT<literal type="string">".vlp"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"single .vlp archive addons finder"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"addons finder"</literal></argument>, <argument><literal type="number">101</literal></argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>OpenDesignated</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<struct>struct <name>addons_finder_sys_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tempfile</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseManifest</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter>, <parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tempfileuri</name></decl></parameter>, <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_entries_created</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_current_node_type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_filetype</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name> <init>= <expr><call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_xml_reader</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>XML_READER_STARTELEM</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"invalid xml file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"videolan"</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"unsupported XML data format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>(</operator><name>i_current_node_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_current_node_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>
<block>{<block_content>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"resource"</literal></argument>, <argument>psz_filename</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"resource"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_filetype</name> <operator>=</operator> <call><name>ReadType</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"addon"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_type</name></name> <operator>=</operator> <call><name>ReadType</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>
<case>case <expr><name>XML_READER_TEXT</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_NONE</name> <operator>||</operator> <operator>!</operator><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_STRING</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>ppsz</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>ppsz</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>ppsz</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_LONG</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>pl</name></name> <operator>=</operator> <call><name>atol</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_INTEGER</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>pi</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"resource"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>psz_filename</name> <operator>&amp;&amp;</operator> <name>i_filetype</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>addon_file_t</name> <modifier>*</modifier></type><name>p_file</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addon_file_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_file</name><operator>-&gt;</operator><name>e_filetype</name></name> <operator>=</operator> <name>i_filetype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_filename</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>p_file</name><operator>-&gt;</operator><name>psz_download_uri</name></name></expr></argument>, <argument><expr><literal type="string">"%s#!/%s"</literal></expr></argument>,
<argument><expr><name>psz_tempfileuri</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"manifest lists file %s extractable from %s"</literal></expr></argument>,
<argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_download_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_num_entries_created</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_filetype</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_num_entries_created</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseCategoriesInfo</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter>, <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_entries_created</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_current_node_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name> <init>= <expr><call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_xml_reader</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>XML_READER_STARTELEM</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"invalid xml file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"videolan"</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"unsupported XML data format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>(</operator><name>i_current_node_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_current_node_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"addon"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>addon_entry_Release</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <call><name>addon_entry_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_source_module</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>ADDONS_MODULE_SHORTCUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>=</operator> <name>ADDON_MANAGEABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_state</name></name> <operator>=</operator> <name>ADDON_NOTINSTALLED</name></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_type</name></name> <operator>=</operator> <call><name>ReadType</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addons_uuid_read</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"downloads"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_downloads</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_downloads</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_downloads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"score"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name> <operator>&gt;</operator> <name>ADDON_MAX_SCORE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name> <operator>=</operator> <name>ADDON_MAX_SCORE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_version</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"name"</literal></argument>, <argument>p_entry-&gt;psz_name</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"archive"</literal></argument>, <argument>p_entry-&gt;psz_archive_uri</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"summary"</literal></argument>, <argument>p_entry-&gt;psz_summary</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"description"</literal></argument>, <argument>p_entry-&gt;psz_description</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"image"</literal></argument>, <argument>p_entry-&gt;psz_image_data</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"creator"</literal></argument>, <argument>p_entry-&gt;psz_author</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"sourceurl"</literal></argument>, <argument>p_entry-&gt;psz_source_uri</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>
<case>case <expr><name>XML_READER_TEXT</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_NONE</name> <operator>||</operator> <operator>!</operator><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_STRING</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>ppsz</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>ppsz</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>ppsz</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_LONG</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>pl</name></name> <operator>=</operator> <call><name>atol</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_INTEGER</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>pi</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"addon"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_num_entries_created</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>( <expr><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>addon_entry_Release</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_num_entries_created</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stream_t</name> <modifier>*</modifier></type> <name>vlc_stream_NewURL_ND</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_stream</name></expr> )</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_chain</name> <init>= <expr><call><name>vlc_stream_FilterNew</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"inflate"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_chain</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <name>p_chain</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_stream</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Find</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewURL_ND</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>,
<argument><expr><name>ADDONS_REPO_SCHEMEHOST</name> <literal type="string">"/xml"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_res</name> <init>= <expr><call><name>ParseCategoriesInfo</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>i_res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Retrieve</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter>, <parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_entry</name><operator>-&gt;</operator><name>psz_archive_uri</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_archive_uri</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_archive_uri</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_archive_uri</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>psz_archive_uri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_uri</name></expr></argument>, <argument><expr><name>ADDONS_REPO_SCHEMEHOST</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_archive_uri</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_archive_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>vlc_stream_NewURL_ND</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>vlc_stream_NewURL_ND</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>psz_archive_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"downloading archive %s"</literal></expr></argument>, <argument><expr><name>psz_archive_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name>psz_archive_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name> <operator>=</operator> <call><name>tempnam</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"vlp"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"Can't create temp storage file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlc_open</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr></argument>,
<argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"Failed to open addon temp storage file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><operator>(</operator> <name>i_read</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">10</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>write</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>i_read</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"Failed to write to Addon file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"Reading manifest from %s"</literal></expr></argument>, <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tempfileuri</name> <init>= <expr><call><name>vlc_path2uri</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_tempfileuri</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_manifest_uri</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_manifest_uri</name></expr></argument>, <argument><expr><literal type="string">"%s#!/manifest.xml"</literal></expr></argument>, <argument><expr><name>psz_tempfileuri</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tempfileuri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>vlc_stream_NewMRL</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>psz_manifest_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_manifest_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tempfileuri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <call><name>ParseManifest</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument>, <argument><expr><name>psz_tempfileuri</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator></expr>
?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tempfileuri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FindDesignated</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_manifest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><name><name>p_finder</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_manifest</name></expr></argument>, <argument><expr><literal type="string">"file://%s#!/manifest.xml"</literal></expr></argument>,
<argument><expr><name>psz_path</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewMRL</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>psz_manifest</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_manifest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>ParseCategoriesInfo</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>
<macro><name>ARRAY_FOREACH</name><argument_list>( <argument>p_entry</argument>, <argument>p_finder-&gt;entries</argument> )</argument_list></macro>
<if_stmt><if>if <condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_entry</name><operator>-&gt;</operator><name>psz_archive_uri</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_archive_uri</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name> <init>= <expr><operator>(</operator><name>addons_finder_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>addons_finder_sys_t</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addons_finder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_finder</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>( <argument><expr><literal type="string">"repo://"</literal><name>ADDONS_MODULE_SHORTCUT</name></expr></argument>, <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>( <argument><expr><literal type="string">"repo://"</literal></expr></argument>, <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_finder</name><operator>-&gt;</operator><name>pf_find</name></name> <operator>=</operator> <name>Find</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_finder</name><operator>-&gt;</operator><name>pf_retrieve</name></name> <operator>=</operator> <name>Retrieve</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name> <init>= <expr><operator>(</operator><name>addons_finder_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_tempfile</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDesignated</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name> <init>= <expr><operator>(</operator><name>addons_finder_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_finder</name><operator>-&gt;</operator><name>psz_uri</name></name>
<operator>||</operator> <call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"file://"</literal></expr></argument>, <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call>
<operator>||</operator> <call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">".vlp"</literal></expr></argument>, <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>
)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_finder</name><operator>-&gt;</operator><name>pf_find</name></name> <operator>=</operator> <name>FindDesignated</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_finder</name><operator>-&gt;</operator><name>pf_retrieve</name></name> <operator>=</operator> <name>Retrieve</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
