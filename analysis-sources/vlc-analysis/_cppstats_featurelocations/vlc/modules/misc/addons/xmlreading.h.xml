<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\addons\xmlreading.h">



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINDNODE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>target</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if ( ! strcmp(p_node, name) ){if ( type == TYPE_STRING ) data_pointer.u_data.ppsz = (char**)&amp;target;else if ( type == TYPE_LONG ) data_pointer.u_data.pl = (long*)&amp;target;else data_pointer.u_data.pi = (int*)&amp;target;data_pointer.e_type = type;} else</cpp:value></cpp:define>











<struct>struct
<block>{
<union>union
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>ppsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type> <name>pi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type> <name>pl</name></decl>;</decl_stmt>
}</block> <decl><name>u_data</name></decl>;</union>
<enum>enum
<block>{
<decl><name>TYPE_NONE</name></decl>, <decl><name>TYPE_STRING</name></decl>, <decl><name>TYPE_INTEGER</name></decl>, <decl><name>TYPE_LONG</name></decl>
}</block> <decl><name>e_type</name></decl>;</enum>
}</block> <decl><name>data_pointer</name> <init>= <expr><block>{ <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>TYPE_NONE</name></expr> }</block></expr></init></decl>;</struct>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ReadType</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"playlist"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ADDON_PLAYLIST_PARSER</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"skin"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ADDON_SKIN2</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"discovery"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ADDON_SERVICE_DISCOVERY</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"extension"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ADDON_EXTENSION</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"interface"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ADDON_INTERFACE</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ADDON_META</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>ADDON_UNKNOWN</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>getTypePsz</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ADDON_PLAYLIST_PARSER</name></expr>:</case>
<return>return <expr><literal type="string">"playlist"</literal></expr>;</return>
<case>case <expr><name>ADDON_SKIN2</name></expr>:</case>
<return>return <expr><literal type="string">"skin"</literal></expr>;</return>
<case>case <expr><name>ADDON_SERVICE_DISCOVERY</name></expr>:</case>
<return>return <expr><literal type="string">"discovery"</literal></expr>;</return>
<case>case <expr><name>ADDON_EXTENSION</name></expr>:</case>
<return>return <expr><literal type="string">"extension"</literal></expr>;</return>
<case>case <expr><name>ADDON_INTERFACE</name></expr>:</case>
<return>return <expr><literal type="string">"interface"</literal></expr>;</return>
<case>case <expr><name>ADDON_META</name></expr>:</case>
<return>return <expr><literal type="string">"meta"</literal></expr>;</return>
<case>case <expr><name>ADDON_UNKNOWN</name></expr>:</case>
<default>default:</default>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
