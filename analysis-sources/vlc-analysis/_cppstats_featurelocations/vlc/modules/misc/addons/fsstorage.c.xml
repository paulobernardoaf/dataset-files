<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\addons\fsstorage.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream_extractor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_addons.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xmlreading.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDONS_DIR</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDONS_SCRIPTS_DIR</name></cpp:macro> <cpp:value>ADDONS_DIR DIR_SEP "lua"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDONS_CATALOG</name></cpp:macro> <cpp:value>ADDONS_DIR DIR_SEP "catalog.xml"</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>addon_type_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>psz_dir</name></decl>;</decl_stmt>
}</block> <decl>const <name><name>addons_dirs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ADDON_EXTENSION</name></expr>, <expr><name>ADDONS_SCRIPTS_DIR</name> <name>DIR_SEP</name> <literal type="string">"extensions"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ADDON_PLAYLIST_PARSER</name></expr>, <expr><name>ADDONS_SCRIPTS_DIR</name> <name>DIR_SEP</name> <literal type="string">"playlist"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ADDON_SERVICE_DISCOVERY</name></expr>, <expr><name>ADDONS_SCRIPTS_DIR</name> <name>DIR_SEP</name> <literal type="string">"sd"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ADDON_INTERFACE</name></expr>, <expr><name>ADDONS_SCRIPTS_DIR</name> <name>DIR_SEP</name> <literal type="string">"intf"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ADDON_META</name></expr>, <expr><name>ADDONS_SCRIPTS_DIR</name> <name>DIR_SEP</name> <literal type="string">"meta"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ADDON_SKIN2</name></expr>, <expr><name>ADDONS_DIR</name> <name>DIR_SEP</name> <literal type="string">"skins2"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenStorage</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseStorage</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenLister</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseLister</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>LoadCatalog</name> <parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>FileBelongsToManagedAddon</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>addon_type_t</name></type> <name>e_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl></parameter> )</parameter_list>;</function_decl>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"addons local storage"</literal>)</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"addons.store.install"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Addons local storage installer"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"addons storage"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>OpenStorage</argument>, <argument>CloseStorage</argument>)</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"addons.store.list"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Addons local storage lister"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"addons finder"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenLister</argument>, <argument>CloseLister</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>getAddonInstallDir</name><parameter_list>( <parameter><decl><type><name>addon_type_t</name></type> <name>t</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_subdir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_userdir</name> <init>= <expr><call><name>config_GetUserDir</name><argument_list>( <argument><expr><name>VLC_USERDATA_DIR</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_userdir</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>addons_dirs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>addons_dirs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name> <operator>==</operator> <name>t</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_subdir</name> <operator>=</operator> <name><name>addons_dirs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_dir</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_subdir</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name>psz_userdir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_dir</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>psz_userdir</name></expr></argument>, <argument><expr><name>psz_subdir</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_userdir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_userdir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ListSkin_filter</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_filename</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_len</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_filename</name> <operator>+</operator> <name>i_len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".vlt"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ListScript_filter</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_filename</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_len</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_filename</name> <operator>+</operator> <name>i_len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".lua"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseSkins2Info</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter>, <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_title</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_source</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_current_node_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name> <init>= <expr><call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_xml_reader</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>XML_READER_STARTELEM</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"invalid xml file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"Theme"</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"unsupported XML data format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>!</operator><name>b_done</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_current_node_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_current_node_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"ThemeInfo"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_title</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"webpage"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_source</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>b_done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator> <name>b_done</name> <operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ListSkins</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dir</name> <init>= <expr><call><name>getAddonInstallDir</name><argument_list>( <argument><expr><name>ADDON_SKIN2</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_dir</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><call><name>vlc_scandir</name><argument_list>( <argument><expr><name>psz_dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_list</name></expr></argument>, <argument><expr><name>ListSkin_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name> <init>= <expr><name><name>ppsz_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_file</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>FileBelongsToManagedAddon</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>ADDON_SKIN2</name></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_uri</name></expr></argument>, <argument><expr><literal type="string">"file://%s/%s#!/theme.xml"</literal></expr></argument>, <argument><expr><name>psz_dir</name></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_source</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewMRL</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>ParseSkins2Info</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><call><name>addon_entry_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_type</name></name> <operator>=</operator> <name>ADDON_SKIN2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_state</name></name> <operator>=</operator> <name>ADDON_INSTALLED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>psz_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"Skins2 theme"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_source_uri</name></name> <operator>=</operator> <name>psz_source</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>|=</operator> <name>ADDON_BROKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"Skins2 theme"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>FileBelongsToManagedAddon</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>addon_type_t</name></type> <name>e_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>
<macro><name>ARRAY_FOREACH</name><argument_list>( <argument>p_entry</argument>, <argument>p_finder-&gt;entries</argument> )</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;</operator> <name>ADDON_MANAGEABLE</name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>addon_file_t</name> <modifier>*</modifier></type><name>p_file</name></decl>;</decl_stmt>
<macro><name>ARRAY_FOREACH</name><argument_list>( <argument>p_file</argument>, <argument>p_entry-&gt;files</argument> )</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_file</name><operator>-&gt;</operator><name>e_filetype</name></name> <operator>==</operator> <name>e_type</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ListScripts</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter>, <parameter><decl><type><name>addon_type_t</name></type> <name>type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dir</name> <init>= <expr><call><name>getAddonInstallDir</name><argument_list>( <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>psz_dir</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><call><name>vlc_scandir</name><argument_list>( <argument><expr><name>psz_dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_list</name></expr></argument>, <argument><expr><name>ListScript_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name> <init>= <expr><name><name>ppsz_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_file</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>FileBelongsToManagedAddon</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><call><name>addon_entry_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_state</name></name> <operator>=</operator> <name>ADDON_INSTALLED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>|=</operator> <name>ADDON_BROKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"Lua script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>List</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>addon_type_t</name></type> <name><name>types</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>ADDON_EXTENSION</name></expr>,
<expr><name>ADDON_PLAYLIST_PARSER</name></expr>,
<expr><name>ADDON_SERVICE_DISCOVERY</name></expr>,
<expr><name>ADDON_INTERFACE</name></expr>,
<expr><name>ADDON_META</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LoadCatalog</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<while>while<condition>( <expr><name>i_type</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>types</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ListScripts</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name><name>types</name><index>[<expr><name>i_type</name><operator>++</operator></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ListSkins</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>recursive_mkdir</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dirname</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_dirname</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>psz_dirname</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_mkdir</name><argument_list>( <argument><expr><name>psz_dirname</name></expr></argument>, <argument><expr><literal type="number">0700</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name>errno</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>EEXIST</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>ENOENT</name></expr>:</case>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_parent</name><index>[<expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_dirname</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>psz_parent</name></expr></argument>, <argument><expr><name>psz_dirname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_end</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_parent</name></expr></argument>, <argument><expr><name>DIR_SEP_CHAR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_end</name> <operator>&amp;&amp;</operator> <name>psz_end</name> <operator>!=</operator> <name>psz_parent</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>recursive_mkdir</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_parent</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_mkdir</name><argument_list>( <argument><expr><name>psz_dirname</name></expr></argument>, <argument><expr><literal type="number">0700</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not create %s: %m"</literal></expr></argument>, <argument><expr><name>psz_dirname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InstallFile</name><parameter_list>( <parameter><decl><type><name>addons_storage_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_downloadlink</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_destfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>vlc_stream_NewMRL</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_downloadlink</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Failed to access Addon download url %s"</literal></expr></argument>, <argument><expr><name>psz_downloadlink</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_path</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buf</name> <init>= <expr><call><name>strrchr</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>DIR_SEP_CHAR</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_buf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>psz_buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EMPTY_STR</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>recursive_mkdir</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_destfile</name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_dest</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_destfile</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Failed to open Addon storage file %s"</literal></expr></argument>, <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>( <expr><operator>(</operator> <name>i_read</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">10</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>fwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p_destfile</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Failed to write to Addon file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>p_destfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>i_read</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InstallAllFiles</name><parameter_list>( <parameter><decl><type><name>addons_storage_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>addon_file_t</name> <modifier>*</modifier></type><name>p_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dest</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>files</name><operator>.</operator><name>i_size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>ARRAY_FOREACH</name><argument_list>( <argument>p_file</argument>, <argument>p_entry-&gt;files</argument> )</argument_list></macro>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_file</name><operator>-&gt;</operator><name>e_filetype</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ADDON_EXTENSION</name></expr>:</case>
<case>case <expr><name>ADDON_PLAYLIST_PARSER</name></expr>:</case>
<case>case <expr><name>ADDON_SERVICE_DISCOVERY</name></expr>:</case>
<case>case <expr><name>ADDON_INTERFACE</name></expr>:</case>
<case>case <expr><name>ADDON_META</name></expr>:</case>
<case>case <expr><name>ADDON_SKIN2</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_translated_filename</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_translated_filename</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>psz_translated_filename</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>tmp</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <if_stmt><if>if <condition>( <expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <name>DIR_SEP_CHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dir</name> <init>= <expr><call><name>getAddonInstallDir</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>e_filetype</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_dir</name> <operator>||</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_dest</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>DIR_SEP</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_dir</name></expr></argument>,
<argument><expr><name>psz_translated_filename</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_translated_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_translated_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>InstallFile</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_download_uri</name></name></expr></argument>, <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>ADDON_UNKNOWN</name></expr>:</case>
<case>case <expr><name>ADDON_PLUGIN</name></expr>:</case>
<case>case <expr><name>ADDON_OTHER</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Install</name><parameter_list>( <parameter><decl><type><name>addons_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter>, <parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>psz_source_module</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>addons_finder_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_finder</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name> <init>= <expr><call><name>module_need</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"addons finder"</literal></expr></argument>,
<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_source_module</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_module</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name><name>p_finder</name><operator>-&gt;</operator><name>pf_retrieve</name></name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>InstallAllFiles</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>p_module</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_finder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_WITH_ENTITIES</name><parameter_list>( <parameter><type><name>formatstring</name></type></parameter>, <parameter><type><name>varname</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if ( varname ) {psz_tempstring = vlc_xml_encode( varname );fprintf( p_catalog, formatstring, psz_tempstring );free( psz_tempstring );}</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>int</name></type> <name>WriteCatalog</name><parameter_list>( <parameter><decl><type><name>addons_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter>,
<parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_entries</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_entries</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tempstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_userdir</name> <init>= <expr><call><name>config_GetUserDir</name><argument_list>( <argument><expr><name>VLC_USERDATA_DIR</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_userdir</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_file</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>psz_userdir</name></expr></argument>, <argument><expr><name>ADDONS_CATALOG</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_userdir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_userdir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_file_tmp</name></expr></argument>, <argument><expr><literal type="string">"%s.tmp%"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_path</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buf</name> <init>= <expr><call><name>strrchr</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>DIR_SEP_CHAR</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_buf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>psz_buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EMPTY_STR</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>recursive_mkdir</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_storage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_catalog</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_file_tmp</name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_catalog</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"&lt;videolan xmlns=\"http://videolan.org/ns/vlc/addons/1.0\"&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;addons&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>pp_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_tempstring</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>e_state</name></name> <operator>!=</operator> <name>ADDON_INSTALLED</name> <operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;</operator> <name>ADDON_MANAGEABLE</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_source_module</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_tempstring</name> <operator>=</operator> <call><name>vlc_xml_encode</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_source_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uuid</name> <init>= <expr><call><name>addons_uuid_to_psz</name><argument_list>( <argument><expr><operator>(</operator> <specifier>const</specifier> <name>addon_uuid_t</name> <operator>*</operator> <operator>)</operator> <operator>&amp;</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"\t\t&lt;addon source=\"%s\" type=\"%s\" id=\"%s\" "</literal>
<literal type="string">"downloads=\"%ld\" score=\"%d\""</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator> <name>psz_tempstring</name> <operator>)</operator></expr> ?</condition><then> <expr><name>psz_tempstring</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>getTypePsz</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_type</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name>psz_uuid</name></expr></argument>,
<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_downloads</name></name></expr></argument>,
<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uuid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tempstring</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>WRITE_WITH_ENTITIES</name><argument_list>( <argument><literal type="string">" version=\"%s\""</literal></argument>, <argument>p_entry-&gt;psz_version</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>WRITE_WITH_ENTITIES</name><argument_list>( <argument><literal type="string">"\t\t\t&lt;name&gt;%s&lt;/name&gt;\n"</literal></argument>, <argument>p_entry-&gt;psz_name</argument> )</argument_list></macro>
<macro><name>WRITE_WITH_ENTITIES</name><argument_list>( <argument><literal type="string">"\t\t\t&lt;summary&gt;%s&lt;/summary&gt;\n"</literal></argument>, <argument>p_entry-&gt;psz_summary</argument> )</argument_list></macro>

<if_stmt><if>if <condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_description</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_tempstring</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>psz_description</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>psz_tempstring</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>psz_tempstring</name></expr></argument>, <argument><expr><literal type="string">"]]&gt;"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psz_tempstring</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;description&gt;&lt;![CDATA[%s]]&gt;&lt;/description&gt;\n"</literal></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>WRITE_WITH_ENTITIES</name><argument_list>( <argument><literal type="string">"\t\t\t&lt;image&gt;%s&lt;/image&gt;\n"</literal></argument>, <argument>p_entry-&gt;psz_image_data</argument> )</argument_list></macro>
<macro><name>WRITE_WITH_ENTITIES</name><argument_list>( <argument><literal type="string">"\t\t\t&lt;archive&gt;%s&lt;/archive&gt;\n"</literal></argument>, <argument>p_entry-&gt;psz_archive_uri</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;authorship&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>WRITE_WITH_ENTITIES</name><argument_list>( <argument><literal type="string">"\t\t\t\t&lt;creator&gt;%s&lt;/creator&gt;\n"</literal></argument>, <argument>p_entry-&gt;psz_author</argument> )</argument_list></macro>
<macro><name>WRITE_WITH_ENTITIES</name><argument_list>( <argument><literal type="string">"\t\t\t\t&lt;sourceurl&gt;%s&lt;/sourceurl&gt;\n"</literal></argument>, <argument>p_entry-&gt;psz_source_uri</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;/authorship&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>addon_file_t</name> <modifier>*</modifier></type><name>p_file</name></decl>;</decl_stmt>
<macro><name>ARRAY_FOREACH</name><argument_list>( <argument>p_file</argument>, <argument>p_entry-&gt;files</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>psz_tempstring</name> <operator>=</operator> <call><name>vlc_xml_encode</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;resource type=\"%s\"&gt;%s&lt;/resource&gt;\n"</literal></expr></argument>,
<argument><expr><call><name>getTypePsz</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>e_filetype</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>psz_tempstring</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tempstring</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"\t\t&lt;/addon&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;/addons&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument>, <argument><expr><literal type="string">"&lt;/videolan&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>p_catalog</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_rename</name><argument_list>( <argument><expr><name>psz_file_tmp</name></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument>, <argument><expr><literal type="string">"could not rename temp catalog: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadCatalog</name><parameter_list>( <parameter><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_userdir</name> <init>= <expr><call><name>config_GetUserDir</name><argument_list>( <argument><expr><name>VLC_USERDATA_DIR</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_userdir</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_path</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>psz_userdir</name></expr></argument>, <argument><expr><name>ADDONS_CATALOG</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_userdir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_userdir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_current_node_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_filetype</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat_</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_stat</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_catalog_uri</name> <init>= <expr><call><name>vlc_path2uri</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_catalog_uri</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>psz_catalog_uri</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_catalog_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>p_stream</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name> <init>= <expr><call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_xml_reader</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>XML_READER_STARTELEM</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"invalid catalog"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"videolan"</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument>, <argument><expr><literal type="string">"unsupported catalog data format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>(</operator><name>i_current_node_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_current_node_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"addon"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>addon_entry_Release</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <call><name>addon_entry_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>=</operator> <name>ADDON_MANAGEABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_state</name></name> <operator>=</operator> <name>ADDON_INSTALLED</name></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>e_type</name></name> <operator>=</operator> <call><name>ReadType</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>addons_uuid_read</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"downloads"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_downloads</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_downloads</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_downloads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"score"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name> <operator>&gt;</operator> <name>ADDON_MAX_SCORE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_score</name></name> <operator>=</operator> <name>ADDON_MAX_SCORE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_source_module</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_version</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"name"</literal></argument>, <argument>p_entry-&gt;psz_name</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"archive"</literal></argument>, <argument>p_entry-&gt;psz_archive_uri</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"summary"</literal></argument>, <argument>p_entry-&gt;psz_summary</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"description"</literal></argument>, <argument>p_entry-&gt;psz_description</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"image"</literal></argument>, <argument>p_entry-&gt;psz_image_data</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"resource"</literal></argument>, <argument>psz_filename</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"creator"</literal></argument>, <argument>p_entry-&gt;psz_author</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<macro><name>BINDNODE</name><argument_list>(<argument><literal type="string">"sourceurl"</literal></argument>, <argument>p_entry-&gt;psz_source_uri</argument>, <argument>TYPE_STRING</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"resource"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_filetype</name> <operator>=</operator> <call><name>ReadType</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block>
<case>case <expr><name>XML_READER_TEXT</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_NONE</name> <operator>||</operator> <operator>!</operator><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_STRING</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>ppsz</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_LONG</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>pl</name></name> <operator>=</operator> <call><name>atol</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>( <expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>TYPE_INTEGER</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>data_pointer</name><operator>.</operator><name>u_data</name><operator>.</operator><name>pi</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"addon"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_finder</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"resource"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p_entry</name> <operator>&amp;&amp;</operator> <name>psz_filename</name> <operator>&amp;&amp;</operator> <name>i_filetype</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>addon_file_t</name> <modifier>*</modifier></type><name>p_file</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addon_file_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_file</name><operator>-&gt;</operator><name>e_filetype</name></name> <operator>=</operator> <name>i_filetype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_filename</name></name> <operator>=</operator> <name>psz_filename</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_download_uri</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_filetype</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data_pointer</name><operator>.</operator><name>e_type</name></name> <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>( <expr><name>p_entry</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>addon_entry_Release</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Remove</name><parameter_list>( <parameter><decl><type><name>addons_storage_t</name> <modifier>*</modifier></type><name>p_storage</name></decl></parameter>, <parameter><decl><type><name>addon_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>addon_file_t</name> <modifier>*</modifier></type><name>p_file</name></decl>;</decl_stmt>
<macro><name>ARRAY_FOREACH</name><argument_list>( <argument>p_file</argument>, <argument>p_entry-&gt;files</argument> )</argument_list></macro>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_file</name><operator>-&gt;</operator><name>e_filetype</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ADDON_EXTENSION</name></expr>:</case>
<case>case <expr><name>ADDON_PLAYLIST_PARSER</name></expr>:</case>
<case>case <expr><name>ADDON_SERVICE_DISCOVERY</name></expr>:</case>
<case>case <expr><name>ADDON_INTERFACE</name></expr>:</case>
<case>case <expr><name>ADDON_META</name></expr>:</case>
<case>case <expr><name>ADDON_SKIN2</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_translated_filename</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_translated_filename</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>psz_translated_filename</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>tmp</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <if_stmt><if>if <condition>( <expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <name>DIR_SEP_CHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dir</name> <init>= <expr><call><name>getAddonInstallDir</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>e_filetype</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_dir</name> <operator>||</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_dest</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>DIR_SEP</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_dir</name></expr></argument>,
<argument><expr><name>psz_translated_filename</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_translated_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_translated_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_storage</name></expr></argument>, <argument><expr><literal type="string">"removing %s"</literal></expr></argument>, <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>ADDON_UNKNOWN</name></expr>:</case>
<case>case <expr><name>ADDON_PLUGIN</name></expr>:</case>
<case>case <expr><name>ADDON_OTHER</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>


<macro><name>ARRAY_FOREACH</name><argument_list>( <argument>p_file</argument>, <argument>p_entry-&gt;files</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_file</name><operator>-&gt;</operator><name>psz_download_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>files</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenStorage</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>addons_storage_t</name> <modifier>*</modifier></type><name>p_storage</name> <init>= <expr><operator>(</operator><name>addons_storage_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>pf_install</name></name> <operator>=</operator> <name>Install</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>pf_remove</name></name> <operator>=</operator> <name>Remove</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_storage</name><operator>-&gt;</operator><name>pf_catalog</name></name> <operator>=</operator> <name>WriteCatalog</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseStorage</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenLister</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>addons_finder_t</name> <modifier>*</modifier></type><name>p_finder</name> <init>= <expr><operator>(</operator><name>addons_finder_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_finder</name><operator>-&gt;</operator><name>pf_find</name></name> <operator>=</operator> <name>List</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_finder</name><operator>-&gt;</operator><name>pf_retrieve</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseLister</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
