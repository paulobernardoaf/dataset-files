<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\xml\libxml.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/xmlreader.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/catalog.h&gt;</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CatalogLoad</name><parameter_list>( <parameter><decl><type><name>xml_t</name> <modifier>*</modifier></type><name>p_xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_filename</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xmlInitializeCatalog</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>xmlLoadCatalog</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CatalogAdd</name><parameter_list>( <parameter><decl><type><name>xml_t</name> <modifier>*</modifier></type><name>p_xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_arg1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_arg2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlCatalogAdd</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>psz_arg1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>psz_arg2</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>lock</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_t</name> <modifier>*</modifier></type><name>p_xml</name> <init>= <expr><operator>(</operator><name>xml_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>xmlHasFeature</name><argument_list>( <argument><expr><name>XML_WITH_THREAD</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlInitParser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_xml</name><operator>-&gt;</operator><name>pf_catalog_load</name></name> <operator>=</operator> <name>CatalogLoad</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_xml</name><operator>-&gt;</operator><name>pf_catalog_add</name></name> <operator>=</operator> <name>CatalogAdd</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBXML_GETS_A_CLUE_ABOUT_REENTRANCY_AND_MEMORY_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlCleanupParser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>ReaderErrorHandler</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_msg</name></decl></parameter>,
<parameter><decl><type><name>xmlParserSeverities</name></type> <name>severity</name></decl></parameter>,
<parameter><decl><type><name>xmlTextReaderLocatorPtr</name></type> <name>locator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>severity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><operator>(</operator><name>xml_reader_t</name> <operator>*</operator><operator>)</operator><name>p_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><call><name>xmlTextReaderLocatorLineNumber</name><argument_list>( <argument><expr><name>locator</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><literal type="string">"XML parser error (line %d) : %s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>xmlTextReaderPtr</name></type> <name>xml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
}</block></struct></type> <name>xml_reader_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReaderUseDTD</name> <parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>xml_reader_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xmlTextReaderSetParserProp</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name></expr></argument>,
<argument><expr><name>XML_PARSER_DEFAULTATTRS</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlTextReaderSetParserProp</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name></expr></argument>,
<argument><expr><name>XML_PARSER_VALIDATE</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReaderNextNode</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pval</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_reader_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>xmlChar</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>node</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>skip</name>:</label>
<switch>switch<condition>( <expr><call><name>xmlTextReaderRead</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<return>return <expr><name>XML_READER_NONE</name></expr>;</return>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 
<return>return <expr><name>XML_READER_ERROR</name></expr>;</return>
</block_content>}</block></switch>

<switch>switch<condition>( <expr><call><name>xmlTextReaderNodeType</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>XML_READER_TYPE_ELEMENT</name></expr>:</case>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlTextReaderConstName</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>XML_READER_STARTELEM</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XML_READER_TYPE_END_ELEMENT</name></expr>:</case>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlTextReaderConstName</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>XML_READER_ENDELEM</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>XML_READER_TYPE_CDATA</name></expr>:</case>
<case>case <expr><name>XML_READER_TYPE_TEXT</name></expr>:</case>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlTextReaderConstValue</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>XML_READER_TEXT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>XML_READER_ERROR</name></expr>;</return>

<default>default:</default>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>node</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>XML_READER_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>pval</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pval</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>node</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>XML_READER_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char *ReaderValue( xml_reader_t *p_reader )
{
const xmlChar *psz_value =
xmlTextReaderConstValue( p_reader-&gt;p_sys-&gt;xml );

return psz_value ? strdup( (const char *)psz_value ) : NULL;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ReaderNextAttr</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pval</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_reader_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlTextReaderPtr</name></type> <name>xml</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>xmlChar</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xmlTextReaderMoveToNextAttribute</name><argument_list>( <argument><expr><name>xml</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>(</operator><name>name</name> <operator>=</operator> <call><name>xmlTextReaderConstName</name><argument_list>( <argument><expr><name>xml</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name>value</name> <operator>=</operator> <call><name>xmlTextReaderConstValue</name><argument_list>( <argument><expr><name>xml</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pval</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>StreamRead</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_context</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReaderIsEmptyElement</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_reader_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>xmlTextReaderIsEmptyElement</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReaderOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>xmlHasFeature</name><argument_list>( <argument><expr><name>XML_WITH_THREAD</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><operator>(</operator><name>xml_reader_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xml_reader_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlTextReaderPtr</name></type> <name>p_libxml_reader</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlInitParser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_libxml_reader</name> <operator>=</operator> <call><name>xmlReaderForIO</name><argument_list>( <argument><expr><name>StreamRead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_libxml_reader</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>xmlTextReaderSetErrorHandler</name><argument_list>( <argument><expr><name>p_libxml_reader</name></expr></argument>,
<argument><expr><name>ReaderErrorHandler</name></expr></argument>, <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name> <operator>=</operator> <name>p_libxml_reader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_next_node</name></name> <operator>=</operator> <name>ReaderNextNode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_next_attr</name></name> <operator>=</operator> <name>ReaderNextAttr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_is_empty</name></name> <operator>=</operator> <name>ReaderIsEmptyElement</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_reader</name><operator>-&gt;</operator><name>pf_use_dtd</name></name> <operator>=</operator> <name>ReaderUseDTD</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReaderClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name> <init>= <expr><operator>(</operator><name>xml_reader_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xml_reader_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_reader</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xmlFreeTextReader</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xml</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBXML_GETS_A_CLUE_ABOUT_REENTRANCY_AND_MEMORY_LEAKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlCleanupParser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>node</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"XML Parser (using libxml2)"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"xml"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>cannot_unload_broken_library</name><argument_list>()</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"xml reader"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>ReaderOpen</argument>, <argument>ReaderClose</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>
</unit>
