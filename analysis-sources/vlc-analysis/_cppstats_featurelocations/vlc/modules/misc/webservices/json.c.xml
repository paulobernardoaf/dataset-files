<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\webservices\json.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_CRT_SECURE_NO_WARNINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_json_value</name></name></type> <name>json_value_none</name></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_json_value</name></name></type> <name>json_value_none</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>json_uchar</name>;</typedef>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>hex_value</name> <parameter_list>(<parameter><decl><type><name>json_char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0xFF</literal></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>json_settings</name></type> <name>settings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_pass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>used_memory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uint_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulong_max</name></decl>;</decl_stmt>

}</block></struct></type> <name>json_state</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>json_alloc</name> <parameter_list>(<parameter><decl><type><name>json_state</name> <modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>zero</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>mem</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>ulong_max</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>used_memory</name></name><operator>)</operator> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>max_memory</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>used_memory</name></name> <operator>+=</operator> <name>size</name><operator>)</operator> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>max_memory</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>mem</name> <operator>=</operator> <ternary><condition><expr><name>zero</name></expr> ?</condition><then> <expr><call><name>calloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>mem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>new_value</name>
<parameter_list>(<parameter><decl><type><name>json_state</name> <modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>json_value</name> <modifier>*</modifier><modifier>*</modifier></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>json_value</name> <modifier>*</modifier><modifier>*</modifier></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>json_value</name> <modifier>*</modifier><modifier>*</modifier></type> <name>alloc</name></decl></parameter>, <parameter><decl><type><name>json_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_value</name> <modifier>*</modifier></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>values_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>first_pass</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><name>top</name> <operator>=</operator> <operator>*</operator><name>alloc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>alloc</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>alloc</name><operator>)</operator><operator>-&gt;</operator><name><name>_reserved</name><operator>.</operator><name>next_alloc</name></name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>json_array</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name></name> <operator>=</operator> <operator>(</operator><name>json_value</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>json_alloc</name>
<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>json_value</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>json_object</name></expr>:</case>

<expr_stmt><expr><name>values_size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name></name><operator>)</operator> <operator>=</operator> <call><name>json_alloc</name>
<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>values_size</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>_reserved</name><operator>.</operator><name>object_mem</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name></name><operator>)</operator> <operator>+</operator> <name>values_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>json_string</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>json_char</name> <operator>*</operator><operator>)</operator> <call><name>json_alloc</name>
<argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>json_char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>json_value</name> <operator>*</operator><operator>)</operator> <call><name>json_alloc</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>json_value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <operator>*</operator><name>top</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>alloc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>alloc</name><operator>)</operator><operator>-&gt;</operator><name><name>_reserved</name><operator>.</operator><name>next_alloc</name></name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>alloc</name> <operator>=</operator> <operator>*</operator><name>top</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>e_off</name></cpp:macro> <cpp:value>((int) (i - cur_line_begin))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>whitespace</name></cpp:macro> <cpp:value>case '\n': ++ cur_line; cur_line_begin = i; case ' ': case '\t': case '\r'</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>string_add</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!state.first_pass) string [string_length] = b; ++ string_length; } while (0);</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>long</name></type>
<name>flag_next</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag_reproc</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag_need_comma</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag_seek_value</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><type ref="prev"/><name>flag_escaped</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag_string</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag_need_colon</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag_done</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><type ref="prev"/><name>flag_num_negative</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag_num_zero</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag_num_e</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>,
<decl><type ref="prev"/><name>flag_num_e_got_sign</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag_num_e_negative</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<function><type><name>json_value</name> <modifier>*</modifier></type> <name>json_parse_ex</name> <parameter_list>(<parameter><decl><type><name>json_settings</name> <modifier>*</modifier></type> <name>settings</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>json_char</name> <modifier>*</modifier></type> <name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>error_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_char</name></type> <name><name>error</name> <index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cur_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>json_char</name> <modifier>*</modifier></type> <name>cur_line_begin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_value</name> <modifier>*</modifier></type> <name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>root</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_state</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num_digits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>num_fraction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>num_e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>json_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>json_settings</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>uint_max</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>uint_max</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>ulong_max</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>ulong_max</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>uint_max</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>ulong_max</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>state</name><operator>.</operator><name>first_pass</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>state</name><operator>.</operator><name>first_pass</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator> <name><name>state</name><operator>.</operator><name>first_pass</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>json_uchar</name></type> <name>uchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>uc_b1</name></decl>, <decl><type ref="prev"/><name>uc_b2</name></decl>, <decl><type ref="prev"/><name>uc_b3</name></decl>, <decl><type ref="prev"/><name>uc_b4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_char</name> <modifier>*</modifier></type> <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>string_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>root</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>flag_seek_value</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_line_begin</name> <operator>=</operator> <name>json</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>json</name></expr> ;</init><condition>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>json_char</name></type> <name>b</name> <init>= <expr><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_done</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>b</name></expr>)</condition>
<block>{<block_content>
<label><name>whitespace</name>:</label>
<continue>continue;</continue>

<default>default:</default>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Trailing garbage: `%c`"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_string</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"Unexpected EOF in string (at %d:%d)"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>string_length</name> <operator>&gt;</operator> <name><name>state</name><operator>.</operator><name>uint_max</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_overflow</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_escaped</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator> <name>flag_escaped</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>b</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><call><name>string_add</name> <argument_list>(<argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><call><name>string_add</name> <argument_list>(<argument><expr><literal type="char">'\f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><call><name>string_add</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><call><name>string_add</name> <argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><call><name>string_add</name> <argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uc_b1</name> <operator>=</operator> <call><name>hex_value</name> <argument_list>(<argument><expr><operator>*</operator><operator>++</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xFF</literal> <operator>||</operator> <operator>(</operator><name>uc_b2</name> <operator>=</operator> <call><name>hex_value</name> <argument_list>(<argument><expr><operator>*</operator><operator>++</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xFF</literal>
<operator>||</operator> <operator>(</operator><name>uc_b3</name> <operator>=</operator> <call><name>hex_value</name> <argument_list>(<argument><expr><operator>*</operator><operator>++</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xFF</literal> <operator>||</operator> <operator>(</operator><name>uc_b4</name> <operator>=</operator> <call><name>hex_value</name> <argument_list>(<argument><expr><operator>*</operator><operator>++</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"Invalid character value `%c` (at %d:%d)"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uc_b1</name> <operator>=</operator> <name>uc_b1</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>uc_b2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uc_b2</name> <operator>=</operator> <name>uc_b3</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>uc_b4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uchar</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>json_char</name><operator>)</operator> <name>uc_b1</name><operator>)</operator> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name>uc_b2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof <argument_list>(<argument><expr><name>json_char</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>json_uchar</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <operator>(</operator><name>uc_b1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>uc_b2</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>string_add</name> <argument_list>(<argument><expr><operator>(</operator><name>json_char</name><operator>)</operator> <name>uchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uchar</name> <operator>&lt;=</operator> <literal type="number">0x7FF</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>first_pass</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string_length</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content> <expr_stmt><expr><name><name>string</name> <index>[<expr><name>string_length</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xC0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc_b2</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc_b1</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name> <index>[<expr><name>string_length</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc_b2</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>first_pass</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string_length</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content> <expr_stmt><expr><name><name>string</name> <index>[<expr><name>string_length</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc_b1</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name> <index>[<expr><name>string_length</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc_b1</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uc_b2</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name> <index>[<expr><name>string_length</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>uc_b2</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>string_add</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_escaped</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>first_pass</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>string</name> <index>[<expr><name>string_length</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator> <name>flag_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>top</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>json_string</name></expr>:</case>

<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>string_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_next</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>json_object</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>first_pass</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>json_char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name></name><operator>)</operator> <operator>+=</operator> <name>string_length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name> <index>[<expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>name</name>
<operator>=</operator> <operator>(</operator><name>json_char</name> <operator>*</operator><operator>)</operator> <name><name>top</name><operator>-&gt;</operator><name>_reserved</name><operator>.</operator><name>object_mem</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>json_char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>top</name><operator>-&gt;</operator><name>_reserved</name><operator>.</operator><name>object_mem</name></name><operator>)</operator> <operator>+=</operator> <name>string_length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_seek_value</name> <operator>|</operator> <name>flag_need_colon</name></expr>;</expr_stmt>
<continue>continue;</continue>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>string_add</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_seek_value</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>b</name></expr>)</condition>
<block>{<block_content>
<label><name>whitespace</name>:</label>
<continue>continue;</continue>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&amp;&amp;</operator> <name><name>top</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_array</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator> <operator>(</operator><name>flag_need_comma</name> <operator>|</operator> <name>flag_seek_value</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>flag_next</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>settings</name><operator>.</operator><name>settings</name></name> <operator>&amp;</operator> <name>json_relaxed_commas</name><operator>)</operator></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Unexpected ]"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_need_comma</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator> <name>flag_need_comma</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<else>else
<block>{<block_content> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Expected , before %c"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_need_colon</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator> <name>flag_need_colon</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<else>else
<block>{<block_content> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Expected : before %c"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator> <name>flag_seek_value</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>b</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc</name></expr></argument>, <argument><expr><name>json_object</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_alloc_failure</name>;</goto></block_content></block></if></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc</name></expr></argument>, <argument><expr><name>json_array</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_alloc_failure</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_seek_value</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc</name></expr></argument>, <argument><expr><name>json_string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_alloc_failure</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_string</name></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>string_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="char">'r'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="char">'u'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_unknown_value</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc</name></expr></argument>, <argument><expr><name>json_boolean</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_alloc_failure</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_next</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="char">'a'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="char">'l'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="char">'s'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_unknown_value</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc</name></expr></argument>, <argument><expr><name>json_boolean</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_alloc_failure</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_next</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="char">'u'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="char">'l'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_unknown_value</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc</name></expr></argument>, <argument><expr><name>json_null</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_alloc_failure</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_next</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_value</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc</name></expr></argument>, <argument><expr><name>json_integer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_alloc_failure</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>first_pass</name></name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="char">'-'</literal>
<operator>||</operator> <name>b</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="char">'E'</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><operator>++</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_next</name> <operator>|</operator> <name>flag_reproc</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator> <operator>(</operator><name>flag_num_negative</name> <operator>|</operator> <name>flag_num_e</name> <operator>|</operator>
<name>flag_num_e_got_sign</name> <operator>|</operator> <name>flag_num_e_negative</name> <operator>|</operator>
<name>flag_num_zero</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>num_digits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_fraction</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_reproc</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_num_negative</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<else>else
<block>{<block_content> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Unexpected %c when seeking value"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>top</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>json_object</name></expr>:</case>

<switch>switch <condition>(<expr><name>b</name></expr>)</condition>
<block>{<block_content>
<label><name>whitespace</name>:</label>
<continue>continue;</continue>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_need_comma</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>state</name><operator>.</operator><name>settings</name><operator>.</operator><name>settings</name></name> <operator>&amp;</operator> <name>json_relaxed_commas</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Expected , before \""</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_string</name></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <operator>(</operator><name>json_char</name> <operator>*</operator><operator>)</operator> <name><name>top</name><operator>-&gt;</operator><name>_reserved</name><operator>.</operator><name>object_mem</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>string_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'}'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator> <name>flag_need_comma</name><operator>)</operator> <operator>|</operator> <name>flag_next</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">','</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_need_comma</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator> <name>flag_need_comma</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<default>default:</default>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Unexpected `%c` in object"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<break>break;</break>

<case>case <expr><name>json_integer</name></expr>:</case>
<case>case <expr><name>json_double</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator> <name>num_digits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>top</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_integer</name> <operator>||</operator> <name>flags</name> <operator>&amp;</operator> <name>flag_num_e</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>flag_num_e</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_num_zero</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Unexpected `0` before `%c`"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_digits</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_num_zero</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_num_e_got_sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_e</name> <operator>=</operator> <operator>(</operator><name>num_e</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <operator>(</operator><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>integer</name></name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_fraction</name> <operator>=</operator> <operator>(</operator><name>num_fraction</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>flag_num_e</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>flag_num_e_got_sign</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_num_e_got_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_num_e_negative</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>top</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_integer</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_digits</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Expected digit before `.`"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>json_double</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>dbl</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_digits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>flag_num_e</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>top</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_double</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_digits</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Expected digit after `.`"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>dbl</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>num_fraction</name><operator>)</operator> <operator>/</operator> <operator>(</operator><call><name>pow</name> <argument_list>( <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">10.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>num_digits</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_num_e</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>top</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_integer</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>json_double</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>dbl</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_digits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator> <name>flag_num_zero</name></expr>;</expr_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_digits</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Expected digit after `e`"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>dbl</name></name> <operator>*=</operator> <call><name>pow</name> <argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>flag_num_e_negative</name></expr> ?</condition><then> <expr><operator>-</operator> <name>num_e</name></expr> </then><else>: <expr><name>num_e</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_num_negative</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>top</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_integer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <operator>-</operator> <name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>dbl</name></name> <operator>=</operator> <operator>-</operator> <name><name>top</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>dbl</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_next</name> <operator>|</operator> <name>flag_reproc</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_reproc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator> <name>flag_reproc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>flag_next</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator> <name>flag_next</name><operator>)</operator> <operator>|</operator> <name>flag_need_comma</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>top</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_done</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>top</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_array</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>flag_seek_value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>first_pass</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>json_value</name> <modifier>*</modifier></type> <name>parent</name> <init>= <expr><name><name>top</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>json_object</name></expr>:</case>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name>
<index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>json_array</name></expr>:</case>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name>
<index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>++</operator> <name><name>top</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>state</name><operator>.</operator><name>uint_max</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>e_overflow</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>top</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>root</name></expr>;</return>

<label><name>e_unknown_value</name>:</label>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Unknown value"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>

<label><name>e_alloc_failure</name>:</label>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"Memory allocation failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>

<label><name>e_overflow</name>:</label>

<expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"%d:%d: Too long (caught overflow)"</literal></expr></argument>, <argument><expr><name>cur_line</name></expr></argument>, <argument><expr><name>e_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>e_failed</name>;</goto>

<label><name>e_failed</name>:</label>

<if_stmt><if>if <condition>(<expr><name>error_buf</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>error_buf</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>error_buf</name></expr></argument>, <argument><expr><literal type="string">"Unknown error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>first_pass</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alloc</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>alloc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>alloc</name><operator>-&gt;</operator><name>_reserved</name><operator>.</operator><name>next_alloc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alloc</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>first_pass</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>json_value_free</name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>json_value</name> <modifier>*</modifier></type> <name>json_parse</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_char</name> <modifier>*</modifier></type> <name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_settings</name></type> <name>settings</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>json_settings</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>json_parse_ex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>json_value_free</name> <parameter_list>(<parameter><decl><type><name>json_value</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_value</name> <modifier>*</modifier></type> <name>cur_value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>value</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>json_array</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name> <index>[<expr><operator>--</operator> <name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>json_object</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name> <index>[<expr><operator>--</operator> <name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>json_string</name></expr>:</case>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>cur_value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cur_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
