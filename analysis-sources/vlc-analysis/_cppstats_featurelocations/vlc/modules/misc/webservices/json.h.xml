<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\webservices\json.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_WEBSERVICES_JSON_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_WEBSERVICES_JSON_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>json_char</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_char</name></cpp:macro> <cpp:value>char</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>json_int_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_int_t</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>max_memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>settings</name></decl>;</decl_stmt>

}</block></struct></type> <name>json_settings</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>json_relaxed_commas</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>json_none</name></decl>,
<decl><name>json_object</name></decl>,
<decl><name>json_array</name></decl>,
<decl><name>json_integer</name></decl>,
<decl><name>json_double</name></decl>,
<decl><name>json_string</name></decl>,
<decl><name>json_boolean</name></decl>,
<decl><name>json_null</name></decl>

}</block></enum></type> <name>json_type</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>_json_value</name></name></type> <name>json_value_none</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>_json_value</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_json_value</name></name> <modifier>*</modifier></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>json_type</name></type> <name>type</name></decl>;</decl_stmt>

<union>union
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>boolean</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_int_t</name></type> <name>integer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dbl</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>json_char</name> <modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt> 

}</block> <decl><name>string</name></decl>;</struct>

<struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>json_char</name> <modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_json_value</name></name> <modifier>*</modifier></type> <name>value</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier> <name>values</name></decl>;</struct>

}</block> <decl><name>object</name></decl>;</struct>

<struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_json_value</name></name> <modifier>*</modifier><modifier>*</modifier></type> <name>values</name></decl>;</decl_stmt>

}</block> <decl><name>array</name></decl>;</struct>

}</block> <decl><name>u</name></decl>;</union>

<union>union
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_json_value</name></name> <modifier>*</modifier></type> <name>next_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>object_mem</name></decl>;</decl_stmt>

}</block> <decl><name>_reserved</name></decl>;</union>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<label><name>public</name>:</label>

<expr_stmt><expr><specifier>inline</specifier> <macro><name>_json_value</name> <argument_list>()</argument_list></macro>
<block>{ <expr><call><name>memset</name> <argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>_json_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>inline</specifier> <specifier>const</specifier> struct <name>_json_value</name> <operator>&amp;</operator><name><name>operator</name> <index>[]</index></name> <operator>(</operator><name>int</name> <name>index</name><operator>)</operator> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>json_array</name> <operator>||</operator> <name>index</name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>index</name><operator>)</operator> <operator>&gt;=</operator> <name><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>json_value_none</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<return>return <expr><operator>*</operator><name><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name> <index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
}</block></struct></type>

<namespace><specifier>inline</specifier> const struct <name>_json_value</name> &amp;<name><name>operator</name> <index>[]</index></name> (const <name>char</name> <modifier>*</modifier> <name>index</name></namespace>) const
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>json_object</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>json_value_none</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name> <index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>json_value_none</name></expr>;</return>
</block_content>}</block></typedef>

<expr_stmt><expr><specifier>inline</specifier> <name>operator</name> <specifier>const</specifier> <name>char</name> <operator>*</operator> <operator>(</operator><operator>)</operator> <specifier>const</specifier>
<block>{
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>json_string</name></expr>:</case>
<return>return <expr><name><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>ptr</name></name></expr>;</return>

<default>default:</default>
<return>return <expr><literal type="string">""</literal></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block></expr>;</expr_stmt>
</block_content>}</block></extern>

<expr_stmt><expr><specifier>inline</specifier> <name>operator</name> <macro><name>json_int_t</name> <argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>json_integer</name></expr>:</case>
<return>return <expr><name><name>u</name><operator>.</operator><name>integer</name></name></expr>;</return>

<case>case <expr><name>json_double</name></expr>:</case>
<return>return <expr><operator>(</operator><name>json_int_t</name><operator>)</operator> <name><name>u</name><operator>.</operator><name>dbl</name></name></expr>;</return>

<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block></expr>;</expr_stmt>
}

inline <expr_stmt><expr><name>operator</name> <macro><name>bool</name> <argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>json_boolean</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><name><name>u</name><operator>.</operator><name>boolean</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
}

inline <expr_stmt><expr><name>operator</name> <macro><name>double</name> <argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>json_integer</name></expr>:</case>
<return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>u</name><operator>.</operator><name>integer</name></name></expr>;</return>

<case>case <expr><name>json_double</name></expr>:</case>
<return>return <expr><name><name>u</name><operator>.</operator><name>dbl</name></name></expr>;</return>

<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block></expr>;</expr_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

} <expr_stmt><expr><name>json_value</name></expr>;</expr_stmt>

<function_decl><type><name>json_value</name> <modifier>*</modifier></type> <name>json_parse</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_char</name> <modifier>*</modifier></type> <name>json</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>json_value</name> <modifier>*</modifier></type> <name>json_parse_ex</name>
<parameter_list>(<parameter><decl><type><name>json_settings</name> <modifier>*</modifier></type> <name>settings</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>json_char</name> <modifier>*</modifier></type> <name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>json_value_free</name> <parameter_list>(<parameter><decl><type><name>json_value</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
} 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
