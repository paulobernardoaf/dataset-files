<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\webservices\acoustid.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acoustid.h"</cpp:file></cpp:include>




<function><type><name>void</name></type> <name>acoustid_result_release</name><parameter_list>( <parameter><decl><type><name>acoustid_result_t</name> <modifier>*</modifier></type> <name>r</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>r</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>r</name><operator>-&gt;</operator><name>recordings</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>r</name><operator>-&gt;</operator><name>recordings</name><operator>.</operator><name>p_recordings</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>psz_artist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>r</name><operator>-&gt;</operator><name>recordings</name><operator>.</operator><name>p_recordings</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>r</name><operator>-&gt;</operator><name>recordings</name><operator>.</operator><name>p_recordings</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_artists</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>acoustid_mb_result_t</name> <modifier>*</modifier></type><name>record</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>node</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_array</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>psz_artist</name></name> <operator>=</operator> <call><name>json_dupstring</name><argument_list>( <argument><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_recordings</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>acoustid_result_t</name> <modifier>*</modifier></type><name>p_result</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>node</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_array</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_result</name><operator>-&gt;</operator><name>recordings</name><operator>.</operator><name>p_recordings</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acoustid_mb_result_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>p_result</name><operator>-&gt;</operator><name>recordings</name><operator>.</operator><name>p_recordings</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_result</name><operator>-&gt;</operator><name>recordings</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>acoustid_mb_result_t</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><operator>&amp;</operator> <name><name>p_result</name><operator>-&gt;</operator><name>recordings</name><operator>.</operator><name>p_recordings</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>recordnode</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>recordnode</name> <operator>||</operator> <name><name>recordnode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_object</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>json_dupstring</name><argument_list>( <argument><expr><name>recordnode</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>json_getbyname</name><argument_list>( <argument><expr><name>recordnode</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>value</name> <operator>&amp;&amp;</operator> <name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_string</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_len</name></expr></argument>, <argument><expr><name>MB_ID_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>record</name><operator>-&gt;</operator><name>s_musicbrainz_id</name></name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>parse_artists</name><argument_list>( <argument><expr><call><name>json_getbyname</name><argument_list>( <argument><expr><name>recordnode</name></expr></argument>, <argument><expr><literal type="string">"artists"</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>record</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"recording %d title %s %36s %s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>record</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument>,
<argument><expr><name><name>record</name><operator>-&gt;</operator><name>s_musicbrainz_id</name></name></expr></argument>, <argument><expr><name><name>record</name><operator>-&gt;</operator><name>psz_artist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ParseJson</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>acoustid_results_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>json_value</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>json_parse_document</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>root</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>json_getbyname</name><argument_list>( <argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>node</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_string</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"status node not found or invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"ok"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Bad request status"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>json_getbyname</name><argument_list>( <argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"results"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>node</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_array</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Bad results array or no results"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>p_results</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acoustid_result_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>p_results</name><operator>-&gt;</operator><name>p_results</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>resultnode</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>resultnode</name> <operator>&amp;&amp;</operator> <name><name>resultnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_object</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>acoustid_result_t</name> <modifier>*</modifier></type><name>p_result</name> <init>= <expr><operator>&amp;</operator> <name><name>p_results</name><operator>-&gt;</operator><name>p_results</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>json_getbyname</name><argument_list>( <argument><expr><name>resultnode</name></expr></argument>, <argument><expr><literal type="string">"score"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>value</name> <operator>&amp;&amp;</operator> <name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_double</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_result</name><operator>-&gt;</operator><name>d_score</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>dbl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_result</name><operator>-&gt;</operator><name>psz_id</name></name> <operator>=</operator> <call><name>json_dupstring</name><argument_list>( <argument><expr><name>resultnode</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_recordings</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><call><name>json_getbyname</name><argument_list>( <argument><expr><name>resultnode</name></expr></argument>, <argument><expr><literal type="string">"recordings"</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p_result</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>json_value_free</name><argument_list>( <argument><expr><name>root</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>( <expr><name>root</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>json_value_free</name><argument_list>( <argument><expr><name>root</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acoustid_lookup_fingerprint</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>acoustid_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>acoustid_fingerprint_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>psz_fingerprint</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_server</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_url</name></expr></argument>, <argument><expr><literal type="string">"https://%s/v2/lookup"</literal>
<literal type="string">"?client=%s"</literal>
<literal type="string">"&amp;meta=recordings+tracks+usermeta+releases"</literal>
<literal type="string">"&amp;duration=%d"</literal>
<literal type="string">"&amp;fingerprint=%s"</literal></expr></argument>,
<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_server</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_apikey</name></name></expr> ?</condition><then> <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_apikey</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_fingerprint</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><macro><name>asprintf</name><argument_list>( <argument>&amp;psz_url</argument>, <argument><literal type="string">"https://"</literal> ACOUSTID_ANON_SERVER
ACOUSTID_ANON_SERVER_PATH
<literal type="string">"?meta=recordings+tracks+usermeta+releases"</literal>
<literal type="string">"&amp;duration=%d"</literal>
<literal type="string">"&amp;fingerprint=%s"</literal></argument>,
<argument>p_data-&gt;i_duration</argument>,
<argument>p_data-&gt;psz_fingerprint</argument> )</argument_list></macro> <operator>&lt;</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Querying AcoustID from %s"</literal></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><call><name>json_retrieve_document</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_buffer</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>ParseJson</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>results</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"results count == %d"</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>results</name><operator>.</operator><name>count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"No results"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
