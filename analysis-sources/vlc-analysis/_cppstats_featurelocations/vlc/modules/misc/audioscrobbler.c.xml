<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\misc\audioscrobbler.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_MAX</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>audioscrobbler_song_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_a</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_t</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_b</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_n</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_l</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_m</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>time_t</name></type> <name>date</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl>;</decl_stmt> 
}</block></struct></type> <name>audioscrobbler_song_t</name>;</typedef>

<struct>struct <name>intf_sys_t</name>
<block>{
<decl_stmt><decl><type><name>audioscrobbler_song_t</name></type> <name><name>p_queue</name><index>[<expr><name>QUEUE_MAX</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_songs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_listener_id</name></name> <modifier>*</modifier></type><name>playlist_listener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_listener_id</name></name> <modifier>*</modifier></type><name>player_listener</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>p_submit_url</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>p_nowp_url</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_auth_token</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>audioscrobbler_song_t</name></type> <name>p_current_song</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time_pause</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time_total_pauses</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_submit_nowp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_meta_read</name></decl>;</decl_stmt> 

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USERNAME_TEXT</name></cpp:macro> <cpp:value>N_("Username")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USERNAME_LONGTEXT</name></cpp:macro> <cpp:value>N_("The username of your last.fm account")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASSWORD_TEXT</name></cpp:macro> <cpp:value>N_("Password")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASSWORD_LONGTEXT</name></cpp:macro> <cpp:value>N_("The password of your last.fm account")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_TEXT</name></cpp:macro> <cpp:value>N_("Scrobbler URL")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_LONGTEXT</name></cpp:macro> <cpp:value>N_("The URL set for an alternative scrobbler engine")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_AUDIOSCROBBLER_EFATAL</name></cpp:macro> <cpp:value>-69</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_NAME</name></cpp:macro> <cpp:value>PACKAGE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_VERSION</name></cpp:macro> <cpp:value>VERSION</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INTERFACE</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INTERFACE_CONTROL</argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Audioscrobbler"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Submission of played songs to last.fm"</literal>)</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"lastfm-username"</literal></argument>, <argument><literal type="string">""</literal></argument>,
<argument>USERNAME_TEXT</argument>, <argument>USERNAME_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_password</name><argument_list>(<argument><literal type="string">"lastfm-password"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>PASSWORD_TEXT</argument>, <argument>PASSWORD_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"scrobbler-url"</literal></argument>, <argument><literal type="string">"post.audioscrobbler.com"</literal></argument>,
<argument>URL_TEXT</argument>, <argument>URL_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function><type><specifier>static</specifier> <name>void</name></type> <name>DeleteSong</name><parameter_list>(<parameter><decl><type><name>audioscrobbler_song_t</name><modifier>*</modifier></type> <name>p_song</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>ReadMetaData</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_this</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_ITEM_META</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char *psz_meta = input_item_Get##b(item); if (psz_meta &amp;&amp; *psz_meta) a = vlc_uri_encode(psz_meta); free(psz_meta); } while (0)</cpp:value></cpp:define>






<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_meta_read</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ITEM_META</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_a</name></name></expr></argument>, <argument><expr><name>Artist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_a</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"No artist.."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteSong</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_ITEM_META</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_t</name></name></expr></argument>, <argument><expr><name>Title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_t</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"No track name.."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteSong</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_submit_nowp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ITEM_META</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_b</name></name></expr></argument>, <argument><expr><name>Album</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_ITEM_META</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_m</name></name></expr></argument>, <argument><expr><name>TrackID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_ITEM_META</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_n</name></name></expr></argument>, <argument><expr><name>TrackNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>i_l</name></name> <operator>=</operator> <call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>input_item_GetDuration</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ALLOC_ITEM_META</name></cpp:undef>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Meta data registered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>AddToQueue</name> <parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>played_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_this</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_t</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_a</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>played_time</name> <operator>=</operator> <call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>i_start</name></name> <operator>-</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>time_total_pauses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>i_l</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>i_l</name></name> <operator>=</operator> <name>played_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>i_l</name></name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Song too short (&lt; 30s), not submitting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>played_time</name> <operator>&lt;</operator> <literal type="number">240</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>played_time</name> <operator>&lt;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>i_l</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Song not listened long enough, not submitting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_a</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_a</name></name> <operator>||</operator>
<operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_t</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>psz_t</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Missing artist or title, not submitting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_songs</name></name> <operator>&gt;=</operator> <name>QUEUE_MAX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Submission queue is full, not submitting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Song will be submitted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_COPY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p_sys-&gt;p_queue[p_sys-&gt;i_songs].a = p_sys-&gt;p_current_song.a</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_COPY_NULL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>QUEUE_COPY(a); p_sys-&gt;p_current_song.a = NULL</cpp:value></cpp:define>



<expr_stmt><expr><call><name>QUEUE_COPY</name><argument_list>(<argument><expr><name>i_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QUEUE_COPY_NULL</name><argument_list>(<argument><expr><name>psz_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QUEUE_COPY_NULL</name><argument_list>(<argument><expr><name>psz_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QUEUE_COPY_NULL</name><argument_list>(<argument><expr><name>psz_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QUEUE_COPY_NULL</name><argument_list>(<argument><expr><name>psz_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QUEUE_COPY_NULL</name><argument_list>(<argument><expr><name>psz_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QUEUE_COPY</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>QUEUE_COPY_NULL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>QUEUE_COPY</name></cpp:undef>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_songs</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>DeleteSong</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>player_on_state_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_GetVideoTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"Not an audio-only input, not submitting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>b_meta_read</name></name> <operator>&amp;&amp;</operator> <name>state</name> <operator>&gt;=</operator> <name>VLC_PLAYER_STATE_PLAYING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ReadMetaData</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>
<expr_stmt><expr><call><name>AddToQueue</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>time_pause</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>time_pause</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>time_total_pauses</name></name> <operator>+=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>time_pause</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>time_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>playlist_on_current_index_changed</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_meta_read</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_GetVideoTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"Not an audio-only input, not submitting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>time_total_pauses</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_current_song</name><operator>.</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>input_item_IsPreparsed</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReadMetaData</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intf_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_playlist_callbacks</name></name> <specifier>const</specifier></type> <name>playlist_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>on_current_index_changed</name> <operator>=</operator> <name>playlist_on_current_index_changed</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_player_cbs</name></name> <specifier>const</specifier></type> <name>player_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>on_state_changed</name> <operator>=</operator> <name>player_on_state_changed</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name> <operator>=</operator> <call><name>vlc_intf_GetMainPlaylist</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist_listener</name></name> <operator>=</operator>
<call><name>vlc_playlist_AddListener</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>playlist_cbs</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>playlist_listener</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name> <operator>=</operator>
<call><name>vlc_player_AddListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>player_cbs</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Run</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist_listener</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_playlist_RemoveListener</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>ret</name>:</label>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_songs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteSong</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_submit_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_nowp_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(
<argument><expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_RemoveListener</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Handshake</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_scrobbler_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_timestamp</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>md5_s</name></name></type> <name>p_struct_md5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_handshake_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_buffer_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_this</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_username</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"lastfm-username"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_password</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"lastfm-password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>EMPTY_STR</name><argument_list>(<argument><expr><name>psz_username</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>EMPTY_STR</name><argument_list>(<argument><expr><name>psz_password</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EBADVAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>InitMD5</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_struct_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddMD5</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_struct_md5</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>psz_password</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_password</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EndMD5</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_struct_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_password_md5</name> <init>= <expr><call><name>psz_md5_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_struct_md5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_password_md5</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psz_timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>InitMD5</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_struct_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddMD5</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_struct_md5</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>psz_password_md5</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddMD5</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_struct_md5</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>psz_timestamp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EndMD5</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_struct_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_password_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_auth_token</name> <init>= <expr><call><name>psz_md5_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_struct_md5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_auth_token</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_scrobbler_url</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"scrobbler-url"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_scrobbler_url</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_auth_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_handshake_url</name></expr></argument>,
<argument><expr><literal type="string">"http://%s/?hs=true&amp;p=1.2&amp;c="</literal><name>CLIENT_NAME</name><literal type="string">"&amp;v="</literal><name>CLIENT_VERSION</name><literal type="string">"&amp;u=%s&amp;t=%s&amp;a=%s"</literal></expr></argument>
, <argument><expr><name>psz_scrobbler_url</name></expr></argument>, <argument><expr><name>psz_username</name></expr></argument>, <argument><expr><name>psz_timestamp</name></expr></argument>, <argument><expr><name>psz_auth_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_auth_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_scrobbler_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>vlc_stream_NewURL</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>psz_handshake_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_handshake_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_stream</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><name>i_ret</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"FAILED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_buffer_pos</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"last.fm handshake failed: %s"</literal></expr></argument>, <argument><expr><name>p_buffer_pos</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"BADAUTH"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"last.fm: Authentication failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"last.fm username or password is incorrect. "</literal>
<literal type="string">"Please verify your settings and relaunch VLC."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_AUDIOSCROBBLER_EFATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"BANNED"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"This version of VLC has been banned by last.fm. "</literal>
<literal type="string">"You should upgrade VLC, or disable the last.fm plugin."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_AUDIOSCROBBLER_EFATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"BADTIME"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"last.fm handshake failed because your clock is too "</literal>
<literal type="string">"much shifted. Please correct it, and relaunch VLC."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_AUDIOSCROBBLER_EFATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_buffer_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_buffer_pos</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>proto</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_buffer_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_buffer_pos</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">33</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>proto</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_buffer_pos</name><operator>++</operator></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_auth_token</name></name></expr></argument>, <argument><expr><name>p_buffer_pos</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_auth_token</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>, <argument><expr><literal type="string">"http://"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_buffer_pos</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>proto</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>psz_url</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>, <argument><expr><call><name>strcspn</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_url</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_nowp_url</name></name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nowp_url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_nowp_url</name><operator>.</operator><name>i_port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_nowp_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>proto</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_buffer_pos</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>, <argument><expr><literal type="string">"http://"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_buffer_pos</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>proto</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>psz_url</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>, <argument><expr><call><name>strcspn</name><argument_list>(<argument><expr><name>p_buffer_pos</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_url</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>oom</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_submit_url</name></name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_submit_url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_submit_url</name><operator>.</operator><name>i_port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_nowp_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_submit_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>proto</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>oom</name>:</label>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

<label><name>proto</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Handshake: can't recognize server protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>HandleInterval</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>i_interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>i_interval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>i_interval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>i_interval</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>i_interval</name> <operator>&gt;</operator> <literal type="number">120</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>i_interval</name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><operator>*</operator><name>i_interval</name> <operator>*</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_handshaked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_nowp_submission_ongoing</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>next_exchange</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_interval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next_exchange</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_tick_wait</name><argument_list>(<argument><expr><name>next_exchange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutex_cleanup_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_songs</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_submit_nowp</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_handshaked</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Handshaking with last.fm ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>Handshake</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_ENOMEM</name></expr>:</case>
<goto>goto <name>out</name>;</goto>

<case>case <expr><name>VLC_EBADVAR</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Last.fm username not set"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Please set a username or disable the "</literal>
<literal type="string">"audioscrobbler plugin, and restart VLC.\n"</literal>
<literal type="string">"Visit http://www.last.fm/join/ to get an account."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>

<case>case <expr><name>VLC_SUCCESS</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Handshake successful :)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_handshaked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_interval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>next_exchange</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_AUDIOSCROBBLER_EFATAL</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Exiting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>

<case>case <expr><name>VLC_EGENERIC</name></expr>:</case>
<default>default:</default>

<expr_stmt><expr><call><name>HandleInterval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next_exchange</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_handshaked</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Going to submit some data..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>req</name></decl>, <decl><type ref="prev"/><name>payload</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_memstream_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"s=%s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_auth_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_submit_nowp</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>audioscrobbler_song_t</name> <modifier>*</modifier></type><name>p_song</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_current_song</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b_nowp_submission_ongoing</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_nowp_url</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;a=%s"</literal></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;t=%s"</literal></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;b="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_b</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;l=%d"</literal></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>i_l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;n="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_n</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;m="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_m</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>url</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_submit_url</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i_song</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_song</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_songs</name></name></expr> ;</condition> <incr><expr><name>i_song</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>audioscrobbler_song_t</name> <modifier>*</modifier></type><name>p_song</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_queue</name><index>[<expr><name>i_song</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;a%%5B%d%%5D=%s"</literal></expr></argument>,
<argument><expr><name>i_song</name></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;t%%5B%d%%5D=%s"</literal></expr></argument>,
<argument><expr><name>i_song</name></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;i%%5B%d%%5D=%"</literal><name>PRIu64</name></expr></argument>,
<argument><expr><name>i_song</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_song</name><operator>-&gt;</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;o%%5B%d%%5D=P"</literal></expr></argument>, <argument><expr><name>i_song</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;r%%5B%d%%5D="</literal></expr></argument>, <argument><expr><name>i_song</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;l%%5B%d%%5D=%d"</literal></expr></argument>,
<argument><expr><name>i_song</name></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>i_l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;b=%%5B%d%%5D="</literal></expr></argument>, <argument><expr><name>i_song</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_b</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;n=%%5B%d%%5D="</literal></expr></argument>, <argument><expr><name>i_song</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_n</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><literal type="string">"&amp;m=%%5B%d%%5D="</literal></expr></argument>, <argument><expr><name>i_song</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_m</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><name><name>p_song</name><operator>-&gt;</operator><name>psz_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_memstream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="string">"POST %s HTTP/1.1\r\n"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="string">"Host: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="string">"User-Agent:"</literal>
<literal type="string">" "</literal><name>PACKAGE_NAME</name><literal type="string">"/"</literal><name>PACKAGE_VERSION</name><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="string">"Connection: close\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="string">"Accept-Encoding: identity\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="string">"Content-Type:"</literal>
<literal type="string">" application/x-www-form-urlencoded\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="string">"Content-Length: %zu\r\n"</literal></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="string">"\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>payload</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_memstream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>vlc_tls_SocketOpenTCP</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>-&gt;</operator><name>i_port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>HandleInterval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next_exchange</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_handshaked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_net_ret</name> <init>= <expr><call><name>vlc_tls_Write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_net_ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>HandleInterval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next_exchange</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_handshaked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>i_net_ret</name> <operator>=</operator> <call><name>vlc_tls_Read</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_net_ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><name>i_net_ret</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>failed</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"FAILED"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HandleInterval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next_exchange</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"BADSESSION"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Authentication failed (BADSESSION), are you connected to last.fm with another program ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_handshaked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HandleInterval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next_exchange</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b_nowp_submission_ongoing</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_nowp_submission_ongoing</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_submit_nowp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_songs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteSong</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_songs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_interval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>next_exchange</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Submission successful!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Authentication failed, handshaking again (%s)"</literal></expr></argument>,
<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_handshaked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HandleInterval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next_exchange</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
