<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_splitter\clone.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_video_splitter.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT_TEXT</name></cpp:macro> <cpp:value>N_("Number of clones")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of video windows in which to ""clone the video.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOUTLIST_TEXT</name></cpp:macro> <cpp:value>N_("Video output modules")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOUTLIST_LONGTEXT</name></cpp:macro> <cpp:value>N_("You can use specific video output modules " "for the clones. Use a comma-separated list of modules." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_HELP</name></cpp:macro> <cpp:value>N_("Duplicate your video to multiple windows " "and/or video output modules")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"clone-"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Clone video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video splitter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Clone"</literal> )</argument>)</argument_list></macro>
<macro><name>set_help</name><argument_list>(<argument>CLONE_HELP</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_SPLITTER</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"count"</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument>COUNT_TEXT</argument>, <argument>COUNT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_module_list</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"vout-list"</literal></argument>, <argument><literal type="string">"vout display"</literal></argument>, <argument>NULL</argument>,
<argument>VOUTLIST_TEXT</argument>, <argument>VOUTLIST_LONGTEXT</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"clone"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"count"</literal></expr>, <expr><literal type="string">"vout-list"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOUTSEPARATOR</name></cpp:macro> <cpp:value>':'</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Filter</name><parameter_list>( <parameter><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>pp_dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name> <init>= <expr><operator>(</operator><name>video_splitter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_clonelist</name> <init>= <expr><call><name>var_CreateGetNonEmptyString</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>,
<argument><expr><name>CFG_PREFIX</name> <literal type="string">"vout-list"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_clonelist</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>psz_clonelist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>psz_clonelist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>VOUTSEPARATOR</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_clonelist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><name>psz_clonelist</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>psz_tmp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_new</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><name>VOUTSEPARATOR</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_new</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psz_new</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_module</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <name>psz_new</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_clonelist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"count"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_module</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>video_splitter_output_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><operator>&amp;</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>pf_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>mouse</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><literal type="string">"spawning %i clone(s)"</literal></expr></argument>, <argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name> <init>= <expr><operator>(</operator><name>video_splitter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>video_splitter_output_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><operator>&amp;</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Filter</name><parameter_list>( <parameter><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>pp_dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>video_splitter_NewPicture</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>pp_dst</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name><name>pp_dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

</unit>
