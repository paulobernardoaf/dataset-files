<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_splitter\panoramix.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_video_splitter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVERLAP</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERLAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/randr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_MAX</name></cpp:macro> <cpp:value>(15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_MAX</name></cpp:macro> <cpp:value>(15)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLS_TEXT</name></cpp:macro> <cpp:value>N_("Number of columns")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the number of horizontal video windows in " "which to split the video")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWS_TEXT</name></cpp:macro> <cpp:value>N_("Number of rows")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the number of vertical video windows in " "which to split the video")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_TEXT</name></cpp:macro> <cpp:value>N_("Active windows")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Comma-separated list of active windows, " "defaults to all")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"panoramix-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANORAMIX_HELP</name></cpp:macro> <cpp:value>N_("Split the video in multiple windows to " "display on a wall of screens")</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Panoramix: wall with overlap video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Panoramix"</literal> )</argument>)</argument_list></macro>
<macro><name>set_help</name><argument_list>(<argument>PANORAMIX_HELP</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video splitter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_SPLITTER</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"cols"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>COLS_TEXT</argument>, <argument>COLS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument>COL_MAX</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"rows"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>ROWS_TEXT</argument>, <argument>ROWS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument>ROW_MAX</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERLAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LENGTH_TEXT</name></cpp:macro> <cpp:value>N_("length of the overlapping area (in %)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LENGTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select in percent the length of the blended zone")</cpp:value></cpp:define>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-length"</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument>LENGTH_TEXT</argument>, <argument>LENGTH_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_TEXT</name></cpp:macro> <cpp:value>N_("height of the overlapping area (in %)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select in percent the height of the blended zone (case of 2x2 wall)")</cpp:value></cpp:define>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-height"</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument>HEIGHT_TEXT</argument>, <argument>HEIGHT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTENUATION_TEXT</name></cpp:macro> <cpp:value>N_("Attenuation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTENUATION_LONGTEXT</name></cpp:macro> <cpp:value>N_("Check this option if you want attenuate blended zone by this plug-in (if option is unchecked, attenuate is made by opengl)")</cpp:value></cpp:define>
<macro><name>add_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"attenuate"</literal></argument>, <argument>true</argument>, <argument>ATTENUATION_TEXT</argument>, <argument>ATTENUATION_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEGIN_TEXT</name></cpp:macro> <cpp:value>N_("Attenuation, begin (in %)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEGIN_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select in percent the Lagrange coefficient of the beginning blended zone")</cpp:value></cpp:define>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-begin"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument>BEGIN_TEXT</argument>, <argument>BEGIN_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIDDLE_TEXT</name></cpp:macro> <cpp:value>N_("Attenuation, middle (in %)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIDDLE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select in percent the Lagrange coefficient of the middle of blended zone")</cpp:value></cpp:define>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-middle"</literal></argument>, <argument><literal type="number">50</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument>MIDDLE_TEXT</argument>, <argument>MIDDLE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_TEXT</name></cpp:macro> <cpp:value>N_("Attenuation, end (in %)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select in percent the Lagrange coefficient of the end of blended zone")</cpp:value></cpp:define>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-end"</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument>END_TEXT</argument>, <argument>END_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIDDLE_POS_TEXT</name></cpp:macro> <cpp:value>N_("middle position (in %)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIDDLE_POS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select in percent (50 is center) the position of the middle point (Lagrange) of blended zone")</cpp:value></cpp:define>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-middle-pos"</literal></argument>, <argument><literal type="number">50</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">99</literal></argument>, <argument>MIDDLE_POS_TEXT</argument>, <argument>MIDDLE_POS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGAMMA_TEXT</name></cpp:macro> <cpp:value>N_("Gamma (Red) correction")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGAMMA_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the gamma for the correction of blended zone (Red or Y component)")</cpp:value></cpp:define>
<macro><name>add_float_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-gamma-red"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>RGAMMA_TEXT</argument>, <argument>RGAMMA_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GGAMMA_TEXT</name></cpp:macro> <cpp:value>N_("Gamma (Green) correction")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GGAMMA_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the gamma for the correction of blended zone (Green or U component)")</cpp:value></cpp:define>
<macro><name>add_float_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-gamma-green"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>GGAMMA_TEXT</argument>, <argument>GGAMMA_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGAMMA_TEXT</name></cpp:macro> <cpp:value>N_("Gamma (Blue) correction")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGAMMA_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the gamma for the correction of blended zone (Blue or V component)")</cpp:value></cpp:define>
<macro><name>add_float_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-gamma-blue"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>BGAMMA_TEXT</argument>, <argument>BGAMMA_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGAMMA_BC_TEXT</name></cpp:macro> <cpp:value>N_("Black Crush for Red")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGAMMA_BC_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the Black Crush of blended zone (Red or Y component)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GGAMMA_BC_TEXT</name></cpp:macro> <cpp:value>N_("Black Crush for Green")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GGAMMA_BC_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the Black Crush of blended zone (Green or U component)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGAMMA_BC_TEXT</name></cpp:macro> <cpp:value>N_("Black Crush for Blue")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGAMMA_BC_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the Black Crush of blended zone (Blue or V component)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGAMMA_WC_TEXT</name></cpp:macro> <cpp:value>N_("White Crush for Red")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGAMMA_WC_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the White Crush of blended zone (Red or Y component)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GGAMMA_WC_TEXT</name></cpp:macro> <cpp:value>N_("White Crush for Green")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GGAMMA_WC_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the White Crush of blended zone (Green or U component)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGAMMA_WC_TEXT</name></cpp:macro> <cpp:value>N_("White Crush for Blue")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGAMMA_WC_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the White Crush of blended zone (Blue or V component)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGAMMA_BL_TEXT</name></cpp:macro> <cpp:value>N_("Black Level for Red")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGAMMA_BL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the Black Level of blended zone (Red or Y component)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GGAMMA_BL_TEXT</name></cpp:macro> <cpp:value>N_("Black Level for Green")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GGAMMA_BL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the Black Level of blended zone (Green or U component)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGAMMA_BL_TEXT</name></cpp:macro> <cpp:value>N_("Black Level for Blue")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGAMMA_BL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the Black Level of blended zone (Blue or V component)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGAMMA_WL_TEXT</name></cpp:macro> <cpp:value>N_("White Level for Red")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGAMMA_WL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the White Level of blended zone (Red or Y component)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GGAMMA_WL_TEXT</name></cpp:macro> <cpp:value>N_("White Level for Green")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GGAMMA_WL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the White Level of blended zone (Green or U component)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGAMMA_WL_TEXT</name></cpp:macro> <cpp:value>N_("White Level for Blue")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGAMMA_WL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the White Level of blended zone (Blue or V component)")</cpp:value></cpp:define>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-blackcrush-red"</literal></argument>, <argument><literal type="number">140</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>RGAMMA_BC_TEXT</argument>, <argument>RGAMMA_BC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-blackcrush-green"</literal></argument>, <argument><literal type="number">140</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>GGAMMA_BC_TEXT</argument>, <argument>GGAMMA_BC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-blackcrush-blue"</literal></argument>, <argument><literal type="number">140</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>BGAMMA_BC_TEXT</argument>, <argument>BGAMMA_BC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-whitecrush-red"</literal></argument>, <argument><literal type="number">200</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>RGAMMA_WC_TEXT</argument>, <argument>RGAMMA_WC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-whitecrush-green"</literal></argument>, <argument><literal type="number">200</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>GGAMMA_WC_TEXT</argument>, <argument>GGAMMA_WC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-whitecrush-blue"</literal></argument>, <argument><literal type="number">200</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>BGAMMA_WC_TEXT</argument>, <argument>BGAMMA_WC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-blacklevel-red"</literal></argument>, <argument><literal type="number">150</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>RGAMMA_BL_TEXT</argument>, <argument>RGAMMA_BL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-blacklevel-green"</literal></argument>, <argument><literal type="number">150</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>GGAMMA_BL_TEXT</argument>, <argument>GGAMMA_BL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-blacklevel-blue"</literal></argument>, <argument><literal type="number">150</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>BGAMMA_BL_TEXT</argument>, <argument>BGAMMA_BL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-whitelevel-red"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>RGAMMA_WL_TEXT</argument>, <argument>RGAMMA_WL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-whitelevel-green"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>GGAMMA_WL_TEXT</argument>, <argument>GGAMMA_WL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bz-whitelevel-blue"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>BGAMMA_WL_TEXT</argument>, <argument>BGAMMA_WL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>add_obsolete_bool</name><argument_list>( <argument><expr><name>CFG_PREFIX</name> <literal type="string">"xinerama"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>add_obsolete_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"offset-x"</literal></argument> )</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"active"</literal></argument>, <argument>NULL</argument>, <argument>ACTIVE_TEXT</argument>, <argument>ACTIVE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"panoramix"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"cols"</literal></expr>, <expr><literal type="string">"rows"</literal></expr>, <expr><literal type="string">"bz-length"</literal></expr>, <expr><literal type="string">"bz-height"</literal></expr>, <expr><literal type="string">"attenuate"</literal></expr>,
<expr><literal type="string">"bz-begin"</literal></expr>, <expr><literal type="string">"bz-middle"</literal></expr>, <expr><literal type="string">"bz-end"</literal></expr>, <expr><literal type="string">"bz-middle-pos"</literal></expr>, <expr><literal type="string">"bz-gamma-red"</literal></expr>,
<expr><literal type="string">"bz-gamma-green"</literal></expr>, <expr><literal type="string">"bz-gamma-blue"</literal></expr>, <expr><literal type="string">"bz-blackcrush-red"</literal></expr>,
<expr><literal type="string">"bz-blackcrush-green"</literal></expr>, <expr><literal type="string">"bz-blackcrush-blue"</literal></expr>, <expr><literal type="string">"bz-whitecrush-red"</literal></expr>,
<expr><literal type="string">"bz-whitecrush-green"</literal></expr>, <expr><literal type="string">"bz-whitecrush-blue"</literal></expr>, <expr><literal type="string">"bz-blacklevel-red"</literal></expr>,
<expr><literal type="string">"bz-blacklevel-green"</literal></expr>, <expr><literal type="string">"bz-blacklevel-blue"</literal></expr>, <expr><literal type="string">"bz-whitelevel-red"</literal></expr>,
<expr><literal type="string">"bz-whitelevel-green"</literal></expr>, <expr><literal type="string">"bz-whitelevel-blue"</literal></expr>, <expr><literal type="string">"active"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCURACY</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>clip_accuracy</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>&gt;</operator> <name>ACCURACY</name><operator>)</operator></expr> ?</condition><then> <expr><name>ACCURACY</name></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>clip_unit</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>f</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>: <expr><operator>(</operator> <ternary><condition><expr><name>f</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><name>f</name></expr></else></ternary> <operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>f_black_crush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_black_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_white_crush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_white_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_gamma</name></decl>;</decl_stmt>
}</block></struct></type> <name>panoramix_gamma_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_bottom</name></decl>;</decl_stmt>
}</block> <decl><name>black</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_bottom</name></decl>;</decl_stmt>
}</block> <decl><name>attenuate</name></decl>;</struct>
}</block></struct></type> <name>panoramix_filter_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_output</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_src_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_src_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_src_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_src_height</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>panoramix_filter_t</name></type> <name>filter</name></decl>;</decl_stmt>

}</block></struct></type> <name>panoramix_output_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>pi_div_w</name><index>[<expr><name>VOUT_MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>pi_div_h</name><index>[<expr><name>VOUT_MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>pi_black</name><index>[<expr><name>VOUT_MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_planar</name></decl>;</decl_stmt>

}</block></struct></type> <name>panoramix_chroma_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>panoramix_chroma_t</name> <modifier>*</modifier></type><name>p_chroma</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_attenuate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bz_length</name></decl>, <name>bz_height</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bz_begin</name></decl>, <name>bz_middle</name>, <name>bz_end</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bz_middle_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a_0</name></decl>, <name>a_1</name>, <name>a_2</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>lambdav</name><index>[<expr><name>VOUT_MAX_PLANES</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ACCURACY</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>lambdah</name><index>[<expr><name>VOUT_MAX_PLANES</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ACCURACY</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_overlap_w2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_overlap_h2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_lut</name><index>[<expr><name>VOUT_MAX_PLANES</name></expr>]</index><index>[<expr><name>ACCURACY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>panoramix_output_t</name></type> <name><name>pp_output</name><index>[<expr><name>COL_MAX</name></expr>]</index><index>[<expr><name>ROW_MAX</name></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>video_splitter_sys_t</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Filter</name><parameter_list>( <parameter><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>pp_dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mouse</name><parameter_list>( <parameter><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>vout_window_mouse_event_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Configuration</name><parameter_list>( <parameter><decl><type><name>panoramix_output_t</name></type> <name><name>pp_output</name><index>[<expr><name>ROW_MAX</name></expr>]</index><index>[<expr><name>COL_MAX</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_row</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_src_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_half_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_half_h</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_attenuate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name> <modifier>*</modifier></type><name>pb_active</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>GammaFactor</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>panoramix_gamma_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_value</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FilterPlanar</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_out_pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_in_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_copy_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_copy_lines</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_pixel_black</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>panoramix_filter_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name><name>p_lut</name><index>[<expr><name>ACCURACY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>lambdav</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ACCURACY</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>lambdah</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ACCURACY</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>panoramix_chroma_t</name></type> <name><name>p_chroma_array</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_I410</name></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I411</name></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_YV12</name></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I420</name></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_J420</name></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I422</name></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_J422</name></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I440</name></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_J440</name></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_I444</name></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>CountMonitors</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_display</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x11-display"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>snum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>xcb_connect</name><argument_list>( <argument><expr><name>psz_display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snum</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_display</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>xcb_connection_has_error</name><argument_list>( <argument><expr><name>conn</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><call><name>xcb_get_setup</name><argument_list>( <argument><expr><name>conn</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_screen_t</name> <modifier>*</modifier></type><name>scr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>xcb_screen_iterator_t</name></type> <name>i</name> <init>= <expr><call><name>xcb_setup_roots_iterator</name><argument_list>( <argument><expr><name>setup</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name><name>i</name><operator>.</operator><name>rem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><call><name>xcb_screen_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i</name></expr></argument> )</argument_list></call></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>snum</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>scr</name> <operator>=</operator> <name><name>i</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>snum</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>scr</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_randr_query_version_reply_t</name> <modifier>*</modifier></type><name>v</name> <init>=
<expr><call><name>xcb_randr_query_version_reply</name><argument_list>( <argument><expr><name>conn</name></expr></argument>,
<argument><expr><call><name>xcb_randr_query_version</name><argument_list>( <argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using X RandR extension v%"</literal><name>PRIu32</name><literal type="string">".%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>minor_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_randr_get_screen_resources_reply_t</name> <modifier>*</modifier></type><name>r</name> <init>=
<expr><call><name>xcb_randr_get_screen_resources_reply</name><argument_list>( <argument><expr><name>conn</name></expr></argument>,
<argument><expr><call><name>xcb_randr_get_screen_resources</name><argument_list>( <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>scr</name><operator>-&gt;</operator><name>root</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>r</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_randr_output_t</name> <modifier>*</modifier></type><name>outputs</name> <init>=
<expr><call><name>xcb_randr_get_screen_resources_outputs</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>num_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>xcb_randr_get_output_info_reply_t</name> <modifier>*</modifier></type><name>output</name> <init>=
<expr><call><name>xcb_randr_get_output_info_reply</name><argument_list>( <argument><expr><name>conn</name></expr></argument>,
<argument><expr><call><name>xcb_randr_get_output_info</name><argument_list>( <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>output</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>output</name><operator>-&gt;</operator><name>connection</name></name> <operator>==</operator> <name>XCB_RANDR_CONNECTION_CONNECTED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"X randr has %u outputs"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>xcb_disconnect</name><argument_list>( <argument><expr><name>conn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name> <init>= <expr><operator>(</operator><name>video_splitter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_splitter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>panoramix_chroma_t</name> <modifier>*</modifier></type><name>p_chroma</name></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name> <init>= <expr><name><name>p_chroma_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_chroma</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><literal type="string">"colorspace not supported by plug-in !"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_chroma</name> <operator>==</operator> <name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_chroma</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_chroma_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chroma</name></name> <operator>=</operator> <name>p_chroma</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"cols"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rows"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_monitor_count</name> <init>= <expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CMONITORS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_monitor_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>( <argument><expr><name>SM_CXVIRTUALSCREEN</name></expr></argument> )</argument_list></call> <operator>/</operator> <call><name>GetSystemMetrics</name><argument_list>( <argument><expr><name>SM_CXSCREEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>( <argument><expr><name>SM_CYVIRTUALSCREEN</name></expr></argument> )</argument_list></call> <operator>/</operator> <call><name>GetSystemMetrics</name><argument_list>( <argument><expr><name>SM_CYSCREEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>!=</operator> <name>i_monitor_count</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>=</operator> <name>i_monitor_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_monitors</name> <init>= <expr><call><name>CountMonitors</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_monitors</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> 
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>w</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i_monitors</name> <operator>/</operator> <name>w</name><operator>)</operator> <operator>&gt;=</operator> <name>w</name></expr> ;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_monitors</name> <operator>%</operator> <name>w</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>=</operator> <name>i_monitors</name> <operator>/</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"cols"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rows"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_attenuate</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"attenuate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bz_length</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bz_height</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-height"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bz_begin</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-begin"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bz_middle</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-middle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bz_end</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-end"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bz_middle_pos</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-middle-pos"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_p</name> <init>= <expr><literal type="number">100.0</literal> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bz_middle_pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>a_2</name></name> <operator>=</operator> <name>d_p</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bz_begin</name></name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>d_p</name> <operator>*</operator> <name>d_p</name> <operator>/</operator> <operator>(</operator><name>d_p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bz_middle</name></name> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>d_p</name> <operator>/</operator> <operator>(</operator><name>d_p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bz_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>a_1</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>d_p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bz_begin</name></name> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>d_p</name> <operator>*</operator> <name>d_p</name> <operator>/</operator> <operator>(</operator><name>d_p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bz_middle</name></name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name>d_p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bz_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>a_0</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bz_begin</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>COL_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ROW_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><literal type="string">"opening a %i x %i wall"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>bz_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_overlap_w2_max</name> <init>= <expr><name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_overlap_h2_max</name> <init>= <expr><name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_overlap2_max</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_overlap_w2_max</name></expr></argument>, <argument><expr><name>i_overlap_h2_max</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_w2</name></name> <operator>=</operator> <name>i_overlap2_max</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bz_length</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_w2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_h2</name></name> <operator>=</operator> <name>i_overlap2_max</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bz_height</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_h2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_div_max_w</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_div_max_h</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VOUT_MAX_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_div_max_w</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_div_max_w</name></expr></argument>, <argument><expr><name><name>p_chroma</name><operator>-&gt;</operator><name>pi_div_w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_div_max_h</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_div_max_h</name></expr></argument>, <argument><expr><name><name>p_chroma</name><operator>-&gt;</operator><name>pi_div_h</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_w2</name></name> <operator>=</operator> <name>i_div_max_w</name> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_w2</name></name> <operator>/</operator> <name>i_div_max_w</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_h2</name></name> <operator>=</operator> <name>i_div_max_h</name> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_h2</name></name> <operator>/</operator> <name>i_div_max_h</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_w2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_h2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_attenuate</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>panoramix_gamma_t</name></type> <name><name>p_gamma</name><index>[<expr><name>VOUT_MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f_gamma</name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-gamma-red"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f_gamma</name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-gamma-green"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>f_gamma</name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-gamma-blue"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f_black_crush</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-blackcrush-red"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f_black_crush</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-blackcrush-green"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>f_black_crush</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-blackcrush-blue"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f_white_crush</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-whitecrush-red"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f_white_crush</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-whitecrush-green"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>f_white_crush</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-whitecrush-blue"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f_black_level</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-blacklevel-red"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f_black_level</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-blacklevel-green"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>f_black_level</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-blacklevel-blue"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f_white_level</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-whitelevel-red"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f_white_level</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-whitelevel-green"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>f_white_level</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bz-whitelevel-blue"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VOUT_MAX_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_gamma</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_black_crush</name> <operator>=</operator> <literal type="number">140.0</literal><operator>/</operator><literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_white_crush</name> <operator>=</operator> <literal type="number">200.0</literal><operator>/</operator><literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_black_level</name> <operator>=</operator> <literal type="number">150.0</literal><operator>/</operator><literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_white_level</name> <operator>=</operator> <literal type="number">0.0</literal><operator>/</operator><literal type="number">255.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_chroma</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YV12</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>panoramix_gamma_t</name></type> <name>t</name> <init>= <expr><name><name>p_gamma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_gamma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gamma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_index2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index2</name> <operator>&lt;=</operator> <name>ACCURACY</name></expr>;</condition> <incr><expr><name>i_index2</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name>VOUT_MAX_PLANES</name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f_factor</name> <init>= <expr><call><name>GammaFactor</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_gamma</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>i_index</name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_lut</name> <init>= <expr><call><name>clip_unit</name><argument_list>( <argument><expr><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>ACCURACY</name> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_index2</name><operator>)</operator> <operator>*</operator> <name>f_factor</name> <operator>/</operator> <operator>(</operator><name>ACCURACY</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_lut</name><index>[<expr><name>i_plane</name></expr>]</index><index>[<expr><name>i_index2</name></expr>]</index><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <name>f_lut</name> <operator>*</operator> <name>i_index</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>f_lut</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_chroma</name><operator>-&gt;</operator><name>pi_black</name><index>[<expr><name>i_plane</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name>VOUT_MAX_PLANES</name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_chroma</name><operator>-&gt;</operator><name>pi_div_w</name><index>[<expr><name>i_plane</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>p_chroma</name><operator>-&gt;</operator><name>pi_div_h</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_length_w</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_w2</name></name><operator>)</operator> <operator>/</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pi_div_w</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_length_h</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_h2</name></name><operator>)</operator> <operator>/</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pi_div_h</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_dir</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i_dir</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_length</name> <init>= <expr><ternary><condition><expr><name>i_dir</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_length_w</name></expr> </then><else>: <expr><name>i_length_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_den</name> <init>= <expr><name>i_length</name> <operator>*</operator> <name>i_length</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a_2</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>a_2</name></name> <operator>*</operator> <operator>(</operator><name>ACCURACY</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a_1</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>a_1</name></name> <operator>*</operator> <name>i_length</name> <operator>*</operator> <operator>(</operator><name>ACCURACY</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a_0</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>a_0</name></name> <operator>*</operator> <name>i_den</name> <operator>*</operator> <operator>(</operator><name>ACCURACY</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_position</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i_position</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name>i_length</name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><ternary><condition><expr><name>i_position</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>i_index</name></expr> </then><else>: <expr><operator>(</operator><name>i_length</name> <operator>-</operator> <name>i_index</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_lambda</name> <init>= <expr><call><name>clip_accuracy</name><argument_list>( <argument><expr><name>ACCURACY</name> <operator>-</operator> <operator>(</operator><name>a_2</name> <operator>*</operator> <name>v</name><operator>*</operator><name>v</name> <operator>+</operator> <name>a_1</name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>a_0</name><operator>)</operator> <operator>/</operator> <name>i_den</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dir</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lambdav</name><index>[<expr><name>i_plane</name></expr>]</index><index>[<expr><name>i_position</name></expr>]</index><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <name>i_lambda</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lambdah</name><index>[<expr><name>i_plane</name></expr>]</index><index>[<expr><name>i_position</name></expr>]</index><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <name>i_lambda</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_state</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"active"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name><name>pb_active</name><index>[<expr><name>COL_MAX</name><operator>*</operator><name>ROW_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COL_MAX</name><operator>*</operator><name>ROW_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pb_active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>psz_state</name> <operator>==</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><name>psz_state</name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>psz_tmp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_tmp</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_next</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psz_next</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_index</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_index</name> <operator>&lt;</operator> <name>COL_MAX</name><operator>*</operator><name>ROW_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pb_active</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <name>psz_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name> <operator>=</operator>
<call><name>Configuration</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_output</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr></argument>,
<argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_w2</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap_h2</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_attenuate</name></name></expr></argument>,
<argument><expr><name>pb_active</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>panoramix_output_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_output</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_output</name><operator>-&gt;</operator><name>b_active</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>video_splitter_output_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><operator>&amp;</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name><index>[<expr><name><name>p_output</name><operator>-&gt;</operator><name>i_output</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>



<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>pf_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>mouse</name></name> <operator>=</operator> <name>Mouse</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name> <init>= <expr><operator>(</operator><name>video_splitter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_splitter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Filter</name><parameter_list>( <parameter><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>pp_dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_splitter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>video_splitter_NewPicture</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>pp_dst</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>panoramix_output_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_output</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_output</name><operator>-&gt;</operator><name>b_active</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>pp_dst</name><index>[<expr><name><name>p_output</name><operator>-&gt;</operator><name>i_output</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_div_w</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chroma</name><operator>-&gt;</operator><name>pi_div_w</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_div_h</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chroma</name><operator>-&gt;</operator><name>pi_div_h</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_div_w</name> <operator>||</operator> <operator>!</operator><name>i_div_h</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>p_srcp</name> <init>= <expr><operator>&amp;</operator><name><name>p_src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>p_dstp</name> <init>= <expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>panoramix_filter_t</name></type> <name>filter</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_right</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_right</name></name> <operator>/</operator> <name>i_div_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_left</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_left</name></name> <operator>/</operator> <name>i_div_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_top</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_top</name></name> <operator>/</operator> <name>i_div_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_bottom</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_bottom</name></name> <operator>/</operator> <name>i_div_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_right</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_right</name></name> <operator>/</operator> <name>i_div_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_left</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_left</name></name> <operator>/</operator> <name>i_div_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_top</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_top</name></name> <operator>/</operator> <name>i_div_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_bottom</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_bottom</name></name> <operator>/</operator> <name>i_div_h</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_x</name> <init>= <expr><name><name>p_output</name><operator>-&gt;</operator><name>i_src_x</name></name><operator>/</operator><name>i_div_w</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_y</name> <init>= <expr><name><name>p_output</name><operator>-&gt;</operator><name>i_src_y</name></name><operator>/</operator><name>i_div_h</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chroma</name><operator>-&gt;</operator><name>b_planar</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FilterPlanar</name><argument_list>( <argument><expr><name><name>p_dstp</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>, <argument><expr><name><name>p_dstp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_srcp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>i_y</name> <operator>*</operator> <name><name>p_srcp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_x</name> <operator>*</operator> <name><name>p_srcp</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_srcp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>,
<argument><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_src_width</name></name><operator>/</operator><name>i_div_w</name></expr></argument>, <argument><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_src_height</name></name><operator>/</operator><name>i_div_h</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chroma</name><operator>-&gt;</operator><name>pi_black</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_lut</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lambdav</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lambdah</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Mouse</name><parameter_list>( <parameter><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>,
<parameter><decl><type><name>vout_window_mouse_event_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ev</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_splitter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>panoramix_output_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_output</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_output</name><operator>-&gt;</operator><name>b_active</name></name> <operator>&amp;&amp;</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_output</name></name> <operator>==</operator> <name>i_index</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_x</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_left</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_y</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_top</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_x</name> <operator>&lt;</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_width</name></name> <operator>-</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_right</name></name> <operator>&amp;&amp;</operator>
<name>i_y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_y</name> <operator>&lt;</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name><name>p_output</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>black</name><operator>.</operator><name>i_bottom</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_src_x</name></name> <operator>+</operator> <name>i_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_src_y</name></name> <operator>+</operator> <name>i_y</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>double</name></type> <name>GammaFactor</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>panoramix_gamma_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>f_value</name> <operator>&lt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>f_black_crush</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_input</name> <init>= <expr><name>f_value</name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>f_black_level</name></name> <operator>/</operator> <name><name>g</name><operator>-&gt;</operator><name>f_black_crush</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>f_black_level</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>pow</name><argument_list>( <argument><expr><name>f_input</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>g</name><operator>-&gt;</operator><name>f_gamma</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>f_value</name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>f_white_crush</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_input</name> <init>= <expr><operator>(</operator><name>f_value</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>f_white_level</name></name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>f_white_level</name></name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>f_white_crush</name></name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>f_white_crush</name></name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>pow</name><argument_list>( <argument><expr><name>f_input</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>g</name><operator>-&gt;</operator><name>f_gamma</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1.0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Configuration</name><parameter_list>( <parameter><decl><type><name>panoramix_output_t</name></type> <name><name>pp_output</name><index>[<expr><name>ROW_MAX</name></expr>]</index><index>[<expr><name>COL_MAX</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_row</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_src_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_half_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_half_h</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_attenuate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name> <modifier>*</modifier></type><name>pb_active</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERLAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_overlap</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_overlap</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>int</name></type> <name>i_output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_src_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_dst_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_row</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_row_first</name> <init>= <expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_row_last</name> <init>= <expr><name>y</name> <operator>==</operator> <name>i_row</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_win_height</name> <init>= <expr><operator>(</operator><name>i_src_height</name> <operator>/</operator> <name>i_row</name> <operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_row_last</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_win_height</name> <operator>=</operator> <name>i_src_height</name> <operator>-</operator> <name>y</name> <operator>*</operator> <name>i_win_height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_src_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_dst_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_col</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_col_first</name> <init>= <expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_col_last</name> <init>= <expr><name>x</name> <operator>==</operator> <name>i_col</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_win_width</name> <init>= <expr><operator>(</operator><name>i_src_width</name> <operator>/</operator> <name>i_col</name> <operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_col_last</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_win_width</name> <operator>=</operator> <name>i_src_width</name> <operator>-</operator> <name>x</name> <operator>*</operator> <name>i_win_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>panoramix_filter_t</name></type> <name>cfg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_overlap</name> <operator>&amp;&amp;</operator> <name>b_attenuate</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_col</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_col_first</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>black</name><operator>.</operator><name>i_left</name></name> <operator>=</operator> <name>i_half_w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>b_col_last</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>black</name><operator>.</operator><name>i_right</name></name> <operator>=</operator> <name>i_half_w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_row</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_row_first</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>black</name><operator>.</operator><name>i_top</name></name> <operator>=</operator> <name>i_half_h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>b_row_last</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>black</name><operator>.</operator><name>i_bottom</name></name> <operator>=</operator> <name>i_half_h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_col_first</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_left</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_half_w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_col_last</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_right</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_half_w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_row_first</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_top</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_half_h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_row_last</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_bottom</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_half_h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>panoramix_output_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><operator>&amp;</operator><name><name>pp_output</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_src_x</name></name> <operator>=</operator> <name>i_src_x</name> <operator>-</operator> <name><name>cfg</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_left</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_src_y</name></name> <operator>=</operator> <name>i_src_y</name> <operator>-</operator> <name><name>cfg</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_top</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_src_width</name></name> <operator>=</operator> <name>i_win_width</name> <operator>+</operator> <name><name>cfg</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_left</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>cfg</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_right</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_src_height</name></name> <operator>=</operator> <name>i_win_height</name> <operator>+</operator> <name><name>cfg</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_top</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>cfg</name><operator>.</operator><name>attenuate</name><operator>.</operator><name>i_bottom</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>cfg</name><operator>.</operator><name>black</name><operator>.</operator><name>i_left</name></name> <operator>+</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_src_width</name></name> <operator>+</operator> <name><name>cfg</name><operator>.</operator><name>black</name><operator>.</operator><name>i_right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>cfg</name><operator>.</operator><name>black</name><operator>.</operator><name>i_top</name></name> <operator>+</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_src_height</name></name> <operator>+</operator> <name><name>cfg</name><operator>.</operator><name>black</name><operator>.</operator><name>i_bottom</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>b_active</name></name> <operator>=</operator> <name><name>pb_active</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_col</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>p_output</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_output</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_output</name><operator>-&gt;</operator><name>b_active</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_output</name></name> <operator>=</operator> <name>i_output</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>i_src_x</name> <operator>+=</operator> <name>i_win_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dst_x</name> <operator>+=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i_src_y</name> <operator>+=</operator> <name>i_win_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dst_y</name> <operator>+=</operator> <name><name>pp_output</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>i_height</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>i_output</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterPlanar</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_out_pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_in_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_copy_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_copy_lines</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_pixel_black</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>panoramix_filter_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name><name>p_lut</name><index>[<expr><name>ACCURACY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>lambdav</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ACCURACY</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>lambdah</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ACCURACY</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_left</name></name> <operator>||</operator> <operator>!</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_left</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_right</name></name> <operator>||</operator> <operator>!</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_right</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_top</name></name> <operator>||</operator> <operator>!</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_top</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_bottom</name></name> <operator>||</operator> <operator>!</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_bottom</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_out_width</name> <init>= <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_left</name></name> <operator>+</operator> <name>i_copy_pitch</name> <operator>+</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_right</name></name></expr></init></decl>;</decl_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_top</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_pixel_black</name></expr></argument>, <argument><expr><name>i_out_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_out_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_copy_lines</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name>p_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name>p_out</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_left</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>i_pixel_black</name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_left</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_left</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_left</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_dst</name><operator>++</operator> <operator>=</operator> <name><name>p_lut</name><index>[<expr><name><name>lambdav</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><operator>*</operator><name>p_src</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_unmodified_width</name> <init>= <expr><name>i_copy_pitch</name> <operator>-</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_left</name></name> <operator>-</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_right</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_unmodified_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>i_unmodified_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>i_unmodified_width</name></expr>;</expr_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_right</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_dst</name><operator>++</operator> <operator>=</operator> <name><name>p_lut</name><index>[<expr><name><name>lambdav</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><operator>*</operator><name>p_src</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_right</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>i_pixel_black</name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_right</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_right</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_attenuate_top</name> <init>= <expr><name>y</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_top</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_attenuate_bottom</name> <init>= <expr><name>y</name> <operator>&gt;=</operator> <name>i_copy_lines</name> <operator>-</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_bottom</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_attenuate_top</name> <operator>||</operator> <name>b_attenuate_bottom</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_index</name> <init>= <expr><ternary><condition><expr><name>b_attenuate_top</name></expr> ?</condition><then> <expr><name><name>lambdah</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr> </then><else>: <expr><name><name>lambdah</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name> <operator>-</operator> <operator>(</operator><name>i_copy_lines</name> <operator>-</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>attenuate</name><operator>.</operator><name>i_bottom</name></name><operator>)</operator></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_out_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_lut</name><index>[<expr><name>i_index</name></expr>]</index><index>[<expr><name><name>p_out</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_in_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_out_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>black</name><operator>.</operator><name>i_bottom</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_pixel_black</name></expr></argument>, <argument><expr><name>i_out_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_out_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void RenderPackedRGB( vout_thread_t *p_vout, picture_t *p_pic )
{
int length;
length = 2 * p_sys-&gt;i_overlap_w2 * p_pic-&gt;p-&gt;i_pixel_pitch;

if (p_sys-&gt;b_has_changed)
{
int i_plane_;
int i_col_mod;
Denom = F2(length / p_pic-&gt;p-&gt;i_pixel_pitch);
a_2 = p_sys-&gt;a_2 * (ACCURACY / 100);
a_1 = p_sys-&gt;a_1 * 2 * p_sys-&gt;i_overlap_w2 * (ACCURACY / 100);
a_0 = p_sys-&gt;a_0 * Denom * (ACCURACY / 100);
for(i_col_mod = 0; i_col_mod &lt; 2; i_col_mod++)
for (i_index = 0; i_index &lt; length / p_pic-&gt;p-&gt;i_pixel_pitch; i_index++)
for (i_plane_ = 0; i_plane_ &lt; p_pic-&gt;p-&gt;i_pixel_pitch; i_plane_++)
p_sys-&gt;lambda[i_col_mod][i_plane_][i_index] = clip_accuracy(!i_col_mod ? ACCURACY - (F4(a_2, a_1, i_index) + a_0) / Denom : ACCURACY - (F4(a_2, a_1,(length / p_pic-&gt;p-&gt;i_pixel_pitch) - i_index) + a_0) / Denom);
}

length = 2 * p_sys-&gt;i_overlap_h2;
if (p_sys-&gt;b_has_changed)
{
int i_plane_;
int i_row_mod;
Denom = F2(length);
a_2 = p_sys-&gt;a_2 * (ACCURACY / 100);
a_1 = p_sys-&gt;a_1 * length * (ACCURACY / 100);
a_0 = p_sys-&gt;a_0 * Denom * (ACCURACY / 100);
for(i_row_mod = 0; i_row_mod &lt; 2; i_row_mod++)
for (i_index = 0; i_index &lt; length; i_index++)
for (i_plane_ = 0; i_plane_ &lt; p_pic-&gt;p-&gt;i_pixel_pitch; i_plane_++)
p_sys-&gt;lambda2[i_row_mod][i_plane_][i_index] = clip_accuracy(!i_row_mod ? ACCURACY - (F4(a_2, a_1, i_index) + a_0) / Denom : ACCURACY - (F4(a_2, a_1,(length) - i_index) + a_0) / Denom);
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
