<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_output\wasapi.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITGUID</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_VTABLE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONEWWAVE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;audioclient.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/mmdevice.h"</cpp:file></cpp:include>


<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL</name></expr></argument>,
<argument><expr><name>WAVE_FORMAT_DOLBY_AC3_SPDIF</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>, <argument><expr><literal type="number">0x0010</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,
<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX</name></expr></argument>,
<argument><expr><name>WAVE_FORMAT_PCM</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>, <argument><expr><literal type="number">0x0010</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,
<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>_KSDATAFORMAT_SUBTYPE_IEC61937_DTS</name></expr></argument>,
<argument><expr><name>WAVE_FORMAT_DTS_MS</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>, <argument><expr><literal type="number">0x0010</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,
<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>_KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD</name></expr></argument>,
<argument><expr><literal type="number">0x000b</literal></expr></argument>, <argument><expr><literal type="number">0x0cea</literal></expr></argument>, <argument><expr><literal type="number">0x0010</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,
<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS</name></expr></argument>,
<argument><expr><literal type="number">0x000a</literal></expr></argument>, <argument><expr><literal type="number">0x0cea</literal></expr></argument>, <argument><expr><literal type="number">0x0010</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,
<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP</name></expr></argument>,
<argument><expr><literal type="number">0x000c</literal></expr></argument>, <argument><expr><literal type="number">0x0cea</literal></expr></argument>, <argument><expr><literal type="number">0x0010</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,
<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>InitFreq</name><parameter_list>(<parameter><decl><type><name>INIT_ONCE</name> <modifier>*</modifier></type><name>once</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>once</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
<return>return <expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>LARGE_INTEGER</name></type> <name>freq</name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>msftime_t</name></type> <name>GetQPC</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>counter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lldiv_t</name></type> <name>d</name> <init>= <expr><call><name>lldiv</name><argument_list>(<argument><expr><name><name>counter</name><operator>.</operator><name>QuadPart</name></name></expr></argument>, <argument><expr><name><name>freq</name><operator>.</operator><name>QuadPart</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>d</name><operator>.</operator><name>quot</name></name> <operator>*</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>d</name><operator>.</operator><name>rem</name></name> <operator>*</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>/</operator> <name><name>freq</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>aout_stream_sys</name>
<block>{
<decl_stmt><decl><type><name>IAudioClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hTimer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STARTED_STATE_INIT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STARTED_STATE_OK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STARTED_STATE_ERROR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>atomic_char</name></type> <name>started_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>chans_table</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>chans_to_reorder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>format</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>rate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>block_align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT64</name></type> <name>written</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>UINT32</name></type> <name>frames</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>s24s32</name></decl>;</decl_stmt> 
}</block></struct></type> <name>aout_stream_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResetTimer</name><parameter_list>(<parameter><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hTimer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DeleteTimerQueueTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hTimer</name></name></expr></argument>, <argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>TimeGet</name><parameter_list>(<parameter><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT64</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>qpcpos</name></decl>, <decl><type ref="prev"/><name>freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>started_state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STARTED_STATE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_GetService</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAudioClock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot get clock (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IAudioClock</name> <modifier>*</modifier></type><name>clock</name> <init>= <expr><name>pv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClock_GetPosition</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qpcpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClock_GetFrequency</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>IAudioClock_Release</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot get position (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>written</name> <init>= <expr><call><name>vlc_tick_from_frac</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>written</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>tick_pos</name> <init>= <expr><call><name>vlc_tick_from_frac</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">10000000</literal> <operator>%</operator> <name>CLOCK_FREQ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Frequency conversion broken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>delay</name> <operator>=</operator> <name>written</name> <operator>-</operator> <name>tick_pos</name>
<operator>-</operator> <call><name>VLC_TICK_FROM_MSFTIME</name><argument_list>(<argument><expr><call><name>GetQPC</name><argument_list>()</argument_list></call> <operator>-</operator> <name>qpcpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>CALLBACK</name></type> <name>StartDeferredCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>BOOLEAN</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IAudioClient_Start</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>started_state</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>STARTED_STATE_OK</name></expr> </then><else>: <expr><name>STARTED_STATE_ERROR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>timeout</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>StartDeferred</name><parameter_list>(<parameter><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>written</name> <init>= <expr><call><name>vlc_tick_from_frac</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>written</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>start_delay</name> <init>= <expr><name>date</name> <operator>-</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>written</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>start_delay_ms</name> <init>= <expr><ternary><condition><expr><name>start_delay</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>start_delay</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>timer_updated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>start_delay_ms</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hTimer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timer_updated</name> <operator>=</operator>
<call><name>CreateTimerQueueTimer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hTimer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>StartDeferredCallback</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start_delay_ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>WT_EXECUTEDEFAULT</name> <operator>|</operator> <name>WT_EXECUTEONLYONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>timer_updated</name> <operator>=</operator>
<call><name>ChangeTimerQueueTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hTimer</name></name></expr></argument>, <argument><expr><name>start_delay_ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer_updated</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"timer update failed, starting now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ResetTimer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer_updated</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IAudioClient_Start</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>started_state</name></name></expr></argument>, <argument><expr><name>STARTED_STATE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>started_state</name></name></expr></argument>, <argument><expr><name>STARTED_STATE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"deferring start (%"</literal><name>PRId64</name><literal type="string">" us)"</literal></expr></argument>, <argument><expr><name>start_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>Play</name><parameter_list>(<parameter><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aout_stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>started_state</name> <init>= <expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>started_state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>started_state</name> <operator>==</operator> <name>STARTED_STATE_ERROR</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_FAIL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>started_state</name> <operator>==</operator> <name>STARTED_STATE_INIT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>StartDeferred</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_ChannelReorder</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>chans_table</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_GetService</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAudioRenderClient</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot get render client (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IAudioRenderClient</name> <modifier>*</modifier></type><name>render</name> <init>= <expr><name>pv</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT32</name></type> <name>frames</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_GetCurrentPadding</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot get current padding (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>frames</name> <operator>&lt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frames</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>frames</name></name> <operator>-</operator> <name>frames</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frames</name> <operator>&gt;</operator> <name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frames</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioRenderClient_GetBuffer</name><argument_list>(<argument><expr><name>render</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot get buffer (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>copy</name> <init>= <expr><name>frames</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>block_align</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>s24s32</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>copy</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>copy</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>

</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioRenderClient_ReleaseBuffer</name><argument_list>(<argument><expr><name>render</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot release buffer (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>-=</operator> <name>frames</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>written</name></name> <operator>+=</operator> <name>frames</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frames</name></name> <operator>*</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>IAudioRenderClient_Release</name><argument_list>(<argument><expr><name>render</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>Pause</name><parameter_list>(<parameter><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>paused</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ResetTimer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>started_state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STARTED_STATE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_Stop</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>S_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_Start</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot %s stream (error 0x%lX)"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>paused</name></expr> ?</condition><then> <expr><literal type="string">"stop"</literal></expr> </then><else>: <expr><literal type="string">"start"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ResetTimer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_exchange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>started_state</name></name></expr></argument>, <argument><expr><name>STARTED_STATE_INIT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STARTED_STATE_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IAudioClient_Stop</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_Reset</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>S_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot reset stream (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>chans_out</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SPEAKER_FRONT_LEFT</name></expr>, <expr><name>SPEAKER_FRONT_RIGHT</name></expr>,
<expr><name>SPEAKER_FRONT_CENTER</name></expr>, <expr><name>SPEAKER_LOW_FREQUENCY</name></expr>,
<expr><name>SPEAKER_BACK_LEFT</name></expr>, <expr><name>SPEAKER_BACK_RIGHT</name></expr>, <expr><name>SPEAKER_BACK_CENTER</name></expr>,
<expr><name>SPEAKER_SIDE_LEFT</name></expr>, <expr><name>SPEAKER_SIDE_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>chans_in</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SPEAKER_FRONT_LEFT</name></expr>, <expr><name>SPEAKER_FRONT_RIGHT</name></expr>,
<expr><name>SPEAKER_SIDE_LEFT</name></expr>, <expr><name>SPEAKER_SIDE_RIGHT</name></expr>,
<expr><name>SPEAKER_BACK_LEFT</name></expr>, <expr><name>SPEAKER_BACK_RIGHT</name></expr>, <expr><name>SPEAKER_BACK_CENTER</name></expr>,
<expr><name>SPEAKER_FRONT_CENTER</name></expr>, <expr><name>SPEAKER_LOW_FREQUENCY</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_HdmiToWave</name><parameter_list>(<parameter><decl><type><name>WAVEFORMATEXTENSIBLE_IEC61937</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>wf_iec61937</name></decl></parameter>,
<parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier></type><name>wf</name> <init>= <expr><operator>&amp;</operator><name><name>wf_iec61937</name><operator>-&gt;</operator><name>FormatExt</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_DTSHD</name></expr>:</case>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>SubFormat</name></name> <operator>=</operator> <name>_KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>dwChannelMask</name></name> <operator>=</operator> <name>KSAUDIO_SPEAKER_7POINT1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">768000</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_EAC3</name></expr>:</case>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>SubFormat</name></name> <operator>=</operator> <name>_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>dwChannelMask</name></name> <operator>=</operator> <name>KSAUDIO_SPEAKER_5POINT1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_TRUEHD</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_MLP</name></expr>:</case>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>SubFormat</name></name> <operator>=</operator> <name>_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>dwChannelMask</name></name> <operator>=</operator> <name>KSAUDIO_SPEAKER_7POINT1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">768000</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_EXTENSIBLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name> <operator>=</operator> <literal type="number">192000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name> <operator>=</operator> <name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name> <operator>/</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator> <name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name> <operator>*</operator> <name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>wf_iec61937</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Samples</name><operator>.</operator><name>wValidBitsPerSample</name></name> <operator>=</operator> <name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf_iec61937</name><operator>-&gt;</operator><name>dwEncodedSamplesPerSec</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf_iec61937</name><operator>-&gt;</operator><name>dwEncodedChannelCount</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf_iec61937</name><operator>-&gt;</operator><name>dwAverageBytesPerSec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_SpdifToWave</name><parameter_list>(<parameter><decl><type><name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>wf</name></decl></parameter>,
<parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&lt;</operator> <literal type="number">48000</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>SubFormat</name></name> <operator>=</operator> <name>_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>SubFormat</name></name> <operator>=</operator> <name>_KSDATAFORMAT_SUBTYPE_IEC61937_DTS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_SPDIFL</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_SPDIFB</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>SubFormat</name></name> <operator>=</operator> <name>_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_EXTENSIBLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator> <name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name> <operator>*</operator> <name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>wf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Samples</name><operator>.</operator><name>wValidBitsPerSample</name></name> <operator>=</operator> <name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>dwChannelMask</name></name> <operator>=</operator> <name>SPEAKER_FRONT_LEFT</name> <operator>|</operator> <name>SPEAKER_FRONT_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_ToWave</name><parameter_list>(<parameter><decl><type><name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>wf</name></decl></parameter>,
<parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>SubFormat</name></name> <operator>=</operator> <name>KSDATAFORMAT_SUBTYPE_IEEE_FLOAT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>SubFormat</name></name> <operator>=</operator> <name>KSDATAFORMAT_SUBTYPE_PCM</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>SubFormat</name></name> <operator>=</operator> <name>KSDATAFORMAT_SUBTYPE_IEEE_FLOAT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>aout_FormatPrepare</name> <argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_EXTENSIBLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>*</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_bitspersample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>wf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>wf</name><operator>-&gt;</operator><name>Format</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>Samples</name><operator>.</operator><name>wValidBitsPerSample</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_bitspersample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>dwChannelMask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pi_vlc_chan_order_wg4</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>audio</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name><name>pi_vlc_chan_order_wg4</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>dwChannelMask</name></name> <operator>|=</operator> <name><name>chans_in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_FromWave</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WAVEFORMATEX</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>wf</name></decl></parameter>,
<parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>audio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>==</operator> <name>WAVE_FORMAT_EXTENSIBLE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier></type><name>wfe</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>wf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsEqualIID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfe</name><operator>-&gt;</operator><name>SubFormat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>KSDATAFORMAT_SUBTYPE_IEEE_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">64</literal></expr>:</case>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL64</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsEqualIID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfe</name><operator>-&gt;</operator><name>SubFormat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>KSDATAFORMAT_SUBTYPE_PCM</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wfe</name><operator>-&gt;</operator><name>Samples</name><operator>.</operator><name>wValidBitsPerSample</name></name> <operator>!=</operator> <name><name>wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>chans_in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wfe</name><operator>-&gt;</operator><name>dwChannelMask</name></name> <operator>&amp;</operator> <name><name>chans_in</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>|=</operator> <name><name>pi_vlc_chan_order_wg4</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name> <argument_list>(<argument><expr><name>audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wf</name><operator>-&gt;</operator><name>nChannels</name></name> <operator>!=</operator> <name><name>audio</name><operator>-&gt;</operator><name>i_channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>vlc_CheckWaveOrder</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WAVEFORMATEX</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>wf</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>==</operator> <name>WAVE_FORMAT_EXTENSIBLE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier></type><name>wfe</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>wf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>wfe</name><operator>-&gt;</operator><name>dwChannelMask</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>aout_CheckChannelReorder</name><argument_list>(<argument><expr><name>chans_in</name></expr></argument>, <argument><expr><name>chans_out</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>(<parameter><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ResetTimer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>started_state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STARTED_STATE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IAudioClient_Stop</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>IAudioClient_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>GetExclusivePCMFormat</name><parameter_list>(<parameter><decl><type><name>IAudioClient</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>pwf</name></decl></parameter>,
<parameter><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppwf_closest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AUDCLNT_SHAREMODE</name></type> <name>exclusive</name> <init>= <expr><name>AUDCLNT_SHAREMODE_EXCLUSIVE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ppwf_closest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_IsFormatSupported</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>exclusive</name></expr></argument>, <argument><expr><name>pwf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>AUDCLNT_E_UNSUPPORTED_FORMAT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hr</name> <operator>!=</operator> <name>S_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pwf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>==</operator> <name>WAVE_FORMAT_EXTENSIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier></type><name>pwfe</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>pwf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IsEqualIID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pwfe</name><operator>-&gt;</operator><name>SubFormat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>KSDATAFORMAT_SUBTYPE_IEEE_FLOAT</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>IsEqualIID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pwfe</name><operator>-&gt;</operator><name>SubFormat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>KSDATAFORMAT_SUBTYPE_PCM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier></type><name>pwfe_closest</name> <init>=
<expr><call><name>CoTaskMemAlloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEXTENSIBLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pwfe_closest</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>pwf_closest</name> <init>= <expr><operator>&amp;</operator><name><name>pwfe_closest</name><operator>-&gt;</operator><name>Format</name></name></expr></init></decl>;</decl_stmt>









<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>bits_pcm8_candidates</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>bits_pcm16_candidates</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>bits_pcm24_candidates</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>bits_pcm32_candidates</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>bits_candidates_size</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>bits_pcm8_candidates</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>bits_candidates</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>pwf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">64</literal></expr>:</case> 
<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>bits_candidates</name> <operator>=</operator> <name>bits_pcm32_candidates</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name>bits_candidates</name> <operator>=</operator> <name>bits_pcm24_candidates</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>bits_candidates</name> <operator>=</operator> <name>bits_pcm16_candidates</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>bits_candidates</name> <operator>=</operator> <name>bits_pcm8_candidates</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>samplerate_candidates</name><index>[]</index></name> <init>= <expr><block>{
<expr><name><name>pwf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr>,
<expr><name><name>pwf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>==</operator> <literal type="number">48000</literal> <operator>?</operator> <literal type="number">0</literal> <operator>:</operator> <literal type="number">48000</literal></expr>,
<expr><name><name>pwf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>==</operator> <literal type="number">44100</literal> <operator>?</operator> <literal type="number">0</literal> <operator>:</operator> <literal type="number">44100</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>samplerate_candidates_size</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>samplerate_candidates</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>channels_candidates</name><index>[]</index></name> <init>= <expr><block>{
<expr><name><name>pwf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>,
<expr><name><name>pwf</name><operator>-&gt;</operator><name>nChannels</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>?</operator> <literal type="number">0</literal> <operator>:</operator> <literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>channels_candidates_size</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>channels_candidates</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>bits_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bits_idx</name> <operator>&lt;</operator> <name>bits_candidates_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>bits_idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bits</name> <init>= <expr><name><name>bits_candidates</name><index>[<expr><name>bits_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>samplerate_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>samplerate_idx</name> <operator>&lt;</operator> <name>samplerate_candidates_size</name></expr>;</condition>
<incr><expr><operator>++</operator><name>samplerate_idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>samplerate</name> <init>= <expr><name><name>samplerate_candidates</name><index>[<expr><name>samplerate_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplerate</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>channels_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>channels_idx</name> <operator>&lt;</operator> <name>channels_candidates_size</name></expr>;</condition>
<incr><expr><operator>++</operator><name>channels_idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>channels</name> <init>= <expr><name><name>channels_candidates</name><index>[<expr><name>channels_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_EXTENSIBLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>SubFormat</name></name> <operator>=</operator> <name>KSDATAFORMAT_SUBTYPE_PCM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name> <operator>=</operator> <name>samplerate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>Samples</name><operator>.</operator><name>wValidBitsPerSample</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name> <operator>=</operator> <name>bits</name> <operator>/</operator> <literal type="number">8</literal> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator>
<name><name>pwfe_closest</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name> <operator>*</operator> <name>samplerate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>==</operator> <name><name>pwf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>dwChannelMask</name></name> <operator>=</operator> <name><name>pwfe</name><operator>-&gt;</operator><name>dwChannelMask</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>channels</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>dwChannelMask</name></name> <operator>=</operator>
<name>SPEAKER_FRONT_LEFT</name><operator>|</operator><name>SPEAKER_FRONT_RIGHT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>pwfe_closest</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <name><name>pwfe</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>cbSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_IsFormatSupported</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>exclusive</name></expr></argument>,
<argument><expr><name>pwf_closest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>AUDCLNT_E_UNSUPPORTED_FORMAT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppwf_closest</name> <operator>=</operator> <name>pwf_closest</name></expr>;</expr_stmt>


<return>return <expr><name>S_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hr</name> <operator>!=</operator> <name>S_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>pwfe_closest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hr</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>pwfe_closest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUDCLNT_E_UNSUPPORTED_FORMAT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>Start</name><parameter_list>(<parameter><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pfmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>sid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>INIT_ONCE</name></type> <name>freq_once</name> <init>= <expr><name>INIT_ONCE_STATIC_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InitOnceExecuteOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freq_once</name></expr></argument>, <argument><expr><name>InitFreq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>aout_stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_OUTOFMEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hTimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>started_state</name></name></expr></argument>, <argument><expr><name>STARTED_STATE_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>WAVEFORMATEXTENSIBLE_IEC61937</name></type> <name>wf_iec61937</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier></type><name>pwfe</name> <init>= <expr><operator>&amp;</operator><name><name>wf_iec61937</name><operator>.</operator><name>FormatExt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>pwf</name> <init>= <expr><operator>&amp;</operator><name><name>pwfe</name><operator>-&gt;</operator><name>Format</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pwf_closest</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pwf_mix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AUDCLNT_SHAREMODE</name></type> <name>shared_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REFERENCE_TIME</name></type> <name>buffer_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_sample_format_t</name></type> <name>fmt</name> <init>= <expr><operator>*</operator><name>pfmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_spdif</name> <init>= <expr><call><name>AOUT_FMT_SPDIF</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_hdmi</name> <init>= <expr><call><name>AOUT_FMT_HDMI</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>aout_stream_Activate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAudioClient</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot activate client (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name>pv</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>b_spdif</name> <operator>||</operator> <name>b_hdmi</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b_spdif</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_SpdifToWave</name><argument_list>(<argument><expr><name>pwfe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_HdmiToWave</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wf_iec61937</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>shared_mode</name> <operator>=</operator> <name>AUDCLNT_SHAREMODE_EXCLUSIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer_duration</name> <operator>=</operator> <call><name>MSFTIME_FROM_MS</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_IsFormatSupported</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>shared_mode</name></expr></argument>,
<argument><expr><name>pwf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pwf_closest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>AOUT_FMT_LINEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>.</operator><name>channel_type</name></name> <operator>==</operator> <name>AUDIO_CHANNEL_TYPE_AMBISONICS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr>;</expr_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_GetMixFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pwf_mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>vlc_FromWave</name><argument_list>(<argument><expr><name>pwf_mix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_ToWave</name><argument_list>(<argument><expr><name>pwfe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pwf</name> <operator>=</operator> <name>pwf_mix</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<expr_stmt><expr><name>buffer_duration</name> <operator>=</operator> <call><name>MSFTIME_FROM_MS</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_ToWave</name><argument_list>(<argument><expr><name>pwfe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_duration</name> <operator>=</operator> <call><name>MSFTIME_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>AOUT_MAX_PREPARE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>var_CreateGetBool</name><argument_list>(<argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"wasapi-exclusive"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>shared_mode</name> <operator>=</operator> <name>AUDCLNT_SHAREMODE_EXCLUSIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_duration</name> <operator>=</operator> <call><name>MSFTIME_FROM_MS</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>GetExclusivePCMFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>pwf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pwf_closest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>shared_mode</name> <operator>=</operator> <name>AUDCLNT_SHAREMODE_SHARED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_IsFormatSupported</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>shared_mode</name></expr></argument>,
<argument><expr><name>pwf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pwf_closest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_FAIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot negotiate audio format (error 0x%lX)%s"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>hr</name> <operator>==</operator> <name>AUDCLNT_E_UNSUPPORTED_FORMAT</name>
<operator>&amp;&amp;</operator> <name><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>==</operator> <name>VLC_CODEC_SPDIFL</name></expr> ?</condition><then>
<expr><literal type="string">": digital pass-through not supported"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pwf_closest</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_FromWave</name><argument_list>(<argument><expr><name>pwf_closest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>pwf_closest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"unsupported audio format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_INVALIDARG</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"modified format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pwf</name> <operator>=</operator> <name>pwf_closest</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pwf_closest</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_SPDIFL</name></expr> ?</condition><then>
<expr><call><name>vlc_CheckWaveOrder</name><argument_list>(<argument><expr><name>pwf</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>chans_table</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name><name>pwf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name><name>pwf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>s24s32</name></name> <operator>=</operator> <name><name>pwf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>==</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>==</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>s24s32</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"audio device configured as s24"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_Initialize</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>shared_mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer_duration</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pwf</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>pwf_closest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize audio client (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_GetBufferSize</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot get buffer size (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"buffer size : %"</literal><name>PRIu32</name><literal type="string">" frames"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>REFERENCE_TIME</name></type> <name>latT</name></decl>, <decl><type ref="prev"/><name>defT</name></decl>, <decl><type ref="prev"/><name>minT</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>IAudioClient_GetStreamLatency</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>latT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>IAudioClient_GetDevicePeriod</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"maximum latency: %"</literal><name>PRIu64</name><literal type="string">"00 ns"</literal></expr></argument>, <argument><expr><name>latT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"default period : %"</literal><name>PRIu64</name><literal type="string">"00 ns"</literal></expr></argument>, <argument><expr><name>defT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"minimum period : %"</literal><name>PRIu64</name><literal type="string">"00 ns"</literal></expr></argument>, <argument><expr><name>minT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>pwf_mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pfmt</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>TimeGet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>Play</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>Pause</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>pwf_mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IAudioClient_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WASAPI_EXCLUSIVE_TEXT</name></cpp:macro> <cpp:value>N_("Use exclusive mode")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WASAPI_EXCLUSIVE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "VLC will have a direct connection of the audio endpoint device. " "This mode can be used to reduce the audio latency or " "to assure that the audio stream won't be modified by the OS. " "This mode is more likely to fail if the soundcard format is not " "handled by VLC.")</cpp:value></cpp:define>






<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"WASAPI"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Windows Audio Session API output"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"aout stream"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_AUDIO</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"wasapi-exclusive"</literal></argument>, <argument>false</argument>, <argument>WASAPI_EXCLUSIVE_TEXT</argument>,
<argument>WASAPI_EXCLUSIVE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_AUDIO_AOUT</argument>)</argument_list></macro>
<macro><name>set_callback</name><argument_list>(<argument>Start</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
