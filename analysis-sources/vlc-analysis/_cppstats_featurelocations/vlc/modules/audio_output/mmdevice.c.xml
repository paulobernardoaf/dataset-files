<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_output\mmdevice.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITGUID</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_VTABLE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;audiopolicy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmdeviceapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endpointvolume.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DEFINE_PROPERTYKEY</name><argument_list>(<argument><expr><name>PKEY_Device_FriendlyName</name></expr></argument>, <argument><expr><literal type="number">0xa45c254e</literal></expr></argument>, <argument><expr><literal type="number">0xdf1c</literal></expr></argument>, <argument><expr><literal type="number">0x4efd</literal></expr></argument>,
<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0x67</literal></expr></argument>, <argument><expr><literal type="number">0xd1</literal></expr></argument>, <argument><expr><literal type="number">0x46</literal></expr></argument>, <argument><expr><literal type="number">0xa8</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0xe0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/mmdevice.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DEFINE_GUID</name> <argument_list>(<argument><expr><name>GUID_VLC_AUD_OUT</name></expr></argument>, <argument><expr><literal type="number">0x4533f59d</literal></expr></argument>, <argument><expr><literal type="number">0x59ee</literal></expr></argument>, <argument><expr><literal type="number">0x00c6</literal></expr></argument>,
<argument><expr><literal type="number">0xad</literal></expr></argument>, <argument><expr><literal type="number">0xb2</literal></expr></argument>, <argument><expr><literal type="number">0xc6</literal></expr></argument>, <argument><expr><literal type="number">0x8b</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x1a</literal></expr></argument>, <argument><expr><literal type="number">0x66</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TryEnterMTA</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>CoInitializeEx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize COM (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TryEnterMTA</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TryEnterMTA(VLC_OBJECT(o))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EnterMTA</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>CoInitializeEx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LeaveMTA</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name></type> <name><name>default_device</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><literal type="string">L""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>default_device_b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMMDeviceEnumerator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>IMMNotificationClient</name></name></type> <name>device_events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IAudioSessionEvents</name></name></type> <name>session_events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IAudioVolumeDuckNotification</name></name></type> <name>duck</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ducks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>requested_device</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>requested_volume</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>requested_mute</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>acquired_device</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>request_device_restart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONDITION_VARIABLE</name></type> <name>work</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONDITION_VARIABLE</name></type> <name>ready</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt> 
}</block></struct></type> <name>aout_sys_t</name>;</typedef>













<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DeviceSelect</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_FromHR</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>HRESULT</name></type> <name>hr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>hr</name> <operator>==</operator> <name>AUDCLNT_E_DEVICE_INVALIDATED</name> <operator>||</operator>
<name>hr</name> <operator>==</operator> <name>AUDCLNT_E_RESOURCES_INVALIDATED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeviceSelect</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>TimeGet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>aout_stream_TimeGet</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Play</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>aout_stream_Play</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_FromHR</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Pause</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>aout_stream_Pause</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>paused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_FromHR</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>aout_stream_Flush</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_FromHR</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VolumeSetLocked</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><literal type="number">1.f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vol</name> <operator>=</operator> <name>vol</name> <operator>*</operator> <name>vol</name> <operator>*</operator> <name>vol</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>vol</name> <operator>&gt;</operator> <literal type="number">1.f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>vol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vol</name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_GainRequest</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>gain</name></name> <operator>=</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_volume</name></name> <operator>=</operator> <name>vol</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VolumeSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>VolumeSetLocked</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WakeConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MuteSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_mute</name></name> <operator>=</operator> <name>mute</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WakeConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioSessionEvents_QueryInterface</name><parameter_list>(<parameter><decl><type><name>IAudioSessionEvents</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualIID</name><argument_list>(<argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IUnknown</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>IsEqualIID</name><argument_list>(<argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAudioSessionEvents</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppv</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IUnknown_AddRef</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>E_NOINTERFACE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro>
<macro><name>vlc_AudioSessionEvents_AddRef</name><argument_list>(<argument>IAudioSessionEvents *this</argument>)</argument_list></macro>
<block>{
<expr><name>aout_sys_t</name> <operator>*</operator><name>sys</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>session_events</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>InterlockedIncrement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro>
<macro><name>vlc_AudioSessionEvents_Release</name><argument_list>(<argument>IAudioSessionEvents *this</argument>)</argument_list></macro>
<block>{
<expr><name>aout_sys_t</name> <operator>*</operator><name>sys</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>session_events</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>InterlockedDecrement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioSessionEvents_OnDisplayNameChanged</name><parameter_list>(<parameter><decl><type><name>IAudioSessionEvents</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>LPCWSTR</name></type> <name>wname</name></decl></parameter>, <parameter><decl><type><name>LPCGUID</name></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>session_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"display name changed: %ls"</literal></expr></argument>, <argument><expr><name>wname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioSessionEvents_OnIconPathChanged</name><parameter_list>(<parameter><decl><type><name>IAudioSessionEvents</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>LPCWSTR</name></type> <name>wpath</name></decl></parameter>, <parameter><decl><type><name>LPCGUID</name></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>session_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"icon path changed: %ls"</literal></expr></argument>, <argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioSessionEvents_OnSimpleVolumeChanged</name><parameter_list>(<parameter><decl><type><name>IAudioSessionEvents</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>mute</name></decl></parameter>,
<parameter><decl><type><name>LPCGUID</name></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>session_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"simple volume changed: %f, muting %sabled"</literal></expr></argument>, <argument><expr><name>vol</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>mute</name></expr> ?</condition><then> <expr><literal type="string">"en"</literal></expr> </then><else>: <expr><literal type="string">"dis"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WakeConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioSessionEvents_OnChannelVolumeChanged</name><parameter_list>(<parameter><decl><type><name>IAudioSessionEvents</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vols</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>changed</name></decl></parameter>, <parameter><decl><type><name>LPCGUID</name></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>session_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>changed</name> <operator>!=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"channel volume %lu of %lu changed: %f"</literal></expr></argument>, <argument><expr><name>changed</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,
<argument><expr><name><name>vols</name><index>[<expr><name>changed</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"%lu channels volume changed"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioSessionEvents_OnGroupingParamChanged</name><parameter_list>(<parameter><decl><type><name>IAudioSessionEvents</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>LPCGUID</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>LPCGUID</name></type> <name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>session_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"grouping parameter changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>param</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioSessionEvents_OnStateChanged</name><parameter_list>(<parameter><decl><type><name>IAudioSessionEvents</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>AudioSessionState</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>session_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"state changed: %d"</literal></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioSessionEvents_OnSessionDisconnected</name><parameter_list>(<parameter><decl><type><name>IAudioSessionEvents</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>AudioSessionDisconnectReason</name></type> <name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>session_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>reason</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DisconnectReasonDeviceRemoval</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"session disconnected: %s"</literal></expr></argument>, <argument><expr><literal type="string">"device removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DisconnectReasonServerShutdown</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"session disconnected: %s"</literal></expr></argument>, <argument><expr><literal type="string">"service stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
<case>case <expr><name>DisconnectReasonFormatChanged</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"session disconnected: %s"</literal></expr></argument>, <argument><expr><literal type="string">"format changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DisconnectReasonSessionLogoff</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"session disconnected: %s"</literal></expr></argument>, <argument><expr><literal type="string">"user logged off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
<case>case <expr><name>DisconnectReasonSessionDisconnected</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"session disconnected: %s"</literal></expr></argument>, <argument><expr><literal type="string">"session disconnected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
<case>case <expr><name>DisconnectReasonExclusiveModeOverride</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"session disconnected: %s"</literal></expr></argument>, <argument><expr><literal type="string">"stream overriden"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"session disconnected: unknown reason %d"</literal></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>IAudioSessionEventsVtbl</name></name></type> <name>vlc_AudioSessionEvents</name> <init>=
<expr><block>{
<expr><name>vlc_AudioSessionEvents_QueryInterface</name></expr>,
<expr><name>vlc_AudioSessionEvents_AddRef</name></expr>,
<expr><name>vlc_AudioSessionEvents_Release</name></expr>,

<expr><name>vlc_AudioSessionEvents_OnDisplayNameChanged</name></expr>,
<expr><name>vlc_AudioSessionEvents_OnIconPathChanged</name></expr>,
<expr><name>vlc_AudioSessionEvents_OnSimpleVolumeChanged</name></expr>,
<expr><name>vlc_AudioSessionEvents_OnChannelVolumeChanged</name></expr>,
<expr><name>vlc_AudioSessionEvents_OnGroupingParamChanged</name></expr>,
<expr><name>vlc_AudioSessionEvents_OnStateChanged</name></expr>,
<expr><name>vlc_AudioSessionEvents_OnSessionDisconnected</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioVolumeDuckNotification_QueryInterface</name><parameter_list>(
<parameter><decl><type><name>IAudioVolumeDuckNotification</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualIID</name><argument_list>(<argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IUnknown</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>IsEqualIID</name><argument_list>(<argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAudioVolumeDuckNotification</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppv</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IUnknown_AddRef</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>E_NOINTERFACE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro>
<macro><name>vlc_AudioVolumeDuckNotification_AddRef</name><argument_list>(<argument>IAudioVolumeDuckNotification *this</argument>)</argument_list></macro>
<block>{
<expr><name>aout_sys_t</name> <operator>*</operator><name>sys</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>duck</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>InterlockedIncrement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro>
<macro><name>vlc_AudioVolumeDuckNotification_Release</name><argument_list>(<argument>IAudioVolumeDuckNotification *this</argument>)</argument_list></macro>
<block>{
<expr><name>aout_sys_t</name> <operator>*</operator><name>sys</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>duck</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>InterlockedDecrement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioVolumeDuckNotification_OnVolumeDuckNotification</name><parameter_list>(
<parameter><decl><type><name>IAudioVolumeDuckNotification</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>UINT32</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>duck</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"volume ducked by %ls of %u sessions"</literal></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>ducks</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_PolicyReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_AudioVolumeDuckNotification_OnVolumeUnduckNotification</name><parameter_list>(
<parameter><decl><type><name>IAudioVolumeDuckNotification</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>sid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>duck</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"volume unducked by %ls"</literal></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>ducks</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_PolicyReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ducks</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>IAudioVolumeDuckNotificationVtbl</name></name></type> <name>vlc_AudioVolumeDuckNotification</name> <init>=
<expr><block>{
<expr><name>vlc_AudioVolumeDuckNotification_QueryInterface</name></expr>,
<expr><name>vlc_AudioVolumeDuckNotification_AddRef</name></expr>,
<expr><name>vlc_AudioVolumeDuckNotification_Release</name></expr>,

<expr><name>vlc_AudioVolumeDuckNotification_OnVolumeDuckNotification</name></expr>,
<expr><name>vlc_AudioVolumeDuckNotification_OnVolumeUnduckNotification</name></expr>,
}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>DeviceGetFriendlyName</name><parameter_list>(<parameter><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IPropertyStore</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROPVARIANT</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDevice_OpenPropertyStore</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>STGM_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PropVariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IPropertyStore_GetValue</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PKEY_Device_FriendlyName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>FromWide</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>pwszVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PropVariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IPropertyStore_Release</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeviceHotplugReport</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>wid</name></decl></parameter>,
<parameter><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>FromWide</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>DeviceGetFriendlyName</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_HotplugReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>DeviceIsRender</name><parameter_list>(<parameter><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IMMDevice_QueryInterface</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IMMEndpoint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>IMMEndpoint</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name>pv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EDataFlow</name></type> <name>flow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IMMEndpoint_GetDataFlow</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IMMEndpoint_Release</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>flow</name> <operator>!=</operator> <name>eRender</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>pdwState</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDevice_GetState</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pdwState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pdwState</name> <operator>==</operator> <name>DEVICE_STATE_ACTIVE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>DeviceUpdated</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>wid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDeviceEnumerator_GetDevice</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>it</name></name></expr></argument>, <argument><expr><name>wid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>hr</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DeviceIsRender</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IMMDevice_Release</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DeviceHotplugReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>wid</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMMDevice_Release</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_MMNotificationClient_QueryInterface</name><parameter_list>(<parameter><decl><type><name>IMMNotificationClient</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualIID</name><argument_list>(<argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IUnknown</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>IsEqualIID</name><argument_list>(<argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IMMNotificationClient</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppv</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IUnknown_AddRef</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>E_NOINTERFACE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro>
<macro><name>vlc_MMNotificationClient_AddRef</name><argument_list>(<argument>IMMNotificationClient *this</argument>)</argument_list></macro>
<block>{
<expr><name>aout_sys_t</name> <operator>*</operator><name>sys</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>device_events</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>InterlockedIncrement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro>
<macro><name>vlc_MMNotificationClient_Release</name><argument_list>(<argument>IMMNotificationClient *this</argument>)</argument_list></macro>
<block>{
<expr><name>aout_sys_t</name> <operator>*</operator><name>sys</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>device_events</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>InterlockedDecrement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_MMNotificationClient_OnDefaultDeviceChange</name><parameter_list>(<parameter><decl><type><name>IMMNotificationClient</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>EDataFlow</name></type> <name>flow</name></decl></parameter>, <parameter><decl><type><name>ERole</name></type> <name>role</name></decl></parameter>,
<parameter><decl><type><name>LPCWSTR</name></type> <name>wid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>device_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flow</name> <operator>!=</operator> <name>eRender</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>S_OK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>role</name> <operator>!=</operator> <name>eConsole</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>S_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name> <operator>==</operator> <name>default_device</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"default device changed: %ls"</literal></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>request_device_restart</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_RestartRequest</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_MMNotificationClient_OnDeviceAdded</name><parameter_list>(<parameter><decl><type><name>IMMNotificationClient</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>LPCWSTR</name></type> <name>wid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>device_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"device %ls added"</literal></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>DeviceUpdated</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_MMNotificationClient_OnDeviceRemoved</name><parameter_list>(<parameter><decl><type><name>IMMNotificationClient</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>LPCWSTR</name></type> <name>wid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>device_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>FromWide</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"device %ls removed"</literal></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_OUTOFMEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_HotplugReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_MMNotificationClient_OnDeviceStateChanged</name><parameter_list>(<parameter><decl><type><name>IMMNotificationClient</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>LPCWSTR</name></type> <name>wid</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>device_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DEVICE_STATE_UNPLUGGED</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"device %ls state changed: unplugged"</literal></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEVICE_STATE_ACTIVE</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"device %ls state changed: active"</literal></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>DeviceUpdated</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DEVICE_STATE_DISABLED</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"device %ls state changed: disabled"</literal></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEVICE_STATE_NOTPRESENT</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"device %ls state changed: not present"</literal></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"device %ls state changed: unknown: %08lx"</literal></expr></argument>, <argument><expr><name>wid</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>E_FAIL</name></expr>;</return>
</block_content>}</block></switch>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>FromWide</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_OUTOFMEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>aout_HotplugReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STDMETHODIMP</name></type>
<name>vlc_MMNotificationClient_OnPropertyValueChanged</name><parameter_list>(<parameter><decl><type><name>IMMNotificationClient</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,
<parameter><decl><type><name>LPCWSTR</name></type> <name>wid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>PROPERTYKEY</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aout_sys_t</name></expr></argument>, <argument><expr><name>device_events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>pid</name></name> <operator>==</operator> <name><name>PKEY_Device_FriendlyName</name><operator>.</operator><name>pid</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"device %ls name changed"</literal></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>DeviceUpdated</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>IMMNotificationClientVtbl</name></name></type> <name>vlc_MMNotificationClient</name> <init>=
<expr><block>{
<expr><name>vlc_MMNotificationClient_QueryInterface</name></expr>,
<expr><name>vlc_MMNotificationClient_AddRef</name></expr>,
<expr><name>vlc_MMNotificationClient_Release</name></expr>,

<expr><name>vlc_MMNotificationClient_OnDeviceStateChanged</name></expr>,
<expr><name>vlc_MMNotificationClient_OnDeviceAdded</name></expr>,
<expr><name>vlc_MMNotificationClient_OnDeviceRemoved</name></expr>,
<expr><name>vlc_MMNotificationClient_OnDefaultDeviceChange</name></expr>,
<expr><name>vlc_MMNotificationClient_OnPropertyValueChanged</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>DevicesEnum</name><parameter_list>(<parameter><decl><type><name>IMMDeviceEnumerator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>added_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>wid</name></decl></parameter>, <parameter><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>added_cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMMDeviceCollection</name> <modifier>*</modifier></type><name>devs</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>added_cb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDeviceEnumerator_EnumAudioEndpoints</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>eRender</name></expr></argument>,
<argument><expr><name>DEVICE_STATE_ACTIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>devs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>hr</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDeviceCollection_GetCount</name><argument_list>(<argument><expr><name>devs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>hr</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>UINT</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDeviceCollection_Item</name><argument_list>(<argument><expr><name>devs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>DeviceIsRender</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>LPWSTR</name></type> <name>devid</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDevice_GetId</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>devid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IMMDevice_Release</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>added_cb</name><argument_list>(<argument><expr><name>added_cb_data</name></expr></argument>, <argument><expr><name>devid</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMMDevice_Release</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>devid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>IMMDeviceCollection_Release</name><argument_list>(<argument><expr><name>devs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeviceRequestLocked</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>request_device_restart</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WakeConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SleepConditionVariableCS</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>dev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_RestartRequest</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeviceSelectLocked</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>default_device_b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>=</operator> <call><name>ToWide</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>=</operator> <name>default_device</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>DeviceRequestLocked</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeviceRestartLocked</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name></expr>
</then><else>: <expr><name>default_device</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><call><name>DeviceRequestLocked</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeviceSelect</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>DeviceSelectLocked</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>MMSession</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>IMMDeviceEnumerator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IAudioSessionManager</name> <modifier>*</modifier></type><name>manager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IAudioSessionControl</name> <modifier>*</modifier></type><name>control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ISimpleAudioVolume</name> <modifier>*</modifier></type><name>volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IAudioEndpointVolume</name> <modifier>*</modifier></type><name>endpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name> <operator>!=</operator> <name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name>
<operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name> <operator>!=</operator> <name>default_device</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>!=</operator> <name>default_device</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"using selected device %ls"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDeviceEnumerator_GetDevice</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot get selected device %ls (error 0x%lX)"</literal></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>AUDCLNT_E_DEVICE_INVALIDATED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>hr</name> <operator>==</operator> <name>AUDCLNT_E_DEVICE_INVALIDATED</name></expr>)</condition>
<block>{<block_content> 

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"using default device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDeviceEnumerator_GetDefaultAudioEndpoint</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>eRender</name></expr></argument>,
<argument><expr><name>eConsole</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot get default device (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name> <operator>=</operator> <name>default_device</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WakeConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>LPWSTR</name></type> <name>wdevid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name> <operator>==</operator> <name>default_device</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_DeviceReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>default_device_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDevice_GetId</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wdevid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>FromWide</name><argument_list>(<argument><expr><name>wdevid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>wdevid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>aout_DeviceReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot get device identifier (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDevice_Activate</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAudioSessionManager</name></expr></argument>,
<argument><expr><name>CLSCTX_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>manager</name> <operator>=</operator> <name>pv</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>LPCGUID</name></type> <name>guid</name> <init>= <expr><ternary><condition><expr><call><name>var_GetBool</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"volume-save"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name>GUID_VLC_AUD_OUT</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioSessionManager_GetAudioSessionControl</name><argument_list>(<argument><expr><name>manager</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ua</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"user-agent"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ua</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wua</name> <init>= <expr><call><name>ToWide</name><argument_list>(<argument><expr><name>ua</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>wua</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IAudioSessionControl_SetDisplayName</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>wua</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IAudioSessionControl_RegisterAudioSessionNotification</name><argument_list>(<argument><expr><name>control</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>session_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot get session control (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioSessionManager_GetSimpleAudioVolume</name><argument_list>(<argument><expr><name>manager</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot get simple volume (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>siid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioSessionManager_QueryInterface</name><argument_list>(<argument><expr><name>manager</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IAudioSessionControl2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>IAudioSessionControl2</name> <modifier>*</modifier></type><name>c2</name> <init>= <expr><name>pv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IAudioSessionControl2_SetDuckingPreference</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioSessionControl2_GetSessionInstanceIdentifier</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>siid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>siid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>IAudioSessionControl2_Release</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"version 2 session control unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioSessionManager_QueryInterface</name><argument_list>(<argument><expr><name>manager</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IAudioSessionManager2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>IAudioSessionManager2</name> <modifier>*</modifier></type><name>m2</name> <init>= <expr><name>pv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IAudioSessionManager2_RegisterDuckNotification</name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><name>siid</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>duck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IAudioSessionManager2_Release</name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"version 2 session management unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>siid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot activate session manager (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>control</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>volume</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMMDevice_Activate</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAudioEndpointVolume</name></expr></argument>,
<argument><expr><name>CLSCTX_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endpoint</name> <operator>=</operator> <name>pv</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>inc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioEndpointVolume_GetVolumeRange</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"volume from %+f dB to %+f dB with %f dB increments"</literal></expr></argument>,
<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot get volume range (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot activate endpoint volume (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<while>while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>volume</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>level</name></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>requested_volume</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <literal type="number">0.f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ISimpleAudioVolume_SetMasterVolume</name><argument_list>(<argument><expr><name>volume</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot set master volume (error 0x%lX)"</literal></expr></argument>,
<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_volume</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ISimpleAudioVolume_GetMasterVolume</name><argument_list>(<argument><expr><name>volume</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_VolumeReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><call><name>cbrtf</name><argument_list>(<argument><expr><name>level</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot get master volume (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>mute</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ISimpleAudioVolume_GetMute</name><argument_list>(<argument><expr><name>volume</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_MuteReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>mute</name> <operator>!=</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot get mute (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>requested_mute</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mute</name> <operator>=</operator> <ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_mute</name></name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ISimpleAudioVolume_SetMute</name><argument_list>(<argument><expr><name>volume</name></expr></argument>, <argument><expr><name>mute</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot set mute (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_mute</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SleepConditionVariableCS</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>work</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>endpoint</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IAudioEndpointVolume_Release</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>manager</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioSessionManager_QueryInterface</name><argument_list>(<argument><expr><name>manager</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IAudioSessionManager2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>IAudioSessionManager2</name> <modifier>*</modifier></type><name>m2</name> <init>= <expr><name>pv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IAudioSessionManager2_UnregisterDuckNotification</name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>duck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IAudioSessionManager2_Release</name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>volume</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ISimpleAudioVolume_Release</name><argument_list>(<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>control</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IAudioSessionControl_UnregisterAudioSessionNotification</name><argument_list>(<argument><expr><name>control</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>session_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IAudioSessionControl_Release</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IAudioSessionManager_Release</name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMMDevice_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MMThread_DevicesEnum_Added</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>wid</name></decl></parameter>, <parameter><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DeviceHotplugReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>wid</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>MMThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMMDeviceEnumerator</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>it</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMMDeviceEnumerator_RegisterEndpointNotificationCallback</name><argument_list>(<argument><expr><name>it</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>device_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>DevicesEnum</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>MMThread_DevicesEnum_Added</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot enumerate audio endpoints (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do<block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>FAILED</name><argument_list>(<argument><expr><call><name>MMSession</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SleepConditionVariableCS</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>work</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block>
while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>it</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMMDeviceEnumerator_UnregisterEndpointNotificationCallback</name><argument_list>(<argument><expr><name>it</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>device_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMMDeviceEnumerator_Release</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>ActivateDevice</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>REFIID</name></type> <name>iid</name></decl></parameter>, <parameter><decl><type><name>PROPVARIANT</name> <modifier>*</modifier></type><name>actparms</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>pv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>IMMDevice_Activate</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>iid</name></expr></argument>, <argument><expr><name>CLSCTX_ALL</name></expr></argument>, <argument><expr><name>actparms</name></expr></argument>, <argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aout_stream_Start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_stream_start_t</name></type> <name>start</name> <init>= <expr><name>func</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>aout_stream_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>audio_sample_format_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name> <modifier>*</modifier></type><name>hr</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>HRESULT</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPCGUID</name></type> <name>sid</name> <init>= <expr><ternary><condition><expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"volume-save"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name>GUID_VLC_AUD_OUT</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>forced</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hr</name> <operator>=</operator> <call><name>start</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>hr</name> <operator>==</operator> <name>AUDCLNT_E_DEVICE_INVALIDATED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ETIMEOUT</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><operator>*</operator><name>hr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_spdif</name> <init>= <expr><call><name>AOUT_FMT_SPDIF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_hdmi</name> <init>= <expr><call><name>AOUT_FMT_HDMI</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b_spdif</name> <operator>||</operator> <name>b_hdmi</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"mmdevice-passthrough"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>MM_PASSTHROUGH_DISABLED</name></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>MM_PASSTHROUGH_ENABLED</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>b_hdmi</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><name>MM_PASSTHROUGH_ENABLED_HD</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>activate</name></name> <operator>=</operator> <name>ActivateDevice</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>request_device_restart</name></name> <operator>&amp;&amp;</operator> <call><name>DeviceRestartLocked</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>modlist</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"mmdevice-backend"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>vlc_module_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"aout stream"</literal></expr></argument>, <argument><expr><name>modlist</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>aout_stream_Start</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>modlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>AUDCLNT_E_ALREADY_INITIALIZED</name></expr>)</condition>
<block>{<block_content>









<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DeviceRestartLocked</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>hr</name> <operator>==</operator> <name>AUDCLNT_E_DEVICE_INVALIDATED</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DeviceSelectLocked</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>module</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>IPropertyStore</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IMMDevice_OpenPropertyStore</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><name>STGM_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>PROPVARIANT</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PropVariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IPropertyStore_GetValue</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PKEY_AudioEndpoint_FormFactor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>v</name><operator>.</operator><name>uintVal</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>Headphones</name></expr>:</case>
<case>case <expr><name>Headset</name></expr>:</case>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>current_sink_info</name><operator>.</operator><name>headphones</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>PropVariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>IPropertyStore_Release</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>module</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_GainRequest</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_stream_Stop</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>aout</name></name> <operator>=</operator> <name>aout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>it</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>device_events</name><operator>.</operator><name>lpVtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlc_MMNotificationClient</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>session_events</name><operator>.</operator><name>lpVtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlc_AudioSessionEvents</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>duck</name><operator>.</operator><name>lpVtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlc_AudioVolumeDuckNotification</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>ducks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>gain</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_volume</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_mute</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>acquired_device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>request_device_restart</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>var_CreateGetBool</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"volume-save"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VolumeSetLocked</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"mmdevice-volume"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitializeConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitializeConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_HotplugReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>default_device_b</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Default"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saved_device_b</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"mmdevice-audio-device"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>saved_device_b</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>saved_device_b</name></expr></argument>, <argument><expr><name>default_device_b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>=</operator> <call><name>ToWide</name><argument_list>(<argument><expr><name>saved_device_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>saved_device_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>saved_device_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>=</operator> <name>default_device</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>TryEnterMTA</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_MMDeviceEnumerator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_ALL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IMMDeviceEnumerator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot create device enumerator (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>it</name></name> <operator>=</operator> <name>pv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>MMThread</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>IMMDeviceEnumerator_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>it</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SleepConditionVariableCS</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>TimeGet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>Play</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>Pause</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>volume_set</name></name> <operator>=</operator> <name>VolumeSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>mute_set</name></name> <operator>=</operator> <name>MuteSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>device_select</name></name> <operator>=</operator> <name>DeviceSelect</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>requested_device</name></name> <operator>=</operator> <name>default_device</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>it</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>WakeConditionVariable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>mm_list</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Reload_DevicesEnum_Added</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>wid</name></decl></parameter>, <parameter><decl><type><name>IMMDevice</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mm_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_count</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>ids</name></name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>ids</name></name></expr></argument>, <argument><expr><name>new_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>new_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>ids</name></name> <operator>||</operator> <operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>FromWide</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>DeviceGetFriendlyName</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>ids</name><index>[<expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>names</name><index>[<expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>new_count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReloadAudioDevices</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>descs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>in_mta</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoInitializeEx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>RPC_E_CHANGED_MODE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>in_mta</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mm_list</name></name></type> <name>list</name> <init>= <expr><block>{ <expr><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_MMDeviceEnumerator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_ALL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IMMDeviceEnumerator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>list</name><operator>.</operator><name>ids</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>.</operator><name>names</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>.</operator><name>ids</name></name> <operator>||</operator> <operator>!</operator><name><name>list</name><operator>.</operator><name>names</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>list</name><operator>.</operator><name>ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>list</name><operator>.</operator><name>ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>.</operator><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Default"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>.</operator><name>ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>list</name><operator>.</operator><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>list</name><operator>.</operator><name>ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>list</name><operator>.</operator><name>ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>list</name><operator>.</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DevicesEnum</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>Reload_DevicesEnum_Added</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>IMMDeviceEnumerator_Release</name><argument_list>(<argument><expr><operator>(</operator><name>IMMDeviceEnumerator</name> <operator>*</operator><operator>)</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in_mta</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <name><name>list</name><operator>.</operator><name>ids</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>descs</name> <operator>=</operator> <name><name>list</name><operator>.</operator><name>names</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>list</name><operator>.</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<macro><name>VLC_CONFIG_STRING_ENUM</name><argument_list>(<argument>ReloadAudioDevices</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM_PASSTHROUGH_TEXT</name></cpp:macro> <cpp:value>N_( "HDMI/SPDIF audio passthrough")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM_PASSTHROUGH_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Change this value if you have issue with HD codecs when using a HDMI receiver.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_mmdevice_passthrough_values</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>MM_PASSTHROUGH_DISABLED</name></expr>,
<expr><name>MM_PASSTHROUGH_ENABLED</name></expr>,
<expr><name>MM_PASSTHROUGH_ENABLED_HD</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_mmdevice_passthrough_texts</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Disabled"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Enabled (AC3/DTS only)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Enabled"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_TEXT</name></cpp:macro> <cpp:value>N_("Output device")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select your audio output device")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOLUME_TEXT</name></cpp:macro> <cpp:value>N_("Audio volume")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOLUME_LONGTEXT</name></cpp:macro> <cpp:value>N_("Audio volume in hundredths of decibels (dB).")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"MMDevice"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Windows Multimedia Device output"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio output"</literal></argument>, <argument><literal type="number">150</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_AUDIO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_AUDIO_AOUT</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>add_module</name><argument_list>(<argument><literal type="string">"mmdevice-backend"</literal></argument>, <argument><literal type="string">"aout stream"</literal></argument>, <argument><literal type="string">"any"</literal></argument>,
<argument>N_(<literal type="string">"Output back-end"</literal>)</argument>, <argument>N_(<literal type="string">"Audio output back-end interface."</literal>)</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"mmdevice-passthrough"</literal></argument>, <argument>MM_PASSTHROUGH_DEFAULT</argument>,
<argument>MM_PASSTHROUGH_TEXT</argument>, <argument>MM_PASSTHROUGH_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>pi_mmdevice_passthrough_values</argument>,
<argument>ppsz_mmdevice_passthrough_texts</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"mmdevice-audio-device"</literal></argument>, <argument>NULL</argument>, <argument>DEVICE_TEXT</argument>, <argument>DEVICE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_float</name><argument_list>(<argument><literal type="string">"mmdevice-volume"</literal></argument>, <argument><literal type="number">1.f</literal></argument>, <argument>VOLUME_TEXT</argument>, <argument>VOLUME_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_float_range</name><argument_list>( <argument><literal type="number">0.f</literal></argument>, <argument><literal type="number">1.25f</literal></argument> )</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
