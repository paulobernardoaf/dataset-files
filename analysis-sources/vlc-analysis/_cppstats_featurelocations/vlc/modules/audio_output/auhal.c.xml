<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_output\auhal.c">























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>includes</name></cpp:pragma>

<cpp:empty>#import "coreaudio_common.h"</cpp:empty>

<cpp:empty>#import &lt;vlc_plugin.h&gt;</cpp:empty>
<cpp:empty>#import &lt;vlc_dialog.h&gt;</cpp:empty> 
<cpp:empty>#import &lt;vlc_charset.h&gt;</cpp:empty> 

<cpp:empty>#import &lt;CoreAudio/CoreAudio.h&gt;</cpp:empty> 
<cpp:empty>#import &lt;CoreServices/CoreServices.h&gt;</cpp:empty>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>local</name> <name>prototypes</name> <name>&amp;</name> <name>module</name> <name>descriptor</name></cpp:pragma>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VOLUME_DEFAULT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VOLUME_MAX</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOLUME_TEXT</name></cpp:macro> <cpp:value>N_("Audio volume")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOLUME_LONGTEXT</name></cpp:macro> <cpp:value>VOLUME_TEXT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_TEXT</name></cpp:macro> <cpp:value>N_("Last audio device")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_LONGTEXT</name></cpp:macro> <cpp:value>DEVICE_TEXT</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"auhal"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"HAL AudioUnit output"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio output"</literal></argument>, <argument><literal type="number">101</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_AUDIO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_AUDIO_AOUT</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"auhal-volume"</literal></argument>, <argument>AOUT_VOLUME_DEFAULT</argument>,
<argument>VOLUME_TEXT</argument>, <argument>VOLUME_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>AOUT_VOLUME_MAX</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"auhal-audio-device"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>DEVICE_TEXT</argument>, <argument>DEVICE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"auhal-warned-devices"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>NULL</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_private</name><argument_list>()</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>(<argument><literal type="string">"macosx-audio-device"</literal></argument>)</argument_list></macro> 
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>private</name> <name>declarations</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOUT_VAR_SPDIF_FLAG</name></cpp:macro> <cpp:value>0xf00000</cpp:value></cpp:define>







<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name></type> <name>c</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AudioObjectID</name></type> <name>i_selected_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioObjectID</name></type> <name>i_new_selected_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_selected_dev_is_default</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AudioDeviceIOProcID</name></type> <name>i_procID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_digital</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AudioUnit</name></type> <name>au_unit</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>pid_t</name></type> <name>i_hog_pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioStreamID</name></type> <name>i_stream_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_stream_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>sfmt_revert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_revert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_changed_mixing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>device_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>device_list_lock</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>selected_device_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_mute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ignore_streams_changed_callback</name></decl>;</decl_stmt>
}</block></struct></type> <name>aout_sys_t</name>;</typedef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>helpers</name></cpp:pragma>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>AoGetProperty</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioObjectID</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioObjectPropertyAddress</name> <modifier>*</modifier></type><name>p_address</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_elm_size</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name></type> <name>i_nb_expected_elms</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_nb_elms</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_out_data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_allocated_out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_elm_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>UInt32</name></type> <name>i_out_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><call><name>AudioObjectGetPropertyDataSize</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_out_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"AudioObjectGetPropertyDataSize failed, device id: %i, "</literal>
<literal type="string">"prop: [%4.4s], OSStatus: %d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_elms</name> <init>= <expr><name>i_out_size</name> <operator>/</operator> <name>i_elm_size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_nb_elms</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_nb_elms</name> <operator>=</operator> <name>i_nb_elms</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_nb_expected_elms</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_nb_expected_elms</name> <operator>!=</operator> <name>i_nb_elms</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"AoGetProperty error: expected elements don't match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pp_out_data</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_allocated_out_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_out_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pp_out_data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_out_data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_out_data</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pp_out_data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_allocated_out_data</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_out_data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i_out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp_out_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_out_data</name> <operator>=</operator> <operator>*</operator><name>pp_out_data</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_allocated_out_data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_data</name> <operator>=</operator> <name>p_allocated_out_data</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioObjectGetPropertyData</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_out_size</name></expr></argument>,
<argument><expr><name>p_out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"AudioObjectGetPropertyData failed, device id: %i, "</literal>
<literal type="string">"prop: [%4.4s], OSStatus: %d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pp_out_data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>pp_out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_nb_elms</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p_nb_elms</name> <operator>==</operator> <operator>(</operator><name>i_out_size</name> <operator>/</operator> <name>i_elm_size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AO_GETPROP</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>p_out_nb_elms</name></type></parameter>, <parameter><type><name>pp_out_data</name></type></parameter>, <parameter><type><name>a1</name></type></parameter>, <parameter><type><name>a2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AoGetProperty(p_aout, (id), &amp;(AudioObjectPropertyAddress) {(a1), (a2), 0}, sizeof(type), -1, (p_out_nb_elms), (void **)(pp_out_data), NULL)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AO_GET1PROP</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>p_out_data</name></type></parameter>, <parameter><type><name>a1</name></type></parameter>, <parameter><type><name>a2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AoGetProperty(p_aout, (id), &amp;(AudioObjectPropertyAddress) {(a1), (a2), 0}, sizeof(type), 1, NULL, NULL, (p_out_data))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>bool</name></type>
<name>AoIsPropertySettable</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioObjectID</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioObjectPropertyAddress</name> <modifier>*</modifier></type><name>p_address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Boolean</name></type> <name>b_settable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><call><name>AudioObjectIsPropertySettable</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_settable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"AudioObjectIsPropertySettable failed, device id: %i, "</literal>
<literal type="string">"prop: [%4.4s], OSStatus: %d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>b_settable</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AO_ISPROPSETTABLE</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>a1</name></type></parameter>, <parameter><type><name>a2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AoIsPropertySettable(p_aout, (id), &amp;(AudioObjectPropertyAddress) { (a1), (a2), 0})</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AO_HASPROP</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>a1</name></type></parameter>, <parameter><type><name>a2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AudioObjectHasProperty((id), &amp;(AudioObjectPropertyAddress) { (a1), (a2), 0})</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>AoSetProperty</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioObjectID</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioObjectPropertyAddress</name> <modifier>*</modifier></type><name>p_address</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>=
<expr><call><name>AudioObjectSetPropertyData</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"AudioObjectSetPropertyData failed, device id: %i, "</literal>
<literal type="string">"prop: [%4.4s], OSStatus: %d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AO_SETPROP</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>i_data</name></type></parameter>, <parameter><type><name>p_data</name></type></parameter>, <parameter><type><name>a1</name></type></parameter>, <parameter><type><name>a2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AoSetProperty(p_aout, (id), &amp;(AudioObjectPropertyAddress) { (a1), (a2), 0}, (i_data), (p_data));</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>AoUpdateListener</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>AudioObjectID</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioObjectPropertyAddress</name> <modifier>*</modifier></type><name>p_address</name></decl></parameter>,
<parameter><decl><type><name>AudioObjectPropertyListenerProc</name></type> <name>listener</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><ternary><condition><expr><name>add</name></expr> ?</condition><then>
<expr><call><name>AudioObjectAddPropertyListener</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_address</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>AudioObjectRemovePropertyListener</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_address</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"AudioObject%sPropertyListener failed, device id %i, "</literal>
<literal type="string">"prop: [%4.4s], OSStatus: %d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>add</name></expr> ?</condition><then> <expr><literal type="string">"Add"</literal></expr> </then><else>: <expr><literal type="string">"Remove"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>id</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AO_UPDATELISTENER</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>add</name></type></parameter>, <parameter><type><name>listener</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>a1</name></type></parameter>, <parameter><type><name>a2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AoUpdateListener(p_aout, add, (id), &amp;(AudioObjectPropertyAddress) { (a1), (a2), 0}, (listener), (data))</cpp:value></cpp:define>




<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>Stream</name> <name>/</name> <name>Hardware</name> <name>Listeners</name></cpp:pragma>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>IsAudioFormatDigital</name><parameter_list>(<parameter><decl><type><name>AudioFormatID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>id</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'IAC3'</literal></expr>:</case>
<case>case <expr><literal type="char">'iac3'</literal></expr>:</case>
<case>case <expr><name>kAudioFormat60958AC3</name></expr>:</case>
<case>case <expr><name>kAudioFormatAC3</name></expr>:</case>
<case>case <expr><name>kAudioFormatEnhancedAC3</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>OSStatus</name></type>
<name>StreamsChangedListener</name><parameter_list>(<parameter><decl><type><name>AudioObjectID</name></type></decl></parameter>, <parameter><decl><type><name>UInt32</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>AudioObjectPropertyAddress</name> <index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ManageAudioStreamsCallback</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioDeviceID</name></type> <name>i_dev_id</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_register</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamID</name> <modifier>*</modifier></type><name>p_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GETPROP</name><argument_list>(<argument><expr><name>i_dev_id</name></expr></argument>, <argument><expr><name>AudioStreamID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_streams</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_streams</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyStreams</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><call><name>AO_UPDATELISTENER</name><argument_list>(<argument><expr><name><name>p_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>b_register</name></expr></argument>, <argument><expr><name>StreamsChangedListener</name></expr></argument>,
<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>kAudioStreamPropertyAvailablePhysicalFormats</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type>
<name>AudioStreamSupportsDigital</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioStreamID</name></type> <name>i_stream_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_return</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamRangedDescription</name> <modifier>*</modifier></type><name>p_format_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GETPROP</name><argument_list>(<argument><expr><name>i_stream_id</name></expr></argument>, <argument><expr><name>AudioStreamRangedDescription</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_formats</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_format_list</name></expr></argument>,
<argument><expr><name>kAudioStreamPropertyAvailablePhysicalFormats</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_formats</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><call><name>STREAM_FORMAT_MSG</name><argument_list>(<argument><expr><literal type="string">"supported format: "</literal></expr></argument>,
<argument><expr><name><name>p_format_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>IsAudioFormatDigital</name><argument_list>(<argument><expr><name><name>p_format_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mFormat</name><operator>.</operator><name>mFormatID</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_return</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_format_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b_return</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type>
<name>AudioDeviceSupportsDigital</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioDeviceID</name></type> <name>i_dev_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamID</name> <modifier>*</modifier></type> <name>p_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GETPROP</name><argument_list>(<argument><expr><name>i_dev_id</name></expr></argument>, <argument><expr><name>AudioStreamID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_streams</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_streams</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyStreams</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>AudioStreamSupportsDigital</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ReportDevice</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>i_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>deviceid</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>deviceid</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_HotplugReport</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>deviceid</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type>
<name>AudioDeviceIsAHeadphone</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioDeviceID</name></type> <name>i_dev_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>defaultSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AudioDeviceID</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AudioObjectPropertyAddress</name></type> <name>defaultAddr</name> <init>= <expr><block>{
<expr><name>kAudioHardwarePropertyDefaultOutputDevice</name></expr>,
<expr><name>kAudioObjectPropertyScopeGlobal</name></expr>,
<expr><name>kAudioObjectPropertyElementMaster</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AudioObjectGetPropertyData</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defaultAddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defaultSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dev_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AudioObjectPropertyAddress</name></type> <name>property</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>property</name><operator>.</operator><name>mSelector</name></name> <operator>=</operator> <name>kAudioDevicePropertyDataSource</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>property</name><operator>.</operator><name>mScope</name></name> <operator>=</operator> <name>kAudioDevicePropertyScopeOutput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>property</name><operator>.</operator><name>mElement</name></name> <operator>=</operator> <name>kAudioObjectPropertyElementMaster</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AudioObjectGetPropertyData</name><argument_list>(<argument><expr><name>i_dev_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>property</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<return>return <expr><name>data</name> <operator>==</operator> <literal type="char">'hdpn'</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>AudioDeviceHasOutput</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioDeviceID</name></type> <name>i_dev_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GETPROP</name><argument_list>(<argument><expr><name>i_dev_id</name></expr></argument>, <argument><expr><name>AudioStreamID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_streams</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyStreams</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name> <operator>||</operator> <name>i_streams</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>RebuildDeviceList</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>UInt32</name> <modifier>*</modifier></type><name>p_id_exists</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Rebuild device list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReportDevice</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"System Sound Output Device"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_devices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioDeviceID</name> <modifier>*</modifier></type><name>p_devices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GETPROP</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><name>AudioDeviceID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_devices</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_devices</name></expr></argument>, <argument><expr><name>kAudioHardwarePropertyDevices</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name> <operator>||</operator> <name>i_devices</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"No audio output devices found."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"found %zu audio device(s)"</literal></expr></argument>, <argument><expr><name>i_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>CFMutableArrayRef</name></type> <name>currentListOfDevices</name> <init>=
<expr><call><name>CFArrayCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kCFTypeArrayCallBacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>i_id_exists</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_id_exists</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_id_exists</name> <operator>=</operator> <operator>*</operator><name>p_id_exists</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_id_exists</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_id_exists</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_devices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>device_name_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>i_id</name> <init>= <expr><name><name>p_devices</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GET1PROP</name><argument_list>(<argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>CFStringRef</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_name_ref</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyName</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"failed to get name for device %i"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>FromCFString</name><argument_list>(<argument><expr><name>device_name_ref</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>device_name_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"DevID: %i DevName: %s"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AudioDeviceHasOutput</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"this '%s' is INPUT only. skipping..."</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>p_id_exists</name> <operator>&amp;&amp;</operator> <name>i_id</name> <operator>==</operator> <name>i_id_exists</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_id_exists</name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ReportDevice</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>deviceNumber</name> <init>= <expr><call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CFArrayAppendValue</name><argument_list>(<argument><expr><name>currentListOfDevices</name></expr></argument>, <argument><expr><name>deviceNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>deviceNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AudioDeviceSupportsDigital</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"'%s' supports digital output"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_encoded_name</name> <init>= <expr><name>nil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_encoded_name</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s (Encoded Output)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_id</name> <operator>=</operator> <name>i_id</name> <operator>|</operator> <name>AOUT_VAR_SPDIF_FLAG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReportDevice</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>psz_encoded_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>deviceNumber</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFArrayAppendValue</name><argument_list>(<argument><expr><name>currentListOfDevices</name></expr></argument>, <argument><expr><name>deviceNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>deviceNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_encoded_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p_id_exists</name> <operator>&amp;&amp;</operator> <name>i_id</name> <operator>==</operator> <name>i_id_exists</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_id_exists</name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ManageAudioStreamsCallback</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_devices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>device_list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CFIndex</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CFRange</name></type> <name>newListSearchRange</name> <init>=
<expr><call><name>CFRangeMake</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>currentListOfDevices</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Looking for removed devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>cfn_device_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_device_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>CFIndex</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CFArrayContainsValue</name><argument_list>(<argument><expr><name>currentListOfDevices</name></expr></argument>, <argument><expr><name>newListSearchRange</name></expr></argument>,
<argument><expr><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr></argument>,
<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cfn_device_id</name> <operator>=</operator> <call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cfn_device_id</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFNumberGetValue</name><argument_list>(<argument><expr><name>cfn_device_id</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_device_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Device ID %i is not found in new array, "</literal>
<literal type="string">"deleting."</literal></expr></argument>, <argument><expr><name>i_device_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReportDevice</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_device_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name> <operator>=</operator> <call><name>CFArrayCreateCopy</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><name>currentListOfDevices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>currentListOfDevices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>device_list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OSStatus</name></type>
<name>DeviceAliveListener</name><parameter_list>(<parameter><decl><type><name>AudioObjectID</name></type> <name>inObjectID</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>inNumberAddresses</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioObjectPropertyAddress</name></type> <name><name>inAddresses</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inClientData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inObjectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inNumberAddresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inAddresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>inClientData</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_aout</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"audio device died, resetting aout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_RestartRequest</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OSStatus</name></type>
<name>DefaultDeviceChangedListener</name><parameter_list>(<parameter><decl><type><name>AudioObjectID</name></type> <name>inObjectID</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>inNumberAddresses</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioObjectPropertyAddress</name></type> <name><name>inAddresses</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inClientData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inObjectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inNumberAddresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inAddresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>inClientData</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_aout</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_selected_dev_is_default</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>noErr</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>AudioObjectID</name></type> <name>defaultDeviceID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GET1PROP</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><name>AudioObjectID</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>defaultDeviceID</name></expr></argument>,
<argument><expr><name>kAudioHardwarePropertyDefaultOutputDevice</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"default device changed to %i"</literal></expr></argument>, <argument><expr><name>defaultDeviceID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_digital</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"ignore, as digital mode is active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>noErr</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>defaultDeviceID</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"default device actually changed, resetting aout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_RestartRequest</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OSStatus</name></type>
<name>StreamsChangedListener</name><parameter_list>(<parameter><decl><type><name>AudioObjectID</name></type> <name>inObjectID</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>inNumberAddresses</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioObjectPropertyAddress</name></type> <name><name>inAddresses</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inClientData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inNumberAddresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inAddresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>inClientData</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_aout</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_streams_changed_callback</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"available physical formats for audio device changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RebuildDeviceList</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>size_t</name></type> <name>i_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamID</name> <modifier>*</modifier></type><name>p_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GETPROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>AudioStreamID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_streams</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_streams</name></expr></argument>, <argument><expr><name>kAudioDevicePropertyStreams</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>inObjectID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Restart aout as this affects current device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_RestartRequest</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OSStatus</name></type>
<name>DevicesListener</name><parameter_list>(<parameter><decl><type><name>AudioObjectID</name></type> <name>inObjectID</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>inNumberAddresses</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioObjectPropertyAddress</name></type> <name><name>inAddresses</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inClientData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inObjectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inNumberAddresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inAddresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>inClientData</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_aout</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"audio device configuration changed, resetting cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RebuildDeviceList</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>device_list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>selectedDevice</name> <init>=
<expr><call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFRange</name></type> <name>range</name> <init>= <expr><call><name>CFRangeMake</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CFArrayContainsValue</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>selectedDevice</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_RestartRequest</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>selectedDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>device_list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OSStatus</name></type>
<name>StreamListener</name><parameter_list>(<parameter><decl><type><name>AudioObjectID</name></type> <name>inObjectID</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>inNumberAddresses</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioObjectPropertyAddress</name></type> <name><name>inAddresses</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inClientData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>
<struct>struct <block>{ <decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>cond</name></decl>;</decl_stmt> }</block> <decl><modifier>*</modifier> <name>w</name> <init>= <expr><name>inClientData</name></expr></init></decl>;</struct>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inObjectID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>inNumberAddresses</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>inAddresses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mSelector</name> <operator>==</operator> <name>kAudioStreamPropertyPhysicalFormat</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>AudioStreamChangeFormat</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioStreamID</name></type> <name>i_stream_id</name></decl></parameter>,
<parameter><decl><type><name>AudioStreamBasicDescription</name></type> <name>change_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retValue</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<struct>struct <block>{ <decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>cond</name></decl>;</decl_stmt> }</block> <decl><name>w</name></decl>;</struct>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><call><name>STREAM_FORMAT_MSG</name><argument_list>(<argument><expr><literal type="string">"setting stream format: "</literal></expr></argument>, <argument><expr><name>change_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_UPDATELISTENER</name><argument_list>(<argument><expr><name>i_stream_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>StreamListener</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,
<argument><expr><name>kAudioStreamPropertyPhysicalFormat</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AO_SETPROP</name><argument_list>(<argument><expr><name>i_stream_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AudioStreamBasicDescription</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>change_format</name></expr></argument>, <argument><expr><name>kAudioStreamPropertyPhysicalFormat</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>timeout</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"reached timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>actual_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GET1PROP</name><argument_list>(<argument><expr><name>i_stream_id</name></expr></argument>, <argument><expr><name>AudioStreamBasicDescription</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actual_format</name></expr></argument>,
<argument><expr><name>kAudioStreamPropertyPhysicalFormat</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><call><name>STREAM_FORMAT_MSG</name><argument_list>(<argument><expr><literal type="string">"actual format in use: "</literal></expr></argument>,
<argument><expr><name>actual_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>actual_format</name><operator>.</operator><name>mSampleRate</name></name> <operator>==</operator> <name><name>change_format</name><operator>.</operator><name>mSampleRate</name></name> <operator>&amp;&amp;</operator>
<name><name>actual_format</name><operator>.</operator><name>mFormatID</name></name> <operator>==</operator> <name><name>change_format</name><operator>.</operator><name>mFormatID</name></name> <operator>&amp;&amp;</operator>
<name><name>actual_format</name><operator>.</operator><name>mFramesPerPacket</name></name> <operator>==</operator> <name><name>change_format</name><operator>.</operator><name>mFramesPerPacket</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


</block_content>}</block></for>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AO_UPDATELISTENER</name><argument_list>(<argument><expr><name>i_stream_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>StreamListener</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,
<argument><expr><name>kAudioStreamPropertyPhysicalFormat</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retValue</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>retValue</name></expr>;</return>
</block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>core</name> <name>interaction</name></cpp:pragma>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>SwitchAudioDevice</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_new_selected_dev</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_new_selected_dev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_new_selected_dev</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_new_selected_dev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_DeviceReport</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_RestartRequest</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>VolumeSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>ostatus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_digital</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_volume</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_VolumeReport</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mute</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ostatus</name> <operator>=</operator> <call><name>AudioUnitSetParameter</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>,
<argument><expr><name>kHALOutputParam_Volume</name></expr></argument>,
<argument><expr><name>kAudioUnitScope_Global</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>volume</name> <operator>*</operator> <name>volume</name> <operator>*</operator> <name>volume</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"volume-save"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>config_PutInt</name><argument_list>(<argument><expr><literal type="string">"auhal-volume"</literal></expr></argument>, <argument><expr><call><name>lroundf</name><argument_list>(<argument><expr><name>volume</name> <operator>*</operator> <name>AOUT_VOLUME_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ostatus</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MuteSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_digital</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mute</name></name> <operator>=</operator> <name>mute</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_MuteReport</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>mute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>volume</name> <init>= <expr><literal type="number">.0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mute</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>volume</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_volume</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>=
<expr><call><name>AudioUnitSetParameter</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>, <argument><expr><name>kHALOutputParam_Volume</name></expr></argument>,
<argument><expr><name>kAudioUnitScope_Global</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>volume</name> <operator>*</operator> <name>volume</name> <operator>*</operator> <name>volume</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>err</name> <operator>==</operator> <name>noErr</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>actual</name> <name>playback</name></cpp:pragma>




<function><type><specifier>static</specifier> <name>OSStatus</name></type>
<name>RenderCallbackSPDIF</name><parameter_list>(<parameter><decl><type><name>AudioDeviceID</name></type> <name>inDevice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioTimeStamp</name> <modifier>*</modifier></type> <name>inNow</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioBufferList</name> <modifier>*</modifier></type> <name>inInputData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioTimeStamp</name> <modifier>*</modifier></type> <name>inInputTime</name></decl></parameter>,
<parameter><decl><type><name>AudioBufferList</name> <modifier>*</modifier></type> <name>outOutputData</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioTimeStamp</name> <modifier>*</modifier></type> <name>inOutputTime</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inNow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inInputData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inInputTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inOutputTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><name><name>outOutputData</name><operator>-&gt;</operator><name>mBuffers</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_index</name></name></expr>]</index></name><operator>.</operator><name>mData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><name><name>outOutputData</name><operator>-&gt;</operator><name>mBuffers</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_index</name></name></expr>]</index></name><operator>.</operator><name>mDataByteSize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_host_time</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>inNow</name><operator>-&gt;</operator><name>mFlags</name></name> <operator>&amp;</operator> <name>kAudioTimeStampHostTimeValid</name><operator>)</operator></expr>
?</condition><then> <expr><name><name>inNow</name><operator>-&gt;</operator><name>mHostTime</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ca_Render</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_host_time</name></expr></argument>, <argument><expr><name>p_output</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>
</block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>initialization</name></cpp:pragma>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>WarnConfiguration</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>warned_devices</name> <init>= <expr><call><name>var_CreateGetNonEmptyString</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"auhal-warned-devices"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dev_is_warned</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dev_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>warned_devices</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>warned_devices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dup</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>savetpr</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>savetpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>dev</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dev_is_warned</name></expr>;</condition>
<incr><expr><name>dev</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>savetpr</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>dev_count</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>devid</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>devid</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>devid</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dev_is_warned</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev_is_warned</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"You should configure your speaker layout with "</literal>
<literal type="string">"Audio Midi Setup in /Applications/Utilities. VLC will "</literal>
<literal type="string">"output Stereo only."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Audio device is not configured"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You should configure your speaker layout with "</literal>
<literal type="string">"\"Audio Midi Setup\" in /Applications/"</literal>
<literal type="string">"Utilities. VLC will output Stereo only."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>dev_count</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>warned_devices</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_warned_devices</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_warned_devices</name></expr></argument>, <argument><expr><literal type="string">"%u%s%s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>warned_devices</name></expr> ?</condition><then> <expr><literal type="string">";"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>warned_devices</name></expr> ?</condition><then> <expr><name>warned_devices</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>config_PutPsz</name><argument_list>(<argument><expr><literal type="string">"auhal-warned-devices"</literal></expr></argument>, <argument><expr><name>new_warned_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"auhal-warned-devices"</literal></expr></argument>, <argument><expr><name>new_warned_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_warned_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>warned_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>StartAnalog</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>i_param_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioChannelLayout</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name> <operator>=</operator> <call><name>au_NewOutputInstance</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>kAudioUnitSubType_HALOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>current_sink_info</name><operator>.</operator><name>headphones</name></name> <operator>=</operator> <call><name>AudioDeviceIsAHeadphone</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioUnitSetProperty</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>,
<argument><expr><name>kAudioOutputUnitProperty_CurrentDevice</name></expr></argument>,
<argument><expr><name>kAudioUnitScope_Global</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AudioObjectID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"cannot select audio output device, PCM output failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioUnitGetPropertyInfo</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyPreferredChannelLayout</name></expr></argument>,
<argument><expr><name>kAudioUnitScope_Output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_param_size</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>layout</name> <operator>=</operator> <operator>(</operator><name>AudioChannelLayout</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>i_param_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>layout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>=
<expr><call><name>AudioUnitGetProperty</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyPreferredChannelLayout</name></expr></argument>,
<argument><expr><name>kAudioUnitScope_Output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>layout</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_param_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ca_LogWarn</name><argument_list>(<argument><expr><literal type="string">"device driver does not support "</literal>
<literal type="string">"kAudioDevicePropertyPreferredChannelLayout - using stereo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>warn_configuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>au_Initialize</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>warn_configuration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioOutputUnitStart</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"AudioUnitStart failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>au_Uninitialize</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>VolumeSet</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MuteSet</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>warn_configuration</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WarnConfiguration</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>AudioComponentInstanceDispose</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>StartSPDIF</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AudioDeviceSupportsDigital</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Audio device supports PCM mode only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AO_GET1PROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>pid_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyHogMode</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name> <operator>!=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Selected audio device is exclusively in use by another"</literal>
<literal type="string">" program."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Audio output failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The selected audio output device is exclusively in "</literal>
<literal type="string">"use by another program."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>desired_stream_format</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desired_stream_format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>desired_stream_format</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_digital</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_streams_changed_callback</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AO_SETPROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name></expr></argument>, <argument><expr><name>kAudioDevicePropertyHogMode</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_streams_changed_callback</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AO_HASPROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>kAudioDevicePropertySupportsMixing</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>UInt32</name></type> <name>b_mix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_writeable</name> <init>= <expr><call><name>AO_ISPROPSETTABLE</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>,
<argument><expr><name>kAudioDevicePropertySupportsMixing</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AO_GET1PROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>UInt32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_mix</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertySupportsMixing</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator> <name>b_writeable</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_mix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AO_SETPROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_mix</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertySupportsMixing</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_changed_mixing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"failed to set mixmode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamID</name> <modifier>*</modifier></type><name>p_streams</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AO_GETPROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>AudioStreamID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_streams</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_streams</name></expr></argument>, <argument><expr><name>kAudioDevicePropertyStreams</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_streams</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_digital</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamRangedDescription</name> <modifier>*</modifier></type><name>p_format_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GETPROP</name><argument_list>(<argument><expr><name><name>p_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>AudioStreamRangedDescription</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_format_list</name></expr></argument>,
<argument><expr><name>kAudioStreamPropertyAvailablePhysicalFormats</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_formats</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsAudioFormatDigital</name><argument_list>(<argument><expr><name><name>p_format_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>mFormat</name><operator>.</operator><name>mFormatID</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_digital</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>b_digital</name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>i_requested_rate_format</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_current_rate_format</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_backup_rate_format</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_revert</name></name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>current_streamformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GET1PROP</name><argument_list>(<argument><expr><name><name>p_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>AudioStreamBasicDescription</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>current_streamformat</name></expr></argument>,
<argument><expr><name>kAudioStreamPropertyPhysicalFormat</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>sfmt_revert</name><operator>.</operator><name>mFormatID</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sfmt_revert</name><operator>.</operator><name>mFormatID</name></name> <operator>!=</operator> <name><name>current_streamformat</name><operator>.</operator><name>mFormatID</name></name>
<operator>&amp;&amp;</operator> <name><name>p_streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_id</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><call><name>STREAM_FORMAT_MSG</name><argument_list>(<argument><expr><literal type="string">"Detected current stream"</literal>
<literal type="string">" format: "</literal></expr></argument>, <argument><expr><name>current_streamformat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"... there is another stream format "</literal>
<literal type="string">"already stored, the current one is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sfmt_revert</name></name> <operator>=</operator> <name>current_streamformat</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_revert</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <name><name>p_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_formats</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsAudioFormatDigital</name><argument_list>(<argument><expr><name><name>p_format_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>mFormat</name><operator>.</operator><name>mFormatID</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_format_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>mFormat</name><operator>.</operator><name>mSampleRate</name></name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_requested_rate_format</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_format_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>mFormat</name><operator>.</operator><name>mSampleRate</name></name> <operator>==</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>sfmt_revert</name><operator>.</operator><name>mSampleRate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_current_rate_format</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_backup_rate_format</name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>p_format_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>mFormat</name><operator>.</operator><name>mSampleRate</name></name> <operator>&gt;</operator>
<name><name>p_format_list</name><index>[<expr><name>i_backup_rate_format</name></expr>]</index></name><operator>.</operator><name><name>mFormat</name><operator>.</operator><name>mSampleRate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_backup_rate_format</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i_requested_rate_format</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>desired_stream_format</name> <operator>=</operator>
<name><name>p_format_list</name><index>[<expr><name>i_requested_rate_format</name></expr>]</index></name><operator>.</operator><name>mFormat</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i_current_rate_format</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>desired_stream_format</name> <operator>=</operator>
<name><name>p_format_list</name><index>[<expr><name>i_current_rate_format</name></expr>]</index></name><operator>.</operator><name>mFormat</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>desired_stream_format</name> <operator>=</operator>
<name><name>p_format_list</name><index>[<expr><name>i_backup_rate_format</name></expr>]</index></name><operator>.</operator><name>mFormat</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_format_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><call><name>STREAM_FORMAT_MSG</name><argument_list>(<argument><expr><literal type="string">"original stream format: "</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sfmt_revert</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AudioStreamChangeFormat</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_id</name></name></expr></argument>, <argument><expr><name>desired_stream_format</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"failed to change stream format for SPDIF output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>desired_stream_format</name><operator>.</operator><name>mFormatFlags</name></name> <operator>&amp;</operator> <name>kAudioFormatFlagIsBigEndian</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFB</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <name>AOUT_SPDIF_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <name>A52_FRAME_NB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>desired_stream_format</name><operator>.</operator><name>mSampleRate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>=
<expr><call><name>AudioDeviceCreateIOProcID</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>,
<argument><expr><name>RenderCallbackSPDIF</name></expr></argument>,
<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_procID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"Failed to create Process ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ca_Initialize</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AudioDeviceDestroyIOProcID</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_procID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioDeviceStart</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_procID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"Failed to start audio device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioDeviceDestroyIOProcID</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_procID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"Failed to destroy process ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Using audio device for digital output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Stop</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Stopping the auhal module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AudioOutputUnitStop</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>au_Uninitialize</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AudioComponentInstanceDispose</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_digital</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioDeviceStop</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_procID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"AudioDeviceStop failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioDeviceDestroyIOProcID</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_procID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"Failed to destroy Process ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_revert</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>AudioStreamChangeFormat</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_id</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sfmt_revert</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"failed to revert stream format in close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_changed_mixing</name></name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sfmt_revert</name><operator>.</operator><name>mFormatID</name></name> <operator>!=</operator> <name>kAudioFormat60958AC3</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>b_mix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_writeable</name> <init>=
<expr><call><name>AO_ISPROPSETTABLE</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>,
<argument><expr><name>kAudioDevicePropertySupportsMixing</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GET1PROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>UInt32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_mix</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertySupportsMixing</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator> <name>b_writeable</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"mixable is: %d"</literal></expr></argument>, <argument><expr><name>b_mix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_mix</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AO_SETPROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_mix</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertySupportsMixing</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"failed to re-set mixmode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ca_Uninitialize</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name> <operator>==</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>






<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_streams_changed_callback</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AO_SETPROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_hog_pid</name></name></expr></argument>, <argument><expr><name>kAudioDevicePropertyHogMode</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_streams_changed_callback</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_digital</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>AO_UPDATELISTENER</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>DeviceAliveListener</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyDeviceIsAlive</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Start</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>i_param_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>b_alive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AOUT_FMT_HDMI</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_digital</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>au_unit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_revert</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_changed_mixing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>do_spdif</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AOUT_FMT_SPDIF</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_new_selected_dev</name></name> <operator>&amp;</operator> <name>AOUT_VAR_SPDIF_FLAG</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>do_spdif</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>do_spdif</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_new_selected_dev</name></name> <operator>&amp;</operator> <operator>~</operator><name>AOUT_VAR_SPDIF_FLAG</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrint</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"VLC is looking for:"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"attempting to use device %i"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<decl_stmt><decl><type><name>CFIndex</name></type> <name>count</name> <init>= <expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>deviceNumber</name> <init>=
<expr><call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CFArrayContainsValue</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr></argument>,
<argument><expr><call><name>CFRangeMake</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>deviceNumber</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_param_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>b_alive</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GET1PROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_alive</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyDeviceIsAlive</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_alive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_alive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"selected audio device is not alive, switching"</literal>
<literal type="string">" to default device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"device id %i not found in the current devices "</literal>
<literal type="string">"list, fallback to default device"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>deviceNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_selected_dev_is_default</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_alive</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_selected_dev_is_default</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AudioObjectID</name></type> <name>defaultDeviceID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GET1PROP</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><name>AudioObjectID</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>defaultDeviceID</name></expr></argument>,
<argument><expr><name>kAudioHardwarePropertyDefaultOutputDevice</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"using default audio device %i"</literal></expr></argument>, <argument><expr><name>defaultDeviceID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name> <operator>=</operator> <name>defaultDeviceID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AO_UPDATELISTENER</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>DeviceAliveListener</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyDeviceIsAlive</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>UInt32</name></type> <name>i_latency_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_latency_us</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AO_GET1PROP</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>UInt32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_latency_samples</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyLatency</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeOutput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_latency_us</name> <operator>+=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>i_latency_samples</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Current device has a latency of %lld us"</literal></expr></argument>, <argument><expr><name>i_latency_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>do_spdif</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>StartSPDIF</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"digital output successfully opened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>StartAnalog</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"analog output successfully opened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"opening auhal output failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AO_UPDATELISTENER</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected_dev</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>DeviceAliveListener</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>,
<argument><expr><name>kAudioDevicePropertyDeviceIsAlive</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>AO_UPDATELISTENER</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>DevicesListener</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>,
<argument><expr><name>kAudioHardwarePropertyDevices</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AO_UPDATELISTENER</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>DefaultDeviceChangedListener</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>,
<argument><expr><name>kAudioHardwarePropertyDefaultOutputDevice</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>device_list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>device_list_cpy</name> <init>= <expr><call><name>CFArrayCreateCopy</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>device_list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>CFIndex</name></type> <name>count</name> <init>= <expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>device_list_cpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>CFIndex</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioDeviceID</name></type> <name>deviceId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>cfn_device_id</name> <init>=
<expr><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>device_list_cpy</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfn_device_id</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFNumberGetValue</name><argument_list>(<argument><expr><name>cfn_device_id</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deviceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>deviceId</name> <operator>&amp;</operator> <name>AOUT_VAR_SPDIF_FLAG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ManageAudioStreamsCallback</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>deviceId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>device_list_cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_device</name> <init>= <expr><call><name>aout_DeviceGet</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>config_PutPsz</name><argument_list>(<argument><expr><literal type="string">"auhal-audio-device"</literal></expr></argument>, <argument><expr><name>psz_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ca_Open</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>device_list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selected_device_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_digital</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_streams_changed_callback</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_selected_dev_is_default</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sfmt_revert</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sfmt_revert</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>volume_set</name></name> <operator>=</operator> <name>VolumeSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>mute_set</name></name> <operator>=</operator> <name>MuteSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>device_select</name></name> <operator>=</operator> <name>SwitchAudioDevice</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device_list</name></name> <operator>=</operator> <call><name>CFArrayCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<decl_stmt><decl><type><name>CFRunLoopRef</name></type> <name>theRunLoop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AO_SETPROP</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CFRunLoopRef</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>theRunLoop</name></expr></argument>, <argument><expr><name>kAudioHardwarePropertyRunLoop</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>AO_UPDATELISTENER</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>DevicesListener</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>,
<argument><expr><name>kAudioHardwarePropertyDevices</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AO_UPDATELISTENER</name><argument_list>(<argument><expr><name>kAudioObjectSystemObject</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>DefaultDeviceChangedListener</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>,
<argument><expr><name>kAudioHardwarePropertyDefaultOutputDevice</name></expr></argument>,
<argument><expr><name>kAudioObjectPropertyScopeGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_audio_device</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"auhal-audio-device"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_audio_device</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dev_id_int</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>psz_audio_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>dev_id</name> <init>= <expr><ternary><condition><expr><name>dev_id_int</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>dev_id_int</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isDigital</name> <init>= <expr><operator>(</operator><name>dev_id</name> <operator>&amp;</operator> <name>AOUT_VAR_SPDIF_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Trying to use stored audio device %d (%s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>dev_id</name> <operator>&amp;</operator> <operator>~</operator><name>AOUT_VAR_SPDIF_FLAG</name><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name>isDigital</name></expr> ?</condition><then> <expr><literal type="string">"digital"</literal></expr> </then><else>: <expr><literal type="string">"analog"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RebuildDeviceList</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_new_selected_dev</name></name> <operator>=</operator> <name>dev_id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_audio_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>RebuildDeviceList</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_new_selected_dev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>deviceid</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>deviceid</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_new_selected_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_DeviceReport</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>deviceid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_volume</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"auhal-volume"</literal></expr></argument>)</argument_list></call>
<operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>AOUT_VOLUME_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_VolumeReport</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mute</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"mute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_MuteReport</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
