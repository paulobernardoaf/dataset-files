<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_output\pulse.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/pulseaudio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/vlcpulse.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"PulseAudio"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Pulseaudio audio output"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio output"</literal></argument>, <argument><literal type="number">160</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AOUT</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"pulseaudio"</literal></argument>, <argument><literal type="string">"pa"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>







<struct>struct <name>sink</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>sink</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pa_time_event</name> <modifier>*</modifier></type><name>trigger</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pa_cvolume</name></type> <name>cvolume</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_date</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pa_volume_t</name></type> <name>volume_force</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pa_stream_flags_t</name></type> <name>flags_force</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sink_force</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>sink</name></name> <modifier>*</modifier></type><name>sinks</name></decl>;</decl_stmt> 
}</block></struct></type> <name>aout_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VolumeReport</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_volume_t</name></type> <name>volume</name> <init>= <expr><call><name>pa_cvolume_max</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cvolume</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aout_VolumeReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>volume</name> <operator>/</operator> <name>PA_VOLUME_NORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>sink_add_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_sink_info</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"adding sink %"</literal><name>PRIu32</name><literal type="string">": %s (%s)"</literal></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>i</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_HotplugReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sink</name></name> <modifier>*</modifier></type><name>sink</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sink</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>namelen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sink</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sink</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>sinks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sink</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sink</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sinks</name></name> <operator>=</operator> <name>sink</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sink_mod_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_sink_info</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"changing sink %"</literal><name>PRIu32</name><literal type="string">": %s (%s)"</literal></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>i</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_HotplugReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sink_del</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sink</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sinks</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sink</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"removing sink %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>sink</name> <operator>=</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>sink</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>index</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>sink</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_HotplugReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>sink</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sink</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sink_event</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PA_SUBSCRIPTION_EVENT_NEW</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_get_sink_info_by_index</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>sink_add_cb</name></expr></argument>,
<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PA_SUBSCRIPTION_EVENT_CHANGE</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_get_sink_info_by_index</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>sink_mod_cb</name></expr></argument>,
<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PA_SUBSCRIPTION_EVENT_REMOVE</name></expr>:</case>
<expr_stmt><expr><call><name>sink_del</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_start_now</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>aout_sys_t</name> <operator>*</operator><operator>)</operator><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name><operator>)</operator><operator>-&gt;</operator><name>trigger</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_stream_cork</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_stream_trigger</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_stop</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_pa_rttime_free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_stream_cork</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_trigger_cb</name><parameter_list>(<parameter><decl><type><name>pa_mainloop_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>pa_time_event</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>==</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"starting deferred"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_pa_rttime_free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_start_now</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>api</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tv</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_start</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delta</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_pa_rttime_free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>vlc_pa_get_latency</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>delta</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot synchronize start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>date</name> <operator>-</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <name>delta</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"deferring start (%"</literal><name>PRId64</name><literal type="string">" us)"</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>+=</operator> <call><name>pa_rtclock_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>=</operator> <call><name>pa_context_rttime_new</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>,
<argument><expr><name>stream_trigger_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"starting late (%"</literal><name>PRId64</name><literal type="string">" us)"</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_start_now</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_latency_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>pa_stream_is_corked</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stream_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>last_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_state_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>pa_stream_get_state</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PA_STREAM_READY</name></expr>:</case>
<case>case <expr><name>PA_STREAM_FAILED</name></expr>:</case>
<case>case <expr><name>PA_STREAM_TERMINATED</name></expr>:</case>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_buffer_attr_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pa_buffer_attr</name> <modifier>*</modifier></type><name>pba</name> <init>= <expr><call><name>pa_stream_get_buffer_attr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"changed buffer metrics: maxlength=%u, tlength=%u, "</literal>
<literal type="string">"prebuf=%u, minreq=%u"</literal></expr></argument>,
<argument><expr><name><name>pba</name><operator>-&gt;</operator><name>maxlength</name></name></expr></argument>, <argument><expr><name><name>pba</name><operator>-&gt;</operator><name>tlength</name></name></expr></argument>, <argument><expr><name><name>pba</name><operator>-&gt;</operator><name>prebuf</name></name></expr></argument>, <argument><expr><name><name>pba</name><operator>-&gt;</operator><name>minreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_event_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>pa_proplist</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>PA_STREAM_EVENT_REQUEST_CORK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_PolicyReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>PA_STREAM_EVENT_REQUEST_UNCORK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_PolicyReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else

if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>PA_STREAM_EVENT_FORMAT_LOST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"format lost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_RestartRequest</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"unhandled stream event \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>pl</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_moved_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>pa_stream_get_device_name</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"connected to sink %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_DeviceReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_overflow_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"overflow, flushing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_stream_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>op</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_started_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_suspended_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"suspended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_underflow_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"underflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_wait</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_stream_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>pa_stream_get_state</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>PA_STREAM_READY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>PA_STREAM_FAILED</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>PA_STREAM_TERMINATED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>sink_input_info_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_sink_input_info</name> <modifier>*</modifier></type><name>i</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cvolume</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>volume</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>VolumeReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_MuteReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>mute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sink_input_event</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>pa_subscription_event_type_t</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>


<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PA_SUBSCRIPTION_EVENT_REMOVE</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"sink input killed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_get_sink_input_info</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>sink_input_info_cb</name></expr></argument>,
<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>context_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>pa_subscription_event_type_t</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>facility</name> <init>= <expr><name>type</name> <operator>&amp;</operator> <name>PA_SUBSCRIPTION_EVENT_FACILITY_MASK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <name>PA_SUBSCRIPTION_EVENT_TYPE_MASK</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>facility</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PA_SUBSCRIPTION_EVENT_SINK</name></expr>:</case>
<expr_stmt><expr><call><name>sink_event</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>PA_SUBSCRIPTION_EVENT_SINK_INPUT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>==</operator> <call><name>pa_stream_get_index</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sink_input_event</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default> 
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>TimeGet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pa_stream_is_corked</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delta</name> <init>= <expr><call><name>vlc_pa_get_latency</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>delay</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Play</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>







<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_stream_is_corked</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stream_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
static volatile unsigned u = 0;
if ((++u % 1000) == 0) {
msg_Err(aout, "fault injection");
pa_operation_unref(pa_stream_flush(s, NULL, NULL));
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_stream_begin_write</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_pa_error</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot begin write"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_stream_write</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PA_SEEK_RELATIVE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_pa_error</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot write"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Pause</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>paused</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_stream_set_latency_update_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_stop</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pa_stream_set_latency_update_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_latency_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stream_start_now</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>pa_stream_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_stop</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Drain</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>pa_stream_is_corked</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_pa_rttime_free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stream_start_now</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>pa_stream_drain</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TimeGet</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>delay</name> <operator>&lt;=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stream_stop</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VolumeSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_volume_t</name></type> <name>volume</name></decl>;</decl_stmt>




<expr_stmt><expr><name>vol</name> <operator>*=</operator> <name>PA_VOLUME_NORM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>vol</name> <operator>&gt;=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>PA_VOLUME_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>volume</name> <operator>=</operator> <name>PA_VOLUME_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>volume</name> <operator>=</operator> <call><name>lroundf</name><argument_list>(<argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>volume_force</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_VolumeReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>volume</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>PA_VOLUME_NORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pa_cvolume_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cvolume</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>pa_sample_spec</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>pa_stream_get_sample_spec</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"balance clobbered by volume change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_cvolume_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cvolume</name></name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>PA_VOLUME_NORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>pa_cvolume</name></type> <name>cvolume</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>cvolume</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pa_cvolume_scale</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cvolume</name></expr></argument>, <argument><expr><name>PA_VOLUME_NORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_sw_cvolume_multiply_scalar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cvolume</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cvolume</name></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pa_cvolume_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cvolume</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_set_sink_input_volume</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><call><name>pa_stream_get_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cvolume</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MuteSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>flags_force</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>PA_STREAM_START_MUTED</name><operator>|</operator><name>PA_STREAM_START_UNMUTED</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>flags_force</name></name> <operator>|=</operator>
<ternary><condition><expr><name>mute</name></expr> ?</condition><then> <expr><name>PA_STREAM_START_MUTED</name></expr> </then><else>: <expr><name>PA_STREAM_START_UNMUTED</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_MuteReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>mute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>idx</name> <init>= <expr><call><name>pa_stream_get_index</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_set_sink_input_mute</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>mute</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>StreamMove</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"will connect to sink %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sink_force</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sink_force</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_DeviceReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>idx</name> <init>= <expr><call><name>pa_stream_get_index</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_move_sink_input_by_name</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"moving to sink %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_pa_error</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot move sink input"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>strcmp_void</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_map</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>table</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>bsearch</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>table</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>strcmp_void</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>pa_sample_spec</name></name></type> <name>ss</name> <init>= <expr><block>{ <expr><operator>.</operator><name>format</name> <operator>=</operator> <name>PA_SAMPLE_INVALID</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_encoding_t</name></type> <name>encoding</name> <init>= <expr><name>PA_ENCODING_PCM</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_FLOAT32NE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S32NE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S16NE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_U8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_2_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name>PA_ENCODING_AC3_IEC61937</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S16NE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_EAC3</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_2_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name>PA_ENCODING_EAC3_IEC61937</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S16NE</name></expr>;</expr_stmt>
<break>break;</break>




<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_2_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name>PA_ENCODING_DTS_IEC61937</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S16NE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AOUT_FMT_LINEAR</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_FPU</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_FLOAT32NE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S16NE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pa_sample_spec_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"unsupported sample specification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>pa_stream_flags_t</name></type> <name>flags</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>flags_force</name></name>
<operator>|</operator> <name>PA_STREAM_START_CORKED</name>
<operator>|</operator> <name>PA_STREAM_INTERPOLATE_TIMING</name>
<operator>|</operator> <name>PA_STREAM_NOT_MONOTONIC</name>
<operator>|</operator> <name>PA_STREAM_AUTO_TIMING_UPDATE</name>
<operator>|</operator> <name>PA_STREAM_FIX_RATE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pa_buffer_attr</name></name></type> <name>attr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>maxlength</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>tlength</name></name> <operator>=</operator> <call><name>pa_usec_to_bytes</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>AOUT_MIN_PREPARE_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>prebuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>minreq</name></name> <operator>=</operator> <call><name>pa_usec_to_bytes</name><argument_list>(<argument><expr><name>AOUT_MIN_PREPARE_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>fragsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>pa_cvolume</name> <modifier>*</modifier></type><name>cvolume</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>cvolumebuf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>PA_VOLUME_IS_VALID</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>volume_force</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cvolume</name> <operator>=</operator> <operator>&amp;</operator><name>cvolumebuf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_cvolume_set</name><argument_list>(<argument><expr><name>cvolume</name></expr></argument>, <argument><expr><name><name>ss</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>volume_force</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_cvolume_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cvolume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_format_info</name> <modifier>*</modifier></type><name>formatv</name> <init>= <expr><call><name>pa_format_info_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>formatv</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_format_info_set_rate</name><argument_list>(<argument><expr><name>formatv</name></expr></argument>, <argument><expr><name><name>ss</name><operator>.</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>PA_SAMPLE_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_format_info_set_sample_format</name><argument_list>(<argument><expr><name>formatv</name></expr></argument>, <argument><expr><name><name>ss</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>==</operator> <name>AUDIO_CHANNEL_TYPE_AMBISONICS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr>;</expr_stmt>



<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>PA_STREAM_ADJUST_LATENCY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>tlength</name></name> <operator>=</operator> <call><name>pa_usec_to_bytes</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>AOUT_MIN_PREPARE_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>!=</operator> <name>PA_ENCODING_PCM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pa_format_info_set_channels</name><argument_list>(<argument><expr><name>formatv</name></expr></argument>, <argument><expr><name><name>ss</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>PA_STREAM_FIX_FORMAT</name>
<operator>|</operator> <name>PA_STREAM_FIX_RATE</name>
<operator>|</operator> <name>PA_STREAM_FIX_CHANNELS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pa_channel_map</name></name></type> <name>map</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_MIDDLELEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_SIDE_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_SIDE_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_REARLEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_REAR_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_REAR_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_REARCENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_REAR_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_CENTER</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>.</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_MONO</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_CENTER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_LFE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>AOUT_CHAN_MAX</name> <operator>==</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"Missing channels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>map</name><operator>.</operator><name>channels</name></name> <operator>&lt;</operator> <name><name>ss</name><operator>.</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name><name>map</name><operator>.</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_AUX0</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"mapping channel %"</literal><name>PRIu8</name><literal type="string">" to AUX%u"</literal></expr></argument>, <argument><expr><name><name>map</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pa_channel_map_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"unsupported channel map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>pa_channel_map_to_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"using %s channel map"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>name</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pa_format_info_set_channels</name><argument_list>(<argument><expr><name>formatv</name></expr></argument>, <argument><expr><name><name>ss</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_format_info_set_channel_map</name><argument_list>(<argument><expr><name>formatv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>pa_proplist</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>pa_proplist_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>props</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"role"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>role_map</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"accessibility"</literal></expr>, <expr><literal type="string">"a11y"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"animation"</literal></expr>, <expr><literal type="string">"animation"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"communication"</literal></expr>, <expr><literal type="string">"phone"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"game"</literal></expr>, <expr><literal type="string">"game"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"music"</literal></expr>, <expr><literal type="string">"music"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"notification"</literal></expr>, <expr><literal type="string">"event"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"production"</literal></expr>, <expr><literal type="string">"production"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"test"</literal></expr>, <expr><literal type="string">"test"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"video"</literal></expr>, <expr><literal type="string">"video"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>role</name> <init>= <expr><call><name>str_map</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>role_map</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>role_map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>role</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_proplist_sets</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_MEDIA_ROLE</name></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>pa_stream_new_extended</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="string">"audio stream"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>formatv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>props</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_proplist_free</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pa_format_info_free</name><argument_list>(<argument><expr><name>formatv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_pa_error</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"stream creation failure"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_state_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_state_cb</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_buffer_attr_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_buffer_attr_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_event_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_event_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_latency_update_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_latency_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_moved_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_moved_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_overflow_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_overflow_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_started_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_started_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_suspended_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_suspended_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_underflow_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_underflow_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_stream_connect_playback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sink_force</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>cvolume</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>stream_wait</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>!=</operator> <name>PA_ENCODING_PCM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_pa_error</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"digital pass-through stream connection failure"</literal></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_pa_error</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"stream connection failure"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>volume_force</name></name> <operator>=</operator> <name>PA_VOLUME_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>flags_force</name></name> <operator>=</operator> <name>PA_STREAM_NOFLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sink_force</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sink_force</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>PA_ENCODING_PCM</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pa_sample_spec</name></name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><call><name>pa_stream_get_sample_spec</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stream_buffer_attr_cb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_moved_cb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Stop</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_pa_rttime_free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>trigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pa_stream_disconnect</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>pa_stream_set_state_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_buffer_attr_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_event_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_latency_update_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_moved_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_overflow_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_started_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_suspended_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_underflow_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_stream_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>vlc_pa_connect</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>volume_force</name></name> <operator>=</operator> <name>PA_VOLUME_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>flags_force</name></name> <operator>=</operator> <name>PA_STREAM_NOFLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sink_force</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sinks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>TimeGet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>Play</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>Pause</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>drain</name></name> <operator>=</operator> <name>Drain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>volume_set</name></name> <operator>=</operator> <name>VolumeSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>mute_set</name></name> <operator>=</operator> <name>MuteSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>device_select</name></name> <operator>=</operator> <name>StreamMove</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_get_sink_info_list</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>sink_add_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>pa_subscription_mask_t</name></type> <name>mask</name> <init>= <expr><name>PA_SUBSCRIPTION_MASK_SINK</name>
<operator>|</operator> <name>PA_SUBSCRIPTION_MASK_SINK_INPUT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pa_context_set_subscribe_callback</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>context_cb</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_subscribe</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_context_set_subscribe_callback</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_pa_disconnect</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name><name>struct</name> <name>sink</name></name> <modifier>*</modifier><name>sink</name></type> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>sinks</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</init> <condition><expr><name>sink</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>sink</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>sink</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sink_force</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
