<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_output\waveout.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/windows_audio_common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define> 




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Play</name> <parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>





<typedef>typedef <type><name><name>struct</name> <name>aout_sys_t</name></name></type> <name>aout_sys_t</name>;</typedef>

<struct>struct <name>lkwavehdr</name>
<block>{
<decl_stmt><decl><type><name>WAVEHDR</name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lkwavehdr</name></name> <modifier>*</modifier></type> <name>p_next</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenWaveOut</name> <parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenWaveOutPCM</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>PlayWaveOut</name> <parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>HWAVEOUT</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lkwavehdr</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <name>CALLBACK</name></type> <name>WaveOutCallback</name> <parameter_list>( <parameter><decl><type><name>HWAVEOUT</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>DWORD_PTR</name></type></decl></parameter>, <parameter><decl><type><name>DWORD_PTR</name></type></decl></parameter>, <parameter><decl><type><name>DWORD_PTR</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WaveOutClean</name><parameter_list>( <parameter><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type> <name>p_sys</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WaveOutClearBuffer</name><parameter_list>( <parameter><decl><type><name>HWAVEOUT</name></type></decl></parameter>, <parameter><decl><type><name>WAVEHDR</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>findDeviceID</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>WaveOutTimeGet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WaveOutFlush</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WaveOutDrain</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WaveOutPause</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>WaveoutVolumeSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>WaveoutMuteSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WaveoutPollVolume</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>device_name_fmt</name><index>[]</index></name> <init>= <expr><literal type="string">L"%ls ($%x,$%x)"</literal></expr></init></decl>;</decl_stmt>








<struct>struct <name>aout_sys_t</name>
<block>{
<decl_stmt><decl><type><name>HWAVEOUT</name></type> <name>h_waveout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>WAVEFORMATEXTENSIBLE</name></type> <name>waveformat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>i_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_repeat_counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_silence_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>f_volume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_spdif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_mute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_soft</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>chans_to_reorder</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>chan_table</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_played_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lkwavehdr</name></name> <modifier>*</modifier></type> <name>p_free_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_timer_t</name></type> <name>volume_poll_timer</name></decl>;</decl_stmt>
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_TEXT</name></cpp:macro> <cpp:value>N_("Select Audio Device")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_LONG</name></cpp:macro> <cpp:value>N_("Select special Audio device, or let windows ""decide (default), change needs VLC restart ""to apply.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_CHAN_TEXT</name></cpp:macro> <cpp:value>N_("Audio output channels")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_CHAN_LONGTEXT</name></cpp:macro> <cpp:value>N_("Channels available for audio output. " "If the input has more channels than the output, it will be down-mixed. " "This parameter is ignored when digital pass-through is active.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOLUME_TEXT</name></cpp:macro> <cpp:value>N_("Audio volume")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"WaveOut"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"WaveOut audio output"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio output"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AOUT</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"waveout-audio-device"</literal></argument>, <argument><literal type="string">"wavemapper"</literal></argument>,
<argument>DEVICE_TEXT</argument>, <argument>DEVICE_LONG</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument><literal type="string">"waveout-volume"</literal></argument>, <argument><literal type="number">1.0f</literal></argument>, <argument>VOLUME_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_float_range</name><argument_list>(<argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">2.0f</literal></argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"waveout-float32"</literal></argument>, <argument>true</argument>, <argument>FLOAT_TEXT</argument>, <argument>FLOAT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"waveout-audio-channels"</literal></argument>, <argument><literal type="number">9</literal></argument>, <argument>AUDIO_CHAN_TEXT</argument>,
<argument>AUDIO_CHAN_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>WaveOutTimeGet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>Play</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>WaveOutPause</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>WaveOutFlush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>drain</name></name> <operator>=</operator> <name>WaveOutDrain</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_soft</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveout-audio-device"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>devid</name> <init>= <expr><call><name>findDeviceID</name><argument_list>( <argument><expr><name>dev</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>devid</name> <operator>==</operator> <name>WAVE_MAPPER</name> <operator>&amp;&amp;</operator> <name>dev</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>stricmp</name><argument_list>(<argument><expr><name>dev</name></expr></argument>,<argument><expr><literal type="string">"wavemapper"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"configured audio device '%s' not available, "</literal>
<literal type="string">"using default instead"</literal></expr></argument>, <argument><expr><name>dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WAVEOUTCAPS</name></type> <name>waveoutcaps</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>waveOutGetDevCaps</name><argument_list>( <argument><expr><name>devid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>waveoutcaps</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEOUTCAPS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>MMSYSERR_NOERROR</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Drivername: %ls"</literal></expr></argument>, <argument><expr><name><name>waveoutcaps</name><operator>.</operator><name>szPname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Driver Version: %d.%d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>waveoutcaps</name><operator>.</operator><name>vDriverVersion</name></name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr></argument>,
<argument><expr><name><name>waveoutcaps</name><operator>.</operator><name>vDriverVersion</name></name> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Manufacturer identifier: 0x%x"</literal></expr></argument>, <argument><expr><name><name>waveoutcaps</name><operator>.</operator><name>wMid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Product identifier: 0x%x"</literal></expr></argument>, <argument><expr><name><name>waveoutcaps</name><operator>.</operator><name>wPid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>( <expr><call><name>AOUT_FMT_SPDIF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spdif"</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>OpenWaveOut</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>devid</name></expr></argument>, <argument><expr><name>VLC_CODEC_SPDIFL</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr></argument>,
<argument><expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call>
<operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFL</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <name>AOUT_SPDIF_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <name>A52_FRAME_NB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_spdif</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,
<argument><expr><literal type="string">"cannot open waveout audio device for spdif fallback to PCM"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_SPDIFL</name></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <ternary><condition><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveout-float32"</literal></expr></argument> )</argument_list></call></expr>?</condition><then>
<expr><name>VLC_CODEC_FL32</name></expr></then><else>: <expr><name>VLC_CODEC_S16N</name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_chan</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveout-audio-channels"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_channels</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i_channels</name> <operator>&lt;</operator> <name>max_chan</name> <operator>)</operator></expr>?</condition><then> <expr><name>i_channels</name></expr></then><else>: <expr><name>max_chan</name></expr></else></ternary></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<switch>switch<condition>(<expr><name>i_channels</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_8_1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_7_1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_7_0</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_REARLEFT</name>
<operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Trying %d channels"</literal></expr></argument>, <argument><expr><name>i_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while<condition>( <expr><operator>(</operator> <call><name>OpenWaveOutPCM</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>devid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr></argument>, <argument><expr><name>i_channels</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>--</operator><name>i_channels</name></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_channels</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Waveout couldn't find appropriate channel mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <name>FRAME_SIZE</name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>waveoutcaps</name><operator>.</operator><name>dwSupport</name></name> <operator>&amp;</operator> <name>WAVECAPS_VOLUME</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>aout_GainRequest</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_soft</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>WaveoutMuteSet</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>b_mute</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_spdif</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>waveOutReset</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_silence_buffer</name></name> <operator>=</operator>
<call><name>malloc</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>p_silence_buffer</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Couldn't alloc silence buffer... aborting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_repeat_counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_silence_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_played_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_free_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>Play</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lkwavehdr</name></name> <modifier>*</modifier></type> <name>p_waveheader</name> <init>=
<expr><operator>(</operator>struct <name>lkwavehdr</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>lkwavehdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_waveheader</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Couldn't alloc WAVEHDR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_waveheader</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>block</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>aout_ChannelReorder</name><argument_list>( <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nChannels</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>chan_table</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>( <expr><call><name>PlayWaveOut</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument>, <argument><expr><name>p_waveheader</name></expr></argument>, <argument><expr><name>block</name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>b_spdif</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Couln't write frame... sleeping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>WaveOutClean</name><argument_list>( <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaveoutPollVolume</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_frames</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_played_length</name></name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>waveOutReset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>WaveOutDrain</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaveOutClean</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>waveOutClose</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutClose failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_silence_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_played_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_soft</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenWaveOut</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_device_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_rate</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_probe</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMRESULT</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>waveformat</name></cpp:macro> <cpp:value>sys-&gt;waveformat</cpp:value></cpp:define>

<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>dwChannelMask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pi_vlc_chan_order_wg4</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name>i_channels</name> <operator>&amp;</operator> <name><name>pi_vlc_chan_order_wg4</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>dwChannelMask</name></name> <operator>|=</operator> <name><name>pi_channels_in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<switch>switch<condition>( <expr><name>i_format</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_SPDIFL</name></expr>:</case>
<expr_stmt><expr><name>i_nb_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>dwChannelMask</name></name> <operator>=</operator> <name>SPEAKER_FRONT_LEFT</name> <operator>|</operator> <name>SPEAKER_FRONT_RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Samples</name><operator>.</operator><name>wValidBitsPerSample</name></name> <operator>=</operator>
<name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_DOLBY_AC3_SPDIF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>SubFormat</name></name> <operator>=</operator> <name>__KSDATAFORMAT_SUBTYPE_DOLBY_AC3_SPDIF</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Samples</name><operator>.</operator><name>wValidBitsPerSample</name></name> <operator>=</operator>
<name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_IEEE_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>SubFormat</name></name> <operator>=</operator> <name>__KSDATAFORMAT_SUBTYPE_IEEE_FLOAT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Samples</name><operator>.</operator><name>wValidBitsPerSample</name></name> <operator>=</operator>
<name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_PCM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>SubFormat</name></name> <operator>=</operator> <name>__KSDATAFORMAT_SUBTYPE_PCM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_nb_channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name> <operator>=</operator> <name>i_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name> <operator>=</operator>
<name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name> <operator>/</operator> <literal type="number">8</literal> <operator>*</operator> <name>i_nb_channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator>
<name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name> <operator>*</operator> <name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_nb_channels</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_EXTENSIBLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEXTENSIBLE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEX</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_probe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"OpenWaveDevice-ID: %u"</literal></expr></argument>, <argument><expr><name>i_device_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"waveformat.Format.cbSize = %d"</literal></expr></argument>,
<argument><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>cbSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"waveformat.Format.wFormatTag = %u"</literal></expr></argument>,
<argument><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wFormatTag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"waveformat.Format.nChannels = %u"</literal></expr></argument>,
<argument><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"waveformat.Format.nSamplesPerSec = %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"waveformat.Format.nAvgBytesPerSec = %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nAvgBytesPerSec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"waveformat.Format.nBlockAlign = %d"</literal></expr></argument>,
<argument><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"waveformat.Format.wBitsPerSample = %d"</literal></expr></argument>,
<argument><expr><name><name>waveformat</name><operator>.</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"waveformat.Samples.wValidBitsPerSample = %d"</literal></expr></argument>,
<argument><expr><name><name>waveformat</name><operator>.</operator><name>Samples</name><operator>.</operator><name>wValidBitsPerSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"waveformat.Samples.wSamplesPerBlock = %d"</literal></expr></argument>,
<argument><expr><name><name>waveformat</name><operator>.</operator><name>Samples</name><operator>.</operator><name>wSamplesPerBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"waveformat.dwChannelMask = %u"</literal></expr></argument>,
<argument><expr><name><name>waveformat</name><operator>.</operator><name>dwChannelMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>waveOutOpen</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument>, <argument><expr><name>i_device_id</name></expr></argument>,
<argument><expr><operator>(</operator><name>WAVEFORMATEX</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>waveformat</name></expr></argument>,
<argument><expr><operator>(</operator><name>DWORD_PTR</name><operator>)</operator><name>WaveOutCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD_PTR</name><operator>)</operator><name>p_aout</name></expr></argument>,
<argument><expr><name>CALLBACK_FUNCTION</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>b_probe</name></expr>?</condition><then><expr><name>WAVE_FORMAT_QUERY</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>result</name> <operator>==</operator> <name>WAVERR_BADFORMAT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutOpen failed WAVERR_BADFORMAT"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>result</name> <operator>==</operator> <name>MMSYSERR_ALLOCATED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutOpen failed WAVERR_ALLOCATED"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>result</name> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutOpen failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>=</operator>
<call><name>aout_CheckChannelReorder</name><argument_list>( <argument><expr><name>pi_channels_in</name></expr></argument>, <argument><expr><name>pi_channels_out</name></expr></argument>,
<argument><expr><name><name>waveformat</name><operator>.</operator><name>dwChannelMask</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>chan_table</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"channel reordering needed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>i_format</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>waveformat</name></cpp:undef>

</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenWaveOutPCM</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_device_id</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>i_format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_rate</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_probe</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_use_float32</name> <init>= <expr><call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveout-float32"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_use_float32</name> <operator>||</operator> <call><name>OpenWaveOut</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_device_id</name></expr></argument>, <argument><expr><name>VLC_CODEC_FL32</name></expr></argument>,
<argument><expr><name>i_channels</name></expr></argument>, <argument><expr><name>i_nb_channels</name></expr></argument>, <argument><expr><name>i_rate</name></expr></argument>, <argument><expr><name>b_probe</name></expr></argument> )</argument_list></call>
<operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>OpenWaveOut</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_device_id</name></expr></argument>, <argument><expr><name>VLC_CODEC_S16N</name></expr></argument>,
<argument><expr><name>i_channels</name></expr></argument>, <argument><expr><name>i_nb_channels</name></expr></argument>, <argument><expr><name>i_rate</name></expr></argument>, <argument><expr><name>b_probe</name></expr></argument> )</argument_list></call>
<operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>i_format</name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>i_format</name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>PlayWaveOut</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>HWAVEOUT</name></type> <name>h_waveout</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>lkwavehdr</name></name> <modifier>*</modifier></type><name>p_waveheader</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_spdif</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMRESULT</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>p_buffer</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_waveheader</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>lpData</name></name> <operator>=</operator> <operator>(</operator><name>LPSTR</name><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_waveheader</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>dwBufferLength</name></name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>






<if_stmt><if>if<condition>(<expr><name>b_spdif</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_silence_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_repeat_counter</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>i_repeat_counter</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_repeat_counter</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>i_repeat_counter</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_silence_buffer</name></name></expr></argument>,
<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_waveheader</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>lpData</name></name> <operator>=</operator> <operator>(</operator><name>LPSTR</name><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>p_silence_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_waveheader</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>dwBufferLength</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_waveheader</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>dwUser</name></name> <operator>=</operator> <ternary><condition><expr><name>p_buffer</name></expr> ?</condition><then> <expr><operator>(</operator><name>DWORD_PTR</name><operator>)</operator><name>p_buffer</name></expr> </then><else>: <expr><operator>(</operator><name>DWORD_PTR</name><operator>)</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_waveheader</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>waveOutPrepareHeader</name><argument_list>( <argument><expr><name>h_waveout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_waveheader</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEHDR</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>result</name> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutPrepareHeader failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>waveOutWrite</name><argument_list>( <argument><expr><name>h_waveout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_waveheader</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEHDR</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>result</name> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutWrite failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name> <name>CALLBACK</name></type> <name>WaveOutCallback</name><parameter_list>( <parameter><decl><type><name>HWAVEOUT</name></type> <name>h_waveout</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>,
<parameter><decl><type><name>DWORD_PTR</name></type> <name>_p_aout</name></decl></parameter>,
<parameter><decl><type><name>DWORD_PTR</name></type> <name>dwParam1</name></decl></parameter>, <parameter><decl><type><name>DWORD_PTR</name></type> <name>dwParam2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>h_waveout</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dwParam2</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>_p_aout</name><operator>)</operator><operator>-&gt;</operator><name>sys</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lkwavehdr</name></name> <modifier>*</modifier></type> <name>p_waveheader</name> <init>= <expr><operator>(</operator>struct <name>lkwavehdr</name> <operator>*</operator><operator>)</operator> <name>dwParam1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>uMsg</name> <operator>!=</operator> <name>WOM_DONE</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_waveheader</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>p_free_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_free_list</name></name> <operator>=</operator> <name>p_waveheader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_frames</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_broadcast</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WaveOutClean</name><parameter_list>( <parameter><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type> <name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lkwavehdr</name></name> <modifier>*</modifier></type><name>p_whdr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_list</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_free_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_free_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_list</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_whdr</name> <operator>=</operator> <name>p_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_list</name> <operator>=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaveOutClearBuffer</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_whdr</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_whdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WaveOutClearBuffer</name><parameter_list>( <parameter><decl><type><name>HWAVEOUT</name></type> <name>h_waveout</name></decl></parameter>, <parameter><decl><type><name>WAVEHDR</name> <modifier>*</modifier></type><name>p_waveheader</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><operator>(</operator><name>block_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_waveheader</name><operator>-&gt;</operator><name>dwUser</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>waveOutUnprepareHeader</name><argument_list>( <argument><expr><name>h_waveout</name></expr></argument>, <argument><expr><name>p_waveheader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEHDR</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_waveheader</name><operator>-&gt;</operator><name>dwUser</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ReloadWaveoutDevices</name><parameter_list>( <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>descs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_devices</name> <init>= <expr><call><name>waveOutGetNumDevs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><operator>(</operator><name>nb_devices</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>descs</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><operator>(</operator><name>nb_devices</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>values</name><operator>)</operator><index>[<expr><name>n</name></expr>]</index> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"wavemapper"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>descs</name><operator>)</operator><index>[<expr><name>n</name></expr>]</index> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Microsoft Soundmapper"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_devices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVEOUTCAPS</name></type> <name>caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>dev_name</name><index>[<expr><name>MAXPNAMELEN</name><operator>+</operator><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>waveOutGetDevCaps</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEOUTCAPS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>(<argument><expr><name>dev_name</name></expr></argument>, <argument><expr><name>MAXPNAMELEN</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>device_name_fmt</name></expr></argument>,
<argument><expr><name><name>caps</name><operator>.</operator><name>szPname</name></name></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>wMid</name></name></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>wPid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>values</name><operator>)</operator><index>[<expr><name>n</name></expr>]</index> <operator>=</operator> <call><name>FromWide</name><argument_list>( <argument><expr><name>dev_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>descs</name><operator>)</operator><index>[<expr><name>n</name></expr>]</index> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>values</name><operator>)</operator><index>[<expr><name>n</name></expr>]</index></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<macro><name>VLC_CONFIG_STRING_ENUM</name><argument_list>(<argument>ReloadWaveoutDevices</argument>)</argument_list></macro>







<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>findDeviceID</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_device_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_device_name</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>WAVE_MAPPER</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>wave_devices</name> <init>= <expr><call><name>waveOutGetNumDevs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>wave_devices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVEOUTCAPS</name></type> <name>caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>dev_name</name><index>[<expr><name>MAXPNAMELEN</name><operator>+</operator><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>waveOutGetDevCaps</name><argument_list>( <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEOUTCAPS</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call>
<operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>( <argument><expr><name>dev_name</name></expr></argument>, <argument><expr><name>MAXPNAMELEN</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>device_name_fmt</name></expr></argument>,
<argument><expr><name><name>caps</name><operator>.</operator><name>szPname</name></name></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>wMid</name></name></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>wPid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>u8</name> <init>= <expr><call><name>FromWide</name><argument_list>(<argument><expr><name>dev_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>stricmp</name><argument_list>(<argument><expr><name>u8</name></expr></argument>, <argument><expr><name>psz_device_name</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>u8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>u8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>WAVE_MAPPER</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeviceSelect</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"waveout-audio-device"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>id</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_DeviceReport</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_RestartRequest</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>volume_set</name></name> <operator>=</operator> <name>WaveoutVolumeSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>mute_set</name></name> <operator>=</operator> <name>WaveoutMuteSet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>device_select</name></name> <operator>=</operator> <name>DeviceSelect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>f_volume</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"waveout-volume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_mute</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"mute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_MuteReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>b_mute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_VolumeReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>f_volume</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_timer_create</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>volume_poll_timer</name></name></expr></argument>,
<argument><expr><name>WaveoutPollVolume</name></expr></argument>, <argument><expr><name>aout</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"Couldn't create volume polling timer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>ReloadWaveoutDevices</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>aout_HotplugReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><call><name>var_CreateGetNonEmptyString</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"waveout-audio-device"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aout_DeviceReport</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"waveout-audio-device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_destroy</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>volume_poll_timer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WaveOutTimeGet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMTIME</name></type> <name>mmtime</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mmtime</name><operator>.</operator><name>wType</name></name> <operator>=</operator> <name>TIME_SAMPLES</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>i_frames</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>waveOutGetPosition</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mmtime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MMTIME</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call>
<operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutGetPosition failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pos</name> <init>= <expr><call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>mmtime</name><operator>.</operator><name>u</name><operator>.</operator><name>sample</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>delay</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_played_length</name></name> <operator>-</operator> <name>i_pos</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WaveOutFlush</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMRESULT</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>waveOutReset</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_played_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>res</name> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutReset failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WaveOutDrain</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>i_frames</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WaveOutPause</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMRESULT</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>pause</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_timer_schedule_asap</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>volume_poll_timer</name></name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>waveOutPause</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>res</name> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutPause failed (0x%x)"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_timer_disarm</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>volume_poll_timer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>waveOutRestart</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>res</name> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutRestart failed (0x%x)"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WaveoutVolumeSet</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>b_soft</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><name>volume</name> <operator>*</operator> <name>volume</name> <operator>*</operator> <name>volume</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>b_mute</name></name> <operator>&amp;&amp;</operator> <call><name>aout_GainRequest</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>gain</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>HWAVEOUT</name></type> <name>hwo</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>vol</name> <init>= <expr><call><name>lroundf</name><argument_list>( <argument><expr><name>volume</name> <operator>*</operator> <literal type="number">0x7fff</literal><operator>.</operator><name>fp0</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>b_mute</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>vol</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>vol</name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>volume</name> <operator>=</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MMRESULT</name></type> <name>r</name> <init>= <expr><call><name>waveOutSetVolume</name><argument_list>( <argument><expr><name>hwo</name></expr></argument>, <argument><expr><name>vol</name> <operator>|</operator> <operator>(</operator> <name>vol</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>r</name> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutSetVolume failed (%u)"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>f_volume</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"volume-save"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>config_PutFloat</name><argument_list>( <argument><expr><literal type="string">"waveout-volume"</literal></expr></argument>, <argument><expr><name>volume</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_VolumeReport</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>volume</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WaveoutMuteSet</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>b_soft</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>f_volume</name></name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>f_volume</name></name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>f_volume</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>aout_GainRequest</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><ternary><condition><expr><name>mute</name></expr> ?</condition><then> <expr><literal type="number">0.f</literal></expr> </then><else>: <expr><name>gain</name></expr></else></ternary></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HWAVEOUT</name></type> <name>hwo</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vol</name> <init>= <expr><ternary><condition><expr><name>mute</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>lroundf</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>f_volume</name></name> <operator>*</operator> <literal type="number">0x7fff</literal><operator>.</operator><name>fp0</name></expr></argument> )</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>vol</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vol</name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>MMRESULT</name></type> <name>r</name> <init>= <expr><call><name>waveOutSetVolume</name><argument_list>( <argument><expr><name>hwo</name></expr></argument>, <argument><expr><name>vol</name> <operator>|</operator> <operator>(</operator> <name>vol</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>r</name> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutSetVolume failed (%u)"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_mute</name></name> <operator>=</operator> <name>mute</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_MuteReport</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>mute</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WaveoutPollVolume</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>_aout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator> <name>_aout</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMRESULT</name></type> <name>r</name> <init>= <expr><call><name>waveOutGetVolume</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>h_waveout</name></name></expr></argument>, <argument><expr><operator>(</operator><name>LPDWORD</name><operator>)</operator> <operator>&amp;</operator><name>vol</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>r</name> <operator>!=</operator> <name>MMSYSERR_NOERROR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"waveOutGetVolume failed (%u)"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>volume</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator> <name>vol</name> <operator>&amp;</operator> <call><name>UINT32_C</name><argument_list>( <argument><expr><literal type="number">0xffff</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>volume</name> <operator>/=</operator> <literal type="number">0x7fff</literal><operator>.</operator><name>fp0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>b_mute</name></name> <operator>&amp;&amp;</operator> <name>volume</name> <operator>!=</operator> <name><name>sys</name><operator>-&gt;</operator><name>f_volume</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>f_volume</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"volume-save"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>config_PutFloat</name><argument_list>( <argument><expr><literal type="string">"waveout-volume"</literal></expr></argument>, <argument><expr><name>volume</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_VolumeReport</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><name>volume</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>
</unit>
