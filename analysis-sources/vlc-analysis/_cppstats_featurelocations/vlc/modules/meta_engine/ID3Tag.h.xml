<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\meta_engine\ID3Tag.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ID3TAG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID3TAG_H</name></cpp:macro></cpp:define>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ID3TAG_ReadSize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_syncsafe</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_syncsafe</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ID3TAG_IsTag</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_footer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b_footer</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"3DI"</literal></expr> </then><else>: <expr><literal type="string">"ID3"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xFF</literal> <operator>&amp;&amp;</operator>
<name><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xFF</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x80808080</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>ID3TAG_Parse</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_peek</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_callback</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_priv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_ID3size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <call><name>ID3TAG_IsTag</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_syncsafe</name> <init>= <expr><name><name>p_peek</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ID3size</name> <operator>=</operator> <call><name>ID3TAG_ReadSize</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ID3size</name> <operator>&gt;</operator> <name>i_peek</name> <operator>-</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_total_size</name> <operator>=</operator> <name>i_ID3size</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_frame</name> <init>= <expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>i_ID3size</name> <operator>&gt;</operator> <literal type="number">10</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tagname</name> <init>= <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_frame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_frame</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_framesize</name> <init>= <expr><call><name>ID3TAG_ReadSize</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_frame</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_syncsafe</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_framesize</name> <operator>&gt;</operator> <name>i_ID3size</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_framesize</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator>
<call><name>pf_callback</name><argument_list>( <argument><expr><name>i_tagname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_frame</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_framesize</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>p_priv</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_frame</name> <operator>+=</operator> <name>i_framesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ID3size</name> <operator>-=</operator> <name>i_framesize</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_total_size</name> <operator>&amp;&amp;</operator> <name>i_peek</name> <operator>-</operator> <name>i_total_size</name> <operator>&gt;=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator>
<call><name>ID3TAG_IsTag</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_total_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_total_size</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_total_size</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
