<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\meta_engine\ID3Text.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ID3TEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID3TEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ID3TextConv</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>i_charset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_allocated</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_alloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name>p_alloc</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_buf</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_charset</name> <operator>&lt;</operator> <literal type="number">0x04</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_charset</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>p_alloc</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"ISO_8859-1"</literal></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>p_alloc</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>p_alloc</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_buf</name><index>[ <expr><name>i_buf</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>p_alloc</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_alloc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_alloc</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_alloc</name><index>[<expr><name>i_buf</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>p_buf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_allocated</name> <operator>=</operator> <name>p_alloc</name></expr>;</expr_stmt>
<return>return <expr><name>psz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ID3TextConvert</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_allocated</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_buf</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_allocated</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ID3TextConv</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_buf</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ppsz_allocated</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
