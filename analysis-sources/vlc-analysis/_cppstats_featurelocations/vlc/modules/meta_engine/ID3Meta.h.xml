<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\meta_engine\ID3Meta.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ID3META_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID3META_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ID3Text.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_meta_extra</name></cpp:macro> <cpp:value>vlc_meta_Title</cpp:value></cpp:define>
<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_meta_type_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>
}</block> <decl>const <name><name>ID3_tag_to_metatype</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>vlc_meta_Album</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>vlc_meta_Date</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>vlc_meta_extra</name></expr>, <expr><literal type="string">"Encoder"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>vlc_meta_Title</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>vlc_meta_extra</name></expr>, <expr><literal type="string">"Original Artist"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>vlc_meta_extra</name></expr>, <expr><literal type="string">"Original Release Year"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>vlc_meta_Artist</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>vlc_meta_AlbumArtist</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>vlc_meta_Publisher</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>vlc_meta_extra</name></expr>, <expr><literal type="string">"Radio Station Owner"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_meta_extra</name></cpp:undef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ID3TextTagHandler</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,
<parameter><decl><type><name>vlc_meta_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_extra</name></decl></parameter>,
<parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_updated</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_meta</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>ID3TextConvert</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_alloc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_old</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>psz_extra</name> <operator>)</operator></expr> ?</condition><then> <expr><call><name>vlc_meta_GetExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_extra</name></expr></argument> )</argument_list></call></expr></then><else>:
<expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_old</name> <operator>||</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_old</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>pb_updated</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pb_updated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_extra</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_extra</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>psz</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ID3LinkFrameTagHandler</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,
<parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_updated</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_buf</name> <operator>&gt;</operator> <literal type="number">13</literal> <operator>&amp;&amp;</operator> <name>p_meta</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><name>i_buf</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_desclen</name> <init>= <expr><call><name>strnlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>i_desclen</name> <argument_list type="generic">&lt; <argument><expr><name>i_len</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_desclen</name></expr></argument> &gt;</argument_list></name> <literal type="number">11</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"artworkURL_"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_old</name> <init>= <expr><call><name>vlc_meta_Get</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_ArtworkURL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_old</name> <operator>||</operator> <call><name>strncmp</name><argument_list>( <argument><expr><name>psz_old</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>psz</name><index>[<expr><name>i_desclen</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_len</name> <operator>-</operator> <name>i_desclen</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_alloc</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>psz</name><index>[<expr><name>i_desclen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_len</name> <operator>-</operator> <name>i_desclen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_ArtworkURL</name></expr></argument>, <argument><expr><name>p_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_updated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ID3HandleTag</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_tag</name></decl></parameter>,
<parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_updated</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_tag</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><call><name>ID3LinkFrameTagHandler</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>pb_updated</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_tag</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_key_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key</name> <init>= <expr><call><name>ID3TextConvert</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_key_alloc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_key</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&lt;</operator> <name>i_buf</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_val_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name> <init>= <expr><call><name>ID3TextConv</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><name>i_len</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_buf</name> <operator>-</operator> <name>i_len</name></expr></argument>,
<argument><expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_val_alloc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_val</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>vlc_meta_GetExtraCount</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>i_tag</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'T'</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>ID3_tag_to_metatype</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>ID3_tag_to_metatype</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_tag</name> <operator>==</operator> <name>i_tag</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ID3TextTagHandler</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument>,
<argument><expr><name><name>ID3_tag_to_metatype</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>,
<argument><expr><name><name>ID3_tag_to_metatype</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz</name></expr></argument>,
<argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>pb_updated</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
