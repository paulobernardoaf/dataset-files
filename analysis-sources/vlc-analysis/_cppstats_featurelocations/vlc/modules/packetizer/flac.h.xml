<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\packetizer\flac.h">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_HEADER_SIZE_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_STREAMINFO_SIZE</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_FRAME_SIZE_MIN</name></cpp:macro> <cpp:value>((48+(8 + 4 + 1*4)+FLAC_HEADER_SIZE_MAX)/8)</cpp:value></cpp:define>

<struct>struct <name>flac_stream_info</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>min_blocksize</name></decl>, <decl><type ref="prev"/><name>max_blocksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>min_framesize</name></decl>, <decl><type ref="prev"/><name>max_framesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits_per_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_samples</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>flac_header_info</name>
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bits_per_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frame_length</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>FLAC_ParseStreamInfo</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>flac_stream_info</name></name> <modifier>*</modifier></type><name>stream_info</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>min_blocksize</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>min_blocksize</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>stream_info</name><operator>-&gt;</operator><name>min_blocksize</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>max_blocksize</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>max_blocksize</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>stream_info</name><operator>-&gt;</operator><name>max_blocksize</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>min_framesize</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>min_framesize</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>stream_info</name><operator>-&gt;</operator><name>min_framesize</name></name></expr></argument>, <argument><expr><name>FLAC_FRAME_SIZE_MIN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>max_framesize</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>p_buf</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream_info</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>=</operator> <call><name>GetQWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">36</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>read_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_read</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>int64_t</name></type> <name>i_result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xE0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFC</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFE</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>INT64_MAX</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>INT64_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_result</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_result</name> <operator>|=</operator> <operator>(</operator><name><name>p_buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pi_read</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>i_result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>FLAC_ParseSyncInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>flac_stream_info</name></name> <modifier>*</modifier></type><name>stream_info</name></decl></parameter>,
<parameter><function_decl><type><name>uint8_t</name></type>(<modifier>*</modifier><name>pf_crc8</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>flac_header_info</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_guessing</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xFF</literal> <operator>||</operator> <operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xF8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>||</operator> <name><name>p_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>blocksize_hint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>blocksize</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>blocksize</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <literal type="number">256</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>blocksize</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blocksize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>b_guessing</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_info</name> <operator>&amp;&amp;</operator>
<name><name>stream_info</name><operator>-&gt;</operator><name>min_blocksize</name></name> <operator>==</operator> <name><name>stream_info</name><operator>-&gt;</operator><name>max_blocksize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <name><name>stream_info</name><operator>-&gt;</operator><name>min_blocksize</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blocksize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <literal type="number">192</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blocksize</name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator> <name>blocksize</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blocksize_hint</name> <operator>=</operator> <name>blocksize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <literal type="number">576</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>blocksize</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_info</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>blocksize_hint</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>blocksize</name> <argument_list type="generic">&lt; <argument><expr><name><name>stream_info</name><operator>-&gt;</operator><name>min_blocksize</name></name> <operator>||</operator>
<name>blocksize</name></expr></argument> &gt;</argument_list></name> <name><name>stream_info</name><operator>-&gt;</operator><name>max_blocksize</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>samplerate_hint</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>samplerate</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>samplerate_hint</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>stream_info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>samplerate</name> <operator>=</operator> <name><name>stream_info</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>samplerate_hint</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>samplerate_hint</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>flac_samplerate</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">8820</literal></expr>, <expr><literal type="number">17640</literal></expr>, <expr><literal type="number">19200</literal></expr>,
<expr><literal type="number">800</literal></expr>, <expr><literal type="number">1600</literal></expr>, <expr><literal type="number">2205</literal></expr>, <expr><literal type="number">2400</literal></expr>,
<expr><literal type="number">3200</literal></expr>, <expr><literal type="number">4410</literal></expr>, <expr><literal type="number">4800</literal></expr>, <expr><literal type="number">9600</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>samplerate</name> <operator>=</operator> <name><name>flac_samplerate</name><index>[<expr><name>samplerate_hint</name></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>samplerate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>channels</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>&gt;=</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>channels</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>flac_bits_per_sample</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits_per_sample</name> <init>= <expr><name><name>flac_bits_per_sample</name><index>[<expr><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0e</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bits_per_sample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>stream_info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits_per_sample</name> <operator>=</operator> <name><name>stream_info</name><operator>-&gt;</operator><name>bits_per_sample</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bits_per_sample</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_header</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_fsnumber</name> <init>= <expr><call><name>read_utf8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><name>i_header</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_fsnumber</name> <operator>==</operator> <name>INT64_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_header</name> <operator>+=</operator> <name>i_read</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>blocksize_hint</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <name><name>p_buf</name><index>[<expr><name>i_header</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blocksize_hint</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blocksize</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocksize</name> <operator>|=</operator> <name><name>p_buf</name><index>[<expr><name>i_header</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>blocksize</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>samplerate</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>samplerate</name> <operator>=</operator> <name><name>p_buf</name><index>[<expr><name>i_header</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>samplerate_hint</name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>samplerate</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>samplerate</name> <operator>|=</operator> <name><name>p_buf</name><index>[<expr><name>i_header</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samplerate_hint</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>samplerate</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>samplerate_hint</name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>samplerate</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>samplerate</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pf_crc8</name> <operator>&amp;&amp;</operator>
<call><name>pf_crc8</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_header</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>p_buf</name><index>[<expr><name>i_header</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>stream_info</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>blocksize</name> <argument_list type="generic">&lt; <argument><expr><name><name>stream_info</name><operator>-&gt;</operator><name>min_blocksize</name></name> <operator>||</operator>
<name>blocksize</name></expr></argument> &gt;</argument_list></name> <name><name>stream_info</name><operator>-&gt;</operator><name>max_blocksize</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>bits_per_sample</name> <operator>!=</operator> <name><name>stream_info</name><operator>-&gt;</operator><name>bits_per_sample</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>samplerate</name> <operator>!=</operator> <name><name>stream_info</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>blocksize</name> <operator>*</operator> <name>i_fsnumber</name></expr></argument>, <argument><expr><name>samplerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>i_fsnumber</name></expr></argument>, <argument><expr><name>samplerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_bits_per_sample</name></name> <operator>=</operator> <name>bits_per_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name>samplerate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <name>blocksize</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>b_guessing</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
