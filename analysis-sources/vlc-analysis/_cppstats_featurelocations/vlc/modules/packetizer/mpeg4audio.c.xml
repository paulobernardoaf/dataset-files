<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\packetizer\mpeg4audio.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packetizer_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

















<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>enum</name> <name>mpeg4_audioObjectType</name></name></type> <name>i_object_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_samplerate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_channel_configuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>i_sbr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>i_ps</name></decl>;</decl_stmt> 

<struct>struct
<block>{
<decl_stmt><decl><type><name><name>enum</name> <name>mpeg4_audioObjectType</name></name></type> <name>i_object_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_samplerate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_channel_configuration</name></decl>;</decl_stmt>
}</block> <decl><name>extension</name></decl>;</struct>


<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frame_length</name></decl>;</decl_stmt> 

}</block></struct></type> <name>mpeg4_asc_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LATM_MAX_EXTRA_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_layer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frame_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_frame_length_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_frame_length_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mpeg4_asc_t</name></type> <name>cfg</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>extra</name><index>[<expr><name>LATM_MAX_EXTRA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>latm_stream_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LATM_MAX_LAYER</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LATM_MAX_PROGRAM</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_same_time_framing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sub_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_programs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_layers</name><index>[<expr><name>LATM_MAX_PROGRAM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_stream</name><index>[<expr><name>LATM_MAX_PROGRAM</name></expr>]</index><index>[<expr><name>LATM_MAX_LAYER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>latm_stream_t</name></type> <name><name>stream</name><index>[<expr><name>LATM_MAX_PROGRAM</name><operator>*</operator><name>LATM_MAX_LAYER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_other_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>i_crc</name></decl>;</decl_stmt> 
}</block></struct></type> <name>latm_mux_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{



<decl_stmt><decl><type><name>int</name></type> <name>i_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_bytestream_t</name></type> <name>bytestream</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_discontuinity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl>, <name>i_frame_length</name>, <name>i_header_size</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_aac_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_input_rate</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_latm_cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>latm_mux_t</name></type> <name>latm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_warnings</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<enum>enum
<block>{
<decl><name>WARN_CRC_UNSUPPORTED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARN_ONCE</name><parameter_list>(<parameter><type><name>warn</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{decoder_sys_t *p_sys = p_dec-&gt;p_sys;if( (p_sys-&gt;i_warnings &amp; warn) == 0 ){p_sys-&gt;i_warnings |= warn;msg_Warn( p_dec, msg );}} while(0)</cpp:value></cpp:define>








<enum>enum <block>{
<decl><name>TYPE_UNKNOWN</name></decl>, 
<decl><name>TYPE_UNKNOWN_NONRAW</name></decl>, 
<decl><name>TYPE_RAW</name></decl>, 
<decl><name>TYPE_ADTS</name></decl>,
<decl><name>TYPE_LOAS</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_sample_rates</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">96000</literal></expr>, <expr><literal type="number">88200</literal></expr>, <expr><literal type="number">64000</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">22050</literal></expr>,
<expr><literal type="number">16000</literal></expr>, <expr><literal type="number">12000</literal></expr>, <expr><literal type="number">11025</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><literal type="number">7350</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ChannelConfigurationToVLC</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_channel</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_channel</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>i_channel</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_channel</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_channel</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AOTtoAACProfile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_object_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>i_object_type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AOT_AAC_MAIN</name></expr>:</case>
<case>case <expr><name>AOT_AAC_LC</name></expr>:</case>
<case>case <expr><name>AOT_AAC_SSR</name></expr>:</case>
<case>case <expr><name>AOT_AAC_LTP</name></expr>:</case>
<case>case <expr><name>AOT_AAC_SBR</name></expr>:</case>
<case>case <expr><name>AOT_AAC_SC</name></expr>:</case>
<case>case <expr><name>AOT_ER_AAC_LD</name></expr>:</case>
<case>case <expr><name>AOT_AAC_PS</name></expr>:</case>
<case>case <expr><name>AOT_ER_AAC_ELD</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>AOT_AAC_MAIN</name> <operator>==</operator> <name>AAC_PROFILE_MAIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"invalid profile to object mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_object_type</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADTS_HEADER_SIZE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAS_HEADER_SIZE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ClosePacketizer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mpeg4ReadAudioSpecificConfig</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>mpeg4_asc_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_SOUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_SOUT_PACKETIZER</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"MPEG4 audio packetizer"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>OpenPacketizer</argument>, <argument>ClosePacketizer</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MP4A</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <operator>(</operator><name>decoder_sys_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_discontuinity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_BytestreamInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_latm_cfg</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_warnings</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_MP4A</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"running MPEG4 audio packetizer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<switch>switch <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TYPE_LOAS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"LOAS/LATM Mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TYPE_ADTS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ADTS Mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TYPE_UNKNOWN_NONRAW</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TYPE_UNKNOWN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>





<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>mpeg4_asc_t</name></type> <name>asc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Mpeg4ReadAudioSpecificConfig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>asc</name><operator>.</operator><name>i_samplerate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator> <name><name>asc</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator>
<call><name>ChannelConfigurationToVLC</name><argument_list>(<argument><expr><name><name>asc</name><operator>.</operator><name>i_channel_configuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_profile</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <call><name>AOTtoAACProfile</name><argument_list>(<argument><expr><name><name>asc</name><operator>.</operator><name>i_object_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"%sAAC%s %dHz %d samples/frame"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>asc</name><operator>.</operator><name>i_sbr</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"HE-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>asc</name><operator>.</operator><name>i_ps</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"v2"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>asc</name><operator>.</operator><name>i_sbr</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>
</then><else>: <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>date_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> ?</condition><then>
<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> </then><else>: <expr><literal type="number">48000</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>Packetize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_get_cc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>ClosePacketizer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_BytestreamRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ForwardRawBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pp_block</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <operator>*</operator><name>pp_block</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_diff</name> <operator>=</operator> <call><name>llabs</name><argument_list>( <argument><expr><call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_diff</name> <operator>&gt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_discontuinity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ADTSSyncInfo</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type> <name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type> <name>pi_channels</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type> <name>pi_sample_rate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type> <name>pi_frame_length</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type> <name>pi_header_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_profile</name></decl>, <decl><type ref="prev"/><name>i_sample_rate_idx</name></decl>, <decl><type ref="prev"/><name>i_frame_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_crc</name></decl>;</decl_stmt>



<expr_stmt><expr><name>b_crc</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_profile</name> <operator>=</operator> <name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sample_rate_idx</name> <operator>=</operator> <operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_sample_rate</name> <operator>=</operator> <name><name>pi_sample_rates</name><index>[<expr><name>i_sample_rate_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pi_channels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name>i_frame_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>i_raw_blocks_in_frame</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>pi_sample_rate</name> <operator>||</operator> <operator>!</operator><name>i_frame_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Invalid ADTS header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_frame_length</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_raw_blocks_in_frame</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b_crc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WARN_ONCE</name><argument_list>(<argument><expr><name>WARN_CRC_UNSUPPORTED</name></expr></argument>, <argument><expr><literal type="string">"ADTS CRC not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Multiple blocks per frame in ADTS not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int i;
const uint8_t *p_pos = p_buf + 7;
uint16_t crc_block;
uint16_t i_block_pos[3];
if (b_crc) {
for (i = 0 ; i &lt; i_raw_blocks_in_frame ; i++) {

i_block_pos[i] = (*p_pos &lt;&lt; 8) | *(p_pos+1);
p_pos += 2;
}
crc_block = (*p_pos &lt;&lt; 8) | *(p_pos+1);
p_pos += 2;
}
for (i = 0 ; i &lt;= i_raw_blocks_in_frame ; i++) {

if (b_crc) {
WARN_ONCE(WARN_CRC_UNSUPPORTED, "ADTS CRC not supported");


}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator>
<operator>(</operator><name>i_profile</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <operator>(</operator><name>i_sample_rate_idx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>i_sample_rate_idx</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>pi_channels</name> <operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>pi_header_size</name> <operator>=</operator> <ternary><condition><expr><name>b_crc</name></expr> ?</condition><then> <expr><literal type="number">9</literal></expr> </then><else>: <expr><literal type="number">7</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>i_frame_size</name> <operator>-</operator> <operator>*</operator><name>pi_header_size</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>LOASSyncInfo</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>p_header</name><index>[<expr><name>LOAS_HEADER_SIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_header_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_header_size</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>p_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p_header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mpeg4GAProgramConfigElement</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_tag</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_tag</name> <operator>!=</operator> <literal type="number">0x05</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_num_front</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_side</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_back</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_lfe</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_assoc_data</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_valid_cc</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_num_front</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_num_side</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_num_back</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_num_lfe</name> <operator>*</operator> <operator>(</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_num_assoc_data</name> <operator>*</operator> <operator>(</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_num_valid_cc</name> <operator>*</operator> <operator>(</operator><literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_align</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_comment</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_comment</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mpeg4GASpecificConfig</name><parameter_list>(<parameter><decl><type><name>mpeg4_asc_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <ternary><condition><expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">960</literal></expr> </then><else>: <expr><literal type="number">1024</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_LD</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_AAC_SSR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_extension_flag</name> <init>= <expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_channel_configuration</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Mpeg4GAProgramConfigElement</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_AAC_SC</name> <operator>||</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_SC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>i_extension_flag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_BSAC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_LC</name> <operator>||</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_LTP</name> <operator>||</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_SC</name> <operator>||</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_LD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Mpeg4GASpecificConfig: error 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mpeg4ELDSpecificConfig</name><parameter_list>(<parameter><decl><type><name>mpeg4_asc_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <ternary><condition><expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">960</literal></expr> </then><else>: <expr><literal type="number">480</literal></expr></else></ternary></expr>;</expr_stmt>



<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>numSbrHeader</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_channel_configuration</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>numSbrHeader</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>numSbrHeader</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <case>case <expr><literal type="number">5</literal></expr>:</case> <case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>numSbrHeader</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>numSbrHeader</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>numSbrHeader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<for>for<control>( <init>;</init> <condition><expr><name>numSbrHeader</name></expr>;</condition> <incr><expr><name>numSbrHeader</name><operator>--</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>header_extra_1</name> <init>= <expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>header_extra_2</name> <init>= <expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>header_extra_1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>header_extra_2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>eldExtType</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>eldExtType</name> <operator>!=</operator> <literal type="number">0x0</literal></expr> ;</condition>
<incr><expr><name>eldExtType</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>eldExtLen</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>eldExtLenAdd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>eldExtLen</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>eldExtLenAdd</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eldExtLen</name> <operator>+=</operator> <name>eldExtLenAdd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>eldExtLenAdd</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eldExtLen</name> <operator>+=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>eldExtLen</name></expr>;</condition> <incr><expr><name>eldExtLen</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>mpeg4_audioObjectType</name></name></type> <name>Mpeg4ReadAudioObjectType</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_type</name> <operator>==</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <literal type="number">32</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_type</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>Mpeg4ReadAudioSamplerate</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_index</name> <operator>!=</operator> <literal type="number">0x0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>pi_sample_rates</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mpeg4ReadAudioSpecificConfig</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>mpeg4_asc_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_withext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>=</operator> <call><name>Mpeg4ReadAudioObjectType</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_samplerate</name></name> <operator>=</operator> <call><name>Mpeg4ReadAudioSamplerate</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_channel_configuration</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_sbr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_ps</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_object_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_samplerate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_channel_configuration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_AAC_SBR</name> <operator>||</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_AAC_PS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_sbr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_AAC_PS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_ps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_object_type</name></name> <operator>=</operator> <name>AOT_AAC_SBR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_samplerate</name></name> <operator>=</operator> <call><name>Mpeg4ReadAudioSamplerate</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>=</operator> <call><name>Mpeg4ReadAudioObjectType</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_BSAC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_channel_configuration</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AOT_AAC_MAIN</name></expr>:</case>
<case>case <expr><name>AOT_AAC_LC</name></expr>:</case>
<case>case <expr><name>AOT_AAC_SSR</name></expr>:</case>
<case>case <expr><name>AOT_AAC_LTP</name></expr>:</case>
<case>case <expr><name>AOT_AAC_SC</name></expr>:</case>
<case>case <expr><name>AOT_TWINVQ</name></expr>:</case>
<case>case <expr><name>AOT_ER_AAC_LC</name></expr>:</case>
<case>case <expr><name>AOT_ER_AAC_LTP</name></expr>:</case>
<case>case <expr><name>AOT_ER_AAC_SC</name></expr>:</case>
<case>case <expr><name>AOT_ER_TWINVQ</name></expr>:</case>
<case>case <expr><name>AOT_ER_BSAC</name></expr>:</case>
<case>case <expr><name>AOT_ER_AAC_LD</name></expr>:</case>
<expr_stmt><expr><call><name>Mpeg4GASpecificConfig</name><argument_list>(<argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AOT_CELP</name></expr>:</case>

<case>case <expr><name>AOT_HVXC</name></expr>:</case>

<case>case <expr><name>AOT_TTSI</name></expr>:</case>

<case>case <expr><name>AOT_MAIN_SYNTHETIC</name></expr>:</case>
<case>case <expr><name>AOT_WAVETABLES</name></expr>:</case>
<case>case <expr><name>AOT_GENERAL_MIDI</name></expr>:</case>
<case>case <expr><name>AOT_ALGORITHMIC</name></expr>:</case>

<case>case <expr><name>AOT_ER_CELP</name></expr>:</case>

<case>case <expr><name>AOT_ER_HXVC</name></expr>:</case>

<case>case <expr><name>AOT_ER_HILN</name></expr>:</case>
<case>case <expr><name>AOT_ER_Parametric</name></expr>:</case>

<case>case <expr><name>AOT_SSC</name></expr>:</case>

<case>case <expr><name>AOT_LAYER1</name></expr>:</case>
<case>case <expr><name>AOT_LAYER2</name></expr>:</case>
<case>case <expr><name>AOT_LAYER3</name></expr>:</case>

<case>case <expr><name>AOT_DST</name></expr>:</case>

<case>case <expr><name>AOT_ALS</name></expr>:</case>

<case>case <expr><name>AOT_SLS</name></expr>:</case>
<case>case <expr><name>AOT_SLS_NON_CORE</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_ELD</name></expr>:</case>
<expr_stmt><expr><call><name>Mpeg4ELDSpecificConfig</name><argument_list>(<argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AOT_SMR_SIMPLE</name></expr>:</case>
<case>case <expr><name>AOT_SMR_MAIN</name></expr>:</case>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<switch>switch<condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_object_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AOT_ER_AAC_LC</name></expr>:</case>
<case>case <expr><name>AOT_ER_AAC_LTP</name></expr>:</case>
<case>case <expr><name>AOT_ER_AAC_SC</name></expr>:</case>
<case>case <expr><name>AOT_ER_TWINVQ</name></expr>:</case>
<case>case <expr><name>AOT_ER_BSAC</name></expr>:</case>
<case>case <expr><name>AOT_ER_AAC_LD</name></expr>:</case>
<case>case <expr><name>AOT_ER_CELP</name></expr>:</case>
<case>case <expr><name>AOT_ER_HXVC</name></expr>:</case>
<case>case <expr><name>AOT_ER_HILN</name></expr>:</case>
<case>case <expr><name>AOT_ER_Parametric</name></expr>:</case>
<case>case <expr><name>AOT_ER_AAC_ELD</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>epConfig</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>epConfig</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>epConfig</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>epConfig</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>b_withext</name> <operator>&amp;&amp;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_object_type</name></name> <operator>!=</operator> <name>AOT_AAC_SBR</name> <operator>&amp;&amp;</operator>
<call><name>bs_remain</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x2b7</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_object_type</name></name> <operator>=</operator> <call><name>Mpeg4ReadAudioObjectType</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_AAC_SBR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_sbr</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_sbr</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_samplerate</name></name> <operator>=</operator> <call><name>Mpeg4ReadAudioSamplerate</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bs_remain</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x548</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_ps</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_BSAC</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_sbr</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_sbr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_samplerate</name></name> <operator>=</operator> <call><name>Mpeg4ReadAudioSamplerate</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>extension</name><operator>.</operator><name>i_channel_configuration</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static const char *ppsz_otype[] = {
"NULL",
"AAC Main", "AAC LC", "AAC SSR", "AAC LTP", "SBR", "AAC Scalable",
"TwinVQ",
"CELP", "HVXC",
"Reserved", "Reserved",
"TTSI",
"Main Synthetic", "Wavetables Synthesis", "General MIDI",
"Algorithmic Synthesis and Audio FX",
"ER AAC LC",
"Reserved",
"ER AAC LTP", "ER AAC Scalable", "ER TwinVQ", "ER BSAC", "ER AAC LD",
"ER CELP", "ER HVXC", "ER HILN", "ER Parametric",
"SSC",
"PS", "MPEG Surround", "Escape",
"Layer 1", "Layer 2", "Layer 3",
"DST", "ALS", "SLS", "SLS non-core", "ELD",
"SMR Simple", "SMR Main",
};

fprintf(stderr, "Mpeg4ReadAudioSpecificInfo: t=%s(%d)f=%d c=%d sbr=%d\n",
ppsz_otype[p_cfg-&gt;i_object_type], p_cfg-&gt;i_object_type,
p_cfg-&gt;i_samplerate, p_cfg-&gt;i_channel, p_cfg-&gt;i_sbr);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>LatmGetValue</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>AudioSpecificConfigBitsToBytes</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_bits</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><operator>(</operator><name>i_bits</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>LATM_MAX_EXTRA_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_extra</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_read</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_bits</name> <operator>-</operator> <literal type="number">8</literal><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal><operator>-</operator><name>i_read</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>i_extra</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LatmReadStreamMuxConfiguration</name><parameter_list>(<parameter><decl><type><name>latm_mux_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_mux_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_mux_versionA</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_mux_version</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_mux_versionA</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_mux_version</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_mux_versionA</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_mux_versionA</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_mux_versionA</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>i_mux_version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LatmGetValue</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b_same_time_framing</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_sub_frames</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_programs</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_program</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_program</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>i_programs</name></name></expr>;</condition> <incr><expr><name>i_program</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pi_layers</name><index>[<expr><name>i_program</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_layer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_layer</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>pi_layers</name><index>[<expr><name>i_program</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_layer</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>latm_stream_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i_streams</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_previous_cfg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pi_stream</name><index>[<expr><name>i_program</name></expr>]</index><index>[<expr><name>i_layer</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>i_streams</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_program</name></name> <operator>=</operator> <name>i_program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_layer</name></name> <operator>=</operator> <name>i_layer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_previous_cfg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_program</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_layer</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_previous_cfg</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_previous_cfg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i_streams</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cfg</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>asc_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_mux_version</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>asc_size</name> <operator>=</operator> <call><name>LatmGetValue</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>bs_t</name></type> <name>asc_bs</name> <init>= <expr><operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Mpeg4ReadAudioSpecificConfig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>asc_bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>i_mux_version</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_mux_version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>asc_size</name> <operator>=</operator> <call><name>bs_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>asc_bs</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>bs_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>asc_bs</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <call><name>AudioSpecificConfigBitsToBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>asc_bs</name></expr></argument>, <argument><expr><name>asc_size</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>asc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>b_same_time_framing</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_AAC_SC</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_CELP</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_SC</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_object_type</name></name> <operator>==</operator> <name>AOT_ER_CELP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt> 
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <case>case <expr><literal type="number">4</literal></expr>:</case> <case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_index</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_index</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_streams</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_mux_version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_other_data</name></name> <operator>=</operator> <call><name>LatmGetValue</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b_continue</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_other_data</name></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>i_other_data</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>b_continue</name></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_crc</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_crc</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LOASParse</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_accumulated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>LatmReadStreamMuxConfiguration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>latm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>i_streams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>latm_stream_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_samplerate</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_frame_length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>ChannelConfigurationToVLC</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_channel_configuration</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <call><name>ChannelConfigurationToVLC</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_channel_configuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_samplerate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <call><name>AOTtoAACProfile</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_object_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>||</operator>
<operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_latm_cfg</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_latm_cfg</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_latm_cfg</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_length</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_latm_cfg</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>i_sub_frames</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"latm sub frames not yet supported, please send a sample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_sub</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_sub</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>i_sub_frames</name></name></expr>;</condition> <incr><expr><name>i_sub</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pi_payload</name><index>[<expr><name>LATM_MAX_PROGRAM</name></expr>]</index><index>[<expr><name>LATM_MAX_LAYER</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>b_same_time_framing</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_program</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_program</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>i_programs</name></name></expr>;</condition> <incr><expr><name>i_program</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_layer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_layer</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>pi_layers</name><index>[<expr><name>i_program</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_layer</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>latm_stream_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>stream</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>pi_stream</name><index>[<expr><name>i_program</name></expr>]</index><index>[<expr><name>i_layer</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_payload</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_tmp</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_payload</name> <operator>+=</operator> <name>i_tmp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_tmp</name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pi_payload</name><index>[<expr><name>i_program</name></expr>]</index><index>[<expr><name>i_layer</name></expr>]</index></name> <operator>=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pi_payload</name><index>[<expr><name>i_program</name></expr>]</index><index>[<expr><name>i_layer</name></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>==</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>pi_payload</name><index>[<expr><name>i_program</name></expr>]</index><index>[<expr><name>i_layer</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pi_payload</name><index>[<expr><name>i_program</name></expr>]</index><index>[<expr><name>i_layer</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_program</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_program</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>i_programs</name></name></expr>;</condition> <incr><expr><name>i_program</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_layer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_layer</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>pi_layers</name><index>[<expr><name>i_program</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_layer</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_program</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_layer</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pi_payload</name><index>[<expr><name>i_program</name></expr>]</index><index>[<expr><name>i_layer</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pi_payload</name><index>[<expr><name>i_program</name></expr>]</index><index>[<expr><name>i_layer</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_accumulated</name> <operator>&gt;=</operator> <name>i_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><name>i_accumulated</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_chunks</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int pi_program[16];
int pi_layer[16];
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"latm without same time frameing not yet supported, please send a sample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i_chunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_chunk</name> <operator>&lt;</operator> <name>i_chunks</name></expr>;</condition> <incr><expr><name>i_chunk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>streamIndex</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>latm_stream_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>latm</name><operator>.</operator><name>stream</name><index>[<expr><name>streamIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_program</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>i_program</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_layer</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>i_layer</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
pi_program[i_chunk] = i_program;
pi_layer[i_chunk] = i_layer;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_tmp</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_payload</name> <operator>+=</operator> <name>i_tmp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_tmp</name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pi_payload</name><index>[<expr><name>i_program</name></expr>]</index><index>[<expr><name>i_layer</name></expr>]</index></name> <operator>=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pi_payload</name><index>[<expr><name>i_program</name></expr>]</index><index>[<expr><name>i_layer</name></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>i_frame_length_type</name></name> <operator>==</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
for (int i_chunk = 0; i_chunk &lt; i_chunks; i_chunk++) {




}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (p_sys-&gt;latm.i_other_data &gt; 0)
; 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bs_align</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_accumulated</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupOutput</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"AAC channels: %d samplerate: %d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Change</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
p_dec-&gt;fmt_out.audio.i_physical_channels = p_sys-&gt;i_channels_conf;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator>
<call><name>date_Increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_length</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_BytestreamEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_discontuinity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>HasADTSHeader</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf6</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>HasLoasHeader</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x56</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeStreamBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_header</name><index>[<expr><name>ADTS_HEADER_SIZE</name> <operator>+</operator> <name>LOAS_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><ternary><condition><expr><name>pp_block</name></expr> ?</condition><then> <expr><operator>*</operator><name>pp_block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_block</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_BytestreamPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control><block type="pseudo"><block_content> <switch>switch<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STATE_NOSYNC</name></expr>:</case>
<while>while <condition>(<expr><call><name>block_PeekBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_ADTS</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_UNKNOWN_NONRAW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>HasADTSHeader</name><argument_list>( <argument><expr><name>p_header</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>TYPE_ADTS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"detected ADTS format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_SYNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TYPE_ADTS</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_LOAS</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_UNKNOWN_NONRAW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>HasLoasHeader</name><argument_list>( <argument><expr><name>p_header</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>TYPE_LOAS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"detected LOAS format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_SYNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TYPE_LOAS</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>block_SkipByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>!=</operator> <name>STATE_SYNC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>block_BytestreamFlush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<case>case <expr><name>STATE_SYNC</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_HEADER</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STATE_HEADER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_ADTS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>block_PeekBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>,
<argument><expr><name>ADTS_HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <call><name>ADTSSyncInfo</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_length</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_LOAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>block_PeekBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>,
<argument><expr><name>LOAS_HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <call><name>LOASSyncInfo</name><argument_list>(<argument><expr><name>p_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"emulated sync word"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_SkipByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NEXT_SYNC</name></expr>;</expr_stmt>


<case>case <expr><name>STATE_NEXT_SYNC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_BytestreamFlush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>block_PeekOffsetBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_SEND_DATA</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_ADTS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_LOAS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_ADTS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HasADTSHeader</name><argument_list>( <argument><expr><name>p_header</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_LOAS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HasLoasHeader</name><argument_list>( <argument><expr><name>p_header</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><call><name>block_PeekOffsetBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument>,
<argument><expr><name>p_header</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator>
<name><name>p_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_ADTS</name> <operator>&amp;&amp;</operator> <call><name>HasADTSHeader</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_LOAS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HasLoasHeader</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_SEND_DATA</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"emulated sync word (no sync on following frame)"</literal>
<literal type="string">" 0x%"</literal><name>PRIx8</name><literal type="string">" 0x%"</literal><name>PRIx8</name></expr></argument>, <argument><expr><name><name>p_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_SkipByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_SEND_DATA</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STATE_GET_DATA</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><call><name>block_WaitBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_SEND_DATA</name></expr>;</expr_stmt>


<case>case <expr><name>STATE_SEND_DATA</name></expr>:</case>



<expr_stmt><expr><name>p_out_buffer</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_out_buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>=</operator> <name><name>p_out_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>block_SkipBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>block_GetBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>TYPE_ADTS</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_LOAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <call><name>LOASParse</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_out_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_latm_cfg</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"waiting for header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_out_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SetupOutput</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_out_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>pp_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <call><name>block_BytestreamPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<return>return <expr><name>p_out_buffer</name></expr>;</return>
</block_content>}</block></switch></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><ternary><condition><expr><name>pp_block</name></expr> ?</condition><then> <expr><operator>*</operator><name>pp_block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_block</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_ADTS</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_LOAS</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_drain</name> <init>= <expr><call><name>PacketizeStreamBlock</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>p_drain</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_drain</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Flush</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_block</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TYPE_RAW</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf6</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TYPE_ADTS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x56</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TYPE_LOAS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TYPE_RAW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>ForwardRawBlock</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>PacketizeStreamBlock</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_block</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_discontuinity</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_discontuinity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>
</unit>
