<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\packetizer\startcode_helper.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_STARTCODE_HELPER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_STARTCODE_HELPER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emmintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_MATCH</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if (p[a+1] == 0) {if (p[a+0] == 0 &amp;&amp; p[a+2] == 1)return a+p;if (p[a+2] == 0 &amp;&amp; p[a+3] == 1)return a+p+1;}if (p[a+3] == 0) {if (p[a+2] == 0 &amp;&amp; p[a+4] == 1)return a+p+2;if (p[a+4] == 0 &amp;&amp; p[a+5] == 1)return a+p+3;}}</cpp:value></cpp:define>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>__attribute__</name> <argument_list>(<argument>(__target__ (<literal type="string">"sse2"</literal>))</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>startcode_FindAnnexB_SSE2</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>alignedend</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>end</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>alignedend</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>alignedend</name> <operator>=</operator> <name>end</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>end</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>alignedend</name> <operator>&gt;</operator> <name>p</name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>asm <specifier>volatile</specifier>(
"pxor %%xmm1, %%xmm1\n"
::: "xmm1"
);</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m128i</name></type> <name>zeros</name> <init>= <expr><call><name>_mm_set1_epi8</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for<control>( <init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>alignedend</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>match</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>asm <specifier>volatile</specifier>(
"movdqa 0(%[v]), %%xmm0\n"
"pcmpeqb %%xmm1, %%xmm0\n"
"pmovmskb %%xmm0, %[match]\n"
: [match]"=r"(match)
: [v]"r"(p)
: "xmm0"
);</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m128i</name></type> <name>v</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128i</name></type> <name>res</name> <init>= <expr><call><name>_mm_cmpeq_epi8</name><argument_list>( <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>_mm_movemask_epi8</name><argument_list>( <argument><expr><name>res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><name>match</name> <operator>&amp;</operator> <literal type="number">0x000F</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TRY_MATCH</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>match</name> <operator>&amp;</operator> <literal type="number">0x00F0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TRY_MATCH</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>match</name> <operator>&amp;</operator> <literal type="number">0x0F00</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TRY_MATCH</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>match</name> <operator>&amp;</operator> <literal type="number">0xF000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TRY_MATCH</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>startcode_FindAnnexB_Bits</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>end</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>end</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">0x01010101</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>x</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80808080</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TRY_MATCH</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>end</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRY_MATCH</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>startcode_FindAnnexB</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>startcode_FindAnnexB_SSE2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>startcode_FindAnnexB_Bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>startcode_FindAnnexB</name></cpp:macro> <cpp:value>startcode_FindAnnexB_Bits</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
