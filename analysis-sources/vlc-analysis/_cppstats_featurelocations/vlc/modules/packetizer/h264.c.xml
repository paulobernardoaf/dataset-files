<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\packetizer\h264.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_nal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_nal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_sei.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packetizer_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"startcode_helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_PACKETIZER</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"H.264 video packetizer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>






<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>packetizer_t</name></type> <name>packetizer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_slice</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name></decl>;</decl_stmt>
}</block> <decl><name>frame</name></decl>, <name>leading</name>;</struct>


<decl_stmt><decl><type><name>bool</name></type> <name>b_new_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_new_pps</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>
}</block> <decl><name><name>sps</name><index>[<expr><name>H264_SPS_ID_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl>;</decl_stmt>
}</block> <decl><name><name>pps</name><index>[<expr><name>H264_PPS_ID_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_active_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_active_pps</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_avcC_length_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_pic_struct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_dpb_output_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_recovery_frame_cnt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>h264_slice_t</name></type> <name>slice</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_next_block_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_recovered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_recoveryfnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_recoverystartfnum</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>h264_poc_context_t</name></type> <name>pocctx</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
}</block> <decl><name>prevdatedpoc</name></decl>;</struct>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_frame_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_frame_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>dts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>cc_storage_t</name> <modifier>*</modifier></type><name>p_ccs</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_PRIVATE_AUD</name></cpp:macro> <cpp:value>(1 &lt;&lt; BLOCK_FLAG_PRIVATE_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_PRIVATE_SEI</name></cpp:macro> <cpp:value>(2 &lt;&lt; BLOCK_FLAG_PRIVATE_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_DROP</name></cpp:macro> <cpp:value>(4 &lt;&lt; BLOCK_FLAG_PRIVATE_SHIFT)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeAVC1</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GetCc</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>decoder_cc_desc_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeFlush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeReset</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_broken</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeParse</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>PacketizeValidate</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>PacketizeDrain</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ParseNALBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>OutputPicture</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PutSPS</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PutPPS</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ParseSliceHeader</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter>, <parameter><decl><type><name>h264_slice_t</name> <modifier>*</modifier></type><name>p_slice</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ParseSeiCallback</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hxxx_sei_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_h264_startcode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type> <name>StoreSPS</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_id</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_sps</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>h264_release_sps</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_sps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_sps</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_block</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_sps</name> <operator>=</operator> <name>p_sps</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>StorePPS</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_id</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_pps</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>h264_release_pps</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_pps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_pps</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_block</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>p_pps</name> <operator>=</operator> <name>p_pps</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ActivateSets</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name> <operator>=</operator> <name>p_pps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name> <operator>=</operator> <name>p_sps</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sps</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>i_profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_level</name></name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>i_level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>h264_get_picture_size</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_sar_num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_sar_den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>||</operator>
<operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> )</condition>
<block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_valid</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_num_units_in_tick</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_time_scale</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>date_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_time_scale</name></name></expr></argument>,
<argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_num_units_in_tick</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dts</name><operator>.</operator><name>i_divider_num</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dts</name><operator>.</operator><name>i_divider_den</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name> <operator>&amp;&amp;</operator>
<name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_valid</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>h264_get_colorimetry</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_pps</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_spsblock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_ppsblock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>H264_SPS_ID_MAX</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_spsblock</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name>p_sps</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_sps</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_spsblock</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_block</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>H264_PPS_ID_MAX</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_ppsblock</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name>p_pps</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pps</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_ppsblock</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_block</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>p_spsblock</name> <operator>&amp;&amp;</operator> <name>p_ppsblock</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_alloc</name> <init>= <expr><name><name>p_ppsblock</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name><name>p_spsblock</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type><name>p_buf</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_alloc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_spsblock</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_spsblock</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><name><name>p_spsblock</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_ppsblock</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_ppsblock</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsFirstVCLNALUnit</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_slice_t</name> <modifier>*</modifier></type><name>p_prev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>h264_slice_t</name> <modifier>*</modifier></type><name>p_cur</name></decl></parameter> )</parameter_list>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_frame_num</name></name> <operator>!=</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_frame_num</name></name> <operator>||</operator>
<name><name>p_cur</name><operator>-&gt;</operator><name>i_pic_parameter_set_id</name></name> <operator>!=</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_pic_parameter_set_id</name></name> <operator>||</operator>
<name><name>p_cur</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name> <operator>!=</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name> <operator>||</operator>
<operator>!</operator><name><name>p_cur</name><operator>-&gt;</operator><name>i_nal_ref_idc</name></name> <operator>!=</operator> <operator>!</operator><name><name>p_prev</name><operator>-&gt;</operator><name>i_nal_ref_idc</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_cur</name><operator>-&gt;</operator><name>i_bottom_field_flag</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_prev</name><operator>-&gt;</operator><name>i_bottom_field_flag</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_cur</name><operator>-&gt;</operator><name>i_bottom_field_flag</name></name> <operator>!=</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_bottom_field_flag</name></name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>i_pic_order_cnt_lsb</name></name> <operator>!=</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_pic_order_cnt_lsb</name></name> <operator>||</operator>
<name><name>p_cur</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt_bottom</name></name> <operator>!=</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt_bottom</name></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt0</name></name> <operator>!=</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt0</name></name> <operator>||</operator>
<name><name>p_cur</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt1</name></name> <operator>!=</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt1</name></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>==</operator> <name>H264_NAL_SLICE_IDR</name> <operator>||</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>==</operator> <name>H264_NAL_SLICE_IDR</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>!=</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>||</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>i_idr_pic_id</name></name> <operator>!=</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_idr_pic_id</name></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DropStoredNAL</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_avc</name> <init>= <expr><operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_H264</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>b_avc</name> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&lt;</operator> <literal type="number">7</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name> <operator>=</operator> <call><name>cc_storage_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>packetizer_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>,
<argument><expr><name>p_h264_startcode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_h264_startcode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>startcode_FindAnnexB</name></expr></argument>,
<argument><expr><name>p_h264_startcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>,
<argument><expr><name>PacketizeReset</name></expr></argument>, <argument><expr><name>PacketizeParse</name></expr></argument>, <argument><expr><name>PacketizeValidate</name></expr></argument>, <argument><expr><name>PacketizeDrain</name></expr></argument>,
<argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_new_sps</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_new_pps</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>H264_SPS_ID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_sps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>H264_PPS_ID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recovery_frame_cnt</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>h264_slice_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dpb_output_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>h264_poc_context_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pocctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prevdatedpoc</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><literal type="number">30000</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_H264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&amp;&amp;</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&lt;=</operator> <name>UINT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>date_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_avc</name></expr> )</condition>
<block>{<block_content>




<if_stmt><if>if<condition>( <expr><call><name>h264_isavcC</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>h264_avcC_to_AnnexB_NAL</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_avcC_length_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Invalid AVC extradata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Invalid or missing AVC extradata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>PacketizeAVC1</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>





<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>Packetize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>packetizer_Header</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_avc</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_new_pps</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_new_sps</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Invalid or missing SPS %d or PPS %d in AVC extradata"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_new_sps</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_new_pps</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Packetizer fed with AVC, nal length size=%d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_avcC_length_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_get_cc</name></name> <operator>=</operator> <name>GetCc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>PacketizeFlush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DropStoredNAL</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>H264_SPS_ID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>StoreSPS</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>H264_PPS_ID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>StorePPS</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>packetizer_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_storage_delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeFlush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packetizer_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>packetizer_Packetize</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeAVC1</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>PacketizeXXC1</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_avcC_length_size</name></name></expr></argument>,
<argument><expr><name>pp_block</name></expr></argument>, <argument><expr><name>ParseNALBlock</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GetCc</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>decoder_cc_desc_t</name> <modifier>*</modifier></type><name>p_desc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cc_storage_get_current</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument>, <argument><expr><name>p_desc</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>ResetOutputVariables</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>H264_SLICE_TYPE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_new_sps</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_new_pps</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dpb_output_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_struct</name></name> <operator>=</operator> <name>UINT8_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recovery_frame_cnt</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeReset</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_flush</name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DropStoredNAL</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ResetOutputVariables</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>h264_poc_context_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pocctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prevdatedpoc</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeParse</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_private</name></expr></init></decl>;</decl_stmt>


<while>while<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><call><name>ParseNALBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>pb_ts_used</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>PacketizeValidate</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_au</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>PacketizeDrain</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><call><name>OutputPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_out</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_out</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DROP</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_out</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ParseNALBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_nal_type</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x1f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_frag_dts</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_frag_pts</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_pts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_au_end</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_AU_END</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_FLAG_AU_END</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"waiting for SPS/PPS"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DropStoredNAL</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ResetOutputVariables</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cc_storage_reset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name>i_nal_type</name></expr> )</condition>
<block>{<block_content>

<case>case <expr><name>H264_NAL_SLICE</name></expr>:</case>
<case>case <expr><name>H264_NAL_SLICE_DPA</name></expr>:</case>
<case>case <expr><name>H264_NAL_SLICE_DPB</name></expr>:</case>
<case>case <expr><name>H264_NAL_SLICE_DPC</name></expr>:</case>
<case>case <expr><name>H264_NAL_SLICE_IDR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>h264_slice_t</name></type> <name>newslice</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_SLICE_IDR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recovery_frame_cnt</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParseSliceHeader</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newslice</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>newslice</name><operator>.</operator><name>i_idr_pic_id</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newslice</name><operator>.</operator><name>i_idr_pic_id</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>i_idr_pic_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_new_picture</name> <init>= <expr><call><name>IsFirstVCLNALUnit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newslice</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_new_picture</name></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_sei</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name></expr></init></decl>;</init> <condition><expr><name>p_sei</name></expr>;</condition> <incr><expr><name>p_sei</name> <operator>=</operator> <name><name>p_sei</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_sei</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_PRIVATE_SEI</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>HxxxParse_AnnexB_SEI</name><argument_list>( <argument><expr><name><name>p_sei</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sei</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name>ParseSeiCallback</name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>OutputPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name></name> <operator>=</operator> <name>newslice</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pp_append</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>



<case>case <expr><name>H264_NAL_AU_DELIMITER</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>OutputPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>DropStoredNAL</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_PRIVATE_AUD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>pp_append</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H264_NAL_SPS</name></expr>:</case>
<case>case <expr><name>H264_NAL_PPS</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>OutputPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_SPS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PutSPS</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_new_sps</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>PutPPS</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_new_pps</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>H264_NAL_SEI</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>OutputPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_PRIVATE_SEI</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>pp_append</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>H264_NAL_SPS_EXT</name></expr>:</case>
<case>case <expr><name>H264_NAL_PREFIX</name></expr>:</case> 
<case>case <expr><name>H264_NAL_SUBSET_SPS</name></expr>:</case>
<case>case <expr><name>H264_NAL_DEPTH_PS</name></expr>:</case>
<case>case <expr><name>H264_NAL_RESERVED_17</name></expr>:</case>
<case>case <expr><name>H264_NAL_RESERVED_18</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>OutputPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>pp_append</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>



<case>case <expr><name>H264_NAL_END_OF_SEQ</name></expr>:</case>
<case>case <expr><name>H264_NAL_END_OF_STREAM</name></expr>:</case>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pp_append</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_END_OF_SEQUENCE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>OutputPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>H264_NAL_SLICE_WP</name></expr>:</case> 
<case>case <expr><name>H264_NAL_UNKNOWN</name></expr>:</case>
<case>case <expr><name>H264_NAL_FILLER_DATA</name></expr>:</case>
<case>case <expr><name>H264_NAL_SLICE_EXT</name></expr>:</case>
<case>case <expr><name>H264_NAL_SLICE_3D_EXT</name></expr>:</case>
<case>case <expr><name>H264_NAL_RESERVED_22</name></expr>:</case>
<case>case <expr><name>H264_NAL_RESERVED_23</name></expr>:</case>
<default>default:</default> 
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pp_append</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>pb_ts_used</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name> <operator>=</operator> <name>i_frag_dts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name> <operator>=</operator> <name>i_frag_pts</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_ts_used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_frag_dts</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>i_frag_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slice</name></name> <operator>&amp;&amp;</operator> <name>b_au_end</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_pic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>OutputPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DROP</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CanSwapPTSwithDTS</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_slice_t</name> <modifier>*</modifier></type><name>p_slice</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_ref_idc</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_SLICE_TYPE_B</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_valid</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_max_num_reorder_frames</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_profile</name></name> <operator>==</operator> <name>PROFILE_H264_CAVLC_INTRA</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>OutputPicture</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pic_last</name> <init>= <expr><operator>&amp;</operator><name>p_pic</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DropStoredNAL</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ResetOutputVariables</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cc_storage_reset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pps</name> <operator>||</operator> <operator>!</operator><name>p_sps</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DropStoredNAL</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ResetOutputVariables</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cc_storage_reset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>==</operator> <name>UINT_MAX</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_recovery_frame_cnt</name></name> <operator>==</operator> <name>UINT_MAX</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>H264_SLICE_TYPE_I</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_need_sps_pps</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>H264_SLICE_TYPE_I</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_recovery_frame_cnt</name></name> <operator>!=</operator> <name>UINT_MAX</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>==</operator> <name>UINT_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>i_frame_num</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_recovery_frame_cnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recoverystartfnum</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>i_frame_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_need_sps_pps</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Recovering using SEI, prerolling %u reference pics"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recovery_frame_cnt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>!=</operator> <name>UINT_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>maxFrameNum</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_frame_num</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>&gt;</operator> <name>maxFrameNum</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>i_frame_num</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_recoverystartfnum</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>i_frame_num</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>%</operator> <name>maxFrameNum</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>&lt;=</operator> <name>maxFrameNum</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>i_frame_num</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Recovery from SEI recovery point complete"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_xpsnal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_xpsnal_tail</name> <init>= <expr><operator>&amp;</operator><name>p_xpsnal</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_need_sps_pps</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_new_sps</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_new_pps</name></name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>H264_SPS_ID_MAX</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b_need_sps_pps</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_new_sps</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_xpsnal_tail</name></expr></argument>, <argument><expr><call><name>block_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_block</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>H264_PPS_ID_MAX</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b_need_sps_pps</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_new_pps</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_xpsnal_tail</name></expr></argument>, <argument><expr><call><name>block_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_block</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_PRIVATE_AUD</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_au</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name><name>p_au</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_au</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_pic_last</name></expr></argument>, <argument><expr><name>p_au</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_xpsnal</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_pic_last</name></expr></argument>, <argument><expr><name>p_xpsnal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_pic_last</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_pic_last</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>leading</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>block_ChainGather</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ResetOutputVariables</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cc_storage_reset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_FLAG_PRIVATE_MASK</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>tFOC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bFOC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>PictureOrderCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>h264_compute_poc</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pocctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PictureOrderCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tFOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bFOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_num_clock_ts</name> <init>= <expr><call><name>h264_get_num_ts</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_struct</name></name></expr></argument>, <argument><expr><name>tFOC</name></expr></argument>, <argument><expr><name>bFOC</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_pic_struct_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_struct</name></name></expr> )</condition>
<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_SINGLE_FIELD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>i_bottom_field_flag</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>BLOCK_FLAG_TOP_FIELD_FIRST</name></expr>
</then><else>: <expr><name>BLOCK_FLAG_BOTTOM_FIELD_FIRST</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TOP_FIELD_FIRST</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_BOTTOM_FIELD_FIRST</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TOP_FIELD_FIRST</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_BOTTOM_FIELD_FIRST</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>H264_SLICE_TYPE_I</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prevdatedpoc</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>prevdatedpoc</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prevdatedpoc</name><operator>.</operator><name>pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>tFOC</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>prevdatedpoc</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>, <argument><expr><name>diff</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Decrement</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>, <argument><expr><operator>-</operator><name>diff</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>CanSwapPTSwithDTS</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>p_sps</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>H264_SLICE_TYPE_I</name> <operator>&amp;&amp;</operator>
<call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<call><name>CanSwapPTSwithDTS</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>p_sps</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prevdatedpoc</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prevdatedpoc</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>PictureOrderCount</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>date_t</name></type> <name>next</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><name>i_num_clock_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name>next</name></expr></argument> )</argument_list></call> <operator>-</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
msg_Err(p_dec, "F/BOC %d/%d POC %d %d rec %d flags %x ref%d fn %d fp %d %d pts %ld len %ld",
tFOC, bFOC, PictureOrderCount,
p_sys-&gt;slice.type, p_sys-&gt;b_recovered, p_pic-&gt;i_flags,
p_sys-&gt;slice.i_nal_ref_idc, p_sys-&gt;slice.i_frame_num, p_sys-&gt;slice.i_field_pic_flag,
p_pic-&gt;i_pts - p_pic-&gt;i_dts, p_pic-&gt;i_pts % VLC_TICK_FROM_SEC(100), p_pic-&gt;i_length);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>( <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>i_num_clock_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>H264_SLICE_TYPE_P</name></expr>:</case>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H264_SLICE_TYPE_B</name></expr>:</case>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_B</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H264_SLICE_TYPE_I</name></expr>:</case>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recoveryfnum</name></name> <operator>!=</operator> <name>UINT_MAX</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_PREROLL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DROP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_FLAG_PRIVATE_AUD</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ResetOutputVariables</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>cc_storage_commit</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PutSPS</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_buffer</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hxxx_strip_AnnexB_startcode</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name> <init>= <expr><call><name>h264_decode_sps</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sps</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"invalid SPS"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_id</name></name></expr>]</index></name><operator>.</operator><name>p_sps</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"found NAL_SPS (sps_id=%d)"</literal></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>StoreSPS</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument>, <argument><expr><name>p_sps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PutPPS</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_buffer</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hxxx_strip_AnnexB_startcode</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name> <init>= <expr><call><name>h264_decode_pps</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pps</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"invalid PPS"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_id</name></name></expr>]</index></name><operator>.</operator><name>p_pps</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"found NAL_PPS (pps_id=%d sps_id=%d)"</literal></expr></argument>, <argument><expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_sps_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>StorePPS</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument>, <argument><expr><name>p_pps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetSPSPPS</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>i_pps_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_sps</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>h264_picture_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_pps</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name>i_pps_id</name></expr>]</index></name><operator>.</operator><name>p_pps</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_pps</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_sps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_sps</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>pp_pps</name><operator>)</operator><operator>-&gt;</operator><name>i_sps_id</name></name></expr>]</index></name><operator>.</operator><name>p_sps</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ParseSliceHeader</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter>, <parameter><decl><type><name>h264_slice_t</name> <modifier>*</modifier></type><name>p_slice</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_stripped</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_stripped</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hxxx_strip_AnnexB_startcode</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_stripped</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stripped</name></expr></argument> )</argument_list></call> <operator>||</operator> <name>i_stripped</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>h264_decode_slice</name><argument_list>( <argument><expr><name>p_stripped</name></expr></argument>, <argument><expr><name>i_stripped</name></expr></argument>, <argument><expr><name>GetSPSPPS</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_slice</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetSPSPPS</name><argument_list>( <argument><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_pic_parameter_set_id</name></name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_pps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_sps</name> <operator>||</operator> <operator>!</operator><name>p_pps</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ActivateSets</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name>p_pps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ParseSeiCallback</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hxxx_sei_data_t</name> <modifier>*</modifier></type><name>p_sei_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>cbdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>
<block>{<block_content>

<case>case <expr><name>HXXX_SEI_PIC_TIMING</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sps</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_valid</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_hrd_parameters_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>p_bs</name></name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_cpb_removal_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dpb_output_delay</name></name> <operator>=</operator>
<call><name>bs_read</name><argument_list>( <argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>p_bs</name></name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_dpb_output_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_pic_struct_present_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_struct</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>p_bs</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>


<case>case <expr><name>HXXX_SEI_USER_DATA_REGISTERED_ITU_T_T35</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>itu_t35</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>HXXX_ITU_T35_TYPE_CC</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cc_storage_append</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>itu_t35</name><operator>.</operator><name>u</name><operator>.</operator><name>cc</name><operator>.</operator><name>p_data</name></name></expr></argument>,
<argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>itu_t35</name><operator>.</operator><name>u</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_FRAME_PACKING_ARRANGEMENT</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>==</operator> <name>MULTIVIEW_2D</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>video_multiview_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>frame_packing</name><operator>.</operator><name>type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>FRAME_PACKING_INTERLEAVED_CHECKERBOARD</name></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_CHECKERBOARD</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FRAME_PACKING_INTERLEAVED_COLUMN</name></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_COL</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FRAME_PACKING_INTERLEAVED_ROW</name></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_ROW</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FRAME_PACKING_SIDE_BY_SIDE</name></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_SBS</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FRAME_PACKING_TOP_BOTTOM</name></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_TB</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FRAME_PACKING_TEMPORAL</name></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_FRAME</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FRAME_PACKING_TILED</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_2D</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <break>break;</break>


<case>case <expr><name>HXXX_SEI_RECOVERY_POINT</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovered</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Seen SEI recovery point, %d recovery frames"</literal></expr></argument>, <argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>recovery</name><operator>.</operator><name>i_frames</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recovery_frame_cnt</name></name> <operator>=</operator> <name><name>p_sei_data</name><operator>-&gt;</operator><name>recovery</name><operator>.</operator><name>i_frames</name></name></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>

<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

</unit>
