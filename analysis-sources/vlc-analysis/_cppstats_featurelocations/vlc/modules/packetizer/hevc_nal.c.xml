<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\packetizer\hevc_nal.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_nal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_nal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_ep3b.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iso_color_tables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>



<typedef>typedef <type><name>uint8_t</name></type> <name>nal_u1_t</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>nal_u2_t</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>nal_u3_t</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>nal_u4_t</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>nal_u5_t</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>nal_u6_t</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>nal_u7_t</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>nal_u8_t</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>nal_se_t</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>nal_ue_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>nal_u2_t</name></type> <name>profile_space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>tier_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u5_t</name></type> <name>profile_idc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>profile_compatibility_flag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>progressive_source_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>interlaced_source_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>non_packed_constraint_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>frame_only_constraint_flag</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>max_12bit_constraint_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>max_10bit_constraint_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>max_8bit_constraint_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>max_422chroma_constraint_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>max_420chroma_constraint_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>max_monochrome_constraint_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>intra_constraint_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>one_picture_only_constraint_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>lower_bit_rate_constraint_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>max_14bit_constraint_flag</name></decl>;</decl_stmt>
}</block> <decl><name>idc4to7</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>inbld_flag</name></decl>;</decl_stmt>
}</block> <decl><name>idc1to5</name></decl>;</struct>
}</block></struct></type> <name>hevc_inner_profile_tier_level_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_MAX_SUBLAYERS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>hevc_inner_profile_tier_level_t</name></type> <name>general</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u8_t</name></type> <name>general_level_idc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sublayer_profile_present_flag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sublayer_level_present_flag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>hevc_inner_profile_tier_level_t</name></type> <name><name>sub_layer</name><index>[<expr><name>HEVC_MAX_SUBLAYERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u8_t</name></type> <name><name>sub_layer_level_idc</name><index>[<expr><name>HEVC_MAX_SUBLAYERS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>hevc_profile_tier_level_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_MAX_SHORT_TERM_REF_PIC_SET</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_MAX_LONG_TERM_REF_PIC_SET</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>num_delta_pocs</name></decl>;</decl_stmt>
}</block></struct></type> <name>hevc_short_term_ref_pic_set_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>aspect_ratio_info_present_flag</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>nal_u8_t</name></type> <name>aspect_ratio_idc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sar_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sar_height</name></decl>;</decl_stmt>
}</block> <decl><name>ar</name></decl>;</struct>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>overscan_info_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>overscan_appropriate_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>video_signal_type_present_flag</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>nal_u3_t</name></type> <name>video_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>video_full_range_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>colour_description_present_flag</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>nal_u8_t</name></type> <name>colour_primaries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u8_t</name></type> <name>transfer_characteristics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u8_t</name></type> <name>matrix_coeffs</name></decl>;</decl_stmt>
}</block> <decl><name>colour</name></decl>;</struct>
}</block> <decl><name>vs</name></decl>;</struct>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>chroma_loc_info_present_flag</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>sample_loc_type_top_field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>sample_loc_type_bottom_field</name></decl>;</decl_stmt>
}</block> <decl><name>chroma</name></decl>;</struct>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>neutral_chroma_indication_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>field_seq_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>frame_field_info_present_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>default_display_window_flag</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>win_left_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>win_right_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>win_top_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>win_bottom_offset</name></decl>;</decl_stmt>
}</block> <decl><name>def_disp</name></decl>;</struct>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>vui_timing_info_present_flag</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vui_num_units_in_tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vui_time_scale</name></decl>;</decl_stmt>

}</block> <decl><name>timing</name></decl>;</struct>


}</block></struct></type> <name>hevc_vui_parameters_t</name>;</typedef>

<struct>struct <name>hevc_video_parameter_set_t</name>
<block>{
<decl_stmt><decl><type><name>nal_u4_t</name></type> <name>vps_video_parameter_set_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>vps_base_layer_internal_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>vps_base_layer_available_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u6_t</name></type> <name>vps_max_layers_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u3_t</name></type> <name>vps_max_sub_layers_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>vps_temporal_id_nesting_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hevc_profile_tier_level_t</name></type> <name>profile_tier_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>vps_sub_layer_ordering_info_present_flag</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>dec_pic_buffering_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>num_reorder_pics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>max_latency_increase_plus1</name></decl>;</decl_stmt>
}</block> <decl><name><name>vps_max</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>HEVC_MAX_SUBLAYERS</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>nal_u6_t</name></type> <name>vps_max_layer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>vps_num_layer_set_minus1</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>vps_timing_info_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vps_num_units_in_tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vps_time_scale</name></decl>;</decl_stmt>


}</block>;</struct>

<struct>struct <name>hevc_sequence_parameter_set_t</name>
<block>{
<decl_stmt><decl><type><name>nal_u4_t</name></type> <name>sps_video_parameter_set_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u3_t</name></type> <name>sps_max_sub_layers_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>sps_temporal_id_nesting_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hevc_profile_tier_level_t</name></type> <name>profile_tier_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>sps_seq_parameter_set_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>chroma_format_idc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>separate_colour_plane_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>pic_width_in_luma_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>pic_height_in_luma_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>conformance_window_flag</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>left_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>right_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>top_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>bottom_offset</name></decl>;</decl_stmt>
}</block> <decl><name>conf_win</name></decl>;</struct>

<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>bit_depth_luma_minus8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>bit_depth_chroma_minus8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>log2_max_pic_order_cnt_lsb_minus4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>sps_sub_layer_ordering_info_present_flag</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>dec_pic_buffering_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>num_reorder_pics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>latency_increase_plus1</name></decl>;</decl_stmt>
}</block> <decl><name><name>sps_max</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>HEVC_MAX_SUBLAYERS</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>log2_min_luma_coding_block_size_minus3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>log2_diff_max_min_luma_coding_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>log2_min_luma_transform_block_size_minus2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>log2_diff_max_min_luma_transform_block_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>max_transform_hierarchy_depth_inter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>max_transform_hierarchy_depth_intra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>scaling_list_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>sps_scaling_list_data_present_flag</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>amp_enabled_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>sample_adaptive_offset_enabled_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>pcm_enabled_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u4_t</name></type> <name>pcm_sample_bit_depth_luma_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u4_t</name></type> <name>pcm_sample_bit_depth_chroma_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>log2_min_pcm_luma_coding_block_size_minus3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>log2_diff_max_min_pcm_luma_coding_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>pcm_loop_filter_disabled_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>num_short_term_ref_pic_sets</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>long_term_ref_pics_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>num_long_term_ref_pics_sps</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>sps_temporal_mvp_enabled_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>strong_intra_smoothing_enabled_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>vui_parameters_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hevc_vui_parameters_t</name></type> <name>vui</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>hevc_picture_parameter_set_t</name>
<block>{
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>pps_pic_parameter_set_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>pps_seq_parameter_set_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>dependent_slice_segments_enabled_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>output_flag_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u3_t</name></type> <name>num_extra_slice_header_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>sign_data_hiding_enabled_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>cabac_init_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>num_ref_idx_l0_default_active_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>num_ref_idx_l1_default_active_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_se_t</name></type> <name>init_qp_minus26</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>constrained_intra_pred_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>transform_skip_enabled_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>cu_qp_delta_enabled_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>diff_cu_qp_delta_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_se_t</name></type> <name>pps_cb_qp_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_se_t</name></type> <name>pps_cr_qp_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>pic_slice_level_chroma_qp_offsets_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>weighted_pred_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>weighted_bipred_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>transquant_bypass_enable_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>tiles_enabled_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>entropy_coding_sync_enabled_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>num_tile_columns_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>num_tile_rows_minus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>uniform_spacing_flag</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>loop_filter_across_tiles_enabled_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>pps_loop_filter_across_slices_enabled_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>deblocking_filter_control_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>deblocking_filter_override_enabled_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>pps_deblocking_filter_disabled_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_se_t</name></type> <name>pps_beta_offset_div2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_se_t</name></type> <name>pps_tc_offset_div2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>scaling_list_data_present_flag</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>lists_modification_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>log2_parallel_merge_level_minus2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>slice_header_extension_present_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>pps_extension_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>pps_range_extension_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>pps_multilayer_extension_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>pps_3d_extension_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u5_t</name></type> <name>pps_extension_5bits</name></decl>;</decl_stmt>


}</block>;</struct>

<struct>struct <name>hevc_slice_segment_header_t</name>
<block>{
<decl_stmt><decl><type><name>nal_u6_t</name></type> <name>nal_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u6_t</name></type> <name>nuh_layer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u3_t</name></type> <name>temporal_id_plus1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>first_slice_segment_in_pic_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>no_output_of_prior_pics_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>slice_pic_parameter_set_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>dependent_slice_segment_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>slice_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>pic_output_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pic_order_cnt_lsb</name></decl>;</decl_stmt>


}</block>;</struct>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>get_hvcC_to_AnnexB_NAL_size</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_buf</name> <operator>&lt;</operator> <name>HEVC_MIN_HVCC_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_nal_length_size</name> <init>= <expr><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_nal_length_size</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_num_array</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">23</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_num_array</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_buf</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_num_nalu</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_num_nalu</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_buf</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_nalu_length</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_buf</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_nalu_length</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_total</name> <operator>+=</operator> <name>i_nalu_length</name> <operator>+</operator> <name>i_nal_length_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>i_nalu_length</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <name>i_nalu_length</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>i_total</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type> <name>hevc_hvcC_to_AnnexB_NAL</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_result</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_nal_length_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_result</name> <operator>=</operator> <call><name>get_hvcC_to_AnnexB_NAL_size</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_result</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_nal_length_size</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_nal_length_size</name> <operator>=</operator> <call><name>hevc_getNALLengthSize</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out_buf</name> <init>= <expr><name>p_ret</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><operator>*</operator><name>pi_result</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out_buf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_num_array</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_num_array</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_num_nalu</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_num_nalu</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_nalu_length</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out_buf</name></expr></argument>, <argument><expr><name>annexb_startcode4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_out_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_nalu_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_buf</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>i_nalu_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name>i_nalu_length</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>p_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hevc_parse_scaling_list_rbsp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nextCoef</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>coefNum</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>nextCoef</name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>coefNum</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>nextCoef</name> <operator>=</operator> <operator>(</operator> <name>nextCoef</name> <operator>+</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">256</literal> <operator>)</operator> <operator>%</operator> <literal type="number">256</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hevc_parse_vui_parameters_rbsp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>, <parameter><decl><type><name>hevc_vui_parameters_t</name> <modifier>*</modifier></type><name>p_vui</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_broken</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>aspect_ratio_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vui</name><operator>-&gt;</operator><name>aspect_ratio_info_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vui</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>==</operator> <literal type="number">0xFF</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>sar_width</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>sar_height</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>overscan_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vui</name><operator>-&gt;</operator><name>overscan_info_present_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>overscan_appropriate_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>video_signal_type_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vui</name><operator>-&gt;</operator><name>video_signal_type_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>vs</name><operator>.</operator><name>video_format</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>vs</name><operator>.</operator><name>video_full_range_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>vs</name><operator>.</operator><name>colour_description_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vui</name><operator>-&gt;</operator><name>vs</name><operator>.</operator><name>colour_description_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>vs</name><operator>.</operator><name>colour</name><operator>.</operator><name>colour_primaries</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>vs</name><operator>.</operator><name>colour</name><operator>.</operator><name>transfer_characteristics</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>vs</name><operator>.</operator><name>colour</name><operator>.</operator><name>matrix_coeffs</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>vs</name><operator>.</operator><name>colour</name><operator>.</operator><name>colour_primaries</name></name> <operator>=</operator> <name>ISO_23001_8_CP_UNSPECIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>vs</name><operator>.</operator><name>colour</name><operator>.</operator><name>transfer_characteristics</name></name> <operator>=</operator> <name>ISO_23001_8_TC_UNSPECIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>vs</name><operator>.</operator><name>colour</name><operator>.</operator><name>matrix_coeffs</name></name> <operator>=</operator> <name>ISO_23001_8_MC_UNSPECIFIED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>chroma_loc_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vui</name><operator>-&gt;</operator><name>chroma_loc_info_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>sample_loc_type_top_field</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>chroma</name><operator>.</operator><name>sample_loc_type_bottom_field</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>neutral_chroma_indication_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>field_seq_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>frame_field_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>default_display_window_flag</name></name> <operator>=</operator> <operator>!</operator><name>b_broken</name> <operator>&amp;&amp;</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vui</name><operator>-&gt;</operator><name>default_display_window_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>def_disp</name><operator>.</operator><name>win_left_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>def_disp</name><operator>.</operator><name>win_right_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>def_disp</name><operator>.</operator><name>win_top_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>def_disp</name><operator>.</operator><name>win_bottom_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>vui_timing_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vui</name><operator>-&gt;</operator><name>vui_timing_info_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>timing</name><operator>.</operator><name>vui_num_units_in_tick</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vui</name><operator>-&gt;</operator><name>timing</name><operator>.</operator><name>vui_time_scale</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>hevc_get_xps_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_buf</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_nal_type</name> <init>= <expr><call><name>hevc_getNALType</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_buf</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_PPS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_id</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pi_id</name> <operator>&gt;</operator> <name>HEVC_PPS_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_id</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_SPS</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pi_id</name> <operator>&gt;</operator> <name>HEVC_SPS_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>pi_id</name> <operator>&gt;</operator> <name>HEVC_VPS_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hevc_parse_inner_profile_tier_level_rbsp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>,
<parameter><decl><type><name>hevc_inner_profile_tier_level_t</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">88</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>profile_space</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>tier_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>profile_compatibility_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>progressive_source_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>interlaced_source_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>non_packed_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>frame_only_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_in</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>p_in</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>&lt;=</operator> <literal type="number">10</literal> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>p_in</name><operator>-&gt;</operator><name>profile_compatibility_flag</name></name> <operator>&amp;</operator> <literal type="number">0x0F700000</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_12bit_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_10bit_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_8bit_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_422chroma_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_420chroma_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_monochrome_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>intra_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>one_picture_only_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>lower_bit_rate_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_in</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">5</literal> <operator>||</operator>
<name><name>p_in</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">9</literal> <operator>||</operator>
<name><name>p_in</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator>
<operator>(</operator><name><name>p_in</name><operator>-&gt;</operator><name>profile_compatibility_flag</name></name> <operator>&amp;</operator> <literal type="number">0x08600000</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_14bit_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_in</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator>
<operator>(</operator><name><name>p_in</name><operator>-&gt;</operator><name>profile_compatibility_flag</name></name> <operator>&amp;</operator> <literal type="number">0x20000000</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>one_picture_only_constraint_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_in</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_in</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>&lt;=</operator> <literal type="number">5</literal> <operator>)</operator> <operator>||</operator>
<name><name>p_in</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">9</literal> <operator>||</operator>
<operator>(</operator> <name><name>p_in</name><operator>-&gt;</operator><name>profile_compatibility_flag</name></name> <operator>&amp;</operator> <literal type="number">0x7C400000</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_in</name><operator>-&gt;</operator><name>idc1to5</name><operator>.</operator><name>inbld_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hevc_parse_profile_tier_level_rbsp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>profile_present</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>max_num_sub_layers_minus1</name></decl></parameter>,
<parameter><decl><type><name>hevc_profile_tier_level_t</name> <modifier>*</modifier></type><name>p_ptl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>profile_present</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hevc_parse_inner_profile_tier_level_rbsp</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ptl</name><operator>-&gt;</operator><name>general</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ptl</name><operator>-&gt;</operator><name>general_level_idc</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>max_num_sub_layers_minus1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <name>max_num_sub_layers_minus1</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_ptl</name><operator>-&gt;</operator><name>sublayer_profile_present_flag</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_ptl</name><operator>-&gt;</operator><name>sublayer_level_present_flag</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_num_sub_layers_minus1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_ptl</name><operator>-&gt;</operator><name>sublayer_profile_present_flag</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator> <call><name>hevc_parse_inner_profile_tier_level_rbsp</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ptl</name><operator>-&gt;</operator><name>sub_layer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ptl</name><operator>-&gt;</operator><name>sublayer_profile_present_flag</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_ptl</name><operator>-&gt;</operator><name>sub_layer_level_idc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hevc_parse_video_parameter_set_rbsp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>,
<parameter><decl><type><name>hevc_video_parameter_set_t</name> <modifier>*</modifier></type><name>p_vps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">134</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_video_parameter_set_id</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_base_layer_internal_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_base_layer_available_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max_layers_minus1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_temporal_id_nesting_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hevc_parse_profile_tier_level_rbsp</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_vps</name><operator>-&gt;</operator><name>profile_tier_level</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_sub_layer_ordering_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>= <expr><operator>(</operator><ternary><condition><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_sub_layer_ordering_info_present_flag</name></name></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</init>
<condition><expr><name>i</name><operator>&lt;=</operator> <name><name>p_vps</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_pic_buffering_minus1</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_latency_increase_plus1</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max_layer_id</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_num_layer_set_minus1</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_num_layer_set_minus1</name></name> <operator>*</operator> <operator>(</operator><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max_layer_id</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_timing_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_timing_info_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_num_units_in_tick</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_time_scale</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hevc_rbsp_release_vps</name><parameter_list>( <parameter><decl><type><name>hevc_video_parameter_set_t</name> <modifier>*</modifier></type><name>p_vps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_vps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_hevc_generic_decode</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>hevctype</name></type></parameter>, <parameter><type><name>decode</name></type></parameter>, <parameter><type><name>release</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>hevctype * name( const uint8_t *p_buf, size_t i_buf, bool b_escaped ) { hevctype *p_hevctype = calloc(1, sizeof(hevctype)); if(likely(p_hevctype)) { bs_t bs; struct hxxx_bsfw_ep3b_ctx_s bsctx; if( b_escaped ) { hxxx_bsfw_ep3b_ctx_init( &amp;bsctx ); bs_init_custom( &amp;bs, p_buf, i_buf, &amp;hxxx_bsfw_ep3b_callbacks, &amp;bsctx );} else bs_init( &amp;bs, p_buf, i_buf ); bs_skip( &amp;bs, 7 ); uint8_t i_nuh_layer_id = bs_read( &amp;bs, 6 ); bs_skip( &amp;bs, 3 ); if( i_nuh_layer_id &gt; 62 || !decode( &amp;bs, p_hevctype ) ) { release( p_hevctype ); p_hevctype = NULL; } } return p_hevctype; }</cpp:value></cpp:define>

























<macro><name>IMPL_hevc_generic_decode</name><argument_list>( <argument>hevc_decode_vps</argument>, <argument>hevc_video_parameter_set_t</argument>,
<argument>hevc_parse_video_parameter_set_rbsp</argument>, <argument>hevc_rbsp_release_vps</argument> )</argument_list></macro>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hevc_parse_st_ref_pic_set</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>stRpsIdx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>num_short_term_ref_pic_sets</name></decl></parameter>,
<parameter><decl><type><name>hevc_short_term_ref_pic_set_t</name> <modifier>*</modifier></type><name>p_sets</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>stRpsIdx</name> <operator>&amp;&amp;</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr> )</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>delta_idx_minus_1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>stRpsIdx</name> <operator>==</operator> <name>num_short_term_ref_pic_sets</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>delta_idx_minus_1</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>delta_idx_minus_1</name> <operator>&gt;=</operator> <name>stRpsIdx</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>delta_idx_minus_1</name> <operator>==</operator> <name>stRpsIdx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>nal_u1_t</name></type> <name>delta_rps_sign</name> <init>= <expr><call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>abs_delta_rps_minus1</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>RefRpsIdx</name> <init>= <expr><name>stRpsIdx</name> <operator>-</operator> <name>delta_idx_minus_1</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deltaRps</name> <init>= <expr><operator>(</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator> <name>delta_rps_sign</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>abs_delta_rps_minus1</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>deltaRps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>numDeltaPocs</name> <init>= <expr><name><name>p_sets</name><index>[<expr><name>RefRpsIdx</name></expr>]</index></name><operator>.</operator><name>num_delta_pocs</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sets</name><index>[<expr><name>stRpsIdx</name></expr>]</index></name><operator>.</operator><name>num_delta_pocs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator> <name>numDeltaPocs</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>p_sets</name><index>[<expr><name>stRpsIdx</name></expr>]</index></name><operator>.</operator><name>num_delta_pocs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sets</name><index>[<expr><name>stRpsIdx</name></expr>]</index></name><operator>.</operator><name>num_delta_pocs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>num_negative_pics</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_ue_t</name></type> <name>num_positive_pics</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>num_negative_pics</name> <operator>+</operator> <name>num_positive_pics</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>num_negative_pics</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>num_positive_pics</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sets</name><index>[<expr><name>stRpsIdx</name></expr>]</index></name><operator>.</operator><name>num_delta_pocs</name> <operator>=</operator> <name>num_positive_pics</name> <operator>+</operator> <name>num_negative_pics</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hevc_parse_sequence_parameter_set_rbsp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>,
<parameter><decl><type><name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_video_parameter_set_id</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_temporal_id_nesting_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hevc_parse_profile_tier_level_rbsp</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_seq_parameter_set_id</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_seq_parameter_set_id</name></name> <operator>&gt;</operator> <name>HEVC_SPS_ID_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>conformance_window_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>conformance_window_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>conf_win</name><operator>.</operator><name>left_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>conf_win</name><operator>.</operator><name>right_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>conf_win</name><operator>.</operator><name>top_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>conf_win</name><operator>.</operator><name>bottom_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_sub_layer_ordering_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><operator>(</operator><ternary><condition><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_sub_layer_ordering_info_present_flag</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</init>
<condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_max</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_pic_buffering_minus1</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_max</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_max</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>latency_increase_plus1</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>log2_min_luma_coding_block_size_minus3</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>log2_min_luma_transform_block_size_minus2</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_transform_block_size</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>scaling_list_enabled</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>scaling_list_enabled</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_scaling_list_data_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_scaling_list_data_present_flag</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator> <call><name>hevc_parse_scaling_list_rbsp</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>amp_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sample_adaptive_offset_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>pcm_sample_bit_depth_luma_minus1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>pcm_sample_bit_depth_chroma_minus1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>log2_min_pcm_luma_coding_block_size_minus3</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>log2_diff_max_min_pcm_luma_coding_block_size</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>pcm_loop_filter_disabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name> <operator>&gt;</operator> <name>HEVC_MAX_SHORT_TERM_REF_PIC_SET</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>hevc_short_term_ref_pic_set_t</name></type> <name><name>sets</name><index>[<expr><name>HEVC_MAX_SHORT_TERM_REF_PIC_SET</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sets</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hevc_short_term_ref_pic_set_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>HEVC_MAX_SHORT_TERM_REF_PIC_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sps</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hevc_parse_st_ref_pic_set</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name></expr></argument>, <argument><expr><name>sets</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name> <operator>&gt;</operator> <name>HEVC_MAX_LONG_TERM_REF_PIC_SET</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>strong_intra_smoothing_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bs_t</name></type> <name>rollbackpoint</name> <init>= <expr><operator>*</operator><name>p_bs</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hevc_parse_vui_parameters_rbsp</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>default_display_window_flag</name></name> <operator>&amp;&amp;</operator>
<call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">66</literal></expr> )</condition>
<block>{<block_content>





<expr_stmt><expr><operator>*</operator><name>p_bs</name> <operator>=</operator> <name>rollbackpoint</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hevc_parse_vui_parameters_rbsp</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hevc_rbsp_release_sps</name><parameter_list>( <parameter><decl><type><name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>IMPL_hevc_generic_decode</name><argument_list>( <argument>hevc_decode_sps</argument>, <argument>hevc_sequence_parameter_set_t</argument>,
<argument>hevc_parse_sequence_parameter_set_rbsp</argument>, <argument>hevc_rbsp_release_sps</argument> )</argument_list></macro>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hevc_parse_pic_parameter_set_rbsp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>,
<parameter><decl><type><name>hevc_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_pic_parameter_set_id</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_pic_parameter_set_id</name></name> <operator>&gt;</operator> <name>HEVC_PPS_ID_MAX</name> <operator>||</operator> <call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_seq_parameter_set_id</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_seq_parameter_set_id</name></name> <operator>&gt;</operator> <name>HEVC_SPS_ID_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>dependent_slice_segments_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>output_flag_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>sign_data_hiding_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>cabac_init_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active_minus1</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>init_qp_minus26</name></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_cb_qp_offset</name></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_cr_qp_offset</name></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pic_slice_level_chroma_qp_offsets_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>weighted_bipred_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>transquant_bypass_enable_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>num_tile_rows_minus1</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pps</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_pps</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name> <operator>+</operator>
<name><name>p_pps</name><operator>-&gt;</operator><name>num_tile_rows_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_pps</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_pps</name><operator>-&gt;</operator><name>num_tile_rows_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_loop_filter_across_slices_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>deblocking_filter_override_enabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_deblocking_filter_disabled_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pps</name><operator>-&gt;</operator><name>pps_deblocking_filter_disabled_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_beta_offset_div2</name></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_tc_offset_div2</name></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>scaling_list_data_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>scaling_list_data_present_flag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hevc_parse_scaling_list_rbsp</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>lists_modification_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>log2_parallel_merge_level_minus2</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>slice_header_extension_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_extension_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_extension_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_range_extension_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_multilayer_extension_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_3d_extension_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_extension_5bits</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hevc_rbsp_release_pps</name><parameter_list>( <parameter><decl><type><name>hevc_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_pps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>IMPL_hevc_generic_decode</name><argument_list>( <argument>hevc_decode_pps</argument>, <argument>hevc_picture_parameter_set_t</argument>,
<argument>hevc_parse_pic_parameter_set_rbsp</argument>, <argument>hevc_rbsp_release_pps</argument> )</argument_list></macro>

<function><type><name>uint8_t</name></type> <name>hevc_get_sps_vps_id</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_sps</name><operator>-&gt;</operator><name>sps_video_parameter_set_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>hevc_get_pps_sps_id</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_pps</name><operator>-&gt;</operator><name>pps_seq_parameter_set_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>hevc_get_slice_pps_id</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_slice_segment_header_t</name> <modifier>*</modifier></type><name>p_slice</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_slice</name><operator>-&gt;</operator><name>slice_pic_parameter_set_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hevc_get_sps_profile_tier_level</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_profile</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general</name><operator>.</operator><name>profile_idc</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_profile</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general</name><operator>.</operator><name>profile_idc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_level</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general_level_idc</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hevc_get_picture_size</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_vw</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_vh</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_w</name> <operator>=</operator> <operator>*</operator><name>p_vw</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_h</name> <operator>=</operator> <operator>*</operator><name>p_vh</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>conformance_window_flag</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sub_width_c</name></decl>, <decl><type ref="prev"/><name>sub_height_c</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>sub_width_c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sub_height_c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>sub_width_c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sub_height_c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>sub_width_c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sub_height_c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_vh</name> <operator>-=</operator> <operator>(</operator><name><name>p_sps</name><operator>-&gt;</operator><name>conf_win</name><operator>.</operator><name>bottom_offset</name></name> <operator>+</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>conf_win</name><operator>.</operator><name>top_offset</name></name><operator>)</operator> <operator>*</operator> <name>sub_height_c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_vw</name> <operator>-=</operator> <operator>(</operator><name><name>p_sps</name><operator>-&gt;</operator><name>conf_win</name><operator>.</operator><name>left_offset</name></name> <operator>+</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>conf_win</name><operator>.</operator><name>right_offset</name></name><operator>)</operator> <operator>*</operator> <name>sub_width_c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>hevc_get_max_num_reorder</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_video_parameter_set_t</name> <modifier>*</modifier></type><name>p_vps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max</name><index>[<expr><name><name>p_vps</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>vlc_ceil_log2</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n</name> <init>= <expr><literal type="number">31</literal> <operator>-</operator> <call><name>clz</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>!=</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hevc_get_picture_CtbsYsize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MinCbLog2SizeY</name> <init>= <expr><name><name>p_sps</name><operator>-&gt;</operator><name>log2_min_luma_coding_block_size_minus3</name></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>CtbLog2SizeY</name> <init>= <expr><name>MinCbLog2SizeY</name> <operator>+</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>CtbLog2SizeY</name> <operator>&gt;</operator> <literal type="number">31</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>CtbSizeY</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CtbLog2SizeY</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>p_w</name> <operator>=</operator> <operator>(</operator><name><name>p_sps</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>CtbSizeY</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_h</name> <operator>=</operator> <operator>(</operator><name><name>p_sps</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>CtbSizeY</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hevc_get_frame_rate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>hevc_video_parameter_set_t</name> <modifier>*</modifier></type><name>p_vps</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_den</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name> <operator>&amp;&amp;</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_timing_info_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_den</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>timing</name><operator>.</operator><name>vui_num_units_in_tick</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_num</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>timing</name><operator>.</operator><name>vui_time_scale</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>*</operator><name>pi_den</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pi_num</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>p_vps</name> <operator>&amp;&amp;</operator> <name><name>p_vps</name><operator>-&gt;</operator><name>vps_timing_info_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_den</name> <operator>=</operator> <name><name>p_vps</name><operator>-&gt;</operator><name>vps_num_units_in_tick</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_num</name> <operator>=</operator> <name><name>p_vps</name><operator>-&gt;</operator><name>vps_time_scale</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>*</operator><name>pi_den</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pi_num</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hevc_get_aspect_ratio</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>den</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>ar</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>!=</operator> <literal type="number">255</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ar_table</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">160</literal></expr>, <expr><literal type="number">99</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>ar</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>ar</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>&lt;</operator> <literal type="number">17</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name><name>ar_table</name><index>[<expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>ar</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>den</name> <operator>=</operator> <name><name>ar_table</name><index>[<expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>ar</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>ar</name><operator>.</operator><name>sar_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>den</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>ar</name><operator>.</operator><name>sar_height</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hevc_get_chroma_luma</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_chroma_format</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_depth_luma</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_depth_chroma</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_chroma_format</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_depth_luma</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_depth_chroma</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hevc_get_colorimetry</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><name>video_color_primaries_t</name> <modifier>*</modifier></type><name>p_primaries</name></decl></parameter>,
<parameter><decl><type><name>video_transfer_func_t</name> <modifier>*</modifier></type><name>p_transfer</name></decl></parameter>,
<parameter><decl><type><name>video_color_space_t</name> <modifier>*</modifier></type><name>p_colorspace</name></decl></parameter>,
<parameter><decl><type><name>video_color_range_t</name> <modifier>*</modifier></type><name>p_full_range</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p_primaries</name> <operator>=</operator>
<call><name>iso_23001_8_cp_to_vlc_primaries</name><argument_list>( <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vs</name><operator>.</operator><name>colour</name><operator>.</operator><name>colour_primaries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_transfer</name> <operator>=</operator>
<call><name>iso_23001_8_tc_to_vlc_xfer</name><argument_list>( <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vs</name><operator>.</operator><name>colour</name><operator>.</operator><name>transfer_characteristics</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_colorspace</name> <operator>=</operator>
<call><name>iso_23001_8_mc_to_vlc_coeffs</name><argument_list>( <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vs</name><operator>.</operator><name>colour</name><operator>.</operator><name>matrix_coeffs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_full_range</name> <operator>=</operator> <ternary><condition><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vs</name><operator>.</operator><name>video_full_range_flag</name></name></expr> ?</condition><then> <expr><name>COLOR_RANGE_FULL</name></expr> </then><else>: <expr><name>COLOR_RANGE_LIMITED</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hevc_parse_slice_segment_header_rbsp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>,
<parameter><decl><type><name>pf_get_matchedxps</name></type> <name>get_matchedxps</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,
<parameter><decl><type><name>hevc_slice_segment_header_t</name> <modifier>*</modifier></type><name>p_sl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hevc_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hevc_video_parameter_set_t</name> <modifier>*</modifier></type><name>p_vps</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sl</name><operator>-&gt;</operator><name>first_slice_segment_in_pic_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sl</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>&gt;=</operator> <name>HEVC_NAL_BLA_W_LP</name> <operator>&amp;&amp;</operator> <name><name>p_sl</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>&lt;=</operator> <name>HEVC_NAL_IRAP_VCL23</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sl</name><operator>-&gt;</operator><name>no_output_of_prior_pics_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sl</name><operator>-&gt;</operator><name>slice_pic_parameter_set_id</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sl</name><operator>-&gt;</operator><name>slice_pic_parameter_set_id</name></name> <operator>&gt;</operator> <name>HEVC_PPS_ID_MAX</name> <operator>||</operator> <call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_matchedxps</name><argument_list>( <argument><expr><name><name>p_sl</name><operator>-&gt;</operator><name>slice_pic_parameter_set_id</name></name></expr></argument>, <argument><expr><name>priv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_pps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_vps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_sps</name> <operator>||</operator> <operator>!</operator><name>p_pps</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sl</name><operator>-&gt;</operator><name>first_slice_segment_in_pic_flag</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>dependent_slice_segments_enabled_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sl</name><operator>-&gt;</operator><name>dependent_slice_segment_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hevc_get_picture_CtbsYsize</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><call><name>vlc_ceil_log2</name><argument_list>( <argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sl</name><operator>-&gt;</operator><name>dependent_slice_segment_flag</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name> <operator>&gt;</operator> <name>i</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name> <operator>&gt;</operator> <name>i</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <name><name>p_pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name><name>p_pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name> <operator>-</operator> <name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>&gt;</operator> <name>HEVC_SLICE_TYPE_I</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>output_flag_present_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sl</name><operator>-&gt;</operator><name>pic_output_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sl</name><operator>-&gt;</operator><name>pic_output_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_sl</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>!=</operator> <name>HEVC_NAL_IDR_W_RADL</name> <operator>&amp;&amp;</operator> <name><name>p_sl</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>!=</operator> <name>HEVC_NAL_IDR_N_LP</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sl</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sl</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hevc_rbsp_release_slice_header</name><parameter_list>( <parameter><decl><type><name>hevc_slice_segment_header_t</name> <modifier>*</modifier></type><name>p_sh</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>hevc_slice_segment_header_t</name> <modifier>*</modifier></type> <name>hevc_decode_slice_header</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_escaped</name></decl></parameter>,
<parameter><decl><type><name>pf_get_matchedxps</name></type> <name>get_matchedxps</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hevc_slice_segment_header_t</name> <modifier>*</modifier></type><name>p_sh</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hevc_slice_segment_header_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name></type> <name>bsctx</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_escaped</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>hxxx_bsfw_ep3b_ctx_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_init_custom</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hxxx_bsfw_ep3b_callbacks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sh</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sh</name><operator>-&gt;</operator><name>nuh_layer_id</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sh</name><operator>-&gt;</operator><name>temporal_id_plus1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sh</name><operator>-&gt;</operator><name>nuh_layer_id</name></name> <operator>&gt;</operator> <literal type="number">62</literal> <operator>||</operator> <name><name>p_sh</name><operator>-&gt;</operator><name>temporal_id_plus1</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>!</operator><call><name>hevc_parse_slice_segment_header_rbsp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>get_matchedxps</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>, <argument><expr><name>p_sh</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>hevc_rbsp_release_slice_header</name><argument_list>( <argument><expr><name>p_sh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sh</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_sh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hevc_get_slice_type</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_slice_segment_header_t</name> <modifier>*</modifier></type><name>p_sli</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>hevc_slice_type_e</name></name> <modifier>*</modifier></type><name>pi_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sli</name><operator>-&gt;</operator><name>dependent_slice_segment_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_type</name> <operator>=</operator> <name><name>p_sli</name><operator>-&gt;</operator><name>slice_type</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hevc_get_profile_level</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_profile</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_level</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_nal_length_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&lt;</operator> <literal type="number">23</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>pi_profile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_profile</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pi_level</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_level</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pi_nal_length_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_nal_length_size</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">21</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>hevc_make_indication</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_inner_profile_tier_level_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>flags</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name><name>p</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_14bit_constraint_flag</name></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_12bit_constraint_flag</name></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_10bit_constraint_flag</name></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_8bit_constraint_flag</name></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_422chroma_constraint_flag</name></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_420chroma_constraint_flag</name></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>max_monochrome_constraint_flag</name></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>intra_constraint_flag</name></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>one_picture_only_constraint_flag</name></name></expr>,
<expr><name><name>p</name><operator>-&gt;</operator><name>idc4to7</name><operator>.</operator><name>lower_bit_rate_constraint_flag</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>indication</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>flags</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>indication</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>indication</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>vlc_hevc_profile_e</name></name></type> <name>hevc_get_vlc_profile</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>indication</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>hevc_general_profile_idc_e</name></name></type> <name>profile</name> <init>= <expr><name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general</name><operator>.</operator><name>profile_idc</name></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>profile</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>HEVC_PROFILE_IDC_REXT</name></expr>:</case>
<expr_stmt><expr><name>indication</name> <operator>=</operator> <call><name>hevc_make_indication</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general</name></name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1FF</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HEVC_PROFILE_IDC_HIGH_THROUGHPUT</name></expr>:</case>
<case>case <expr><name>HEVC_PROFILE_IDC_SCREEN_EXTENDED</name></expr>:</case>
<expr_stmt><expr><name>indication</name> <operator>=</operator> <call><name>hevc_make_indication</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general</name><operator>.</operator><name>idc4to7</name><operator>.</operator><name>intra_constraint_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>indication</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>indication</name> <operator>&lt;&lt;</operator> <name>HEVC_INDICATION_SHIFT</name><operator>)</operator> <operator>|</operator> <name>profile</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_dcr_params_from_vps</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>hevc_dcr_values</name></name> <modifier>*</modifier></type><name>p_values</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&lt;</operator> <literal type="number">19</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name></type> <name>bsctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_bsfw_ep3b_ctx_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_init_custom</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hxxx_bsfw_ep3b_callbacks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_values</name><operator>-&gt;</operator><name>i_numTemporalLayer</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_values</name><operator>-&gt;</operator><name>b_temporalIdNested</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_values</name><operator>-&gt;</operator><name>general_configuration</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_DCR_ADD_NALS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>buffers</name></type></parameter>, <parameter><type><name>sizes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (uint8_t i = 0; i &lt; count; i++) { if( i ==0 ) { *p++ = (type | (b_completeness ? 0x80 : 0)); SetWBE( p, count ); p += 2; } SetWBE( p, sizes[i]); p += 2; memcpy( p, buffers[i], sizes[i] ); p += sizes[i];}</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_DCR_ADD_SIZES</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>sizes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(count &gt; 0) {i_total_size += 3;for(uint8_t i=0; i&lt;count; i++)i_total_size += 2 + sizes[i];}</cpp:value></cpp:define>








<function><type><name>uint8_t</name> <modifier>*</modifier></type> <name>hevc_create_dcr</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hevc_dcr_params</name></name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_completeness</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_nal_length_size</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_nal_length_size</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_nal_length_size</name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hevc_dcr_values</name></name></type> <name>values</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>general_configuration</name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><operator>.</operator><name>i_numTemporalLayer</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>i_chroma_idc</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>i_bit_depth_luma_minus8</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>i_bit_depth_chroma_minus8</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>b_temporalIdNested</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_params</name><operator>-&gt;</operator><name>p_values</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>values</name> <operator>=</operator> <operator>*</operator><name><name>p_params</name><operator>-&gt;</operator><name>p_values</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_params</name><operator>-&gt;</operator><name>i_vps_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_params</name><operator>-&gt;</operator><name>i_sps_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>hevc_dcr_params_from_vps</name><argument_list>( <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>p_vps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_vps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name> <init>=
<expr><call><name>hevc_decode_sps</name><argument_list>( <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>p_sps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_sps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sps</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>values</name><operator>.</operator><name>i_chroma_idc</name></name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><operator>.</operator><name>i_bit_depth_chroma_minus8</name></name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><operator>.</operator><name>i_bit_depth_luma_minus8</name></name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hevc_rbsp_release_sps</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_total_size</name> <init>= <expr><literal type="number">1</literal><operator>+</operator><literal type="number">12</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>HEVC_DCR_ADD_SIZES</name><argument_list>(<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_vps_count</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_vps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_DCR_ADD_SIZES</name><argument_list>(<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_sps_count</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_sps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_DCR_ADD_SIZES</name><argument_list>(<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_pps_count</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_pps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_DCR_ADD_SIZES</name><argument_list>(<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_seipref_count</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_seipref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_DCR_ADD_SIZES</name><argument_list>(<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_seisuff_count</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_seisuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_total_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_data</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>i_total_size</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>values</name><operator>.</operator><name>general_configuration</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0xF000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0xFC</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><literal type="number">0xFC</literal> <operator>|</operator> <operator>(</operator><name><name>values</name><operator>.</operator><name>i_chroma_idc</name></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><literal type="number">0xF8</literal> <operator>|</operator> <operator>(</operator><name><name>values</name><operator>.</operator><name>i_bit_depth_luma_minus8</name></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><literal type="number">0xF8</literal> <operator>|</operator> <operator>(</operator><name><name>values</name><operator>.</operator><name>i_bit_depth_chroma_minus8</name></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name><name>values</name><operator>.</operator><name>i_numTemporalLayer</name></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>values</name><operator>.</operator><name>b_temporalIdNested</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>i_nal_length_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_vps_count</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_sps_count</name></name> <operator>+</operator>
<operator>!</operator><operator>!</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_pps_count</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_seipref_count</name></name> <operator>+</operator>
<operator>!</operator><operator>!</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_seisuff_count</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>HEVC_DCR_ADD_NALS</name><argument_list>(<argument><expr><name>HEVC_NAL_VPS</name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_vps_count</name></name></expr></argument>,
<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>p_vps</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_vps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_DCR_ADD_NALS</name><argument_list>(<argument><expr><name>HEVC_NAL_SPS</name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_sps_count</name></name></expr></argument>,
<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>p_sps</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_sps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_DCR_ADD_NALS</name><argument_list>(<argument><expr><name>HEVC_NAL_PPS</name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_pps_count</name></name></expr></argument>,
<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>p_pps</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_pps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_DCR_ADD_NALS</name><argument_list>(<argument><expr><name>HEVC_NAL_PREF_SEI</name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_seipref_count</name></name></expr></argument>,
<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>p_seipref</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_seipref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_DCR_ADD_NALS</name><argument_list>(<argument><expr><name>HEVC_NAL_SUFF_SEI</name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_seisuff_count</name></name></expr></argument>,
<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>p_seisuff</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>rgi_seisuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_data</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEVC_DCR_ADD_NALS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEVC_DCR_ADD_SIZES</name></cpp:undef>





<function><type><name>int</name></type> <name>hevc_compute_picture_order_count</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>hevc_slice_segment_header_t</name> <modifier>*</modifier></type><name>p_slice</name></decl></parameter>,
<parameter><decl><type><name>hevc_poc_ctx_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>lsb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msb</name></decl>;</decl_stmt>
}</block> <decl><name>prevPicOrderCnt</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>pocMSB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>NoRaslOutputFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsIRAP</name> <init>= <expr><operator>(</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>&gt;=</operator> <name>HEVC_NAL_BLA_W_LP</name> <operator>&amp;&amp;</operator>
<name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>&lt;=</operator> <name>HEVC_NAL_IRAP_VCL23</name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>IsIRAP</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>NoRaslOutputFlag</name> <operator>=</operator><operator>(</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>first_picture</name></name> <operator>||</operator>
<name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>==</operator> <name>HEVC_NAL_IDR_N_LP</name> <operator>||</operator>
<name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>==</operator> <name>HEVC_NAL_IDR_W_RADL</name> <operator>||</operator>
<name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>==</operator> <name>HEVC_NAL_BLA_W_LP</name> <operator>||</operator>
<name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>==</operator> <name>HEVC_NAL_BLA_W_RADL</name> <operator>||</operator>
<name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>==</operator> <name>HEVC_NAL_BLA_N_LP</name> <operator>||</operator>
<name><name>p_ctx</name><operator>-&gt;</operator><name>HandleCraAsBlaFlag</name></name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>NoRaslOutputFlag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEVC_POC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"slice lsb=%"</literal><name>PRIu32</name><literal type="string">" irap=%d norasl=%d tid=%d msb=%d lsb=%d"</literal></expr></argument>,
<argument><expr><name><name>p_slice</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name></expr></argument>,
<argument><expr><name>IsIRAP</name></expr></argument>, <argument><expr><name>NoRaslOutputFlag</name></expr></argument>, <argument><expr><name><name>p_slice</name><operator>-&gt;</operator><name>temporal_id_plus1</name></name></expr></argument>,
<argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevTid0PicOrderCnt</name><operator>.</operator><name>msb</name></name></expr></argument>, <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevTid0PicOrderCnt</name><operator>.</operator><name>lsb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>==</operator> <name>HEVC_NAL_IDR_N_LP</name> <operator>||</operator>
<name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>==</operator> <name>HEVC_NAL_IDR_W_RADL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>prevPicOrderCnt</name><operator>.</operator><name>msb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prevPicOrderCnt</name><operator>.</operator><name>lsb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name>IsIRAP</name> <operator>||</operator> <operator>!</operator><name>NoRaslOutputFlag</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>prevPicOrderCnt</name><operator>.</operator><name>msb</name></name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>prevTid0PicOrderCnt</name><operator>.</operator><name>msb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prevPicOrderCnt</name><operator>.</operator><name>lsb</name></name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>prevTid0PicOrderCnt</name><operator>.</operator><name>lsb</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>IsIRAP</name> <operator>&amp;&amp;</operator> <name>NoRaslOutputFlag</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pocMSB</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>maxPocLSB</name> <init>= <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>p_sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pocMSB</name> <operator>=</operator> <name><name>prevPicOrderCnt</name><operator>.</operator><name>msb</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>orderDiff</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_slice</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name> <operator>-</operator> <name><name>prevPicOrderCnt</name><operator>.</operator><name>lsb</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>orderDiff</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>-</operator><name>orderDiff</name> <operator>&gt;=</operator> <name>maxPocLSB</name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pocMSB</name> <operator>+=</operator> <name>maxPocLSB</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>orderDiff</name> <operator>&gt;</operator> <name>maxPocLSB</name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pocMSB</name> <operator>-=</operator> <name>maxPocLSB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>temporal_id_plus1</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator> <operator>(</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>&lt;=</operator> <name>HEVC_NAL_RSV_VCL_N14</name> <operator>&amp;&amp;</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>&gt;=</operator> <name>HEVC_NAL_RADL_N</name> <operator>&amp;&amp;</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>nal_type</name></name> <operator>&lt;=</operator> <name>HEVC_NAL_RASL_R</name> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevTid0PicOrderCnt</name><operator>.</operator><name>msb</name></name> <operator>=</operator> <name>pocMSB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevTid0PicOrderCnt</name><operator>.</operator><name>lsb</name></name> <operator>=</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>first_picture</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEVC_POC_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" POC=%"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pocMSB</name> <operator>+</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>pocMSB</name> <operator>+</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>hevc_sei_pic_timing_t</name>
<block>{
<decl_stmt><decl><type><name>nal_u4_t</name></type> <name>pic_struct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nal_u2_t</name></type> <name>source_scan_type</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>hevc_release_sei_pic_timing</name><parameter_list>( <parameter><decl><type><name>hevc_sei_pic_timing_t</name> <modifier>*</modifier></type><name>p_timing</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_timing</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>hevc_sei_pic_timing_t</name> <modifier>*</modifier></type> <name>hevc_decode_sei_pic_timing</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hevc_sei_pic_timing_t</name> <modifier>*</modifier></type><name>p_timing</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_timing</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_timing</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>frame_field_info_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_timing</name><operator>-&gt;</operator><name>pic_struct</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_timing</name><operator>-&gt;</operator><name>source_scan_type</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_timing</name><operator>-&gt;</operator><name>pic_struct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_timing</name><operator>-&gt;</operator><name>source_scan_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_timing</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hevc_frame_is_progressive</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>hevc_sei_pic_timing_t</name> <modifier>*</modifier></type><name>p_timing</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>field_seq_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>hevc_inner_profile_tier_level_t</name> <modifier>*</modifier></type><name>p_profile</name> <init>= <expr><operator>&amp;</operator><name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_profile</name><operator>-&gt;</operator><name>progressive_source_flag</name></name> <operator>!=</operator> <name><name>p_profile</name><operator>-&gt;</operator><name>interlaced_source_flag</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name><name>p_profile</name><operator>-&gt;</operator><name>progressive_source_flag</name></name> <operator>&gt;</operator> <name><name>p_profile</name><operator>-&gt;</operator><name>interlaced_source_flag</name></name></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_profile</name><operator>-&gt;</operator><name>progressive_source_flag</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_timing</name> <operator>&amp;&amp;</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>frame_field_info_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_timing</name><operator>-&gt;</operator><name>source_scan_type</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_timing</name><operator>-&gt;</operator><name>source_scan_type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>hevc_get_num_clock_ts</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>hevc_sei_pic_timing_t</name> <modifier>*</modifier></type><name>p_timing</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>frame_field_info_present_flag</name></name> <operator>&amp;&amp;</operator> <name>p_timing</name> <operator>&amp;&amp;</operator> <name><name>p_timing</name><operator>-&gt;</operator><name>pic_struct</name></name> <operator>&lt;</operator> <literal type="number">13</literal></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>rgi_numclock</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>rgi_numclock</name><index>[<expr><name><name>p_timing</name><operator>-&gt;</operator><name>pic_struct</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>field_seq_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general</name><operator>.</operator><name>interlaced_source_flag</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general</name><operator>.</operator><name>progressive_source_flag</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
</unit>
