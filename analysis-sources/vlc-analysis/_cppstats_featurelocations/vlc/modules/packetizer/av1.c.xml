<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\packetizer\av1.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"av1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"av1_obu.h"</cpp:file></cpp:include>






<typedef>typedef <type><struct>struct
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_chain_last</name></decl>;</decl_stmt>
}</block> <decl><name>obus</name></decl>;</struct>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_sequence_header_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_sequence_header</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_has_visible_frame</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_chain_last</name></decl>;</decl_stmt>
}</block> <decl><name>pre</name></decl>, <name>frame</name>, <name>post</name>;</struct>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl>;</decl_stmt>
}</block> <decl><name>tu</name></decl>;</struct>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_seen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_next_block_flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>av1_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_DROP</name></cpp:macro> <cpp:value>(1 &lt;&lt; BLOCK_FLAG_PRIVATE_SHIFT)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>InitQueue</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_head</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_tail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_head</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppp_tail</name> <operator>=</operator> <name>pp_head</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>block_Differs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>||</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITQ</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InitQueue(&amp;p_sys-&gt;name.p_chain, &amp;p_sys-&gt;name.pp_chain_last)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSHQ</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{block_ChainLastAppend(&amp;p_sys-&gt;name.pp_chain_last, b);if(p_sys-&gt;tu.dts == VLC_TICK_INVALID)p_sys-&gt;tu.dts = b-&gt;i_dts; p_sys-&gt;tu.pts = b-&gt;i_pts;}</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDecoderFormat</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>av1_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_profile</name></name> <operator>&lt;</operator> <name>AV1_PROFILE_MAIN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV1_get_profile_level</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_profile</name></name> <operator>!=</operator> <name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_level</name></name> <operator>!=</operator> <name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_level</name></name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>wnum</name></decl>, <decl><type ref="prev"/><name>hden</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV1_get_frame_max_dimensions</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hden</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>||</operator>
<operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>!=</operator> <name>wnum</name> <operator>||</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>!=</operator> <name>hden</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>wnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>hden</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>||</operator>
<operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>AV1_get_frame_rate</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hden</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>!=</operator> <name>wnum</name> <operator>||</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>!=</operator> <name>hden</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name>wnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name>hden</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>video_color_primaries_t</name></type> <name>prim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_color_space_t</name></type> <name>space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_transfer_func_t</name></type> <name>xfer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_color_range_t</name></type> <name>full</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name> <operator>&amp;&amp;</operator>
<call><name>AV1_get_colorimetry</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>space</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>full</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>prim</name> <operator>!=</operator> <name>COLOR_PRIMARIES_UNDEF</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>!=</operator> <name>prim</name> <operator>||</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>!=</operator> <name>xfer</name> <operator>||</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>!=</operator> <name>space</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>prim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>xfer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>space</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name>full</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator>
<call><name>AV1_create_DecoderConfigurationRecord</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>OutputQueues</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_valid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>av1_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_output_last</name> <init>= <expr><operator>&amp;</operator><name>p_output</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>pre</name><operator>.</operator><name>p_chain</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp_output_last</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>pre</name><operator>.</operator><name>p_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>pre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>frame</name><operator>.</operator><name>p_chain</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>frame</name><operator>.</operator><name>p_chain</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp_output_last</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>frame</name><operator>.</operator><name>p_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>post</name><operator>.</operator><name>p_chain</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp_output_last</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>post</name><operator>.</operator><name>p_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>post</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_output</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>i_flags</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DROP</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>b_has_visible_frame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>p_output</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GatherAndValidateChain</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_outputchain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>av1_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_outputchain</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_AV1_PACKETIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"TU output %ld"</literal></expr></argument>, <argument><expr><name><name>p_outputchain</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_outputchain</name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>av1_obu_type_e</name></name></type> <name>OBUtype</name> <init>= <expr><call><name>AV1_OBUGetType</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>OBUtype</name> <operator>==</operator> <name>AV1_OBU_FRAME</name> <operator>||</operator> <name>OBUtype</name> <operator>==</operator> <name>AV1_OBU_FRAME_HEADER</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type><name>p_fh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>AV1_OBUIsBaseLayer</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_fh</name> <operator>=</operator> <call><name>AV1_OBU_parse_frame_header</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_fh</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>,<argument><expr><literal type="string">"OBU TYPE %d sz %ld dts %ld type %d %d"</literal></expr></argument>,
<argument><expr><name>OBUtype</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>,
<argument><expr><call><name>AV1_get_frame_type</name><argument_list>(<argument><expr><name>p_fh</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AV1_get_frame_visibility</name><argument_list>(<argument><expr><name>p_fh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AV1_release_frame_header</name><argument_list>(<argument><expr><name>p_fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"OBU TYPE %d sz %ld dts %ld"</literal></expr></argument>, <argument><expr><name>OBUtype</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name><name>p_outputchain</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DROP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <name>p_outputchain</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>block_ChainGather</name><argument_list>(<argument><expr><name>p_outputchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_output</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_output</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DROP</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name>p_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_output</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ParseOBUBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_obu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>av1_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>av1_obu_type_e</name></name></type> <name>OBUtype</name> <init>= <expr><call><name>AV1_OBUGetType</name><argument_list>(<argument><expr><name><name>p_obu</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_base_layer</name> <init>= <expr><call><name>AV1_OBUIsBaseLayer</name><argument_list>(<argument><expr><name><name>p_obu</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_obu</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>OBUtype</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AV1_OBU_SEQUENCE_HEADER</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>frame</name><operator>.</operator><name>p_chain</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>post</name><operator>.</operator><name>p_chain</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>b_base_layer</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name> <operator>||</operator>
<call><name>block_Differs</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name></expr></argument>, <argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name> <operator>=</operator> <call><name>block_Duplicate</name><argument_list>(<argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV1_release_sequence_header</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name> <operator>=</operator> <call><name>AV1_OBU_parse_sequence_header</name><argument_list>(<argument><expr><name><name>p_obu</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_obu</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PUSHQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>pre</name></name></expr></argument>, <argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>

<case>case <expr><name>AV1_OBU_TEMPORAL_DELIMITER</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSHQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>pre</name></name></expr></argument>, <argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>

<case>case <expr><name>AV1_OBU_FRAME</name></expr>:</case>
<case>case <expr><name>AV1_OBU_FRAME_HEADER</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>b_base_layer</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type><name>p_fh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_fh</name> <operator>=</operator> <call><name>AV1_OBU_parse_frame_header</name><argument_list>(<argument><expr><name><name>p_obu</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_obu</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_fh</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_seen</name></name> <operator>&amp;</operator> <name>AV1_OBU_TEMPORAL_DELIMITER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>b_has_visible_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>AV1_get_frame_type</name><argument_list>(<argument><expr><name>p_fh</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AV1_FRAME_TYPE_KEY</name></expr>:</case>
<case>case <expr><name>AV1_FRAME_TYPE_INTRA_ONLY</name></expr>:</case>
<expr_stmt><expr><name><name>p_obu</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV1_FRAME_TYPE_INTER</name></expr>:</case>
<expr_stmt><expr><name><name>p_obu</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>b_has_visible_frame</name></name> <operator>|=</operator> <call><name>AV1_get_frame_visibility</name><argument_list>(<argument><expr><name>p_fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV1_release_frame_header</name><argument_list>(<argument><expr><name>p_fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"could not parse frame header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_output</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>post</name><operator>.</operator><name>p_chain</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PUSHQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>frame</name></name></expr></argument>, <argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>

<case>case <expr><name>AV1_OBU_METADATA</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>frame</name><operator>.</operator><name>p_chain</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>post</name><operator>.</operator><name>p_chain</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PUSHQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>pre</name></name></expr></argument>, <argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <break>break;</break>

<case>case <expr><name>AV1_OBU_TILE_GROUP</name></expr>:</case>
<case>case <expr><name>AV1_OBU_TILE_LIST</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>post</name><operator>.</operator><name>p_chain</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PUSHQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>frame</name></name></expr></argument>, <argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AV1_OBU_REDUNDANT_FRAME_HEADER</name></expr>:</case>
<case>case <expr><name>AV1_OBU_PADDING</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>b_base_layer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seen</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>OBUtype</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_output</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeFlush</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>av1_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AV1_release_sequence_header</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>obus</name><operator>.</operator><name>p_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name>obus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>b_has_visible_frame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeOBU</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>av1_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><ternary><condition><expr><name>pp_block</name></expr> ?</condition><then> <expr><operator>*</operator><name>pp_block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>p_block</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name> <operator>|</operator> <name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_drain</name> <init>= <expr><call><name>PacketizeOBU</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>p_drain</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_drain</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PacketizeFlush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>AV1_OBUIsValid</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>,<argument><expr><literal type="string">"fed with invalid OBU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>obus</name><operator>.</operator><name>pp_chain_last</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>obus</name><operator>.</operator><name>p_chain</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>obus</name><operator>.</operator><name>p_chain</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1_OBU_iterator_ctx_t</name></type> <name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV1_OBU_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_obu</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>i_obu</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>AV1_OBU_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_obu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_obu</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>,<argument><expr><literal type="string">"Invalid OBU header in sequence, discarding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>obus</name><operator>.</operator><name>p_chain</name></name> <operator>=</operator> <name><name>p_frag</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>obus</name><operator>.</operator><name>pp_chain_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>obus</name><operator>.</operator><name>p_chain</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_obublock</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_obu</name> <operator>==</operator> <name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>obus</name><operator>.</operator><name>p_chain</name></name> <operator>=</operator> <name><name>p_frag</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>obus</name><operator>.</operator><name>pp_chain_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>obus</name><operator>.</operator><name>p_chain</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p_obublock</name> <operator>=</operator> <name>p_frag</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p_obublock</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name>i_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_obublock</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_obu</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_obu</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_obublock</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_frag</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_obublock</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_frag</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_obublock</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>ParseOBUBlock</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_obublock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_output</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_output</name> <operator>&amp;&amp;</operator> <name>pp_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_output</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>GatherAndValidateChain</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateDecoderFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_output</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>av1_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PacketizeFlush</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>av1_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_AV1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>av1_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name>obus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sequence_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>b_has_visible_frame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>pre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name><name>tu</name><operator>.</operator><name>post</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>PacketizeOBU</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>PacketizeFlush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_SOUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_SOUT_PACKETIZER</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"AV1 video packetizer"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>
</unit>
