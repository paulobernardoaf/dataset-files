<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\packetizer\h264_nal.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_nal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_nal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_ep3b.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iso_color_tables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_boxes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_max_dpb_mbs</name></decl>;</decl_stmt>
}</block></struct></type> <name>h264_level_limits_t</name>;</typedef>

<enum>enum <name>h264_level_numbers_e</name>
<block>{
<decl><name>H264_LEVEL_NUMBER_1_B</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 
<decl><name>H264_LEVEL_NUMBER_1</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_1_1</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_1_2</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_1_3</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_2</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_2_1</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_2_2</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_3</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_3_1</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_3_2</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_4</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_4_1</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_4_2</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_5</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_5_1</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_5_2</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_6</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_6_1</name> <init>= <expr><literal type="number">61</literal></expr></init></decl>,
<decl><name>H264_LEVEL_NUMBER_6_2</name> <init>= <expr><literal type="number">62</literal></expr></init></decl>,
}</block>;</enum>

<struct><specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>h264_level_limits_t</name></type> <name>limits</name></decl>;</decl_stmt>
}</block> <decl><name><name>h264_levels_limits</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_1_B</name></expr>, <expr><block>{ <expr><literal type="number">396</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_1</name></expr>, <expr><block>{ <expr><literal type="number">396</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_1_1</name></expr>, <expr><block>{ <expr><literal type="number">900</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_1_2</name></expr>, <expr><block>{ <expr><literal type="number">2376</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_1_3</name></expr>, <expr><block>{ <expr><literal type="number">2376</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_2</name></expr>, <expr><block>{ <expr><literal type="number">2376</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_2_1</name></expr>, <expr><block>{ <expr><literal type="number">4752</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_2_2</name></expr>, <expr><block>{ <expr><literal type="number">8100</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_3</name></expr>, <expr><block>{ <expr><literal type="number">8100</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_3_1</name></expr>, <expr><block>{ <expr><literal type="number">18000</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_3_2</name></expr>, <expr><block>{ <expr><literal type="number">20480</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_4</name></expr>, <expr><block>{ <expr><literal type="number">32768</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_4_1</name></expr>, <expr><block>{ <expr><literal type="number">32768</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_4_2</name></expr>, <expr><block>{ <expr><literal type="number">34816</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_5</name></expr>, <expr><block>{ <expr><literal type="number">110400</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_5_1</name></expr>, <expr><block>{ <expr><literal type="number">184320</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_5_2</name></expr>, <expr><block>{ <expr><literal type="number">184320</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_6</name></expr>, <expr><block>{ <expr><literal type="number">696320</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_6_1</name></expr>, <expr><block>{ <expr><literal type="number">696320</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>H264_LEVEL_NUMBER_6_2</name></expr>, <expr><block>{ <expr><literal type="number">696320</literal></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>






<function><type><name>bool</name></type> <name>h264_isavcC</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator> <name>i_buf</name> <operator>&gt;=</operator> <name>H264_MIN_AVCC_SIZE</name> <operator>&amp;&amp;</operator>
<name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator>
<name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal>




<operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>get_avcC_to_AnnexB_NAL_size</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_buf</name> <operator>&lt;</operator> <name>H264_MIN_AVCC_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_loop_end</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><ternary><condition><expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x1f</literal></expr> </then><else>: <expr><literal type="number">0xff</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_buf</name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_loop_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_buf</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_nal_size</name> <init>= <expr><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_nal_size</name> <operator>&gt;</operator> <name>i_buf</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_total</name> <operator>+=</operator> <name>i_nal_size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>i_nal_size</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <name>i_nal_size</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_buf</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i_total</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>h264_avcC_to_AnnexB_NAL</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_result</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_nal_length_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_result</name> <operator>=</operator> <call><name>get_avcC_to_AnnexB_NAL_size</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_result</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name>pi_nal_length_size</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_nal_length_size</name> <operator>=</operator> <operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out_buf</name> <init>= <expr><name>p_ret</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><operator>*</operator><name>pi_result</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out_buf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_loop_end</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><ternary><condition><expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x1f</literal></expr> </then><else>: <expr><literal type="number">0xff</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_buf</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_loop_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_nal_size</name> <init>= <expr><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out_buf</name></expr></argument>, <argument><expr><name>annexb_startcode4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out_buf</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_nal_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_buf</name> <operator>+=</operator> <name>i_nal_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>i_nal_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>p_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>h264_AVC_to_AnnexB</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_len</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nal_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>nal_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_nal_length_size</name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<while>while<condition>( <expr><name>i_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>nal_pos</name> <operator>&lt;</operator> <name>i_nal_length_size</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nal_pos</name> <operator>&lt;</operator> <name>i_nal_length_size</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>i_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>nal_pos</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<expr_stmt><expr><name>nal_len</name> <operator>=</operator> <operator>(</operator><name>nal_len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>nal_pos</name> <operator>&lt;</operator> <name>i_nal_length_size</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_buf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>nal_len</name> <operator>&gt;</operator> <name>INT_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>nal_len</name> <operator>&gt;</operator> <name>i_len</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>nal_len</name> <operator>-=</operator> <name>i_len</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>nal_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>-=</operator> <name>nal_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nal_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nal_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>h264_AnnexB_get_spspps</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_sps</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_sps_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pps</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_pps_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_ext</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_ext_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>pp_sps</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>p_sps_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>pp_sps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>pp_pps</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>p_pps_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>pp_pps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>pp_ext</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>p_ext_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>pp_ext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
<while>while<condition>( <expr><call><name>hxxx_annexb_iterate_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_nal</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>h264_nal_unit_type_e</name></name></type> <name>i_nal_type</name> <init>= <expr><name><name>p_nal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_nal_type</name> <operator>&lt;=</operator> <name>H264_NAL_SLICE_IDR</name> <operator>&amp;&amp;</operator> <name>i_nal_type</name> <operator>!=</operator> <name>H264_NAL_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFSET_NAL</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if( i_nal_type == type &amp;&amp; pp_##var &amp;&amp; *pp_##var == NULL ){ *pp_##var = p_nal; *p_##var##_size = i_nal; }</cpp:value></cpp:define>



<macro><name>IFSET_NAL</name><argument_list>(<argument>H264_NAL_SPS</argument>, <argument>sps</argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content>
<macro><name>IFSET_NAL</name><argument_list>(<argument>H264_NAL_PPS</argument>, <argument>pps</argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IFSET_NAL</name><argument_list>(<argument><expr><name>H264_NAL_SPS_EXT</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IFSET_NAL</name></cpp:undef>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>pp_sps</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sps_size</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pp_pps</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_pps_size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>h264_release_sps</name><parameter_list>( <parameter><decl><type><name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_CONSTRAINT_SET_FLAG</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0x80 &gt;&gt; N)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>h264_parse_sequence_parameter_set_rbsp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>,
<parameter><decl><type><name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_profile_idc</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_profile</name></name> <operator>=</operator> <name>i_profile_idc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_constraint_set_flags</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_level</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sps_id</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_sps_id</name> <operator>&gt;</operator> <name>H264_SPS_ID_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i_sps_id</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_HIGH</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_HIGH_10</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_HIGH_422</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_HIGH_444</name> <operator>||</operator> 
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_HIGH_444_PREDICTIVE</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_CAVLC_INTRA</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_SVC_BASELINE</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_SVC_HIGH</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_MVC_MULTIVIEW_HIGH</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_MVC_STEREO_HIGH</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_MVC_MULTIVIEW_DEPTH_HIGH</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_MVC_ENHANCED_MULTIVIEW_DEPTH_HIGH</name> <operator>||</operator>
<name>i_profile_idc</name> <operator>==</operator> <name>PROFILE_H264_MFC_HIGH</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_chroma_idc</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_chroma_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>b_separate_colour_planes_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>b_separate_colour_planes_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_bit_depth_luma</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_bit_depth_chroma</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tmp</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><literal type="number">3</literal> <operator>!=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>i_chroma_idc</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_tmp</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_size_of_scaling_list</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_lastscale</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_nextscale</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_size_of_scaling_list</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_nextscale</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_nextscale</name> <operator>=</operator> <operator>(</operator> <name>i_lastscale</name> <operator>+</operator> <name>i_tmp</name> <operator>+</operator> <literal type="number">256</literal> <operator>)</operator> <operator>%</operator> <literal type="number">256</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_lastscale</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i_nextscale</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><name>i_lastscale</name></expr> </then><else>: <expr><name>i_nextscale</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_chroma_idc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_bit_depth_luma</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_bit_depth_chroma</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_frame_num</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_frame_num</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_frame_num</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_pic_order_cnt_lsb</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_pic_order_cnt_lsb</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_pic_order_cnt_lsb</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_delta_pic_order_always_zero_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>offset_for_non_ref_pic</name></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>offset_for_top_to_bottom_field</name></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_num_ref_frames_in_pic_order_cnt_cycle</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_num_ref_frames_in_pic_order_cnt_cycle</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sps</name><operator>-&gt;</operator><name>i_num_ref_frames_in_pic_order_cnt_cycle</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>offset_for_ref_frame</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>pic_width_in_mbs_minus1</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>pic_height_in_map_units_minus1</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>mb_adaptive_frame_field_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>frame_crop</name><operator>.</operator><name>left_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>frame_crop</name><operator>.</operator><name>right_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>frame_crop</name><operator>.</operator><name>top_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>frame_crop</name><operator>.</operator><name>bottom_offset</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tmp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tmp</name></expr> )</condition>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt> }</block> <decl><name><name>sar</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">160</literal></expr>,<expr><literal type="number">99</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i_sar</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sar</name> <operator>&lt;</operator> <literal type="number">17</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>sar</name><index>[<expr><name>i_sar</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>sar</name><index>[<expr><name>i_sar</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_sar</name> <operator>==</operator> <literal type="number">255</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>w</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_tmp</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tmp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>b_full_range</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_tmp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>i_colour_primaries</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>i_transfer_characteristics</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>i_matrix_coefficients</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>i_colour_primaries</name></name> <operator>=</operator> <name>ISO_23001_8_CP_UNSPECIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>i_transfer_characteristics</name></name> <operator>=</operator> <name>ISO_23001_8_TC_UNSPECIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>i_matrix_coefficients</name></name> <operator>=</operator> <name>ISO_23001_8_MC_UNSPECIFIED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tmp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_timing_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_timing_info_present_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_num_units_in_tick</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_time_scale</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_fixed_frame_rate</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_hrd_parameters_present_flag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tmp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_hrd_parameters_present_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>count</name> <operator>&gt;</operator> <literal type="number">31</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">23</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_cpb_removal_delay_length_minus1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_dpb_output_delay_length_minus1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_hrd_parameters_present_flag</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_pic_struct_present_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_bitstream_restriction_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_bitstream_restriction_flag</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_max_num_reorder_frames</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>h264_release_pps</name><parameter_list>( <parameter><decl><type><name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_pps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>h264_parse_picture_parameter_set_rbsp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>,
<parameter><decl><type><name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_pps_id</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sps_id</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>( <expr><name>i_pps_id</name> <operator>&gt;</operator> <name>H264_PPS_ID_MAX</name> <operator>||</operator> <name>i_sps_id</name> <operator>&gt;</operator> <name>H264_SPS_ID_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i_pps_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_sps_id</name></name> <operator>=</operator> <name>i_sps_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_pic_order_present_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>num_slice_groups</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>num_slice_groups</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>num_slice_groups</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>slice_group_map_type</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>slice_group_map_type</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_slice_groups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>slice_group_map_type</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_slice_groups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>slice_group_map_type</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>slice_group_map_type</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_read1</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>slice_group_map_type</name> <operator>==</operator> <literal type="number">6</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pic_size_in_maps_units</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sliceGroupSize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>num_slice_groups</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sliceGroupSize</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>num_slice_groups</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>num_slice_groups</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pic_size_in_maps_units</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name>sliceGroupSize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read_se</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_redundant_pic_present_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_h264_generic_decode</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>h264type</name></type></parameter>, <parameter><type><name>decode</name></type></parameter>, <parameter><type><name>release</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>h264type * name( const uint8_t *p_buf, size_t i_buf, bool b_escaped ) { h264type *p_h264type = calloc(1, sizeof(h264type)); if(likely(p_h264type)) { bs_t bs; struct hxxx_bsfw_ep3b_ctx_s bsctx; if( b_escaped ) { hxxx_bsfw_ep3b_ctx_init( &amp;bsctx ); bs_init_custom( &amp;bs, p_buf, i_buf, &amp;hxxx_bsfw_ep3b_callbacks, &amp;bsctx );} else bs_init( &amp;bs, p_buf, i_buf ); bs_skip( &amp;bs, 8 ); if( !decode( &amp;bs, p_h264type ) ) { release( p_h264type ); p_h264type = NULL; } } return p_h264type; }</cpp:value></cpp:define>























<macro><name>IMPL_h264_generic_decode</name><argument_list>( <argument>h264_decode_sps</argument>, <argument>h264_sequence_parameter_set_t</argument>,
<argument>h264_parse_sequence_parameter_set_rbsp</argument>, <argument>h264_release_sps</argument> )</argument_list></macro>

<macro><name>IMPL_h264_generic_decode</name><argument_list>( <argument>h264_decode_pps</argument>, <argument>h264_picture_parameter_set_t</argument>,
<argument>h264_parse_picture_parameter_set_rbsp</argument>, <argument>h264_release_pps</argument> )</argument_list></macro>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>h264_NAL_to_avcC</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_sps_buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>p_sps_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_sps_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pps_buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>p_pps_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_pps_count</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_nal_length_size</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_nal_length_size</name> <operator>!=</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <name>i_nal_length_size</name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_sps_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_sps_count</name> <operator>&gt;</operator> <name>H264_SPS_ID_MAX</name> <operator>||</operator> <name>i_pps_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_spspps_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_sps_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pp_sps_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p_sps_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>p_sps_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_spspps_size</name> <operator>+=</operator> <name><name>p_sps_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
</block_content>}</block></for>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_pps_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pp_pps_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p_pps_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pps_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_spspps_size</name> <operator>+=</operator> <name><name>p_pps_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>bo_t</name></type> <name>bo</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>+</operator> <name>i_spspps_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>true</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pp_sps_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0xfc</literal> <operator>|</operator> <operator>(</operator><name>i_nal_length_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0xe0</literal> <operator>|</operator> <name>i_sps_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_sps_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sps_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sps_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pp_sps_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_pps_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_pps_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_pps_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_pps_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pp_pps_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name><name>bo</name><operator>.</operator><name>b</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>h264_level_limits_t</name> <modifier>*</modifier></type> <name>h264_get_level_limits</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_level_number</name> <init>= <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_level</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_level_number</name> <operator>==</operator> <name>H264_LEVEL_NUMBER_1_1</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_sps</name><operator>-&gt;</operator><name>i_constraint_set_flags</name></name> <operator>&amp;</operator> <call><name>H264_CONSTRAINT_SET_FLAG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_level_number</name> <operator>=</operator> <name>H264_LEVEL_NUMBER_1_B</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>h264_levels_limits</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>h264_levels_limits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_level</name> <operator>==</operator> <name>i_level_number</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator> <name><name>h264_levels_limits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>limits</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>h264_get_max_dpb_frames</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>h264_level_limits_t</name> <modifier>*</modifier></type><name>limits</name> <init>= <expr><call><name>h264_get_level_limits</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>limits</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frame_height_in_mbs</name> <init>= <expr><operator>(</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>pic_height_in_map_units_minus1</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator>
<operator>(</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_den</name> <init>= <expr><operator>(</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>pic_width_in_mbs_minus1</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name>i_frame_height_in_mbs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_max_dpb_frames</name> <init>= <expr><name><name>limits</name><operator>-&gt;</operator><name>i_max_dpb_mbs</name></name> <operator>/</operator> <name>i_den</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_max_dpb_frames</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_max_dpb_frames</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>h264_get_dpb_values</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_depth</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_delay</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_max_num_reorder_frames</name> <init>= <expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_max_num_reorder_frames</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_bitstream_restriction_flag</name></name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_profile</name></name></expr> )</condition> 
<block>{<block_content>
<case>case <expr><name>PROFILE_H264_BASELINE</name></expr>:</case>
<expr_stmt><expr><name>i_max_num_reorder_frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>PROFILE_H264_CAVLC_INTRA</name></expr>:</case>
<case>case <expr><name>PROFILE_H264_SVC_HIGH</name></expr>:</case>
<case>case <expr><name>PROFILE_H264_HIGH</name></expr>:</case>
<case>case <expr><name>PROFILE_H264_HIGH_10</name></expr>:</case>
<case>case <expr><name>PROFILE_H264_HIGH_422</name></expr>:</case>
<case>case <expr><name>PROFILE_H264_HIGH_444_PREDICTIVE</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_constraint_set_flags</name></name> <operator>&amp;</operator> <call><name>H264_CONSTRAINT_SET_FLAG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_max_num_reorder_frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>

<default>default:</default>
<expr_stmt><expr><name>i_max_num_reorder_frames</name> <operator>=</operator> <call><name>h264_get_max_dpb_frames</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_depth</name> <operator>=</operator> <name>i_max_num_reorder_frames</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>h264_get_picture_size</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_h</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_vw</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_vh</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>CropUnitX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>CropUnitY</name> <init>= <expr><literal type="number">2</literal> <operator>-</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>b_separate_colour_planes_flag</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_chroma_idc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>SubWidthC</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>SubHeightC</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_chroma_idc</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>SubHeightC</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_chroma_idc</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SubWidthC</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>CropUnitX</name> <operator>*=</operator> <name>SubWidthC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CropUnitY</name> <operator>*=</operator> <name>SubHeightC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_w</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>pic_width_in_mbs_minus1</name></name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_h</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>pic_height_in_map_units_minus1</name></name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_h</name> <operator>*=</operator> <operator>(</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_vw</name> <operator>=</operator> <operator>*</operator><name>p_w</name> <operator>-</operator> <operator>(</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>frame_crop</name><operator>.</operator><name>left_offset</name></name> <operator>+</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>frame_crop</name><operator>.</operator><name>right_offset</name></name> <operator>)</operator> <operator>*</operator> <name>CropUnitX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_vh</name> <operator>=</operator> <operator>*</operator><name>p_h</name> <operator>-</operator> <operator>(</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>frame_crop</name><operator>.</operator><name>bottom_offset</name></name> <operator>+</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>frame_crop</name><operator>.</operator><name>top_offset</name></name> <operator>)</operator> <operator>*</operator> <name>CropUnitY</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>h264_get_chroma_luma</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_chroma_format</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_depth_luma</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_depth_chroma</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_chroma_format</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>i_chroma_idc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_depth_luma</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>i_bit_depth_luma</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_depth_chroma</name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>i_bit_depth_chroma</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>h264_get_colorimetry</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,
<parameter><decl><type><name>video_color_primaries_t</name> <modifier>*</modifier></type><name>p_primaries</name></decl></parameter>,
<parameter><decl><type><name>video_transfer_func_t</name> <modifier>*</modifier></type><name>p_transfer</name></decl></parameter>,
<parameter><decl><type><name>video_color_space_t</name> <modifier>*</modifier></type><name>p_colorspace</name></decl></parameter>,
<parameter><decl><type><name>video_color_range_t</name> <modifier>*</modifier></type><name>p_full_range</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_valid</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p_primaries</name> <operator>=</operator>
<call><name>iso_23001_8_cp_to_vlc_primaries</name><argument_list>( <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>i_colour_primaries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_transfer</name> <operator>=</operator>
<call><name>iso_23001_8_tc_to_vlc_xfer</name><argument_list>( <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>i_transfer_characteristics</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_colorspace</name> <operator>=</operator>
<call><name>iso_23001_8_mc_to_vlc_coeffs</name><argument_list>( <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>i_matrix_coefficients</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_full_range</name> <operator>=</operator> <ternary><condition><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour</name><operator>.</operator><name>b_full_range</name></name></expr> ?</condition><then> <expr><name>COLOR_RANGE_FULL</name></expr> </then><else>: <expr><name>COLOR_RANGE_LIMITED</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>h264_get_profile_level</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_profile</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_level</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_nal_length_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pi_nal_length_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_nal_length_size</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>p</name><operator>++</operator><operator>)</operator><operator>&amp;</operator><literal type="number">0x1f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pi_profile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_profile</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pi_level</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_level</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
