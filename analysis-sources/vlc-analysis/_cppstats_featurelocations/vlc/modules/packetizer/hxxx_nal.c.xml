<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\packetizer\hxxx_nal.c">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>block_WillRealloc</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>i_prebody</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_body</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_prebody</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_body</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>-</operator><name>i_prebody</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator> <name>i_prebody</name> <operator>+</operator> <name>i_body</name> <operator>&lt;=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_size</name></name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hxxx_WritePrefix</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_payload</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_nal_length_size</name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name>p_dest</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>i_nal_length_size</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name>p_dest</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name> <operator>=</operator> <name>i_payload</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>hxxx_AnnexB_to_xVC</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_nalcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_list</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>nalmoves_e</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>prefix</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>off_t</name></type> <name>move</name></decl>;</decl_stmt> 
}</block> <decl><modifier>*</modifier><name>p_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</struct>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>||</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator> <operator>(</operator><name>p_list</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_list</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bitflow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>i_move</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_buf</name> <operator>!=</operator> <name>p_end</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_bitflow</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>p_buf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_bitflow</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>*</operator><name>p_buf</name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_bitflow</name> <operator>&amp;</operator> <literal type="number">0x06</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x06</literal></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_bitflow</name> <operator>&amp;</operator> <literal type="number">0x08</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>p_list</name><index>[<expr><name>i_nalcount</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_buf</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_list</name><index>[<expr><name>i_nalcount</name></expr>]</index></name><operator>.</operator><name>prefix</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name><name>p_list</name><index>[<expr><name>i_nalcount</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_buf</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_list</name><index>[<expr><name>i_nalcount</name></expr>]</index></name><operator>.</operator><name>prefix</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>i_move</name> <operator>+=</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name>i_nal_length_size</name> <operator>-</operator> <name><name>p_list</name><index>[<expr><name>i_nalcount</name></expr>]</index></name><operator>.</operator><name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_list</name><index>[<expr><name>i_nalcount</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>move</name> <operator>=</operator> <name>i_move</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>i_nalcount</name> <operator>==</operator> <name>i_list</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_list</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nalmoves_e</name></name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name>p_list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_new</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_list</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_new</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_list</name> <operator>=</operator> <name>p_new</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_buf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_nalcount</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_nalcount</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>block_WillRealloc</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name><name>p_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>move</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_payload</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prefix</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_newblock</name> <init>= <expr><call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name><name>p_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>move</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_newblock</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>p_newblock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hxxx_WritePrefix</name><argument_list>( <argument><expr><name>i_nal_length_size</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> , <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_release</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_source</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_sourceend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_dest</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name><name>p_list</name><index>[<expr><name>i_nalcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>move</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_list</name><index>[<expr><name>i_nalcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>move</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_nal_length_size</name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition> 
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_list</name><index>[<expr><name>i_nalcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>move</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>block_WillRealloc</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_dest</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sizebackup</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_newblock</name> <init>= <expr><call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_dest</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_newblock</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>p_newblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sourceend</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_sizebackup</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_source</name> <operator>=</operator> <name>p_dest</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_newblock</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_dest</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_newblock</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_release</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_source</name> <operator>=</operator> <name><name>p_release</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sourceend</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_release</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_release</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>p_newblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dest</name> <operator>=</operator> <name><name>p_newblock</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p_source</name> <operator>=</operator> <name>p_dest</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sourceend</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_dest</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><name>i_nalcount</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_readstart</name> <init>= <expr><name><name>p_list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_payload</name> <init>= <expr><name>p_sourceend</name> <operator>-</operator> <name>p_readstart</name> <operator>-</operator> <name><name>p_list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prefix</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name> <init>= <expr><name><name>p_list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p</name> <operator>-</operator> <name>p_source</name> <operator>+</operator> <name><name>p_list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prefix</name> <operator>+</operator> <name><name>p_list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>move</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dest</name><index>[ <expr><name>offset</name></expr> ]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p</name><index>[ <expr><name><name>p_list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prefix</name></expr> ]</index></name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hxxx_WritePrefix</name><argument_list>( <argument><expr><name>i_nal_length_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dest</name><index>[ <expr><name>offset</name> <operator>-</operator> <name>i_nal_length_size</name></expr> ]</index></name></expr></argument> , <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sourceend</name> <operator>=</operator> <name>p_readstart</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_release</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_release</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_block</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
