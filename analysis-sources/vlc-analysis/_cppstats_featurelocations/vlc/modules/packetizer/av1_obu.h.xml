<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\packetizer\av1_obu.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_AV1_OBU_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_AV1_OBU_H</name></cpp:macro></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>leb128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>i_buf</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_val</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_len</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>pi_len</name></expr> ?</condition><then> <expr><name>i_val</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>av1_obu_type_e</name>
<block>{
<decl><name>AV1_OBU_RESERVED_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>AV1_OBU_SEQUENCE_HEADER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>AV1_OBU_TEMPORAL_DELIMITER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>AV1_OBU_FRAME_HEADER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>AV1_OBU_TILE_GROUP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>AV1_OBU_METADATA</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>AV1_OBU_FRAME</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>AV1_OBU_REDUNDANT_FRAME_HEADER</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>AV1_OBU_TILE_LIST</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>AV1_OBU_RESERVED_START_9</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>AV1_OBU_RESERVED_END_14</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>AV1_OBU_PADDING</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>av1_obu_type_e</name></name></type> <name>AV1_OBUGetType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>enum <name>av1_obu_type_e</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AV1_OBUHasSizeField</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AV1_OBUHasExtensionField</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AV1_OBUIsValid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>i_buf</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x81</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AV1_OBUIsBaseLayer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>AV1_OBUHasExtensionField</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>i_buf</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>AV1_OBUSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>AV1_OBUHasSizeField</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>AV1_OBUHasExtensionField</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i_buf</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>i_buf</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>AV1_OBUHasExtensionField</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>AV1_OBUHasExtensionField</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_buf</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name> <init>= <expr><call><name>leb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_buf</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pi_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_size</name> <operator>&gt;</operator> <operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>AV1_OBUSkipHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pi_buf</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_header</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><call><name>AV1_OBUHasExtensionField</name><argument_list>(<argument><expr><operator>*</operator><name>pp_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>AV1_OBUHasSizeField</name><argument_list>(<argument><expr><operator>*</operator><name>pp_buf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_len</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>AV1_OBUSize</name><argument_list>(<argument><expr><operator>*</operator><name>pp_buf</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_header</name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>i_header</name> <operator>&gt;</operator> <operator>*</operator><name>pi_buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_buf</name> <operator>+=</operator> <name>i_header</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_buf</name> <operator>-=</operator> <name>i_header</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<enum>enum <name>av1_obu_metadata_type_e</name>
<block>{
<decl><name>AV1_METADATA_TYPE_RESERVED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>AV1_METADATA_TYPE_HDR_CLL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>AV1_METADATA_TYPE_HDR_MDCV</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>AV1_METADATA_TYPE_SCALABILITY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>AV1_METADATA_TYPE_ITUT_T35</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>AV1_METADATA_TYPE_TIMECODE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>AV1_METADATA_TYPE_USER_PRIVATE_START_6</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>AV1_METADATA_TYPE_USER_PRIVATE_END_31</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,
<decl><name>AV1_METADATA_TYPE_RESERVED_START_32</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>av1_obu_metadata_type_e</name></name></type>
<name>AV1_OBUGetMetadataType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>AV1_OBUSkipHeader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buf</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>i_buf</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV1_METADATA_TYPE_RESERVED</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_type</name> <init>= <expr><call><name>leb128</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_type</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV1_METADATA_TYPE_RESERVED</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator>enum <name>av1_obu_metadata_type_e</name><operator>)</operator> <name>i_type</name></expr>;</return>
</block_content>}</block></function>




<typedef>typedef <type><name><name>struct</name> <name>av1_OBU_sequence_header_t</name></name></type> <name>av1_OBU_sequence_header_t</name>;</typedef>
<function_decl><type><name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type> <name>AV1_OBU_parse_sequence_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AV1_release_sequence_header</name><parameter_list>(<parameter><decl><type><name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AV1_get_frame_max_dimensions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AV1_get_profile_level</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>AV1_get_colorimetry</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>video_color_primaries_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>video_transfer_func_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>video_color_space_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>video_color_range_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>AV1_get_frame_rate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><name><name>struct</name> <name>av1_OBU_frame_header_t</name></name></type> <name>av1_OBU_frame_header_t</name>;</typedef>
<enum>enum <name>av1_frame_type_e</name>
<block>{
<decl><name>AV1_FRAME_TYPE_KEY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>AV1_FRAME_TYPE_INTER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>AV1_FRAME_TYPE_INTRA_ONLY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>AV1_FRAME_TYPE_SWITCH</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>

<function_decl><type><name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type> <name>AV1_OBU_parse_frame_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AV1_release_frame_header</name><parameter_list>(<parameter><decl><type><name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>enum</name> <name>av1_frame_type_e</name></name></type> <name>AV1_get_frame_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>AV1_get_frame_visibility</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>size_t</name></type> <name>AV1_create_DecoderConfigurationRecord</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>uint8_t</name> <modifier>*</modifier><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>size_t</name> <index>[]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tail</name></decl>;</decl_stmt>
}</block></struct></type> <name>AV1_OBU_iterator_ctx_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>AV1_OBU_iterator_init</name><parameter_list>(<parameter><decl><type><name>AV1_OBU_iterator_ctx_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>=</operator> <name>p_data</name> <operator>+</operator> <name>i_data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AV1_OBU_iterate_next</name><parameter_list>(<parameter><decl><type><name>AV1_OBU_iterator_ctx_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_start</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_remain</name> <init>= <expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>-</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>AV1_OBUIsValid</name><argument_list>(<argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr></argument>, <argument><expr><name>i_remain</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>AV1_OBUHasSizeField</name><argument_list>(<argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_start</name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>i_remain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_tail</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_obu_size_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_obu_size</name> <init>= <expr><call><name>AV1_OBUSize</name><argument_list>(<argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr></argument>, <argument><expr><name>i_remain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_obu_size_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_obu</name> <init>= <expr><name>i_obu_size</name> <operator>+</operator> <name>i_obu_size_len</name> <operator>+</operator> <operator>!</operator><operator>!</operator><call><name>AV1_OBUHasExtensionField</name><argument_list>(<argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_obu_size_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_obu</name> <operator>&gt;</operator> <name>i_remain</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>i_obu</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_start</name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name> <operator>+=</operator> <name>i_obu</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
