<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\control\rc.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PF_UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PF_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_LOCAL</name></cpp:macro> <cpp:value>PF_UNIX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINE_LENGTH</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_CHANGE</name></cpp:macro> <cpp:value>"status change: "</cpp:value></cpp:define>

<struct>struct <name>intf_sys_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_listener_id</name> <modifier>*</modifier></type><name>player_listener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_aout_listener_id</name> <modifier>*</modifier></type><name>player_aout_listener</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>status_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>last_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_input_buffering</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_unix_path</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hConsoleIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_quiet</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_socket_listen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_socket</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>VLC_FORMAT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_print</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fmt_eol</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>psz_fmt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>fmt_eol</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fmt_eol</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vasprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>fmt_eol</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>utf8_fprintf</name><argument_list>( <argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vlc_write</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>net_Write</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>msg_rc</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>msg_print(p_intf, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intromsg.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <name>input_item_t</name> <modifier>*</modifier></type><name>parse_MRL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mrl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIPSPACE</name><parameter_list>( <parameter><type><name>p</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ while( *p == ' ' || *p == '\t' ) p++; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIPTRAILINGSPACE</name><parameter_list>( <parameter><type><name>p</name></type></parameter>, <parameter><type><name>d</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ char *e = d; while (e &gt; p &amp;&amp; (*(e-1)==' ' || *(e-1)=='\t')) {e--; *e=0 ;} }</cpp:value></cpp:define>


<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_item</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_item_mrl</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_orig</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_mrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mrl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_mrl</name> <operator>=</operator> <name>psz_orig</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_mrl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>psz_mrl</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SKIPSPACE</name><argument_list>(<argument><expr><name>psz_mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_item</name> <operator>=</operator> <name>psz_mrl</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>psz_mrl</name></expr>;</condition> <incr><expr><name>psz_mrl</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>psz_mrl</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>psz_mrl</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>psz_mrl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>psz_mrl</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>psz_mrl</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>psz_mrl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name><name>psz_mrl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>psz_mrl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psz_mrl</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz_mrl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_mrl</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SKIPTRAILINGSPACE</name><argument_list>(<argument><expr><name>psz_item</name></expr></argument>, <argument><expr><name>psz_item</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psz_item</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name><name>psz_item</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_item</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_item</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_item</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_item</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psz_item</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <name><name>psz_item</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_item</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_item</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_item</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_item</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_item_mrl</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_item</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_item_mrl</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_item_mrl</name> <operator>=</operator> <call><name>vlc_path2uri</name><argument_list>(<argument><expr><name>psz_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_item_mrl</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>psz_item</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_options</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ppsz_options</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>ppsz_options</name></expr></argument>, <argument><expr><name>i_options</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppsz_options</name><index>[<expr><name>i_options</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>psz_item</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psz_mrl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SKIPSPACE</name><argument_list>(<argument><expr><name>psz_mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>psz_item_mrl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_item</name> <operator>=</operator> <call><name>input_item_New</name><argument_list>(<argument><expr><name>psz_item_mrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_options</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>, <argument><expr><name><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_item_mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_options</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppsz_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_item</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Help</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"+----[ Remote control commands ]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| add XYZ . . . . . . . . . . . . add XYZ to playlist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| enqueue XYZ . . . . . . . . . queue XYZ to playlist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| playlist . . . . . show items currently in playlist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| play . . . . . . . . . . . . . . . . . . play stream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| stop . . . . . . . . . . . . . . . . . . stop stream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| next . . . . . . . . . . . . . . next playlist item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| prev . . . . . . . . . . . . previous playlist item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| goto . . . . . . . . . . . . . . goto item at index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| repeat [on|off] . . . . toggle playlist item repeat"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| loop [on|off] . . . . . . . . . toggle playlist loop"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| random [on|off] . . . . . . . toggle random jumping"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| clear . . . . . . . . . . . . . . clear the playlist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| status . . . . . . . . . . . current playlist status"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| title [X] . . . . . . set/get title in current item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| title_n . . . . . . . . next title in current item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| title_p . . . . . . previous title in current item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| chapter [X] . . . . set/get chapter in current item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| chapter_n . . . . . . next chapter in current item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| chapter_p . . . . previous chapter in current item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| seek X . . . seek in seconds, for instance `seek 12'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| pause . . . . . . . . . . . . . . . . toggle pause"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| fastforward . . . . . . . . . set to maximum rate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| rewind . . . . . . . . . . . . set to minimum rate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| faster . . . . . . . . . . faster playing of stream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| slower . . . . . . . . . . slower playing of stream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| normal . . . . . . . . . . normal playing of stream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| frame. . . . . . . . . . play frame by frame"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| f [on|off] . . . . . . . . . . . . toggle fullscreen"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| info . . . . . information about the current stream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| stats . . . . . . . . show statistical information"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| get_time . . seconds elapsed since stream's beginning"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| is_playing . . . . 1 if a stream plays, 0 otherwise"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| get_title . . . . . the title of the current stream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| get_length . . . . the length of the current stream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| volume [X] . . . . . . . . . . set/get audio volume"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| volup [X] . . . . . . . raise audio volume X steps"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| voldown [X] . . . . . . lower audio volume X steps"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| adev [device] . . . . . . . . set/get audio device"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| achan [X]. . . . . . . . . . set/get audio channels"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| atrack [X] . . . . . . . . . . . set/get audio track"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| vtrack [X] . . . . . . . . . . . set/get video track"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| vratio [X] . . . . . . . set/get video aspect ratio"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| vcrop [X] . . . . . . . . . . . set/get video crop"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| vzoom [X] . . . . . . . . . . . set/get video zoom"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| snapshot . . . . . . . . . . . . take video snapshot"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| record [on|off] . . . . . . . . . . toggle recording"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| strack [X] . . . . . . . . . set/get subtitle track"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| key [hotkey name] . . . . . . simulate hotkey press"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| help . . . . . . . . . . . . . . . this help message"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| logout . . . . . . . exit (if in socket connection)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| quit . . . . . . . . . . . . . . . . . . . quit vlc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"+----[ end of help ]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>player_on_state_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPING</name></expr>:</case>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>
<expr_stmt><expr><name>psz_cmd</name> <operator>=</operator> <literal type="string">"stop"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>
<expr_stmt><expr><name>psz_cmd</name> <operator>=</operator> <literal type="string">"play"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>
<expr_stmt><expr><name>psz_cmd</name> <operator>=</operator> <literal type="string">"pause"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>psz_cmd</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( %s state: %d )"</literal></expr></argument>, <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>player_on_buffering_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>new_buffering</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>new_buffering</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>status_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_input_buffering</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>status_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>player_on_rate_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>new_rate</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>status_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( new rate: %.3f )"</literal></expr></argument>, <argument><expr><name>new_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>status_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>player_on_position_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>new_time</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>new_pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>new_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>status_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>b_input_buffering</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( time: %"</literal><name>PRId64</name><literal type="string">"s )"</literal></expr></argument>,
<argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>new_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_input_buffering</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>status_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>player_aout_on_volume_changed</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>status_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( audio volume: %ld )"</literal></expr></argument>,
<argument><expr><call><name>lroundf</name><argument_list>(<argument><expr><name>volume</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>status_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerDoVoid</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerPause</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayerDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_player_TogglePause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerFastForward</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_player_CanChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>isgreater</name><argument_list>(<argument><expr><name>rate</name></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>rate</name> <operator>*</operator> <literal type="number">2.f</literal></expr> </then><else>: <expr><operator>-</operator><name>rate</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>,
<argument><expr><name>ACTIONID_JUMP_FORWARD_EXTRASHORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerRewind</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_player_CanRewind</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>isless</name><argument_list>(<argument><expr><name>rate</name></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>rate</name> <operator>*</operator> <literal type="number">2.f</literal></expr> </then><else>: <expr><operator>-</operator><name>rate</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>,
<argument><expr><name>ACTIONID_JUMP_BACKWARD_EXTRASHORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerFaster</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayerDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_player_IncrementRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerSlower</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayerDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_player_DecrementRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerDoNormal</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerNormal</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayerDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>PlayerDoNormal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerFrame</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayerDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_player_NextVideoFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerChapterPrev</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayerDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_player_SelectPrevChapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerChapterNext</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayerDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_player_SelectNextChapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerTitlePrev</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayerDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_player_SelectPrevTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerTitleNext</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayerDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_player_SelectNextTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Input</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"seek"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>newval</name><operator>.</operator><name>psz_string</name><index>[<expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><call><name>atof</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_SetPosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_SetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"chapter"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SelectChapterIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_title</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>vlc_player_GetSelectedTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>chapter</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chapter</name> <operator>=</operator> <call><name>vlc_player_GetSelectedChapterIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>chapter</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"Currently playing chapter %zd/%zu."</literal></expr></argument>,
<argument><expr><name>chapter</name></expr></argument>, <argument><expr><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"No chapter selected."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_SelectTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>title</name> <init>= <expr><call><name>vlc_player_GetSelectedTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_title_list</name> <modifier>*</modifier></type><name>titles</name> <init>=
<expr><call><name>vlc_player_GetTitleList</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>titles</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>vlc_player_title_list_GetCount</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"Currently playing title %zd/%zu."</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>,
<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"No title selected."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"atrack"</literal></expr></argument> )</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"vtrack"</literal></expr></argument> )</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"strack"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"atrack"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cat</name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"vtrack"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cat</name> <operator>=</operator> <name>VIDEO_ES</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cat</name> <operator>=</operator> <name>SPU_ES</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>track_count</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>idx</name> <operator>&gt;=</operator> <name>track_count</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>track</name> <init>=
<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>track</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_player_SelectTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>VLC_PLAYER_SELECT_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>cur_track</name> <init>=
<expr><call><name>vlc_player_GetSelectedTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><name>cur_track</name></expr> ?</condition><then> <expr><name><name>cur_track</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>psz_cmd</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ %s ]"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_track</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>track</name> <init>=
<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"| %zu - %s%s"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>track</name> <operator>==</operator> <name>cur_track</name></expr> ?</condition><then> <expr><literal type="string">" *"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ end of %s ]"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"record"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_update</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_value</name> <init>= <expr><call><name>vlc_player_IsRecording</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>newval</name><operator>.</operator><name>psz_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>b_value</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_value</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>b_update</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_value</name> <operator>=</operator> <operator>!</operator><name>b_value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SetRecordingEnabled</name><argument_list>( <argument><expr><name>player</name></expr></argument>, <argument><expr><name>b_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerItemInfo</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>item</name><operator>-&gt;</operator><name>i_categories</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>category</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>pp_categories</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>info_t</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ %s ]"</literal></expr></argument>, <argument><expr><name><name>category</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>info_foreach</name><argument_list>(<argument>info</argument>, <argument>&amp;category-&gt;infos</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"| %s: %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ end of stream info ]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"no input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerGetTime</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerGetLength</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>vlc_player_GetLength</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerGetTitle</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>vlc_player_GetSelectedTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>title</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>title</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayerVoutSnapshot</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlayerDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_player_vout_Snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_playlist</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>plitem</name> <init>= <expr><call><name>vlc_playlist_Get</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_playlist_item_GetMedia</name><argument_list>(<argument><expr><name>plitem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>len</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>i_duration</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>INPUT_DURATION_INDEFINITE</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MSTRTIME_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>secstotimestr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"|-- %s (%s)"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><literal type="string">"|-- %s"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaylistDoVoid</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaylistPrev</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlaylistDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_playlist_Prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaylistNext</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlaylistDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_playlist_Next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaylistPlay</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlaylistDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vlc_playlist_Start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PlaylistDoStop</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_playlist_Stop</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaylistStop</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlaylistDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>PlaylistDoStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PlaylistDoClear</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlaylistDoStop</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Clear</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaylistClear</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlaylistDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>PlaylistDoClear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PlaylistDoSort</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_sort_criterion</name></name></type> <name>criteria</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>key</name> <operator>=</operator> <name>VLC_PLAYLIST_SORT_KEY_ARTIST</name></expr>,
<expr><operator>.</operator><name>order</name> <operator>=</operator> <name>VLC_PLAYLIST_SORT_ORDER_ASCENDING</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_playlist_Sort</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>criteria</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaylistSort</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PlaylistDoVoid</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>PlaylistDoSort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaylistList</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ Playlist ]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_playlist</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ End of playlist ]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaylistStatus</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>input_item_GetURI</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>uri</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( new input: %s )"</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>volume</name> <init>= <expr><call><name>vlc_player_aout_GetVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isgreaterequal</name><argument_list>(<argument><expr><name>volume</name></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( audio volume: %ld )"</literal></expr></argument>,
<argument><expr><call><name>lroundf</name><argument_list>(<argument><expr><name>volume</name> <operator>*</operator> <literal type="number">100.f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name> <init>= <expr><call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stnum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stname</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPING</name></expr>:</case>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>
<expr_stmt><expr><name>stnum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stname</name> <operator>=</operator> <literal type="string">"stop"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>
<expr_stmt><expr><name>stnum</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stname</name> <operator>=</operator> <literal type="string">"play"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>
<expr_stmt><expr><name>stnum</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stname</name> <operator>=</operator> <literal type="string">"pause"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( %s state: %u )"</literal></expr></argument>, <argument><expr><name>stname</name></expr></argument>, <argument><expr><name>stnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Playlist</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"repeat"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_update</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat_mode</name> <init>=
<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_value</name> <init>= <expr><name>repeat_mode</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>b_value</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_value</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>b_update</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_value</name> <operator>=</operator> <operator>!</operator><name>b_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <ternary><condition><expr><name>b_value</name></expr>
?</condition><then> <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>
</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>repeat_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"Setting repeat to %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_value</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"loop"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_update</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat_mode</name> <init>=
<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_value</name> <init>= <expr><name>repeat_mode</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>b_value</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_value</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>b_update</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_value</name> <operator>=</operator> <operator>!</operator><name>b_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <ternary><condition><expr><name>b_value</name></expr>
?</condition><then> <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>
</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>repeat_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"Setting loop to %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_value</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"random"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_update</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>order_mode</name> <init>=
<expr><call><name>vlc_playlist_GetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_value</name> <init>= <expr><name>order_mode</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>b_value</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_value</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>b_update</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_value</name> <operator>=</operator> <operator>!</operator><name>b_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>order_mode</name> <operator>=</operator> <ternary><condition><expr><name>b_value</name></expr>
?</condition><then> <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>
</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>order_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"Setting random to %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_value</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"goto"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>llindex</name> <init>= <expr><call><name>atoll</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>llindex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>llindex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error: `goto' needs an argument greater or equal to zero."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_playlist_PlayAt</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>,
<argument><expr><call><name>vlc_ngettext</name><argument_list>(<argument><expr><literal type="string">"Playlist has only %zu element"</literal></expr></argument>,
<argument><expr><literal type="string">"Playlist has only %zu elements"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"enqueue"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>newval</name><operator>.</operator><name>psz_string</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>parse_MRL</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_item</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"Trying to %s %s to playlist."</literal></expr></argument>, <argument><expr><name>psz_cmd</name></expr></argument>,
<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_playlist_InsertOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_playlist_PlayAt</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>



<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"unknown command!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Intf</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>intf_Create</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Volume</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>volume</name> <init>= <expr><call><name>atol</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_aout_SetVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>volume</name> <init>= <expr><call><name>lroundf</name><argument_list>(<argument><expr><call><name>vlc_player_aout_GetVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">100.f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( audio volume: %ld )"</literal></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VolumeMove</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_nb_steps</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"voldown"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_nb_steps</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_aout_IncrementVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>i_nb_steps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VideoConfig</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_variable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"vcrop"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_variable</name> <operator>=</operator> <literal type="string">"crop"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"vratio"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_variable</name> <operator>=</operator> <literal type="string">"aspect-ratio"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="string">"vzoom"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_variable</name> <operator>=</operator> <literal type="string">"zoom"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_variable</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_float</name> <init>= <expr><call><name>atof</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>psz_variable</name></expr></argument>, <argument><expr><name>f_float</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>psz_variable</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_value</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_variable</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_value</name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>psz_variable</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_value</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>psz_variable</name></expr></argument>, <argument><expr><name>VLC_VAR_GETCHOICES</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>psz_variable</name></expr></argument>, <argument><expr><name>VLC_VAR_GETTEXT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>name</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ %s ]"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_variable</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"| %f - %s"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f_value</name> <operator>==</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_float</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"| %f - %s*"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_float</name></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"| %s - %s"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"| %s - %s*"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ end of %s ]"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AudioDevice</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>cur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>vlc_player_aout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>aout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>aout_DevicesList</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>setdev</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>psz_string</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>cur</name><operator>.</operator><name>psz_string</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>setdev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aout_DeviceSet</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>setdev</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Audio device: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><call><name>aout_DeviceGet</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>devstr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>dev</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>dev</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ %s ]"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"| %s - %s"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>devstr</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"| %s - %s *"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ end of %s ]"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AudioChannel</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>cur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlc_player_aout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>*</operator><name><name>cur</name><operator>.</operator><name>psz_string</name></name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>var_Change</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"stereo-mode"</literal></expr></argument>, <argument><expr><name>VLC_VAR_GETCHOICES</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_value</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"stereo-mode"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ %s ]"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"| %"</literal><name>PRId64</name><literal type="string">" - %s"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_value</name> <operator>==</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"| %"</literal><name>PRId64</name><literal type="string">" - %s*"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_int</name></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ end of %s ]"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"stereo-mode"</literal></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>( <argument><expr><name><name>cur</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Statistics</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ begin of statistical info ]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"+-[Incoming]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| input bytes read : %8.0f KiB"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_read_bytes</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1024.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| input bitrate : %6.0f kb/s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>f_input_bitrate</name></name><operator>)</operator> <operator>*</operator> <literal type="number">8000.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| demux bytes read : %8.0f KiB"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_demux_read_bytes</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1024.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| demux bitrate : %6.0f kb/s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>f_demux_bitrate</name></name><operator>)</operator> <operator>*</operator> <literal type="number">8000.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| demux corrupted : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_demux_corrupted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| discontinuities : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_demux_discontinuity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"+-[Video Decoding]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| video decoded : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_decoded_video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| frames displayed : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_displayed_pictures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| frames lost : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_lost_pictures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"+-[Audio Decoding]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| audio decoded : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_decoded_audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| buffers played : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_played_abuffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| buffers lost : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_stats</name><operator>-&gt;</operator><name>i_lost_abuffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"+----[ end of statistical info ]"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Quit</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>libvlc_Quit</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LogOut</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IsPlaying</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>last_state</name></name> <operator>==</operator> <name>VLC_PLAYER_STATE_PLAYING</name> <operator>||</operator>
<name><name>sys</name><operator>-&gt;</operator><name>last_state</name></name> <operator>==</operator> <name>VLC_PLAYER_STATE_PAUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>void_cmds</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"playlist"</literal></expr>, <expr><name>PlaylistList</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sort"</literal></expr>, <expr><name>PlaylistSort</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"play"</literal></expr>, <expr><name>PlaylistPlay</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stop"</literal></expr>, <expr><name>PlaylistStop</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clear"</literal></expr>, <expr><name>PlaylistClear</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prev"</literal></expr>, <expr><name>PlaylistPrev</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"next"</literal></expr>, <expr><name>PlaylistNext</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"status"</literal></expr>, <expr><name>PlaylistStatus</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pause"</literal></expr>, <expr><name>PlayerPause</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"title_n"</literal></expr>, <expr><name>PlayerTitleNext</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"title_p"</literal></expr>, <expr><name>PlayerTitlePrev</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chapter_n"</literal></expr>, <expr><name>PlayerChapterNext</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chapter_p"</literal></expr>, <expr><name>PlayerChapterPrev</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fastforward"</literal></expr>, <expr><name>PlayerFastForward</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rewind"</literal></expr>, <expr><name>PlayerRewind</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"faster"</literal></expr>, <expr><name>PlayerFaster</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"slower"</literal></expr>, <expr><name>PlayerSlower</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"normal"</literal></expr>, <expr><name>PlayerNormal</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"frame"</literal></expr>, <expr><name>PlayerFrame</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"info"</literal></expr>, <expr><name>PlayerItemInfo</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_time"</literal></expr>, <expr><name>PlayerGetTime</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_length"</literal></expr>, <expr><name>PlayerGetLength</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_title"</literal></expr>, <expr><name>PlayerGetTitle</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"snapshot"</literal></expr>, <expr><name>PlayerVoutSnapshot</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"is_player"</literal></expr>, <expr><name>IsPlaying</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stats"</literal></expr>, <expr><name>Statistics</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"longhelp"</literal></expr>, <expr><name>Help</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"logout"</literal></expr>, <expr><name>LogOut</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"quit"</literal></expr>, <expr><name>Quit</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>string_cmds</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"intf"</literal></expr>, <expr><name>Intf</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><name>Playlist</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"repeat"</literal></expr>, <expr><name>Playlist</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"loop"</literal></expr>, <expr><name>Playlist</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"random"</literal></expr>, <expr><name>Playlist</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"enqueue"</literal></expr>, <expr><name>Playlist</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"goto"</literal></expr>, <expr><name>Playlist</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="string">"seek"</literal></expr>, <expr><name>Input</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"title"</literal></expr>, <expr><name>Input</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chapter"</literal></expr>, <expr><name>Input</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"atrack"</literal></expr>, <expr><name>Input</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vtrack"</literal></expr>, <expr><name>Input</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"strack"</literal></expr>, <expr><name>Input</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"record"</literal></expr>, <expr><name>Input</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="string">"vratio"</literal></expr>, <expr><name>VideoConfig</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vcrop"</literal></expr>, <expr><name>VideoConfig</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vzoom"</literal></expr>, <expr><name>VideoConfig</name></expr> }</block></expr>,


<expr><block>{ <expr><literal type="string">"volume"</literal></expr>, <expr><name>Volume</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"volup"</literal></expr>, <expr><name>VolumeMove</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"voldown"</literal></expr>, <expr><name>VolumeMove</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"adev"</literal></expr>, <expr><name>AudioDevice</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"achan"</literal></expr>, <expr><name>AudioChannel</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Process</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>void_cmds</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>void_cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>void_cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>handler</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>string_cmds</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>string_cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>n</name> <init>= <expr><block>{ <expr><operator>.</operator><name>psz_string</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>string_cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>handler</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"hotkey"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><call><name>vlc_actions_get_id</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <operator>!</operator><call><name>vlc_player_vout_IsFullscreen</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_player_vout_SetFullscreen</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<expr_stmt><expr><call><name>Help</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case> 
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_print</name><argument_list>(<argument><expr><name>intf</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown command `%s'. Type `help' for help."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></else></if_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>ReadWin32</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>input_record</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>i_dw</name></decl>;</decl_stmt>


<while>while<condition>( <expr><call><name>WaitForSingleObjectEx</name><argument_list>( <argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>hConsoleIn</name></name></expr></argument>,
<argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>INTF_IDLE_SLEEP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr> )</condition>
<block>{<block_content>



<while>while<condition>( <expr><operator>*</operator><name>pi_size</name> <operator>&lt;</operator> <name>MAX_LINE_LENGTH</name> <operator>-</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<call><name>ReadConsoleInput</name><argument_list>( <argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>hConsoleIn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_record</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dw</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>input_record</name><operator>.</operator><name>EventType</name></name> <operator>!=</operator> <name>KEY_EVENT</name> <operator>||</operator>
<operator>!</operator><name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name> <operator>||</operator>
<name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_SHIFT</name> <operator>||</operator>
<name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_CONTROL</name><operator>||</operator>
<name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_MENU</name> <operator>||</operator>
<name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_CAPITAL</name></expr> )</condition>
<block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator>
<name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>( <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<switch>switch<condition>( <expr><name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\b'</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>pi_size</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>pi_size</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_size</name><operator>)</operator> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nbBytes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>*</operator><name>pi_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_size</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nbBytes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>clz</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>~</operator><operator>(</operator><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call> <operator>==</operator> <name>nbBytes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_size</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\b \b"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>psz_winput</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>UnicodeChar</name></name></expr>, <expr><name>L</name><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_input</name> <init>= <expr><call><name>FromWide</name><argument_list>( <argument><expr><name>psz_winput</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>pi_size</name> <operator>+</operator> <name>input_size</name> <operator>&gt;</operator> <name>MAX_LINE_LENGTH</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><index>[ <expr><operator>*</operator><name>pi_size</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>utf8_fprintf</name><argument_list>( <argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>+=</operator> <name>input_size</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><name><name>p_buffer</name><index>[ <expr><operator>*</operator><name>pi_size</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_testcancel</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ReadCommand</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_quiet</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ReadWin32</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>p_buffer</name></expr></argument>, <argument><expr><name>pi_size</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><name>INTF_IDLE_SLEEP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while<condition>( <expr><operator>*</operator><name>pi_size</name> <operator>&lt;</operator> <name>MAX_LINE_LENGTH</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>read</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_buffer</name> <operator>+</operator> <operator>*</operator><name>pi_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>libvlc_Quit</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<if_stmt><if>if<condition>( <expr><call><name>net_Read</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name></expr></argument>, <argument><expr><name>p_buffer</name> <operator>+</operator> <operator>*</operator><name>pi_size</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><index>[ <expr><operator>*</operator><name>pi_size</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>p_buffer</name><index>[ <expr><operator>*</operator><name>pi_size</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_size</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_size</name> <operator>==</operator> <name>MAX_LINE_LENGTH</name> <operator>||</operator>
<name><name>p_buffer</name><index>[ <expr><operator>*</operator><name>pi_size</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>p_buffer</name><index>[ <expr><operator>*</operator><name>pi_size</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><index>[ <expr><operator>*</operator><name>pi_size</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>p_buffer</name><index>[ <expr><name>MAX_LINE_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_showpos</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"rc-show-pos"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_oldpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_newpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>( )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>hConsoleIn</name></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>hConsoleIn</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"couldn't find user input handle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_complete</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_socket_listen</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>=</operator>
<call><name>net_Accept</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_socket_listen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_complete</name> <operator>=</operator> <call><name>ReadCommand</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>item</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>item</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><call><name>input_item_GetURI</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( new input: %s )"</literal></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_player_IsStarted</name><argument_list>( <argument><expr><name>player</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_state</name></name> <operator>=</operator> <name>VLC_PLAYER_STATE_STOPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( stop state: 0 )"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name> <init>= <expr><call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_state</name></name> <operator>!=</operator> <name>state</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPING</name></expr>:</case>
<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( stop state: 5 )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( play state: 3 )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>(<argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( pause state: 4 )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>item</name> <operator>&amp;&amp;</operator> <name>b_showpos</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_newpos</name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <call><name>vlc_player_GetPosition</name><argument_list>( <argument><expr><name>player</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_oldpos</name> <operator>!=</operator> <name>i_newpos</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_oldpos</name> <operator>=</operator> <name>i_newpos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><literal type="string">"pos: %d%%"</literal></expr></argument>, <argument><expr><name>i_newpos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_complete</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>psz_cmd</name> <operator>=</operator> <name>p_buffer</name></expr>;</expr_stmt>
<while>while<condition>( <expr><operator>*</operator><name>psz_cmd</name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_cmd</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name>psz_arg</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_arg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz_arg</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><operator>*</operator><name>psz_arg</name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_arg</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Process</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><name>psz_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( stop state: 0 )"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><name>STATUS_CHANGE</name> <literal type="string">"( quit )"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Activate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_host</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_unix_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_socket</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ISATTY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"rc-fake-tty"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isatty</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"fd 0 is not a TTY"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>psz_unix_path</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"rc-unix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_unix_path</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>addr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"trying UNIX socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>( <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_unix_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>addr</name><operator>.</operator><name>sun_path</name></name></expr></argument> )</argument_list></sizeof></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"rc-unix value is longer than expected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_socket</name> <operator>=</operator> <call><name>vlc_socket</name><argument_list>( <argument><expr><name>PF_LOCAL</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"can't open socket: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_unix_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name><name>addr</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>psz_unix_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>addr</name><operator>.</operator><name>sun_path</name></name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sun_path</name><index>[<expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>addr</name><operator>.</operator><name>sun_path</name></name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bind</name> <argument_list>(<argument><expr><name>i_socket</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EADDRINUSE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>connect</name> <argument_list>(<argument><expr><name>i_socket</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ECONNREFUSED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name> <argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Removing dead UNIX socket: %s"</literal></expr></argument>, <argument><expr><name>psz_unix_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name> <argument_list>(<argument><expr><name>psz_unix_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bind</name> <argument_list>(<argument><expr><name>i_socket</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"cannot bind UNIX socket at %s: %s"</literal></expr></argument>,
<argument><expr><name>psz_unix_path</name></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>psz_unix_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name>i_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>listen</name><argument_list>( <argument><expr><name>i_socket</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"can't listen on socket: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_unix_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name>i_socket</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>pi_socket</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>int</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>pi_socket</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_unix_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name>i_socket</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pi_socket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_socket</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_socket</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>pi_socket</name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>psz_host</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"rc-host"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>psz_host</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_backward_compat_host</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_backward_compat_host</name></expr></argument>, <argument><expr><literal type="string">"//%s"</literal></expr></argument>, <argument><expr><name>psz_host</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_host</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_host</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_host</name> <operator>=</operator> <name>psz_backward_compat_host</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>psz_host</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"base: %s, port: %d"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_socket</name> <operator>=</operator> <call><name>net_ListenTCP</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>pi_socket</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"can't listen to %s port %i"</literal></expr></argument>,
<argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_host</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_host</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>net_ListenClose</name><argument_list>( <argument><expr><name>pi_socket</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_unix_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_socket_listen</name></name> <operator>=</operator> <name>pi_socket</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_unix_path</name></name> <operator>=</operator> <name>psz_unix_path</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>status_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_state</name></name> <operator>=</operator> <name>VLC_PLAYER_STATE_STOPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_input_buffering</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name> <operator>=</operator> <call><name>vlc_intf_GetMainPlaylist</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>setvbuf</name><argument_list>( <argument><expr><name>stdout</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name>_IOLBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_quiet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_quiet</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"rc-quiet"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_quiet</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>intf_consoleIntroMsg</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Run</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_rc</name><argument_list>( <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Remote control interface initialized. Type `help' for help."</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_player_cbs</name></name> <specifier>const</specifier></type> <name>player_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>on_state_changed</name> <operator>=</operator> <name>player_on_state_changed</name></expr>,
<expr><operator>.</operator><name>on_buffering_changed</name> <operator>=</operator> <name>player_on_buffering_changed</name></expr>,
<expr><operator>.</operator><name>on_rate_changed</name> <operator>=</operator> <name>player_on_rate_changed</name></expr>,
<expr><operator>.</operator><name>on_position_changed</name> <operator>=</operator> <name>player_on_position_changed</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name> <operator>=</operator>
<call><name>vlc_player_AddListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>player_cbs</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_player_aout_cbs</name></name> <specifier>const</specifier></type> <name>player_aout_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>on_volume_changed</name> <operator>=</operator> <name>player_aout_on_volume_changed</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_aout_listener</name></name> <operator>=</operator>
<call><name>vlc_player_aout_AddListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>player_aout_cbs</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>player_aout_listener</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>net_ListenClose</name><argument_list>( <argument><expr><name>pi_socket</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_unix_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Deactivate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_aout_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_aout_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>net_ListenClose</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_socket_listen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_unix_path</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_unix_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_unix_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_TEXT</name></cpp:macro> <cpp:value>N_("Show stream position")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Show the current position in seconds within the " "stream from time to time." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTY_TEXT</name></cpp:macro> <cpp:value>N_("Fake TTY")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Force the rc module to use stdin as if it was a TTY.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIX_TEXT</name></cpp:macro> <cpp:value>N_("UNIX socket command input")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIX_LONGTEXT</name></cpp:macro> <cpp:value>N_("Accept commands over a Unix socket rather than " "stdin." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_TEXT</name></cpp:macro> <cpp:value>N_("TCP command input")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_LONGTEXT</name></cpp:macro> <cpp:value>N_("Accept commands over a socket rather than stdin. " "You can set the address and port the interface will bind to." )</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIET_TEXT</name></cpp:macro> <cpp:value>N_("Do not open a DOS command box interface")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIET_LONGTEXT</name></cpp:macro> <cpp:value>N_( "By default the rc interface plugin will start a DOS command box. " "Enabling the quiet mode will not bring this command box but can also " "be pretty annoying when you want to stop VLC and no video window is " "open." )</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"RC"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INTERFACE</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INTERFACE_MAIN</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Remote control interface"</literal>)</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"rc-show-pos"</literal></argument>, <argument>false</argument>, <argument>POS_TEXT</argument>, <argument>POS_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"rc-quiet"</literal></argument>, <argument>false</argument>, <argument>QUIET_TEXT</argument>, <argument>QUIET_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_ISATTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"rc-fake-tty"</literal></argument>, <argument>false</argument>, <argument>TTY_TEXT</argument>, <argument>TTY_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"rc-unix"</literal></argument>, <argument>NULL</argument>, <argument>UNIX_TEXT</argument>, <argument>UNIX_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"rc-host"</literal></argument>, <argument>NULL</argument>, <argument>HOST_TEXT</argument>, <argument>HOST_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Activate</argument>, <argument>Deactivate</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"cli"</literal></argument>, <argument><literal type="string">"rc"</literal></argument>, <argument><literal type="string">"oldrc"</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
