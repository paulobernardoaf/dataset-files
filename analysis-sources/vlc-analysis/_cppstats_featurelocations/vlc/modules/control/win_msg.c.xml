<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\control\win_msg.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<struct>struct <name>intf_sys_t</name>
<block>{
<decl_stmt><decl><type><name>HWND</name></type> <name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>ready</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
}</block>;</struct>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enqueue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_ipc_data_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_to_playlist</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>play_now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlc_intf_GetMainPlaylist</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>media</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>input_item_AddOptions</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name>options_count</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_AppendOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>play_now</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_playlist_Start</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>WMCOPYWNDPROC</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>,
<parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>uMsg</name> <operator>==</operator> <name>WM_QUIT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PostQuitMessage</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>uMsg</name> <operator>==</operator> <name>WM_COPYDATA</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>COPYDATASTRUCT</name> <modifier>*</modifier></type><name>pwm_data</name> <init>= <expr><operator>(</operator><name>COPYDATASTRUCT</name><operator>*</operator><operator>)</operator><name>lParam</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator>
<call><name>GetWindowLongPtr</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>intf</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>( <expr><name><name>pwm_data</name><operator>-&gt;</operator><name>lpData</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_ipc_data_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>(</operator><name>vlc_ipc_data_t</name> <operator>*</operator><operator>)</operator><name><name>pwm_data</name><operator>-&gt;</operator><name>lpData</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_argc</name> <init>= <expr><name><name>p_data</name><operator>-&gt;</operator><name>argc</name></name></expr></init></decl>, <decl><type ref="prev"/><name>i_opt</name></decl>, <decl><type ref="prev"/><name>i_options</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ppsz_argv</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_argc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_opt</name> <operator>&lt;</operator> <name>i_argc</name></expr>;</condition> <incr><expr><name>i_opt</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>ppsz_argv</name><index>[<expr><name>i_opt</name></expr>]</index></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i_data</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i_data</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><expr><name>i_opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_opt</name> <operator>&lt;</operator> <name>i_argc</name></expr>;</condition> <incr><expr><name>i_opt</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_options</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<while>while<condition>( <expr><name>i_opt</name> <operator>+</operator> <name>i_options</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>i_argc</name> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>ppsz_argv</name><index>[ <expr><name>i_opt</name> <operator>+</operator> <name>i_options</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_options</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<cpp:warning>#<cpp:directive>warning</cpp:directive> URI conversion must be done in calling process instead!</cpp:warning>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_URI</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[<expr><name>i_opt</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_URI</name> <operator>=</operator> <call><name>vlc_path2uri</name><argument_list>( <argument><expr><name><name>ppsz_argv</name><index>[<expr><name>i_opt</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_to_playlist</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>psz_URI</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>psz_URI</name></expr> </then><else>: <expr><name><name>ppsz_argv</name><index>[<expr><name>i_opt</name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>i_opt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>enqueue</name></name><operator>)</operator></expr></argument>, <argument><expr><name>i_options</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <specifier>const</specifier> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator> <ternary><condition><expr><name>i_options</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ppsz_argv</name><index>[<expr><name>i_opt</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_opt</name> <operator>+=</operator> <name>i_options</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_URI</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_argv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>DefWindowProc</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>HelperThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>ipcwindow</name> <init>=
<expr><call><name>CreateWindow</name><argument_list>(<argument><expr><literal type="string">L"STATIC"</literal></expr></argument>, 
<argument><expr><literal type="string">L"VLC ipc "</literal> <call><name>TEXT</name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> 

<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>(<argument><expr><name>ipcwindow</name></expr></argument>, <argument><expr><name>GWLP_WNDPROC</name></expr></argument>, <argument><expr><operator>(</operator><name>LRESULT</name><operator>)</operator><name>WMCOPYWNDPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>(<argument><expr><name>ipcwindow</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>ipcwindow</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MSG</name></type> <name>message</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>GetMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>HelperThread</name></expr></argument>, <argument><expr><name>intf</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"one instance mode DISABLED "</literal>
<literal type="string">"(IPC helper thread couldn't be created)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>WM_QUIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"WinMsg"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Windows messages interface"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INTERFACE</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INTERFACE_CONTROL</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
