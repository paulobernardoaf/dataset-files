<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\control\dbus\dbus_player.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_player.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_common.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalPosition</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>dbus_int64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <ternary><condition><expr><name>i_pos</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>US_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_pos</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pos</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>SetPosition</argument> )</argument_list></macro>
<block>{<block_content> 

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dbus_int64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_trackid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_item_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_OBJECT_PATH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_trackid</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pos</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,
<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_trackid</name></expr></argument>, <argument><expr><name>MPRIS_TRACKID_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_id</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_item_id</name> <operator>=</operator> <call><name>vlc_playlist_GetCurrentIndex</name><argument_list>( <argument><expr><name>playlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_item_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_item_id</name> <operator>==</operator> <name>i_id</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_SetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_US</name><argument_list>(<argument><expr><name>i_pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>Seek</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dbus_int64_t</name></type> <name>i_step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_step</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,
<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>PL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_JumpTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_US</name><argument_list>(<argument><expr><name>i_step</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalVolume</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>vol</name> <init>= <expr><call><name>vlc_player_aout_GetVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>vol</name> <operator>&lt;</operator> <literal type="number">.0f</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vol</name> <operator>=</operator> <literal type="number">.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vol</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>VolumeSet</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_dbus_vol</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>!=</operator> <call><name>DemarshalSetPropertyValue</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_dbus_vol</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>PL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_aout_SetVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>fmaxf</name><argument_list>(<argument><expr><name>d_dbus_vol</name></expr></argument>, <argument><expr><literal type="number">.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>Next</argument> )</argument_list></macro>
<block>{<block_content> 
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Next</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>Prev</argument> )</argument_list></macro>
<block>{<block_content> 
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Prev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>Stop</argument> )</argument_list></macro>
<block>{<block_content> 
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Stop</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>Play</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>PL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_player_IsPaused</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_Resume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_Start</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>Pause</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Pause</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>PlayPause</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>PL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_TogglePause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>OpenUri</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_mrl</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,
<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_InsertOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_PlayAt</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalCanGoNext</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_GetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat_mode</name> <init>=
<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_can_go_next</name> <init>=
<expr><name>count</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>index</name> <operator>&lt;</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<name>repeat_mode</name> <operator>!=</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_can_go_next</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalCanGoPrevious</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_GetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat_mode</name> <init>=
<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_can_go_previous</name> <init>=
<expr><name>count</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>repeat_mode</name> <operator>!=</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_can_go_previous</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalCanPlay</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_can_play</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_can_play</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalCanPause</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_can_pause</name> <init>= <expr><call><name>vlc_player_CanPause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_can_pause</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalCanControl</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_can_control</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_can_control</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalCanSeek</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_can_seek</name> <init>= <expr><call><name>vlc_player_CanSeek</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_can_seek</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalShuffle</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>order_mode</name> <init>=
<expr><call><name>vlc_playlist_GetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_shuffle</name> <init>= <expr><name>order_mode</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_shuffle</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>ShuffleSet</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_shuffle</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>!=</operator> <call><name>DemarshalSetPropertyValue</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_shuffle</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_shuffle</name> <operator>==</operator> <name>TRUE</name></expr>
?</condition><then> <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>
</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalPlaybackStatus</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name> <init>= <expr><call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_playback_status</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_PLAYER_STATE_STARTED</name></expr>:</case>
<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>
<expr_stmt><expr><name>psz_playback_status</name> <operator>=</operator> <name>PLAYBACK_STATUS_PLAYING</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>
<expr_stmt><expr><name>psz_playback_status</name> <operator>=</operator> <name>PLAYBACK_STATUS_PAUSED</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>psz_playback_status</name> <operator>=</operator> <name>PLAYBACK_STATUS_STOPPED</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>psz_playback_status</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalRate</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_rate</name> <init>= <expr><call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_DOUBLE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>d_rate</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>RateSet</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d_rate</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>!=</operator> <call><name>DemarshalSetPropertyValue</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_rate</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>PL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>d_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalMinimumRate</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_min_rate</name> <init>= <expr><name>INPUT_RATE_MIN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_min_rate</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalMaximumRate</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_max_rate</name> <init>= <expr><name>INPUT_RATE_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_max_rate</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalLoopStatus</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat_mode</name> <init>=
<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_loop_status</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>repeat_mode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>:</case>
<expr_stmt><expr><name>psz_loop_status</name> <operator>=</operator> <name>LOOP_STATUS_PLAYLIST</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>:</case>
<expr_stmt><expr><name>psz_loop_status</name> <operator>=</operator> <name>LOOP_STATUS_TRACK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr>:</case>
<expr_stmt><expr><name>psz_loop_status</name> <operator>=</operator> <name>LOOP_STATUS_NONE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>psz_loop_status</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>LoopStatusSet</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_loop_status</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>!=</operator> <call><name>DemarshalSetPropertyValue</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_loop_status</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat_mode</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_loop_status</name></expr></argument>, <argument><expr><name>LOOP_STATUS_NONE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_loop_status</name></expr></argument>, <argument><expr><name>LOOP_STATUS_TRACK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_loop_status</name></expr></argument>, <argument><expr><name>LOOP_STATUS_PLAYLIST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>repeat_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MarshalMetadata</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>id</name> <init>= <expr><call><name>vlc_playlist_GetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>plitem</name> <init>= <expr><call><name>vlc_playlist_Get</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetInputMeta</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>plitem</name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>a</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>,
<argument><expr><literal type="string">"{sv}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<macro><name>DBUS_SIGNAL</name><argument_list>( <argument>SeekedSignal</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>SIGNAL_INIT</name><argument_list>( <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument>,
<argument><expr><name>DBUS_MPRIS_OBJECT_PATH</name></expr></argument>,
<argument><expr><literal type="string">"Seeked"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dbus_int64_t</name></type> <name>i_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator> <name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <ternary><condition><expr><name>i_pos</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>US_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_pos</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_INT64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SIGNAL_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_MAPPING_BEGIN</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_GET_FUNC</name><parameter_list>( <parameter><type><name>prop</name></type></parameter>, <parameter><type><name>signature</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( !strcmp( psz_property_name, #prop ) ) { if( !dbus_message_iter_open_container( &amp;args, DBUS_TYPE_VARIANT, signature, &amp;v ) ) return DBUS_HANDLER_RESULT_NEED_MEMORY; if( VLC_SUCCESS != Marshal##prop( p_this, &amp;v ) ) { dbus_message_iter_abandon_container( &amp;args, &amp;v ); return DBUS_HANDLER_RESULT_NEED_MEMORY; } if( !dbus_message_iter_close_container( &amp;args, &amp;v ) ) return DBUS_HANDLER_RESULT_NEED_MEMORY; } else</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_SET_FUNC</name><parameter_list>( <parameter><type><name>prop</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( !strcmp( psz_property_name, #prop ) ) return prop##Set( p_conn, p_from, p_this ); else</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_MAPPING_END</name></cpp:macro> <cpp:value>return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;</cpp:value></cpp:define>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>GetProperty</argument> )</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_interface_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_property_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_property_name</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,
<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Getting property %s"</literal></expr></argument>,
<argument><expr><name>psz_property_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_interface_name</name></expr></argument>, <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROPERTY_MAPPING_BEGIN</name></type>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>Metadata</name></expr></argument>, <argument><expr><literal type="string">"a{sv}"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>Position</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>PlaybackStatus</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>LoopStatus</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>Shuffle</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>Volume</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>Rate</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>MinimumRate</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>MaximumRate</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>CanControl</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>CanPlay</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>CanGoNext</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>CanGoPrevious</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>CanPause</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>CanSeek</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_MAPPING_END</name>

<name>REPLY_SEND</name></decl>;</decl_stmt>
</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>SetProperty</argument> )</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_interface_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_property_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_property_name</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,
<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PROPERTY_MAPPING_BEGIN</name></type>
<name>PROPERTY_SET_FUNC</name><argument_list>( <argument><expr><name>LoopStatus</name></expr></argument> )</argument_list>
<name>PROPERTY_SET_FUNC</name><argument_list>( <argument><expr><name>Shuffle</name></expr></argument> )</argument_list>
<name>PROPERTY_SET_FUNC</name><argument_list>( <argument><expr><name>Volume</name></expr></argument> )</argument_list>
<name>PROPERTY_SET_FUNC</name><argument_list>( <argument><expr><name>Rate</name></expr></argument> )</argument_list>
<name>PROPERTY_MAPPING_END</name></decl></decl_stmt>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_MAPPING_BEGIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_GET_FUNC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_SET_FUNC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_MAPPING_END</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_PROPERTY</name><parameter_list>( <parameter><type><name>prop</name></type></parameter>, <parameter><type><name>signature</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( VLC_SUCCESS != AddProperty( (intf_thread_t*) p_this, &amp;dict, #prop, signature, Marshal##prop ) ) { dbus_message_iter_abandon_container( &amp;args, &amp;dict ); return VLC_ENOMEM; }</cpp:value></cpp:define>






<macro><name>DBUS_METHOD</name><argument_list>( <argument>GetAllProperties</argument> )</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>psz_interface_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument>,
<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,
<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"{sv}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>Metadata</name></expr></argument>, <argument><expr><literal type="string">"a{sv}"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>Position</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>PlaybackStatus</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>LoopStatus</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>Shuffle</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>Volume</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>Rate</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>MinimumRate</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>MaximumRate</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>CanControl</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>CanPlay</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>CanGoNext</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>CanGoPrevious</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>CanPause</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_PROPERTY</name> <argument_list>( <argument><expr><name>CanSeek</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_PROPERTY</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_FUNC</name><parameter_list>( <parameter><type><name>interface</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><name>function</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>else if( dbus_message_is_method_call( p_from, interface, method ) )return function( p_conn, p_from, p_this )</cpp:value></cpp:define>



<function><type><name>DBusHandlerResult</name></type>
<name>handle_player</name> <parameter_list>( <parameter><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>p_conn</name></decl></parameter>, <parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>p_from</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>, <argument><expr><literal type="string">"Get"</literal></expr></argument>, <argument><expr><name>GetProperty</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>, <argument><expr><literal type="string">"Set"</literal></expr></argument>, <argument><expr><name>SetProperty</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>, <argument><expr><literal type="string">"GetAll"</literal></expr></argument>, <argument><expr><name>GetAllProperties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"Previous"</literal></expr></argument>, <argument><expr><name>Prev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"Next"</literal></expr></argument>, <argument><expr><name>Next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"Stop"</literal></expr></argument>, <argument><expr><name>Stop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"Seek"</literal></expr></argument>, <argument><expr><name>Seek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"Play"</literal></expr></argument>, <argument><expr><name>Play</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"Pause"</literal></expr></argument>, <argument><expr><name>Pause</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"PlayPause"</literal></expr></argument>, <argument><expr><name>PlayPause</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"OpenUri"</literal></expr></argument>, <argument><expr><name>OpenUri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"SetPosition"</literal></expr></argument>, <argument><expr><name>SetPosition</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>METHOD_FUNC</name></cpp:undef>




<function><type><name>int</name></type> <name>SeekedEmit</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type> <name>p_intf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SeekedSignal</name><argument_list>( <argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_MAPPING_BEGIN</name></cpp:macro> <cpp:value>if( 0 ) {}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_ENTRY</name><parameter_list>( <parameter><type><name>prop</name></type></parameter>, <parameter><type><name>signature</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>else if( !strcmp( ppsz_properties[i], #prop ) ) { if( VLC_SUCCESS != AddProperty( (intf_thread_t*) p_intf, &amp;changed_properties, #prop, signature, Marshal##prop ) ) { for( ; ppsz_properties[i]; ++i ) free( ppsz_properties[i] ); free( ppsz_properties ); dbus_message_iter_abandon_container( &amp;args, &amp;changed_properties ); return DBUS_HANDLER_RESULT_NEED_MEMORY; } }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_MAPPING_END</name></cpp:macro> <cpp:value>else { for( ; ppsz_properties[i]; ++i ) free( ppsz_properties[i] ); free( ppsz_properties ); dbus_message_iter_abandon_container( &amp;args, &amp;changed_properties ); return DBUS_HANDLER_RESULT_NOT_YET_HANDLED; }</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>DBusHandlerResult</name></type>
<name>PropertiesChangedSignal</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>,
<parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_changed_properties</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>p_conn</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>changed_properties</name></decl>, <decl><type ref="prev"/><name>invalidated_properties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_interface_name</name> <init>= <expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_properties</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SIGNAL_INIT</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>,
<argument><expr><name>DBUS_MPRIS_OBJECT_PATH</name></expr></argument>,
<argument><expr><literal type="string">"PropertiesChanged"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STRING</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"{sv}"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>changed_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ppsz_properties</name> <operator>=</operator> <call><name>vlc_dictionary_all_keys</name><argument_list>( <argument><expr><name>p_changed_properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>ppsz_properties</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dbus_message_iter_abandon_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>changed_properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_properties</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>PROPERTY_MAPPING_BEGIN</name></type>
<name>PROPERTY_ENTRY</name><argument_list>( <argument><expr><name>Metadata</name></expr></argument>, <argument><expr><literal type="string">"a{sv}"</literal></expr></argument> )</argument_list>
<name>PROPERTY_ENTRY</name><argument_list>( <argument><expr><name>PlaybackStatus</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list>
<name>PROPERTY_ENTRY</name><argument_list>( <argument><expr><name>LoopStatus</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list>
<name>PROPERTY_ENTRY</name><argument_list>( <argument><expr><name>Rate</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument> )</argument_list>
<name>PROPERTY_ENTRY</name><argument_list>( <argument><expr><name>Shuffle</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_ENTRY</name><argument_list>( <argument><expr><name>Volume</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument> )</argument_list>
<name>PROPERTY_ENTRY</name><argument_list>( <argument><expr><name>CanSeek</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_ENTRY</name><argument_list>( <argument><expr><name>CanPlay</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_ENTRY</name><argument_list>( <argument><expr><name>CanPause</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>
<name>PROPERTY_MAPPING_END</name>

<name>free</name><argument_list>( <argument><expr><name><name>ppsz_properties</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></decl>;</decl_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>changed_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>invalidated_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>invalidated_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>SIGNAL_SEND</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_MAPPING_BEGIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_ADD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_MAPPING_END</name></cpp:undef>




<function><type><name>int</name></type> <name>PlayerPropertiesChangedEmit</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type> <name>p_intf</name></decl></parameter>,
<parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_changed_properties</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PropertiesChangedSignal</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>p_changed_properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
