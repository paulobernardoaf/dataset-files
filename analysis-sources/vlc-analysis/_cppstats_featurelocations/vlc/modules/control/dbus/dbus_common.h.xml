<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\control\dbus\dbus_common.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_DBUS_DBUS_COMMON_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DBUS_DBUS_COMMON_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbus/dbus.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBUS_MPRIS_OBJECT_PATH</name></cpp:macro> <cpp:value>"/org/mpris/MediaPlayer2"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTF</name></cpp:macro> <cpp:value>((intf_thread_t *)p_this)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PL</name></cpp:macro> <cpp:value>(INTF-&gt;p_sys-&gt;playlist)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBUS_METHOD</name><parameter_list>( <parameter><type><name>method_function</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>static DBusHandlerResult method_function ( DBusConnection *p_conn, DBusMessage *p_from, void *p_this )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBUS_SIGNAL</name><parameter_list>( <parameter><type><name>signal_function</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>static DBusHandlerResult signal_function ( DBusConnection *p_conn, void *p_data )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLY_INIT</name></cpp:macro> <cpp:value>DBusMessage* p_msg = dbus_message_new_method_return( p_from ); if( !p_msg ) return DBUS_HANDLER_RESULT_NEED_MEMORY;</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLY_SEND</name></cpp:macro> <cpp:value>if( !dbus_connection_send( p_conn, p_msg, NULL ) ) return DBUS_HANDLER_RESULT_NEED_MEMORY; dbus_connection_flush( p_conn ); dbus_message_unref( p_msg ); return DBUS_HANDLER_RESULT_HANDLED</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNAL_INIT</name><parameter_list>( <parameter><type><name>interface</name></type></parameter>, <parameter><type><name>path</name></type></parameter>, <parameter><type><name>signal</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>DBusMessage *p_msg = dbus_message_new_signal( path, interface, signal ); if( !p_msg ) return DBUS_HANDLER_RESULT_NEED_MEMORY;</cpp:value></cpp:define> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNAL_SEND</name></cpp:macro> <cpp:value>if( !dbus_connection_send( p_conn, p_msg, NULL ) ) return DBUS_HANDLER_RESULT_NEED_MEMORY; dbus_message_unref( p_msg ); dbus_connection_flush( p_conn ); return DBUS_HANDLER_RESULT_HANDLED</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_ARGUMENTS</name></cpp:macro> <cpp:value>DBusMessageIter args; dbus_message_iter_init_append( p_msg, &amp;args )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBUS_ADD</name><parameter_list>( <parameter><type><name>dbus_type</name></type></parameter>, <parameter><type><name>value</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( !dbus_message_iter_append_basic( &amp;args, dbus_type, value ) ) return DBUS_HANDLER_RESULT_NEED_MEMORY</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_STRING</name><parameter_list>( <parameter><type><name>s</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>DBUS_ADD( DBUS_TYPE_STRING, s )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_DOUBLE</name><parameter_list>( <parameter><type><name>d</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>DBUS_ADD( DBUS_TYPE_DOUBLE, d )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_BOOL</name><parameter_list>( <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>DBUS_ADD( DBUS_TYPE_BOOLEAN, b )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_INT32</name><parameter_list>( <parameter><type><name>i</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>DBUS_ADD( DBUS_TYPE_INT32, i )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_INT64</name><parameter_list>( <parameter><type><name>i</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>DBUS_ADD( DBUS_TYPE_INT64, i )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_BYTE</name><parameter_list>( <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>DBUS_ADD( DBUS_TYPE_BYTE, b )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPRIS_TRACKID_FORMAT</name></cpp:macro> <cpp:value>"/org/videolan/vlc/playlist/%lu"</cpp:value></cpp:define>

<struct>struct <name>intf_sys_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_playlist_listener_id</name> <modifier>*</modifier></type><name>playlist_listener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_listener_id</name> <modifier>*</modifier></type><name>player_listener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_aout_listener_id</name> <modifier>*</modifier></type><name>player_aout_listener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_player_vout_listener_id</name> <modifier>*</modifier></type><name>player_vout_listener</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>p_conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_meta_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_int32_t</name></type> <name>i_player_caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_int32_t</name></type> <name>i_playing_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_can_play</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_dead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>timeouts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>watches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p_pipe_fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_input_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_input_pos_event</name></decl>;</decl_stmt> 
}</block>;</struct>

<enum>enum
<block>{
<decl><name>SIGNAL_NONE</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SIGNAL_ITEM_CURRENT</name></decl>,
<decl><name>SIGNAL_PLAYLIST_ITEM_APPEND</name></decl>,
<decl><name>SIGNAL_PLAYLIST_ITEM_DELETED</name></decl>,
<decl><name>SIGNAL_INPUT_METADATA</name></decl>,
<decl><name>SIGNAL_RANDOM</name></decl>,
<decl><name>SIGNAL_REPEAT</name></decl>,
<decl><name>SIGNAL_LOOP</name></decl>,
<decl><name>SIGNAL_STATE</name></decl>,
<decl><name>SIGNAL_RATE</name></decl>,
<decl><name>SIGNAL_SEEK</name></decl>,
<decl><name>SIGNAL_CAN_SEEK</name></decl>,
<decl><name>SIGNAL_CAN_PAUSE</name></decl>,
<decl><name>SIGNAL_VOLUME_CHANGE</name></decl>,
<decl><name>SIGNAL_VOLUME_MUTED</name></decl>,
<decl><name>SIGNAL_FULLSCREEN</name></decl>
}</block>;</enum>

<enum>enum
<block>{
<decl><name>PLAYBACK_STATE_INVALID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>PLAYBACK_STATE_PLAYING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PLAYBACK_STATE_PAUSED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>PLAYBACK_STATE_STOPPED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<function_decl><type><name>int</name></type> <name>DemarshalSetPropertyValue</name><parameter_list>( <parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>p_msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_arg</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>GetInputMeta</name><parameter_list>( <parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>args</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>AddProperty</name> <parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>,
<parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>p_container</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_property_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_signature</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_marshaller</name>) <parameter_list>(<parameter><decl><type><name>intf_thread_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
