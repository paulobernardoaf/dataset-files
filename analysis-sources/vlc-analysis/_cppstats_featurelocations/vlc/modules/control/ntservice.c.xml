<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\control\ntservice.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLCSERVICENAME</name></cpp:macro> <cpp:value>"VLC media player"</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Activate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTALL_TEXT</name></cpp:macro> <cpp:value>N_( "Install Windows Service" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTALL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Install the Service and exit." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNINSTALL_TEXT</name></cpp:macro> <cpp:value>N_( "Uninstall Windows Service" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNINSTALL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Uninstall the Service and exit." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_TEXT</name></cpp:macro> <cpp:value>N_( "Display name of the Service" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Change the display name of the Service." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTIONS_TEXT</name></cpp:macro> <cpp:value>N_("Configuration options")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTIONS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Configuration options that will be " "used by the Service (eg. --foo=bar --no-foobar). It should be specified ""at install time so the Service is properly configured.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRAINTF_TEXT</name></cpp:macro> <cpp:value>N_("Extra interface modules")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRAINTF_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Additional interfaces spawned by the " "Service. It should be specified at install time so the Service is " "properly configured. Use a comma separated list of interface modules. " "(common values are: logger, sap, rc, http)")</cpp:value></cpp:define>





<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"NT Service"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Windows Service interface"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INTERFACE</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INTERFACE_CONTROL</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"ntservice-install"</literal></argument>, <argument>false</argument>,
<argument>INSTALL_TEXT</argument>, <argument>INSTALL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"ntservice-uninstall"</literal></argument>, <argument>false</argument>,
<argument>UNINSTALL_TEXT</argument>, <argument>UNINSTALL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name> <argument_list>( <argument><literal type="string">"ntservice-name"</literal></argument>, <argument>VLCSERVICENAME</argument>,
<argument>NAME_TEXT</argument>, <argument>NAME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name> <argument_list>( <argument><literal type="string">"ntservice-options"</literal></argument>, <argument>NULL</argument>,
<argument>OPTIONS_TEXT</argument>, <argument>OPTIONS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name> <argument_list>( <argument><literal type="string">"ntservice-extraintf"</literal></argument>, <argument>NULL</argument>,
<argument>EXTRAINTF_TEXT</argument>, <argument>EXTRAINTF_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Activate</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<struct>struct <name>intf_sys_t</name>
<block>{
<decl_stmt><decl><type><name>SERVICE_STATUS_HANDLE</name></type> <name>hStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SERVICE_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
}</block>;</struct>




<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>NTServiceInstall</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>NTServiceUninstall</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type> <name>ServiceDispatch</name><parameter_list>( <parameter><decl><type><name>DWORD</name></type> <name>numArgs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type> <name>ServiceCtrlHandler</name><parameter_list>( <parameter><decl><type><name>DWORD</name></type> <name>control</name></decl></parameter> )</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>intf_thread_t</name> <modifier>*</modifier></type><name>p_global_intf</name></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Activate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Run</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SERVICE_TABLE_ENTRY</name></type> <name><name>dispatchTable</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator> <call><name>TEXT</name><argument_list>(<argument><expr><name>VLCSERVICENAME</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>LPSERVICE_MAIN_FUNCTION</name><operator>)</operator> <operator>&amp;</operator><name>ServiceDispatch</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_global_intf</name> <operator>=</operator> <name>p_intf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"ntservice-name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name></expr> ?</condition><then>
<expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name></expr> </then><else>: <expr><call><name>strdup</name><argument_list>(<argument><expr><name>VLCSERVICENAME</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"ntservice-install"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>NTServiceInstall</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"ntservice-uninstall"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>NTServiceUninstall</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>StartServiceCtrlDispatcher</name><argument_list>( <argument><expr><name>dispatchTable</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"StartServiceCtrlDispatcher failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>libvlc_Quit</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>NTServiceInstall</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>path_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>psz_pathtmp</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>handle</name> <init>= <expr><call><name>OpenSCManager</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SC_MANAGER_ALL_ACCESS</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>,
<argument><expr><literal type="string">"could not connect to Services Control Manager database"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>( <argument><expr><name>handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>GetModuleFileName</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_pathtmp</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>path_stream</name></expr></argument>, <argument><expr><literal type="string">"\"%ls\" -I ntservice"</literal></expr></argument>, <argument><expr><name>psz_pathtmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_extra</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"ntservice-extraintf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_extra</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_extra</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>path_stream</name></expr></argument>, <argument><expr><literal type="string">" --ntservice-extraintf %s"</literal></expr></argument>, <argument><expr><name>psz_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_extra</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"ntservice-options"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_extra</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_extra</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>path_stream</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>psz_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>path_stream</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>( <argument><expr><name>handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>service</name> <init>=
<expr><call><name>CreateServiceA</name><argument_list>( <argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name></expr></argument>,
<argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_EXECUTE</name></expr></argument>,
<argument><expr><name>SERVICE_WIN32_OWN_PROCESS</name></expr></argument>,
<argument><expr><name>SERVICE_AUTO_START</name></expr></argument>, <argument><expr><name>SERVICE_ERROR_IGNORE</name></expr></argument>,
<argument><expr><name><name>path_stream</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>service</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_SERVICE_EXISTS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"could not create new service: \"%s\" (%s)"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name></expr></argument>, <argument><expr><name><name>path_stream</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>path_stream</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>( <argument><expr><name>handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"service \"%s\" already exists"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"service successfuly created"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>path_stream</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>service</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>( <argument><expr><name>service</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>( <argument><expr><name>handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>NTServiceUninstall</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>handle</name> <init>= <expr><call><name>OpenSCManager</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SC_MANAGER_ALL_ACCESS</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>,
<argument><expr><literal type="string">"could not connect to Services Control Manager database"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>service</name> <init>= <expr><call><name>OpenServiceA</name><argument_list>( <argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name></expr></argument>, <argument><expr><name>DELETE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>service</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"could not open service"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>( <argument><expr><name>handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>DeleteService</name><argument_list>( <argument><expr><name>service</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"could not delete service \"%s\""</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"service deleted successfuly"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>( <argument><expr><name>service</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>( <argument><expr><name>handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type> <name>ServiceDispatch</name><parameter_list>( <parameter><decl><type><name>DWORD</name></type> <name>numArgs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>numArgs</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>args</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p_global_intf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_modules</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_parser</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SERVICE_STATUS</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dwServiceType</name></name> <operator>=</operator> <name>SERVICE_WIN32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dwCurrentState</name></name> <operator>=</operator> <name>SERVICE_START_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dwControlsAccepted</name></name> <operator>=</operator> <name>SERVICE_ACCEPT_STOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hStatus</name></name> <operator>=</operator>
<call><name>RegisterServiceCtrlHandlerA</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_service</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ServiceCtrlHandler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hStatus</name></name> <operator>==</operator> <operator>(</operator><name>SERVICE_STATUS_HANDLE</name><operator>)</operator><literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"failed to register service control handler"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>psz_modules</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"ntservice-extraintf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_modules</name></expr>;</expr_stmt>
<while>while<condition>( <expr><name>psz_parser</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_module</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_temp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>psz_module</name> <operator>=</operator> <name>psz_parser</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_module</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz_parser</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_temp</name></expr></argument>, <argument><expr><literal type="string">"%s,none"</literal></expr></argument>, <argument><expr><name>psz_module</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>intf_Create</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"interface \"%s\" initialization failed"</literal></expr></argument>,
<argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_modules</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dwCurrentState</name></name> <operator>=</operator> <name>SERVICE_RUNNING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dwCheckPoint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dwWaitHint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetServiceStatus</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hStatus</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>status</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type> <name>ServiceCtrlHandler</name><parameter_list>( <parameter><decl><type><name>DWORD</name></type> <name>control</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p_global_intf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>control</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SERVICE_CONTROL_SHUTDOWN</name></expr>:</case>
<case>case <expr><name>SERVICE_CONTROL_STOP</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dwCurrentState</name></name> <operator>=</operator> <name>SERVICE_STOPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dwWin32ExitCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dwCheckPoint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>dwWaitHint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SERVICE_CONTROL_INTERROGATE</name></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>SetServiceStatus</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hStatus</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>status</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
