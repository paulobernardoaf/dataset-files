<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\services_discovery\mtp.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_services_discovery.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libmtp.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>VLC_SD_PROBE_HELPER</name><argument_list>(<argument><literal type="string">"mtp"</literal></argument>, <argument>N_(<literal type="string">"MTP devices"</literal>)</argument>, <argument>SD_CAT_DEVICES</argument>)</argument_list></macro>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"MTP"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"MTP devices"</literal> )</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_PLAYLIST</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_PLAYLIST_SD</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"services_discovery"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>cannot_unload_broken_library</name><argument_list>()</argument_list></macro>

<expr_stmt><expr><name>VLC_SD_PROBE_SUBMODULE</name>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>






<specifier>static</specifier> <name>void</name> <operator>*</operator><call><name>Run</name><argument_list>( <argument><expr><name>void</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AddDevice</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>LIBMTP_raw_device_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AddTrack</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>LIBMTP_track_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDevice</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CountTracks</name><parameter_list>( <parameter><decl><type><name>uint64_t</name> <specifier>const</specifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <specifier>const</specifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type> <parameter><decl><type><specifier>const</specifier></type></decl></parameter></decl></parameter> )</parameter_list>;</function_decl>





<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_tracks_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_product_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
}</block></struct></type> <name>services_discovery_sys_t</name>;</typedef>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator> <name>services_discovery_t</name> <operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>services_discovery_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sd</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"MTP devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_once_t</name></type> <name>mtp_init_once</name> <init>= <expr><name>VLC_STATIC_ONCE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_once</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mtp_init_once</name></expr></argument>, <argument><expr><name>LIBMTP_Init</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Run</name></expr></argument>, <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator> <name>services_discovery_t</name> <operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LIBMTP_raw_device_t</name> <modifier>*</modifier></type><name>p_rawdevices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_numrawdevices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>LIBMTP_Detect_Raw_Devices</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_rawdevices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_numrawdevices</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_numrawdevices</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_rawdevices</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name>i_status</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"New device found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>AddDevice</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_rawdevices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_numrawdevices</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>p_rawdevices</name> <operator>==</operator> <name>NULL</name> <operator>)</operator>
<operator>&amp;&amp;</operator> <name>i_status</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Device disconnected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseDevice</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_rawdevices</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>( <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>AddDevice</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>,
<parameter><decl><type><name>LIBMTP_raw_device_t</name> <modifier>*</modifier></type><name>p_raw_device</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBMTP_mtpdevice_t</name> <modifier>*</modifier></type><name>p_device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBMTP_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_device</name> <operator>=</operator> <call><name>LIBMTP_Open_Raw_Device</name><argument_list>( <argument><expr><name>p_raw_device</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>psz_name</name> <operator>=</operator> <call><name>LIBMTP_Get_Friendlyname</name><argument_list>( <argument><expr><name>p_device</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>psz_name</name> <operator>=</operator> <call><name>LIBMTP_Get_Modelname</name><argument_list>( <argument><expr><name>p_device</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>psz_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"MTP Device"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Found device: %s"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bus</name></name> <operator>=</operator> <name><name>p_raw_device</name><operator>-&gt;</operator><name>bus_location</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dev</name></name> <operator>=</operator> <name><name>p_raw_device</name><operator>-&gt;</operator><name>devnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_product_id</name></name> <operator>=</operator> <name><name>p_raw_device</name><operator>-&gt;</operator><name>device_entry</name><operator>.</operator><name>product_id</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_track</name> <operator>=</operator> <call><name>LIBMTP_Get_Tracklisting_With_Callback</name><argument_list>( <argument><expr><name>p_device</name></expr></argument>,
<argument><expr><name>CountTracks</name></expr></argument>, <argument><expr><name>p_sd</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"No tracks on the device"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pp_items</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks_num</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><name>p_track</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Track found: %s - %s"</literal></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>artist</name></name></expr></argument>,
<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddTrack</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_tmp</name> <operator>=</operator> <name>p_track</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_track</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIBMTP_destroy_track_t</name><argument_list>( <argument><expr><name>p_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>psz_name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIBMTP_Release_Device</name><argument_list>( <argument><expr><name>p_device</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"The device seems to be mounted, unmount it first"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddTrack</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>, <parameter><decl><type><name>LIBMTP_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extension</name></decl>;</decl_stmt>

<expr_stmt><expr><name>extension</name> <operator>=</operator> <call><name>rindex</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_string</name></expr></argument>, <argument><expr><literal type="string">"mtp://%"</literal><name>PRIu32</name><literal type="string">":%"</literal><name>PRIu8</name><literal type="string">":%"</literal><name>PRIu16</name><literal type="string">":%d%s"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bus</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dev</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_product_id</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>item_id</name></name></expr></argument>,
<argument><expr><name>extension</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Error adding %s, skipping it"</literal></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>filename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_input</name> <operator>=</operator> <call><name>input_item_New</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>title</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Error adding %s, skipping it"</literal></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>filename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetArtist</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>artist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_SetGenre</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>genre</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_SetAlbum</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>album</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_string</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>tracknumber</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_SetTrackNum</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_string</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>rating</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_SetRating</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>input_item_SetDate</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>services_discovery_AddItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_items</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p_input</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDevice</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_items</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_items</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_items</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i_i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>pp_items</name><index>[<expr><name>i_i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>services_discovery_RemoveItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name><name>pp_items</name><index>[<expr><name>i_i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name><name>pp_items</name><index>[<expr><name>i_i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_items</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CountTracks</name><parameter_list>( <parameter><decl><type><name>uint64_t</name> <specifier>const</specifier></type> <name>sent</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <specifier>const</specifier></type> <name>total</name></decl></parameter>,
<parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>sent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks_num</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
