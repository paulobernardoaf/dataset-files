<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\services_discovery\avahi.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_services_discovery.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_renderer_discovery.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avahi-client/client.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avahi-client/publish.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avahi-client/lookup.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avahi-common/thread-watch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avahi-common/malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avahi-common/error.h&gt;</cpp:file></cpp:include>






<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenSD</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseSD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenRD</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseRD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>VLC_SD_PROBE_HELPER</name><argument_list>(<argument><literal type="string">"avahi"</literal></argument>, <argument>N_(<literal type="string">"Zeroconf network services"</literal>)</argument>, <argument>SD_CAT_LAN</argument>)</argument_list></macro>
<macro><name>VLC_RD_PROBE_HELPER</name><argument_list>( <argument><literal type="string">"avahi_renderer"</literal></argument>, <argument><literal type="string">"Avahi Zeroconf renderer Discovery"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"Avahi"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Zeroconf services"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_PLAYLIST</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_PLAYLIST_SD</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"services_discovery"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenSD</argument>, <argument>CloseSD</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"mdns"</literal></argument>, <argument><literal type="string">"avahi"</literal></argument> )</argument_list></macro>

<expr_stmt><expr><name>VLC_SD_PROBE_SUBMODULE</name>
<macro><name>add_submodule</name><argument_list>()</argument_list></macro> \
<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"Avahi Renderer Discovery"</literal> )</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_RENDERER</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"renderer_discovery"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenRD</argument>, <argument>CloseRD</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"mdns_renderer"</literal></argument>, <argument><literal type="string">"avahi_renderer"</literal></argument> )</argument_list></macro>
<name>VLC_RD_PROBE_SUBMODULE</name>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro></expr></expr_stmt>





<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>AvahiThreadedPoll</name> <modifier>*</modifier></type><name>poll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AvahiClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>services_name_to_input_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>renderer</name></decl>;</decl_stmt>
}</block></struct></type> <name>discovery_sys_t</name>;</typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_service_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_renderer</name></decl>;</decl_stmt>
}</block> <decl><name><name>protocols</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ftp"</literal></expr>, <expr><literal type="string">"_ftp._tcp"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smb"</literal></expr>, <expr><literal type="string">"_smb._tcp"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nfs"</literal></expr>, <expr><literal type="string">"_nfs._tcp"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sftp"</literal></expr>, <expr><literal type="string">"_sftp-ssh._tcp"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rtsp"</literal></expr>, <expr><literal type="string">"_rtsp._tcp"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chromecast"</literal></expr>, <expr><literal type="string">"_googlecast._tcp"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_PROTOCOLS</name></cpp:macro> <cpp:value>(sizeof(protocols) / sizeof(*protocols))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type> <name>add_renderer</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_protocol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_addr</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_port</name></decl></parameter>,
<parameter><decl><type><name>AvahiStringList</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name> <init>= <expr><operator>(</operator> <name>vlc_renderer_discovery_t</name><operator>*</operator> <operator>)</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AvahiStringList</name> <modifier>*</modifier></type><name>asl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>friendly_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>icon_uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extra_uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>renderer_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><literal type="string">"chromecast"</literal></expr></argument>, <argument><expr><name>psz_protocol</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>asl</name> <operator>=</operator> <call><name>avahi_string_list_find</name><argument_list>( <argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"ca"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>asl</name> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>avahi_string_list_get_pair</name><argument_list>( <argument><expr><name>asl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ca</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ca</name> <operator>&amp;</operator> <literal type="number">0x01</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>renderer_flags</name> <operator>|=</operator> <name>VLC_RENDERER_CAN_VIDEO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ca</name> <operator>&amp;</operator> <literal type="number">0x04</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>renderer_flags</name> <operator>|=</operator> <name>VLC_RENDERER_CAN_AUDIO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avahi_free</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avahi_free</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>asl</name> <operator>=</operator> <call><name>avahi_string_list_find</name><argument_list>( <argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"fn"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>asl</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>avahi_string_list_get_pair</name><argument_list>( <argument><expr><name>asl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>friendly_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>friendly_name</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avahi_free</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avahi_free</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>asl</name> <operator>=</operator> <call><name>avahi_string_list_find</name><argument_list>( <argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"ic"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>asl</name> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>avahi_string_list_get_pair</name><argument_list>( <argument><expr><name>asl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>icon_uri</name></expr></argument>, <argument><expr><literal type="string">"http://%s:8008%s"</literal></expr></argument>, <argument><expr><name>psz_addr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avahi_free</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avahi_free</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>uri</name></expr></argument>, <argument><expr><literal type="string">"%s://%s:%u"</literal></expr></argument>, <argument><expr><name>psz_protocol</name></expr></argument>, <argument><expr><name>psz_addr</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extra_uri</name> <operator>=</operator> <ternary><condition><expr><name>renderer_flags</name> <operator>&amp;</operator> <name>VLC_RENDERER_CAN_VIDEO</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><literal type="string">"no-video"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>demux</name> <operator>=</operator> <literal type="string">"cc_demux"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_renderer_item</name> <init>=
<expr><call><name>vlc_renderer_item_new</name><argument_list>( <argument><expr><name>psz_protocol</name></expr></argument>, <argument><expr><ternary><condition><expr><name>friendly_name</name></expr> ?</condition><then> <expr><name>friendly_name</name></expr> </then><else>: <expr><name>psz_name</name></expr></else></ternary></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>extra_uri</name></expr></argument>,
<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>icon_uri</name></expr></argument>, <argument><expr><name>renderer_flags</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_renderer_item</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>services_name_to_input_item</name></name></expr></argument>,
<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>p_renderer_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rd_add_item</name><argument_list>( <argument><expr><name>p_rd</name></expr></argument>, <argument><expr><name>p_renderer_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>friendly_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>icon_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>client_callback</name><parameter_list>( <parameter><decl><type><name>AvahiClient</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AvahiClientState</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>userdata</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>state</name> <operator>==</operator> <name>AVAHI_CLIENT_FAILURE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>avahi_client_errno</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AVAHI_ERR_DISCONNECTED</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"avahi client disconnected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avahi_threaded_poll_quit</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>poll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>resolve_callback</name><parameter_list>(
<parameter><decl><type><name>AvahiServiceResolver</name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name>AvahiIfIndex</name></type> <name>interface</name></decl></parameter>,
<parameter><decl><type><name>AvahiProtocol</name></type> <name>protocol</name></decl></parameter>,
<parameter><decl><type><name>AvahiResolverEvent</name></type> <name>event</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AvahiAddress</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><name>AvahiStringList</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>,
<parameter><decl><type><name>AvahiLookupResultFlags</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>host_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>event</name> <operator>==</operator> <name>AVAHI_RESOLVER_FAILURE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>,
<argument><expr><literal type="string">"failed to resolve service '%s' of type '%s' in domain '%s'"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>domain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>event</name> <operator>==</operator> <name>AVAHI_RESOLVER_FOUND</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AvahiStringList</name> <modifier>*</modifier></type><name>asl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"service '%s' of type '%s' in domain '%s' port %i"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avahi_address_snprint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>protocol</name> <operator>==</operator> <name>AVAHI_PROTO_INET6</name></expr> )</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_addr</name></expr></argument>, <argument><expr><literal type="string">"[%s]"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>avahi_service_resolver_free</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_protocol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_renderer</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PROTOCOLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_service_name</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_protocol</name> <operator>=</operator> <name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_protocol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_renderer</name> <operator>=</operator> <name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_renderer</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>psz_protocol</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_addr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avahi_service_resolver_free</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>txt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>is_renderer</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>addr_v4v6</name> <init>= <expr><ternary><condition><expr><name>psz_addr</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>psz_addr</name></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add_renderer</name><argument_list>( <argument><expr><name>psz_protocol</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr_v4v6</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_addr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avahi_service_resolver_free</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>txt</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>asl</name> <operator>=</operator> <call><name>avahi_string_list_find</name><argument_list>( <argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>asl</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>avahi_string_list_get_pair</name><argument_list>( <argument><expr><name>asl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_uri</name></expr></argument>, <argument><expr><literal type="string">"%s://%s:%d%s"</literal></expr></argument>,
<argument><expr><name>psz_protocol</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_addr</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>psz_addr</name></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr></argument>,
<argument><expr><name>port</name></expr></argument>, <argument><expr><name>value</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_addr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avahi_service_resolver_free</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avahi_free</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avahi_free</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_uri</name></expr></argument>, <argument><expr><literal type="string">"%s://%s:%d"</literal></expr></argument>,
<argument><expr><name>psz_protocol</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_addr</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>psz_addr</name></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr></argument>, <argument><expr><name>port</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_addr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avahi_service_resolver_free</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_addr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_uri</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_input</name> <operator>=</operator> <call><name>input_item_NewDirectory</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ITEM_NET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>p_input</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator> <name>services_discovery_t</name><operator>*</operator> <operator>)</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>services_name_to_input_item</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>services_discovery_AddItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avahi_service_resolver_free</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>browse_callback</name><parameter_list>(
<parameter><decl><type><name>AvahiServiceBrowser</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>AvahiIfIndex</name></type> <name>interface</name></decl></parameter>,
<parameter><decl><type><name>AvahiProtocol</name></type> <name>protocol</name></decl></parameter>,
<parameter><decl><type><name>AvahiBrowserEvent</name></type> <name>event</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>,
<parameter><decl><type><name>AvahiLookupResultFlags</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>event</name> <operator>==</operator> <name>AVAHI_BROWSER_NEW</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>avahi_service_resolver_new</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>AVAHI_PROTO_UNSPEC</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>resolve_callback</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"failed to resolve service '%s': %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>avahi_strerror</name><argument_list>( <argument><expr><call><name>avahi_client_errno</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>event</name> <operator>==</operator> <name>AVAHI_BROWSER_REMOVE</name> <operator>&amp;&amp;</operator> <name>name</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_item</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_item</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>services_name_to_input_item</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_item</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"failed to find service '%s' in playlist"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>renderer</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name> <init>= <expr><operator>(</operator> <name>vlc_renderer_discovery_t</name><operator>*</operator> <operator>)</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_rd_remove_item</name><argument_list>( <argument><expr><name>p_rd</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator> <name>services_discovery_t</name><operator>*</operator> <operator>)</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>services_discovery_RemoveItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_dictionary_remove_value_for_key</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>services_name_to_input_item</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_input_item</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_item</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_renderer_item</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_item</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>( <parameter><decl><type><name>discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>services_name_to_input_item</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>poll</name></name> <operator>=</operator> <call><name>avahi_threaded_poll_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>poll</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"failed to create Avahi threaded poll"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <call><name>avahi_client_new</name><argument_list>( <argument><expr><call><name>avahi_threaded_poll_get</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>poll</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>client_callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"failed to create avahi client: %s"</literal></expr></argument>,
<argument><expr><call><name>avahi_strerror</name><argument_list>( <argument><expr><name>err</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PROTOCOLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_renderer</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>renderer</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>AvahiServiceBrowser</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>avahi_service_browser_new</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>AVAHI_IF_UNSPEC</name></expr></argument>,
<argument><expr><name>AVAHI_PROTO_UNSPEC</name></expr></argument>,
<argument><expr><name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_service_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>browse_callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>sb</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"failed to create avahi service browser %s"</literal></expr></argument>, <argument><expr><call><name>avahi_strerror</name><argument_list>( <argument><expr><call><name>avahi_client_errno</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>avahi_threaded_poll_start</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>poll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>client</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avahi_client_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>poll</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avahi_threaded_poll_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>poll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenSD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator> <name>services_discovery_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sd</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Zeroconf network services"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>discovery_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>p_this</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>renderer</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>services_name_to_input_item</name></name></expr></argument>,
<argument><expr><name>clear_input_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenRD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name> <init>= <expr><operator>(</operator><name>vlc_renderer_discovery_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>discovery_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_rd</name><operator>-&gt;</operator><name>p_sys</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>p_this</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>renderer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>services_name_to_input_item</name></name></expr></argument>,
<argument><expr><name>clear_renderer_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseCommon</name><parameter_list>( <parameter><decl><type><name>discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avahi_threaded_poll_stop</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>poll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avahi_client_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avahi_threaded_poll_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>poll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseSD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator> <name>services_discovery_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CloseCommon</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>services_name_to_input_item</name></name></expr></argument>,
<argument><expr><name>clear_input_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseRD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name> <init>= <expr><operator>(</operator><name>vlc_renderer_discovery_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CloseCommon</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>services_name_to_input_item</name></name></expr></argument>,
<argument><expr><name>clear_renderer_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
