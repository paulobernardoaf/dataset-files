<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\services_discovery\microdns.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_services_discovery.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_renderer_discovery.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;microdns/microdns.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenSD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseSD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenRD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseRD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>VLC_SD_PROBE_HELPER</name><argument_list>( <argument><literal type="string">"microdns"</literal></argument>, <argument>N_(<literal type="string">"mDNS Network Discovery"</literal>)</argument>, <argument>SD_CAT_LAN</argument> )</argument_list></macro>
<macro><name>VLC_RD_PROBE_HELPER</name><argument_list>( <argument><literal type="string">"microdns_renderer"</literal></argument>, <argument><literal type="string">"mDNS renderer Discovery"</literal></argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"sd-microdns-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LISTEN_INTERVAL</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(15)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT</name></cpp:macro> <cpp:value>(3 * LISTEN_INTERVAL + VLC_TICK_FROM_SEC(5))</cpp:value></cpp:define> 




<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"mDNS"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"mDNS Network Discovery"</literal> )</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_PLAYLIST</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_PLAYLIST_SD</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"services_discovery"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenSD</argument>, <argument>CloseSD</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"mdns"</literal></argument>, <argument><literal type="string">"microdns"</literal></argument> )</argument_list></macro>
<expr_stmt><expr><name>VLC_SD_PROBE_SUBMODULE</name>
<macro><name>add_submodule</name><argument_list>()</argument_list></macro> \
<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"mDNS Renderer Discovery"</literal> )</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_RENDERER</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"renderer_discovery"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenRD</argument>, <argument>CloseRD</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"mdns_renderer"</literal></argument>, <argument><literal type="string">"microdns_renderer"</literal></argument> )</argument_list></macro>
<name>VLC_RD_PROBE_SUBMODULE</name>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_protocol</name></expr>;
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_service_name</name></expr>;
<expr><name>bool</name> <name>b_renderer</name></expr>;
<expr><name>int</name> <name>i_renderer_flags</name></expr>;
}</block> <name><name>protocols</name><index>[]</index></name> <operator>=</operator> <block>{
<expr><block>{ <expr><literal type="string">"ftp"</literal></expr>, <expr><literal type="string">"_ftp._tcp.local"</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smb"</literal></expr>, <expr><literal type="string">"_smb._tcp.local"</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nfs"</literal></expr>, <expr><literal type="string">"_nfs._tcp.local"</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sftp"</literal></expr>, <expr><literal type="string">"_sftp-ssh._tcp.local"</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rtsp"</literal></expr>, <expr><literal type="string">"_rtsp._tcp.local"</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chromecast"</literal></expr>, <expr><literal type="string">"_googlecast._tcp.local"</literal></expr>, <expr><name>true</name></expr>, <expr><name>VLC_RENDERER_CAN_AUDIO</name></expr> }</block></expr>,
}</block></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_PROTOCOLS</name></cpp:macro> <cpp:value>(sizeof(protocols) / sizeof(*protocols))</cpp:value></cpp:define>

<struct>struct <name>discovery_sys</name>
<block>{
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_bool</name></type> <name>stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mdns_ctx</name></name> <modifier>*</modifier></type> <name>p_microdns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>ppsz_service_names</name><index>[<expr><name>NB_PROTOCOLS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_service_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>items</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>item</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type> <name>p_input_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_renderer_item_t</name><modifier>*</modifier></type><name>p_renderer_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_seen</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>srv</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_device_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_renderer_flags</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_error</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_what</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_err_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>mdns_strerror</name><argument_list>( <argument><expr><name>i_status</name></expr></argument>, <argument><expr><name>psz_err_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_err_str</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"mDNS %s error: %s"</literal></expr></argument>, <argument><expr><name>psz_what</name></expr></argument>, <argument><expr><name>psz_err_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"mDNS %s error: unknown: %d"</literal></expr></argument>, <argument><expr><name>psz_what</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>strrcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>m</name> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>items_add_input</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>item</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_item</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name> <init>=
<expr><call><name>input_item_NewDirectory</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>ITEM_NET</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_input_item</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>=</operator> <name>psz_uri</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_input_item</name></name> <operator>=</operator> <name>p_input_item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_renderer_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_last_seen</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>services_discovery_AddItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_input_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>items_add_renderer</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_demux_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_icon_uri</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_flags</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>item</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_item</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_extra_uri</name> <init>= <expr><ternary><condition><expr><name>i_flags</name> <operator>&amp;</operator> <name>VLC_RENDERER_CAN_VIDEO</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><literal type="string">"no-video"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_renderer_item_t</name> <modifier>*</modifier></type><name>p_renderer_item</name> <init>=
<expr><call><name>vlc_renderer_item_new</name><argument_list>( <argument><expr><literal type="string">"chromecast"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>psz_extra_uri</name></expr></argument>,
<argument><expr><name>psz_demux_filter</name></expr></argument>, <argument><expr><name>psz_icon_uri</name></expr></argument>, <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_renderer_item</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>=</operator> <name>psz_uri</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_input_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_renderer_item</name></name> <operator>=</operator> <name>p_renderer_item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_last_seen</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rd_add_item</name><argument_list>( <argument><expr><name>p_rd</name></expr></argument>, <argument><expr><name>p_renderer_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>items_release</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_sys</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_item</name><operator>-&gt;</operator><name>p_input_item</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_renderer_item</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_renderer_item_release</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_renderer_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>items_exists</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>i_last_seen</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>items_timeout</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>,
<parameter><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_rd</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>p_sd</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_now</name> <operator>-</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_last_seen</name></name> <operator>&gt;</operator> <name>TIMEOUT</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_sd</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>services_discovery_RemoveItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_rd_remove_item</name><argument_list>( <argument><expr><name>p_rd</name></expr></argument>, <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_renderer_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>items_release</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>i</name><operator>--</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>items_clear</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>items_release</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_entries</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rr_entry</name></name> <modifier>*</modifier></type><name>p_entries</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_renderer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>srv</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_srvs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>p_nb_srv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_ip</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_ipv6</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_srv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rr_entry</name></name> <modifier>*</modifier><name>p_entry</name></type> <init>= <expr><name>p_entries</name></expr></init></decl>;</init>
<condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RR_SRV</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_nb_srv</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_nb_srv</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>srv</name></name> <modifier>*</modifier></type><name>p_srvs</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>i_nb_srv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>srv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_srvs</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ip</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>srv</name></name> <modifier>*</modifier></type><name>p_srv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_nb_srv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rr_entry</name></name> <modifier>*</modifier><name>p_entry</name></type> <init>= <expr><name>p_entries</name></expr></init></decl>;</init>
<condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RR_SRV</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PROTOCOLS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strrcmp</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_service_name</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_renderer</name> <operator>==</operator> <name>b_renderer</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_srv</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_srvs</name><index>[<expr><name>i_nb_srv</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_device_name</name></name> <operator>=</operator>
<call><name>strndup</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call>
<operator>-</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_service_name</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_device_name</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_protocol</name></name> <operator>=</operator> <name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_protocol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_port</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>SRV</name><operator>.</operator><name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_renderer_flags</name></name> <operator>=</operator> <name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_renderer_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i_nb_srv</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RR_A</name> <operator>&amp;&amp;</operator> <name>psz_ip</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_ip</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>A</name><operator>.</operator><name>addr_str</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RR_AAAA</name> <operator>&amp;&amp;</operator> <name>psz_ip</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_ip</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>AAAA</name><operator>.</operator><name>addr_str</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_ipv6</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RR_TXT</name> <operator>&amp;&amp;</operator> <name>p_srv</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<for>for <control>( <init><decl><type><name><name>struct</name> <name>rr_data_txt</name></name> <modifier>*</modifier><name>p_txt</name></type> <init>= <expr><name><name>p_entry</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>TXT</name></name></expr></init></decl>;</init>
<condition><expr><name>p_txt</name> <operator>!=</operator> <name>NULL</name></expr> ;</condition> <incr><expr><name>p_txt</name> <operator>=</operator> <name><name>p_txt</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"chromecast"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"fn="</literal></expr></argument>, <argument><expr><name><name>p_txt</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_device_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_device_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_txt</name><operator>-&gt;</operator><name>txt</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"ca="</literal></expr></argument>, <argument><expr><name><name>p_txt</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ca</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name><name>p_txt</name><operator>-&gt;</operator><name>txt</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>ca</name> <operator>&amp;</operator> <literal type="number">0x01</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_renderer_flags</name></name> <operator>|=</operator> <name>VLC_RENDERER_CAN_VIDEO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>ca</name> <operator>&amp;</operator> <literal type="number">0x04</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_renderer_flags</name></name> <operator>|=</operator> <name>VLC_RENDERER_CAN_AUDIO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>psz_ip</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>i_nb_srv</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_srv</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_srvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_device_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_srvs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_srvs</name> <operator>=</operator> <name>p_srvs</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_nb_srv</name> <operator>=</operator> <name>i_nb_srv</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_ip</name> <operator>=</operator> <name>psz_ip</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>create_uri</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_protocol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ip</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_ipv6</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>i_port</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_uri</name></expr></argument>, <argument><expr><literal type="string">"%s://%s%s%s:%u"</literal></expr></argument>, <argument><expr><name>psz_protocol</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>b_ipv6</name></expr> ?</condition><then> <expr><literal type="string">"["</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>psz_ip</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_ipv6</name></expr> ?</condition><then> <expr><literal type="string">"]"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>i_port</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>psz_uri</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>new_entries_sd_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rr_entry</name></name> <modifier>*</modifier></type><name>p_entries</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>print_error</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">"entry callback"</literal></expr></argument>, <argument><expr><name>i_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>srv</name></name> <modifier>*</modifier></type><name>p_srvs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_nb_srv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ipv6</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>parse_entries</name><argument_list>( <argument><expr><name>p_entries</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_srvs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nb_srv</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>psz_ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_ipv6</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_srv</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>srv</name></name> <modifier>*</modifier></type><name>p_srv</name> <init>= <expr><operator>&amp;</operator><name><name>p_srvs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><call><name>create_uri</name><argument_list>( <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><name>psz_ip</name></expr></argument>, <argument><expr><name>b_ipv6</name></expr></argument>,
<argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_uri</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>items_exists</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>items_add_input</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_device_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_srv</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_srvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_device_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_srvs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>stop_sd_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator> <name>services_discovery_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stop</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>items_timeout</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>RunSD</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator> <name>services_discovery_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_status</name> <init>= <expr><call><name>mdns_listen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_microdns</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_service_names</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_service_names</name></name></expr></argument>,
<argument><expr><name>RR_PTR</name></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>LISTEN_INTERVAL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>stop_sd_cb</name></expr></argument>, <argument><expr><name>new_entries_sd_cb</name></expr></argument>, <argument><expr><name>p_sd</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_error</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">"listen"</literal></expr></argument>, <argument><expr><name>i_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>new_entries_rd_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rr_entry</name></name> <modifier>*</modifier></type><name>p_entries</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name> <init>= <expr><operator>(</operator><name>vlc_renderer_discovery_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>print_error</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_rd</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">"entry callback"</literal></expr></argument>, <argument><expr><name>i_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>srv</name></name> <modifier>*</modifier></type><name>p_srvs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_nb_srv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ipv6</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>parse_entries</name><argument_list>( <argument><expr><name>p_entries</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_srvs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nb_srv</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>psz_ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_ipv6</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_model</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_icon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rr_entry</name></name> <modifier>*</modifier><name>p_entry</name></type> <init>= <expr><name>p_entries</name></expr></init></decl>;</init>
<condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>psz_model</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>psz_icon</name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr>;</condition>
<incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RR_TXT</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rr_data_txt</name></name> <modifier>*</modifier></type><name>p_txt</name> <init>= <expr><name><name>p_entry</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>TXT</name></name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_txt</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>psz_model</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>psz_icon</name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"md="</literal></expr></argument>, <argument><expr><name><name>p_txt</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_model</name> <operator>=</operator> <name><name>p_txt</name><operator>-&gt;</operator><name>txt</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"ic="</literal></expr></argument>, <argument><expr><name><name>p_txt</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_icon</name> <operator>=</operator> <name><name>p_txt</name><operator>-&gt;</operator><name>txt</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_txt</name> <operator>=</operator> <name><name>p_txt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_srv</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>srv</name></name> <modifier>*</modifier></type><name>p_srv</name> <init>= <expr><operator>&amp;</operator><name><name>p_srvs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_icon_uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><call><name>create_uri</name><argument_list>( <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><name>psz_ip</name></expr></argument>, <argument><expr><name>b_ipv6</name></expr></argument>,
<argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_demux_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_uri</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>items_exists</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_icon</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_icon_uri</name></expr></argument>, <argument><expr><literal type="string">"http://%s:8008%s"</literal></expr></argument>, <argument><expr><name>psz_ip</name></expr></argument>, <argument><expr><name>psz_icon</name></expr></argument> )</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"chromecast"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_demux_filter</name> <operator>=</operator> <literal type="string">"cc_demux"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>items_add_renderer</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_rd</name></expr></argument>, <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_device_name</name></name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>,
<argument><expr><name>psz_demux_filter</name></expr></argument>, <argument><expr><name>psz_icon_uri</name></expr></argument>,
<argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_renderer_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_icon_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_srv</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_srvs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_device_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_srvs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>stop_rd_cb</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name> <init>= <expr><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stop</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>items_timeout</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_rd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>RunRD</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name> <init>= <expr><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_status</name> <init>= <expr><call><name>mdns_listen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_microdns</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_service_names</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_service_names</name></name></expr></argument>,
<argument><expr><name>RR_PTR</name></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>LISTEN_INTERVAL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>stop_rd_cb</name></expr></argument>, <argument><expr><name>new_entries_rd_cb</name></expr></argument>, <argument><expr><name>p_rd</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_error</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_rd</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">"listen"</literal></expr></argument>, <argument><expr><name>i_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>OpenCommon</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_renderer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>items</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PROTOCOLS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_renderer</name> <operator>==</operator> <name>b_renderer</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_service_names</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_service_names</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_service_name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_service_names</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"no services found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_service_names</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"mDNS: listening to %s %s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_service_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>b_renderer</name></expr> ?</condition><then> <expr><literal type="string">"renderer"</literal></expr> </then><else>: <expr><literal type="string">"service"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name></type> <name>i_status</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_status</name> <operator>=</operator> <call><name>mdns_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_microdns</name></name></expr></argument>, <argument><expr><name>MDNS_ADDR_IPV4</name></expr></argument>,
<argument><expr><name>MDNS_PORT</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>print_error</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"init"</literal></expr></argument>, <argument><expr><name>i_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_renderer</name></expr> ?</condition><then> <expr><name>RunRD</name></expr> </then><else>: <expr><name>RunSD</name></expr></else></ternary></expr></argument>, <argument><expr><name>p_obj</name></expr></argument>,
<argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Can't run the lookup thread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_microdns</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mdns_destroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_microdns</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CleanCommon</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>items_clear</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mdns_destroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_microdns</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>OpenSD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>discovery_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sd</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"mDNS Network Discovery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_options</name></expr></argument>, <argument><expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CloseSD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CleanCommon</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>OpenRD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name> <init>= <expr><operator>(</operator><name>vlc_renderer_discovery_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>discovery_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_rd</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_options</name></expr></argument>, <argument><expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CloseRD</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_renderer_discovery_t</name> <modifier>*</modifier></type><name>p_rd</name> <init>= <expr><operator>(</operator><name>vlc_renderer_discovery_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>discovery_sys</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_rd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CleanCommon</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
