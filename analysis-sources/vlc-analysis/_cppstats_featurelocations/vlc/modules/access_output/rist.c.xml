<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access_output\rist.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_threads.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitstream/ietf/rtcp_rr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitstream/ietf/rtcp_sr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitstream/ietf/rtcp_fb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitstream/ietf/rtcp_sdes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitstream/ietf/rtp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../access/rist.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIST_TARGET_PACKET_SIZE</name></cpp:macro> <cpp:value>1328</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CACHING_DELAY</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BUFFER_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_INTERVAL</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPEG_II_TRANSPORT_STREAM</name></cpp:macro> <cpp:value>(0x21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIST_DEFAULT_PORT</name></cpp:macro> <cpp:value>1968</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-rist-"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"packet-size"</literal></expr>,
<expr><literal type="string">"caching"</literal></expr>,
<expr><literal type="string">"buffer-size"</literal></expr>,
<expr><literal type="string">"ssrc"</literal></expr>,
<expr><literal type="string">"stream-name"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rtp_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>receiver_name</name><index>[<expr><name>MAX_CNAME</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_rtcp_tx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>ristthread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>senderthread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_packet_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_mtu_warning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ismulticast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>fd_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pktbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_ticks_caching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_last_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_retransmit_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_total_packets</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_access_out_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>rist_init_tx</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rist_flow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flow</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>RIST_QUEUE_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rtp_pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>flow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>flow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>rist_udp_transmitter</name><parameter_list>(<parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dst_server</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>i_dst_port</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_ismulticast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl>;</decl_stmt>
<expr_stmt><expr><name>flow</name> <operator>=</operator> <call><name>rist_init_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flow</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_out</name></name> <operator>=</operator> <call><name>net_ConnectDgram</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>psz_dst_server</name></expr></argument>, <argument><expr><name>i_dst_port</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>fd_out</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot open output socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_ismulticast</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name> <operator>=</operator> <call><name>net_OpenDgram</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>psz_dst_server</name></expr></argument>, <argument><expr><name>i_dst_port</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot open multicast nack socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name> <operator>=</operator> <call><name>net_ConnectDgram</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>psz_dst_server</name></expr></argument>, <argument><expr><name>i_dst_port</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot open nack socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_streamname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>psz_streamname</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"stream-name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>psz_streamname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>psz_streamname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>name_length</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>MAX_CNAME</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_streamname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name_length</name> <operator>&gt;=</operator> <name>MAX_CNAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>cname</name><index>[<expr><name>MAX_CNAME</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_streamname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>populate_cname</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"our cname is %s"</literal></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>flow</name></expr>;</return>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>fd_out</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>flow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rist_retransmit</name><parameter_list>(<parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rtp_pkt</name></name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>flow</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>seq</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"RIST recovery: missing requested packet %d, buffer not yet full"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_PACKET_LOSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:warning>#<cpp:directive>warning</cpp:directive> COMPILED WITH SELF INFLICTED PACKET LOSS</cpp:warning>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>flow</name><operator>-&gt;</operator><name>packets_count</name></name> <operator>%</operator> <literal type="number">14</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rtp_age</name> <init>= <expr><name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>rtp_ts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>age</name> <init>= <expr><call><name>ts_get_from_rtp</name><argument_list>(<argument><expr><name>rtp_age</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>rtp_latency</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rtp_age</name> <operator>&gt;</operator> <name><name>flow</name><operator>-&gt;</operator><name>rtp_latency</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">" Not Sending Nack #%d, too old (age %"</literal><name>PRId64</name><literal type="string">" ms), current seq is:"</literal> \
<literal type="string">" [%d]. Perhaps you should increase the buffer-size ..."</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>age</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">" Sending Nack #%d (age %"</literal><name>PRId64</name><literal type="string">" ms), current seq is: [%d]"</literal></expr></argument>, 
<argument><expr><name>seq</name></expr></argument>, <argument><expr><name>age</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_retransmit_packets</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fd_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rist_Write</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_out</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call> 
<operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Error sending retransmitted packet after 2 tries ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fd_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_nack</name><parameter_list>(<parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>ptype</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>nrecords</name></decl></parameter>, 
<parameter><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>ptype</name> <operator>==</operator> <name>RTCP_PT_RTPFR</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_ssrc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtcp_fb_get_ssrc_media_src</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>pi_ssrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pi_ssrc</name></expr></argument>, <argument><expr><literal type="string">"RIST"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">" Ignoring Nack with name %s"</literal></expr></argument>, <argument><expr><name>pi_ssrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return> 
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>nrecords</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>missing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>additional</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rtp_nack_record</name> <init>= <expr><operator>(</operator><name>pkt</name> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>missing</name> <operator>=</operator> <call><name>rtcp_fb_nack_get_range_start</name><argument_list>(<argument><expr><name>rtp_nack_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>additional</name> <operator>=</operator> <call><name>rtcp_fb_nack_get_range_extra</name><argument_list>(<argument><expr><name>rtp_nack_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rist_retransmit</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>, <argument><expr><name>missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>additional</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rist_retransmit</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>, <argument><expr><name>missing</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ptype</name> <operator>==</operator> <name>RTCP_PT_RTPFB</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>nrecords</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>missing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bitmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rtp_nack_record</name> <init>= <expr><operator>(</operator><name>pkt</name> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>missing</name> <operator>=</operator> <call><name>rtcp_fb_nack_get_packet_id</name><argument_list>(<argument><expr><name>rtp_nack_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <call><name>rtcp_fb_nack_get_bitmask_lost</name><argument_list>(<argument><expr><name>rtp_nack_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rist_retransmit</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>, <argument><expr><name>missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bitmask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rist_retransmit</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>, <argument><expr><name>missing</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">" !!! Wrong feedback. Ptype is %02x!=%02x, FMT: %02x"</literal></expr></argument>, <argument><expr><name>ptype</name></expr></argument>, 
<argument><expr><name>RTCP_PT_RTPFR</name></expr></argument>, <argument><expr><call><name>rtcp_fb_get_fmt</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rist_rtcp_recv</name><parameter_list>(<parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pkt_raw</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>pkt_raw</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ptype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>processed_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>records</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>processed_bytes</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pkt</name> <operator>=</operator> <name>pkt_raw</name> <operator>+</operator> <name>processed_bytes</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>bytes_left</name> <init>= <expr><name>len</name> <operator>-</operator> <name>processed_bytes</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>bytes_left</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Rist rtcp packet must have at least 4 bytes, we have %d"</literal></expr></argument>, 
<argument><expr><name>bytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>rtp_check_hdr</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Malformed feedback packet starting with %02x, ignoring."</literal></expr></argument>, <argument><expr><name><name>pkt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptype</name> <operator>=</operator> <call><name>rtcp_get_pt</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>records</name> <operator>=</operator> <call><name>rtcp_get_length</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bytes</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>records</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <name>bytes_left</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Malformed feedback packet, wrong len %d, expecting %u bytes in the"</literal> \
<literal type="string">" packet, got a buffer of %u bytes. ptype = %d"</literal></expr></argument>, <argument><expr><call><name>rtcp_get_length</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, 
<argument><expr><name>bytes_left</name></expr></argument>, <argument><expr><name>ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>ptype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RTCP_PT_RTPFR</name></expr>:</case>
<case>case <expr><name>RTCP_PT_RTPFB</name></expr>:</case>
<expr_stmt><expr><call><name>process_nack</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>ptype</name></expr></argument>, <argument><expr><name>records</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RTCP_PT_RR</name></expr>:</case>




<break>break;</break>

<case>case <expr><name>RTCP_PT_SDES</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name> <operator>==</operator> <name>false</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int8_t</name></type> <name>name_length</name> <init>= <expr><call><name>rtcp_sdes_get_name_length</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name_length</name> <operator>&gt;</operator> <name>bytes_left</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Malformed SDES packet, wrong cname len %u, got a "</literal> \
<literal type="string">"buffer of %u bytes."</literal></expr></argument>, <argument><expr><name>name_length</name></expr></argument>, <argument><expr><name>bytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pkt</name> <operator>+</operator> <name>RTCP_SDES_SIZE</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>receiver_name</name></name></expr></argument>, <argument><expr><name>name_length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>receiver_name</name></name></expr></argument>, <argument><expr><name>pkt</name> <operator>+</operator> <name>RTCP_SDES_SIZE</name></expr></argument>, <argument><expr><name>name_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Receiver name: %s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>receiver_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>RTCP_PT_SR</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">" Unrecognized RTCP packet with PTYPE=%02x!!"</literal></expr></argument>, <argument><expr><name>ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>processed_bytes</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rist_rtcp_send</name><parameter_list>(<parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rtcp_buf</name><index>[<expr><name>RTCP_SR_SIZE</name> <operator>+</operator> <name>RTCP_SDES_SIZE</name> <operator>+</operator> <name>MAX_CNAME</name></expr>]</index></name> <init>= <expr><block>{ }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fractions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_sr</name> <init>= <expr><name>rtcp_buf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtp_set_hdr</name><argument_list>(<argument><expr><name>p_sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sr_set_pt</name><argument_list>(<argument><expr><name>p_sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sr_set_length</name><argument_list>(<argument><expr><name>p_sr</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_fb_set_int_ssrc_pkt_sender</name><argument_list>(<argument><expr><name>p_sr</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sr_set_ntp_time_msw</name><argument_list>(<argument><expr><name>p_sr</name></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name>SEVENTY_YEARS_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fractions</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fractions</name> <operator>&lt;&lt;=</operator> <literal type="number">32ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fractions</name> <operator>/=</operator> <literal type="number">1000000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sr_set_ntp_time_lsw</name><argument_list>(<argument><expr><name>p_sr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>fractions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sr_set_rtp_time</name><argument_list>(<argument><expr><name>p_sr</name></expr></argument>, <argument><expr><call><name>rtp_get_ts</name><argument_list>(<argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sr_set_packet_count</name><argument_list>(<argument><expr><name>p_sr</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>packets_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sr_set_octet_count</name><argument_list>(<argument><expr><name>p_sr</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>bytes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_sdes</name> <init>= <expr><operator>(</operator><name>rtcp_buf</name> <operator>+</operator> <name>RTCP_SR_SIZE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>namelen</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>namelen</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rtp_set_hdr</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtp_set_cc</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rtcp_sdes_set_pt</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_set_length</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>, <argument><expr><operator>(</operator><name>namelen</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sdes_set_cname</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sdes_set_name_length</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sdes</name> <operator>+=</operator> <name>RTCP_SDES_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_sdes</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name></expr></argument>, <argument><expr><name>rtcp_buf</name></expr></argument>, <argument><expr><name>RTCP_SR_SIZE</name> <operator>+</operator> <name>RTCP_SDES_SIZE</name> <operator>+</operator> <name>namelen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>rist_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pkt</name><index>[<expr><name>RTP_PKT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>pfd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>poll_sockets</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>poll_sockets</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>poll_sockets</name></expr></argument>, <argument><expr><name>RTCP_INTERVAL</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rist_Read</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>RTP_PKT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>RTP_PKT_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Rist RTCP messsage is too big (%zd bytes) and was probably "</literal> \
<literal type="string">"cut, please keep it under %d bytes"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>RTP_PKT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"socket %d error: %s\n"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name></expr></argument>, 
<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rist_rtcp_recv</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rist_Read</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>RTP_PKT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>RTP_PKT_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Rist RTCP messsage is too big (%zd bytes) and was "</literal> \
<literal type="string">"probably cut, please keep it under %d bytes"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>RTP_PKT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mcast socket %d error: %s\n"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name></expr></argument>,
<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rist_rtcp_recv</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>last_rtcp_tx</name></name><operator>)</operator> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>RTCP_INTERVAL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rist_rtcp_send</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_rtcp_tx</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ThreadSend</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_caching</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ticks_caching</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pkt_ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_FifoGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_cleanup_push</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tick_wait</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i_caching</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>rtp_get_seqnum</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt_ts</name> <operator>=</operator> <call><name>rtp_get_timestamp</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fd_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_PACKET_LOSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:warning>#<cpp:directive>warning</cpp:directive> COMPILED WITH SELF INFLICTED PACKET LOSS</cpp:warning>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>seq</name> <operator>%</operator> <literal type="number">14</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rist_Write</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_out</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Error sending data packet after 2 tries ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>rist_Write</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_out</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Error sending data packet after 2 tries ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fd_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rtp_pkt</name></name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pkt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>flow</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>seq</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>rtp_ts</name></name> <operator>=</operator> <name>pkt_ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Traffic detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name> <operator>=</operator> <name>pkt_ts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>packets_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>bytes_count</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>last_out</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>interval</name> <init>= <expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_stat</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>interval</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>STATS_INTERVAL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_retransmit_packets</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>quality</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_packets</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quality</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">100</literal> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">100</literal><operator>*</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_retransmit_packets</name></name><operator>)</operator>
<operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_packets</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"STATS: Total %u, Retransmitted %u, Link Quality %.2f%%"</literal></expr></argument>, 
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_packets</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_retransmit_packets</name></name></expr></argument>, <argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_stat</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_retransmit_packets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_packets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_packets</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SendtoFIFO</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>seq</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtp_counter</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bufhdr</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtp_set_hdr</name><argument_list>(<argument><expr><name>bufhdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtp_set_type</name><argument_list>(<argument><expr><name>bufhdr</name></expr></argument>, <argument><expr><name>MPEG_II_TRANSPORT_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtp_set_seqnum</name><argument_list>(<argument><expr><name>bufhdr</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtp_set_int_ssrc</name><argument_list>(<argument><expr><name>bufhdr</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pkt_ts</name> <init>= <expr><call><name>rtp_get_ts</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtp_set_timestamp</name><argument_list>(<argument><expr><name>bufhdr</name></expr></argument>, <argument><expr><name>pkt_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Write</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_buffer</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_block_split</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mtu_warning</name></name> <operator>&amp;&amp;</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Buffer data size (%zu) &gt; configured packet size (%zu), you "</literal> \
<literal type="string">"should probably increase the configured packet size"</literal></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, 
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mtu_warning</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SendtoFIFO</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>RTP_HEADER_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>+=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_write</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_block_split</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <name>RTP_HEADER_SIZE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_write</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_write</name></expr>;</expr_stmt>




<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>||</operator> <name>i_block_split</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SendtoFIFO</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>RTP_HEADER_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><name>i_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ACCESS_OUT_CONTROLS_PACE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Clean</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_out</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>RIST_QUEUE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rtp_pkt</name></name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>sout_access_out_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ristthread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>senderthread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ristthread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>senderthread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Clean</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>sout_access_out_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_Create</name> <argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dst-port"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call>
<operator>||</operator> <call><name>var_Create</name> <argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"src-port"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call>
<operator>||</operator> <call><name>var_Create</name> <argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dst-addr"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call>
<operator>||</operator> <call><name>var_Create</name> <argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"src-addr"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Valid network information is required."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>vlc_obj_calloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_dst_port</name> <init>= <expr><name>RIST_DEFAULT_PORT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dst_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name> <init>= <expr><name>psz_dst_addr</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_dst_addr</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>psz_parser</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><ternary><condition><expr><name>psz_parser</name></expr> ?</condition><then> <expr><name>psz_parser</name></expr> </then><else>: <expr><name>psz_dst_addr</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>psz_parser</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz_parser</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dst_port</name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fd_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Connecting RIST output to %s:%d and %s:%d"</literal></expr></argument>, <argument><expr><name>psz_dst_addr</name></expr></argument>, <argument><expr><name>i_dst_port</name></expr></argument>, 
<argument><expr><name>psz_dst_addr</name></expr></argument>, <argument><expr><name>i_dst_port</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name> <operator>=</operator> <call><name>is_multicast_address</name><argument_list>(<argument><expr><name>psz_dst_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name> <init>= <expr><call><name>rist_udp_transmitter</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>psz_dst_addr</name></expr></argument>, <argument><expr><name>i_dst_port</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>psz_dst_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flow</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name> <operator>=</operator> <name>flow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"buffer-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>rtp_latency</name></name> <operator>=</operator> <call><name>rtp_get_ts</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>latency</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"ssrc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"SSRC: 0x%08X"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ticks_caching</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, 
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"caching"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"packet-size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>=</operator> <call><name>block_FifoNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pktbuffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>RTP_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>senderthread</name></name></expr></argument>, <argument><expr><name>ThreadSend</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_HIGHEST</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to create sender thread."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ristthread</name></name></expr></argument>, <argument><expr><name>rist_thread</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to create worker thread."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>senderthread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>senderthread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>=</operator> <name>Write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>Clean</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHING_TEXT</name></cpp:macro> <cpp:value>N_("RIST data output caching size (ms)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHING_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Having this cache will guarantee that the packets going out are " "delivered at a spacing determined by the chain timestamps thus ensuring " "a near jitter free output. Be aware that this setting will also add to " "the overall latency of the stream." )</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_TEXT</name></cpp:macro> <cpp:value>N_("RIST retry-buffer queue size (ms)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This must match the buffer size (latency) configured on the server side. If you " "are not sure, leave the default of 0 which will set it the maximum " "value and will use about 100MB of RAM" )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSRC_TEXT</name></cpp:macro> <cpp:value>N_("SSRC used in RTP output (default is random, i.e. 0)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSRC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Use this setting to specify a known SSRC for the RTP header. This is only useful " "if your receiver acts on it. When using VLC as receiver, it is not." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_TEXT</name></cpp:macro> <cpp:value>N_("Stream name")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This Stream name will be sent to the receiver using the rist RTCP channel" )</cpp:value></cpp:define>



<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"RIST"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"RIST stream output"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_ACO</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"packet-size"</literal></argument>, <argument>RIST_TARGET_PACKET_SIZE</argument>,
<argument>N_(<literal type="string">"RIST target packet size (bytes)"</literal>)</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"caching"</literal></argument>, <argument>DEFAULT_CACHING_DELAY</argument>,
<argument>CACHING_TEXT</argument>, <argument>CACHING_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"buffer-size"</literal></argument>, <argument>DEFAULT_BUFFER_SIZE</argument>,
<argument>BUFFER_TEXT</argument>, <argument>BUFFER_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"ssrc"</literal></argument>, <argument><literal type="number">0</literal></argument>,
<argument>SSRC_TEXT</argument>, <argument>SSRC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"stream-name"</literal></argument>, <argument>NULL</argument>, <argument>NAME_TEXT</argument>, <argument>NAME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"rist"</literal></argument>, <argument><literal type="string">"tr06"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>
</unit>
