<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access_output\livehttp.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_gcrypt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_LARGEFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_LARGEFILE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_ENDLIST</name></cpp:macro> <cpp:value>"#EXT-X-ENDLIST\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RENAME_RETRIES</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-livehttp-"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGLEN_TEXT</name></cpp:macro> <cpp:value>N_("Segment length")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGLEN_LONGTEXT</name></cpp:macro> <cpp:value>N_("Length of TS stream segments")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLITANYWHERE_TEXT</name></cpp:macro> <cpp:value>N_("Split segments anywhere")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLITANYWHERE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Don't require a keyframe before splitting ""a segment. Needed for audio only.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMSEGS_TEXT</name></cpp:macro> <cpp:value>N_("Number of segments")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMSEGS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of segments to include in index")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCACHE_TEXT</name></cpp:macro> <cpp:value>N_("Allow cache")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCACHE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Add EXT-X-ALLOW-CACHE:NO directive in playlist-file if this is disabled")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_TEXT</name></cpp:macro> <cpp:value>N_("Index file")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_LONGTEXT</name></cpp:macro> <cpp:value>N_("Path to the index file to create")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEXURL_TEXT</name></cpp:macro> <cpp:value>N_("Full URL to put in index file")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEXURL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Full URL to put in index file. ""Use #'s to represent segment number")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELSEGS_TEXT</name></cpp:macro> <cpp:value>N_("Delete segments")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELSEGS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Delete segments when they are no longer needed")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATECONTROL_TEXT</name></cpp:macro> <cpp:value>N_("Use muxers rate control mechanism")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYURI_TEXT</name></cpp:macro> <cpp:value>N_("AES key URI to place in playlist")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYFILE_TEXT</name></cpp:macro> <cpp:value>N_("AES key file")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYFILE_LONGTEXT</name></cpp:macro> <cpp:value>N_("File containing the 16 bytes encryption key")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYLOADFILE_TEXT</name></cpp:macro> <cpp:value>N_("File where vlc reads key-uri and keyfile-location")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYLOADFILE_LONGTEXT</name></cpp:macro> <cpp:value>N_("File is read when segment starts and is assumed to be in format: ""key-uri\\nkey-file. File is read on the segment opening and ""values are used on that segment.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANDOMIV_TEXT</name></cpp:macro> <cpp:value>N_("Use randomized IV for encryption")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANDOMIV_LONGTEXT</name></cpp:macro> <cpp:value>N_("Generate IV instead using segment-number as IV")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTITIAL_SEG_TEXT</name></cpp:macro> <cpp:value>N_("Number of first segment")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_SEG_LONGTEXT</name></cpp:macro> <cpp:value>N_("The number of the first segment generated")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"HTTP Live streaming output"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"LiveHTTP"</literal> )</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"livehttp"</literal></argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_ACO</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"seglen"</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>SEGLEN_TEXT</argument>, <argument>SEGLEN_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"numsegs"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>NUMSEGS_TEXT</argument>, <argument>NUMSEGS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"initial-segment-number"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>INTITIAL_SEG_TEXT</argument>, <argument>INITIAL_SEG_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"splitanywhere"</literal></argument>, <argument>false</argument>,
<argument>SPLITANYWHERE_TEXT</argument>, <argument>SPLITANYWHERE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"delsegs"</literal></argument>, <argument>true</argument>,
<argument>DELSEGS_TEXT</argument>, <argument>DELSEGS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"ratecontrol"</literal></argument>, <argument>false</argument>,
<argument>RATECONTROL_TEXT</argument>, <argument>RATECONTROL_TEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"caching"</literal></argument>, <argument>false</argument>,
<argument>NOCACHE_TEXT</argument>, <argument>NOCACHE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"generate-iv"</literal></argument>, <argument>false</argument>,
<argument>RANDOMIV_TEXT</argument>, <argument>RANDOMIV_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"index"</literal></argument>, <argument>NULL</argument>,
<argument>INDEX_TEXT</argument>, <argument>INDEX_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"index-url"</literal></argument>, <argument>NULL</argument>,
<argument>INDEXURL_TEXT</argument>, <argument>INDEXURL_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"key-uri"</literal></argument>, <argument>NULL</argument>,
<argument>KEYURI_TEXT</argument>, <argument>KEYURI_TEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_loadfile</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"key-file"</literal></argument>, <argument>NULL</argument>,
<argument>KEYFILE_TEXT</argument>, <argument>KEYFILE_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_loadfile</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"key-loadfile"</literal></argument>, <argument>NULL</argument>,
<argument>KEYLOADFILE_TEXT</argument>, <argument>KEYLOADFILE_LONGTEXT</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"seglen"</literal></expr>,
<expr><literal type="string">"splitanywhere"</literal></expr>,
<expr><literal type="string">"numsegs"</literal></expr>,
<expr><literal type="string">"delsegs"</literal></expr>,
<expr><literal type="string">"index"</literal></expr>,
<expr><literal type="string">"index-url"</literal></expr>,
<expr><literal type="string">"ratecontrol"</literal></expr>,
<expr><literal type="string">"caching"</literal></expr>,
<expr><literal type="string">"key-uri"</literal></expr>,
<expr><literal type="string">"key-file"</literal></expr>,
<expr><literal type="string">"key-loadfile"</literal></expr>,
<expr><literal type="string">"generate-iv"</literal></expr>,
<expr><literal type="string">"initial-segment-number"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Write</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>output_segment</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_key_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>segment_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_segment_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>aes_ivs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>output_segment_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_cursegPath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_indexPath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_indexUrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_keyfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_keyfile_modification</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>segment_max_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>current_segment_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>full_segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>full_segments_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>ongoing_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ongoing_segment_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_numsegs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_initial_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_delsegs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ratecontrol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_splitanywhere</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_caching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_generate_iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_segment_has_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>aes_ivs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gcry_cipher_hd_t</name></type> <name>aes_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stuffing_bytes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>stuffing_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>segments_t</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_access_out_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>LoadCryptFile</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CryptSetup</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>keyfile</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CheckSegmentChange</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>writeSegment</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>openNextFile</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>;</function_decl>



<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>sout_access_out_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"no file name specified"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><operator>(</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_seglen</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"seglen"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>segment_max_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>i_seglen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments_end</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment_end</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_numsegs</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"numsegs"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_initial_segment</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"initial-segment-number"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_splitanywhere</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"splitanywhere"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delsegs</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"delsegs"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ratecontrol</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"ratecontrol"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_caching</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"caching"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_generate_iv</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"generate-iv"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_segment_has_data</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexPath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_idx</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>psz_idx</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <call><name>vlc_strftime</name><argument_list>( <argument><expr><name>psz_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_tmp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexPath</name></name> <operator>=</operator> <name>psz_tmp</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_initial_segment</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexPath</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexUrl</name></name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"index-url"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_keyfile</name></name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"key-loadfile"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"key-uri"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_keyfile</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>LoadCryptFile</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexUrl</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexPath</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Encryption init failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_keyfile</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>CryptSetup</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexUrl</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexPath</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Encryption init failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_segment</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_initial_segment</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_cursegPath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>=</operator> <name>Write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>CryptSetup</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key_file</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keyfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"No key uri, no encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>key_file</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keyfile</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>key_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>keyfile</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"key-file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>keyfile</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"No key-file, no encryption"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_gcrypt_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>gcry_error_t</name></type> <name>err</name> <init>= <expr><call><name>gcry_cipher_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument>, <argument><expr><name>GCRY_CIPHER_AES</name></expr></argument>,
<argument><expr><name>GCRY_CIPHER_MODE_CBC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>err</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Openin AES Cipher failed: %s"</literal></expr></argument>, <argument><expr><call><name>gpg_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>keyfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyfd</name> <init>= <expr><call><name>vlc_open</name><argument_list>( <argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>keyfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Unable to open keyfile %s: %s"</literal></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>keyfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>keyfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>keylen</name> <init>= <expr><call><name>read</name><argument_list>( <argument><expr><name>keyfd</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name>keyfd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>keylen</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"No key at least 16 octects (you provided %zd), no encryption"</literal></expr></argument>, <argument><expr><name>keylen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>gcry_cipher_setkey</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Setting AES key failed: %s"</literal></expr></argument>, <argument><expr><call><name>gpg_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_generate_iv</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ivs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadCryptFile</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_keyfile</name></name></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_file</name><init>=<expr><name>NULL</name></expr></init></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>key_uri</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Unable to open keyloadfile %s: %s"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_keyfile</name></name></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <macro><name>getline</name><argument_list>( <argument>&amp;key_uri</argument>, <argument>&amp;(size_t){<literal type="number">0</literal>}</argument>, <argument>stream</argument> )</argument_list></macro></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Cannot read %s: %s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_keyfile</name></name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearerr</name><argument_list>( <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>key_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key_uri</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <macro><name>getline</name><argument_list>( <argument>&amp;key_file</argument>, <argument>&amp;(size_t){<literal type="number">0</literal>}</argument>, <argument>stream</argument> )</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Cannot read %s: %s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_keyfile</name></name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearerr</name><argument_list>( <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>key_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>key_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key_file</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>returncode</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name> <operator>||</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>, <argument><expr><name>key_uri</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>key_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>returncode</name> <operator>=</operator> <call><name>CryptSetup</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>key_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>key_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>key_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>returncode</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>CryptKey</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_segment</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_generate_iv</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ivs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ivs</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>i_segment</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ivs</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_segment</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ivs</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_segment</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ivs</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_segment</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>gcry_error_t</name></type> <name>err</name> <init>= <expr><call><name>gcry_cipher_setiv</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ivs</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>err</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Setting AES IVs failed: %s"</literal></expr></argument>, <argument><expr><call><name>gpg_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEG_NUMBER_PLACEHOLDER</name></cpp:macro> <cpp:value>"#"</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>formatSegmentPath</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_seg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_firstNumSign</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator> <name>psz_result</name> <operator>=</operator> <call><name>vlc_strftime</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_firstNumSign</name> <operator>=</operator> <name>psz_result</name> <operator>+</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_result</name></expr></argument>, <argument><expr><name>SEG_NUMBER_PLACEHOLDER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_firstNumSign</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_newResult</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cnt</name> <init>= <expr><call><name>strspn</name><argument_list>( <argument><expr><name>psz_firstNumSign</name></expr></argument>, <argument><expr><name>SEG_NUMBER_PLACEHOLDER</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_firstNumSign</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_newResult</name></expr></argument>, <argument><expr><literal type="string">"%s%0*d%s"</literal></expr></argument>, <argument><expr><name>psz_result</name></expr></argument>, <argument><expr><name>i_cnt</name></expr></argument>, <argument><expr><name>i_seg</name></expr></argument>, <argument><expr><name>psz_firstNumSign</name> <operator>+</operator> <name>i_cnt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name>psz_result</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_result</name> <operator>=</operator> <name>psz_newResult</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>psz_result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroySegment</name><parameter_list>( <parameter><decl><type><name>output_segment_t</name> <modifier>*</modifier></type><name>segment</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_key_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>segmentAmountNeeded</name><parameter_list>( <parameter><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;=</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>output_segment_t</name><modifier>*</modifier></type> <name>segment</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument>, <argument><expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name>index</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>duration</name> <operator>+=</operator> <name><name>segment</name><operator>-&gt;</operator><name>segment_length</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>duration</name> <operator>&gt;=</operator> <operator>(</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>segment_max_length</name></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>__MAX</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_numsegs</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>bool</name></type> <name>isFirstItemRemovable</name><parameter_list>( <parameter><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_firstseg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_index_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>i_index_offset</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>output_segment_t</name> <modifier>*</modifier></type><name>segment</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_segment</name></name> <operator>-</operator> <name>i_firstseg</name> <operator>+</operator> <name>index</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>duration</name> <operator>+=</operator> <name><name>segment</name><operator>-&gt;</operator><name>segment_length</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>output_segment_t</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>duration</name> <operator>&gt;=</operator> <operator>(</operator><name><name>first</name><operator>-&gt;</operator><name>segment_length</name></name> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_numsegs</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>segment_max_length</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>updateIndexAndDel</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_isend</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_firstseg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_numsegs</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_segment</name></name> <operator>&lt;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_numsegs</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_initial_segment</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_firstseg</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_initial_segment</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>numsegs</name> <init>= <expr><call><name>segmentAmountNeeded</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_firstseg</name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_segment</name></name> <operator>-</operator> <name>numsegs</name> <operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index_offset</name> <operator>=</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name>numsegs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexPath</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_idxTmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_idxTmp</name></expr></argument>, <argument><expr><literal type="string">"%s.tmp"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexPath</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_idxTmp</name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>fp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot open index file `%s'"</literal></expr></argument>, <argument><expr><name>psz_idxTmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_idxTmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>fprintf</name><argument_list>( <argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#EXTM3U\n#EXT-X-TARGETDURATION:%.0f\n#EXT-X-VERSION:3\n#EXT-X-ALLOW-CACHE:%s"</literal>
<literal type="string">"%s\n#EXT-X-MEDIA-SEQUENCE:%"</literal><name>PRIu32</name><literal type="string">"\n%s"</literal></expr></argument>, <argument><expr><call><name>ceil</name><argument_list>(<argument><expr><call><name>secf_from_vlc_tick</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>segment_max_length</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></argument> ,
<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_caching</name></name></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_numsegs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><ternary><condition><expr><name>b_isend</name></expr> ?</condition><then> <expr><literal type="string">"\n#EXT-X-PLAYLIST-TYPE:VOD"</literal></expr> </then><else>: <expr><literal type="string">"\n#EXT-X-PLAYLIST-TYPE:EVENT"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
<argument><expr><name>i_firstseg</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_initial_segment</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_initial_segment</name></name> <operator>==</operator> <name>i_firstseg</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"#EXT-X-DISCONTINUITY\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>
)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_idxTmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_current_uri</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name>i_firstseg</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_segment</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name> <init>= <expr><name>i</name> <operator>-</operator> <name>i_firstseg</name> <operator>+</operator> <name>i_index_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>output_segment_t</name> <modifier>*</modifier></type><name>segment</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <operator>!</operator><name>psz_current_uri</name> <operator>||</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_current_uri</name></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_key_uri</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr>
)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_current_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_current_uri</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_key_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_generate_iv</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>iv_hi</name> <init>= <expr><name><name>segment</name><operator>-&gt;</operator><name>aes_ivs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>iv_lo</name> <init>= <expr><name><name>segment</name><operator>-&gt;</operator><name>aes_ivs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>short</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>iv_hi</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iv_hi</name> <operator>|=</operator> <name><name>segment</name><operator>-&gt;</operator><name>aes_ivs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iv_lo</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iv_lo</name> <operator>|=</operator> <name><name>segment</name><operator>-&gt;</operator><name>aes_ivs</name><index>[<expr><literal type="number">8</literal><operator>+</operator><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fprintf</name><argument_list>( <argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-KEY:METHOD=AES-128,URI=\"%s\",IV=0X%16.16llx%16.16llx\n"</literal></expr></argument>,
<argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_key_uri</name></name></expr></argument>, <argument><expr><name>iv_hi</name></expr></argument>, <argument><expr><name>iv_lo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fprintf</name><argument_list>( <argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-KEY:METHOD=AES-128,URI=\"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_key_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_current_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_idxTmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>fprintf</name><argument_list>( <argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#EXTINF:%s,\n%s\n"</literal></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_duration</name></name></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_current_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_idxTmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_current_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>b_isend</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>fputs</name> <argument_list>( <argument><expr><name>STR_ENDLIST</name></expr></argument>, <argument><expr><name>fp</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_idxTmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>fp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_rename</name> <argument_list>( <argument><expr><name>psz_idxTmp</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_idxTmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Error moving LiveHttp index file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"LiveHttpIndexComplete: %s"</literal></expr></argument> , <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexPath</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_idxTmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delsegs</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_numsegs</name></name> <operator>&amp;&amp;</operator>
<call><name>isFirstItemRemovable</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_firstseg</name></expr></argument>, <argument><expr><name>i_index_offset</name></expr></argument> )</argument_list></call></expr>
)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>output_segment_t</name> <modifier>*</modifier></type><name>segment</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Removing segment number %d"</literal></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>i_segment_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>destroySegment</name><argument_list>( <argument><expr><name>segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index_offset</name> <operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>closeCurrentSegment</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_isend</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>output_segment_t</name> <modifier>*</modifier></type><name>segment</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument>, <argument><expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pad</name> <init>= <expr><literal type="number">16</literal> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_bytes</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>gcry_error_t</name></type> <name>err</name> <init>= <expr><call><name>gcry_cipher_encrypt</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_bytes</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>err</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Couldn't encrypt 16 bytes: %s"</literal></expr></argument>, <argument><expr><call><name>gpg_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_write</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_bytes</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Couldn't write 16 bytes"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <operator>(</operator> <call><name>us_asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>segment</name><operator>-&gt;</operator><name>psz_duration</name></name></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><call><name>secf_from_vlc_tick</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>current_segment_length</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Couldn't set duration on closed segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>segment</name><operator>-&gt;</operator><name>segment_length</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>current_segment_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>segment</name><operator>-&gt;</operator><name>i_segment_number</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_segment</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_cursegPath</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"LiveHttpSegmentComplete: %s (%"</literal><name>PRIu32</name><literal type="string">")"</literal></expr></argument> , <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_cursegPath</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_segment</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_cursegPath</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_cursegPath</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateIndexAndDel</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>b_isend</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>sout_access_out_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments_end</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment_end</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>output_block</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments_end</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>output_block</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>output_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>output_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Write</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>output_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output_block</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments_end</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment_end</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>writevalue</name> <init>= <expr><call><name>writeSegment</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Writing.. %zd"</literal></expr></argument>, <argument><expr><name>writevalue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>writevalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>closeCurrentSegment</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gcry_cipher_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>output_segment_t</name> <modifier>*</modifier></type><name>segment</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_delsegs</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_numsegs</name></name> <operator>&amp;&amp;</operator> <name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Removing segment number %d name %s"</literal></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>i_segment_number</name></name></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>destroySegment</name><argument_list>( <argument><expr><name>segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexUrl</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexPath</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"livehttp access output closed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ACCESS_OUT_CONTROLS_PACE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_ratecontrol</name></name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>openNextFile</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_newseg</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_segment</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>output_segment_t</name> <modifier>*</modifier></type><name>segment</name> <init>= <expr><operator>(</operator><name>output_segment_t</name><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output_segment_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>segment</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>segment</name><operator>-&gt;</operator><name>i_segment_number</name></name> <operator>=</operator> <name>i_newseg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name> <operator>=</operator> <call><name>formatSegmentPath</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>, <argument><expr><name>i_newseg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_idxFormat</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexUrl</name></name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_indexUrl</name></name></expr> </then><else>: <expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>=</operator> <call><name>formatSegmentPath</name><argument_list>( <argument><expr><name>psz_idxFormat</name></expr></argument> , <argument><expr><name>i_newseg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Format segmentpath failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroySegment</name><argument_list>( <argument><expr><name>segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>vlc_open</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_LARGEFILE</name> <operator>|</operator>
<name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot open `%s' (%s)"</literal></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroySegment</name><argument_list>( <argument><expr><name>segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>segments_t</name></name></expr></argument>, <argument><expr><name>segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_keyfile</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LoadCryptFile</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_key_uri</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CryptKey</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_newseg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_generate_iv</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>aes_ivs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ivs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Successfully opened livehttp file: %s (%"</literal><name>PRIu32</name><literal type="string">")"</literal></expr></argument> , <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>, <argument><expr><name>i_newseg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_cursegPath</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>segment</name><operator>-&gt;</operator><name>psz_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_segment</name></name> <operator>=</operator> <name>i_newseg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_segment_has_data</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>CheckSegmentChange</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>writevalue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>current_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ongoing_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ongoing_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+</operator> <name>current_length</name> <operator>+</operator> <name>ongoing_length</name> <operator>)</operator> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>segment_max_length</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>writevalue</name> <operator>=</operator> <call><name>writeSegment</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>writevalue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name> <argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>closeCurrentSegment</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>writevalue</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>openNextFile</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>writevalue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>writeSegment</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Writing all full segments"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments_end</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>current_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_write</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>crypted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>current_segment_length</name></name> <operator>=</operator> <name>current_length</name></expr>;</expr_stmt>
<while>while<condition>( <expr><name>output</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>key_uri</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>crypted</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>output</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>output</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_bytes</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>original</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>padded</name> <init>= <expr><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <literal type="number">15</literal> <operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pad</name> <init>= <expr><name>padded</name> <operator>-</operator> <name>original</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>pad</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name> <operator>=</operator> <literal type="number">16</literal><operator>-</operator><name>pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_bytes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>output</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stuffing_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>gcry_error_t</name></type> <name>err</name> <init>= <expr><call><name>gcry_cipher_encrypt</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>err</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Encryption failure: %s "</literal></expr></argument>, <argument><expr><call><name>gpg_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>crypted</name><operator>=</operator><name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name>vlc_write</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>val</name> <operator>&gt;=</operator> <name><name>output</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>crypted</name><operator>=</operator><name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>i_write</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i_write</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Write</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_write</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_buffer</name></expr> )</condition>
<block>{<block_content>



<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_splitanywhere</name></name> <operator>||</operator> <operator>(</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_HEADER</name> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Moving ongoing segment to full segments-queue"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>full_segments_end</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment_end</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_segment_has_data</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><call><name>CheckSegmentChange</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Error in write loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_write</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_temp</name> <init>= <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ongoing_segment_end</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name>p_temp</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>i_write</name></expr>;</return>
</block_content>}</block></function>
</unit>
