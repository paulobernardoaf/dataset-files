<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\keystore\file.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file_crypt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list_util.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenCrypt</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseCrypt</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"File keystore (plaintext)"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Secrets are stored on a file without any encryption"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>add_savefile</name><argument_list>(<argument><literal type="string">"keystore-file"</literal></argument>, <argument>NULL</argument>, <argument>NULL</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>change_private</name><argument_list>()</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"keystore"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"file_plaintext"</literal></argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Crypt keystore"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Secrets are stored encrypted on a file"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>OpenCrypt</argument>, <argument>CloseCrypt</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"keystore"</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"file_crypt"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<struct>struct <name>vlc_keystore_sys</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_file</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>b_crypted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>crypt</name></name></type> <name>crypt</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_keys</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"protocol"</literal></expr>,
<expr><literal type="string">"user"</literal></expr>,
<expr><literal type="string">"server"</literal></expr>,
<expr><literal type="string">"path"</literal></expr>,
<expr><literal type="string">"port"</literal></expr>,
<expr><literal type="string">"realm"</literal></expr>,
<expr><literal type="string">"authtype"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ppsz_keys</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ppsz_keys</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>KEY_MAX</name></expr></argument>, <argument><expr><literal type="string">"key mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>str2key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>values_write</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ppsz_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_b64</name> <init>= <expr><call><name>vlc_b64_encode</name><argument_list>(<argument><expr><name><name>ppsz_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_b64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_end_sep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ppsz_values</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_end_sep</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"%s:%s%s"</literal></expr></argument>, <argument><expr><name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_b64</name></expr></argument>, <argument><expr><name>psz_end_sep</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>truncate0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<return>return <expr><ternary><condition><expr><call><name>ftruncate</name><argument_list>(<argument><expr><name>i_fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><ternary><condition><expr><call><name>_chsize</name><argument_list>(<argument><expr><name>i_fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>file_save</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ks_list</name></name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>truncate0</name><argument_list>(<argument><expr><name>i_fd</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>values_write</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_b64</name> <init>= <expr><call><name>vlc_b64_encode_binary</name><argument_list>(<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name></expr></argument>,
<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_secret_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_b64</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"}:%s\n"</literal></expr></argument>, <argument><expr><name>psz_b64</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>
<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>truncate0</name><argument_list>(<argument><expr><name>i_fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>file_read</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ks_list</name></name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_line_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>i_read</name> <operator>=</operator> <call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_line_len</name></expr></argument>, <argument><expr><name>p_file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>psz_line</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><call><name>ks_list_new_entry</name><argument_list>(<argument><expr><name>p_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_entry</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_end</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_end</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>


<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i_len</name> <operator>||</operator> <name><name>p</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_key</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_key</name> <operator>=</operator> <call><name>str2key</name><argument_list>(<argument><expr><name>p_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_key</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>i_key</name> <operator>&gt;=</operator> <name>KEY_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">",}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i_len</name> <operator>||</operator> <name><name>p</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_end</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_value</name> <operator>=</operator> <call><name>vlc_b64_decode</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_value</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>i_key</name></expr>]</index></name> <operator>=</operator> <name>p_value</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_secret_len</name></name> <operator>=</operator> <call><name>vlc_b64_decode_binary</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>b_valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_valid</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>truncate0</name><argument_list>(<argument><expr><name>i_fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FLOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_FCNTL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>F_SETLKW</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>posix_lock_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_whence</name></name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_ACCMODE</name><operator>)</operator> <operator>==</operator> <name>O_RDONLY</name></expr> ?</condition><then> <expr><name>F_RDLCK</name></expr> </then><else>: <expr><name>F_WRLCK</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETLKW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>file_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mode</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>(<argument><expr><name>psz_file</name></expr></argument>, <argument><expr><name>psz_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name> <init>= <expr><call><name>fileno</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>flock</name><argument_list>(<argument><expr><name>i_fd</name></expr></argument>, <argument><expr><name>LOCK_EX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_FCNTL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>F_SETLKW</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>posix_lock_fd</name><argument_list>(<argument><expr><name>i_fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>pp_file</name> <operator>=</operator> <name>p_file</name></expr>;</expr_stmt>
<return>return <expr><name>i_fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>file_close</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Store</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_secret_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>psz_label</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_keystore_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ks_list</name></name></type> <name>list</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name> <init>= <expr><call><name>file_open</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_file</name></name></expr></argument>, <argument><expr><literal type="string">"r+"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_read</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>p_file</name></expr></argument>, <argument><expr><name>i_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><call><name>ks_list_find_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_entry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_keystore_release_entry</name><argument_list>(<argument><expr><name>p_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <call><name>ks_list_new_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_entry</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ks_values_copy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name></name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_crypted</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>crypt</name></name> <modifier>*</modifier></type><name>p_crypt</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>crypt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_enc_secret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_enc_secret_len</name> <init>=
<expr><call><name><name>p_crypt</name><operator>-&gt;</operator><name>pf_encrypt</name></name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name><name>p_crypt</name><operator>-&gt;</operator><name>p_ctx</name></name></expr></argument>, <argument><expr><name>p_secret</name></expr></argument>,
<argument><expr><name>i_secret_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_enc_secret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_enc_secret_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_keystore_entry_set_secret</name><argument_list>(<argument><expr><name>p_entry</name></expr></argument>, <argument><expr><name>p_enc_secret</name></expr></argument>,
<argument><expr><name>i_enc_secret_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_enc_secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_keystore_entry_set_secret</name><argument_list>(<argument><expr><name>p_entry</name></expr></argument>, <argument><expr><name>p_secret</name></expr></argument>, <argument><expr><name>i_secret_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>file_save</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>p_file</name></expr></argument>, <argument><expr><name>i_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>file_close</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ks_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>Find</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ks_list</name></name></type> <name>list</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ks_list</name></name></type> <name>out_list</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name> <init>= <expr><call><name>file_open</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_file</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_read</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>p_file</name></expr></argument>, <argument><expr><name>i_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>p_entry</name> <operator>=</operator> <call><name>ks_list_find_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_out_entry</name> <init>= <expr><call><name>ks_list_new_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_out_entry</name>
<operator>||</operator> <call><name>ks_values_copy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>p_out_entry</name><operator>-&gt;</operator><name>ppsz_values</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier><operator>*</operator><operator>)</operator><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ks_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_crypted</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>crypt</name></name> <modifier>*</modifier></type><name>p_crypt</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>crypt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dec_secret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_dec_secret_len</name> <init>=
<expr><call><name><name>p_crypt</name><operator>-&gt;</operator><name>pf_decrypt</name></name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name><name>p_crypt</name><operator>-&gt;</operator><name>p_ctx</name></name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name></expr></argument>,
<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_secret_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_dec_secret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_dec_secret_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ks_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name> <operator>=</operator> <name>p_dec_secret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_secret_len</name></name> <operator>=</operator> <name>i_dec_secret_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>vlc_keystore_entry_set_secret</name><argument_list>(<argument><expr><name>p_out_entry</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name></expr></argument>,
<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_secret_len</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ks_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>pp_entries</name> <operator>=</operator> <name><name>out_list</name><operator>.</operator><name>p_entries</name></name></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>file_close</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ks_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>out_list</name><operator>.</operator><name>i_count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>Remove</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ks_list</name></name></type> <name>list</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name> <init>= <expr><call><name>file_open</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_file</name></name></expr></argument>, <argument><expr><literal type="string">"r+"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_read</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>p_file</name></expr></argument>, <argument><expr><name>i_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>p_entry</name> <operator>=</operator> <call><name>ks_list_find_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_keystore_release_entry</name><argument_list>(<argument><expr><name>p_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>file_save</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>p_file</name></expr></argument>, <argument><expr><name>i_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>file_close</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ks_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><operator>(</operator><name>vlc_keystore</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_keystore_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><operator>(</operator><name>vlc_keystore</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_keystore_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_keystore_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"keystore-file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_file</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_file_exists</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stat</name><argument_list>(<argument><expr><name>psz_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name> <init>= <expr><call><name>vlc_fopen</name><argument_list>(<argument><expr><name>psz_file</name></expr></argument>, <argument><expr><literal type="string">"a+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_file_exists</name><operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>p_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b_file_exists</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_file_exists</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_file</name></name> <operator>=</operator> <name>psz_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_store</name></name> <operator>=</operator> <name>Store</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_find</name></name> <operator>=</operator> <name>Find</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_remove</name></name> <operator>=</operator> <name>Remove</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPTFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CloseCrypt</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><operator>(</operator><name>vlc_keystore</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>crypt</name></name> <modifier>*</modifier></type><name>p_crypt</name> <init>= <expr><operator>&amp;</operator><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>crypt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_crypt</name><operator>-&gt;</operator><name>pf_clean</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_crypt</name><operator>-&gt;</operator><name>pf_clean</name></name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name><name>p_crypt</name><operator>-&gt;</operator><name>p_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>OpenCrypt</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>Open</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><operator>(</operator><name>vlc_keystore</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_keystore_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CryptInit</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>crypt</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crypt</name><operator>.</operator><name>pf_encrypt</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>crypt</name><operator>.</operator><name>pf_decrypt</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_crypted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
