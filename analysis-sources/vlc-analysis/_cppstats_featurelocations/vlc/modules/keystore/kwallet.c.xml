<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\keystore\kwallet.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbus/dbus.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"KWallet keystore"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Secrets are stored via KWallet"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_ADVANCED</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_ADVANCED_MISC</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"keystore"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
















<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_folder</name> <init>= <expr><name>VLC_KEYSTORE_NAME</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_kwallet_interface</name> <init>= <expr><literal type="string">"org.kde.KWallet"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBUS_INSTANCE_PREFIX</name></cpp:macro> <cpp:value>"instance"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KWALLET_APP_ID</name></cpp:macro> <cpp:value>"org.videolan.kwallet"</cpp:value></cpp:define>








<enum>enum <name>serviceId</name>
<block>{
<decl><name>KWALLET5</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>KWALLET</name></decl>,
<decl><name>SERVICE_MAX</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_sAddr</name><index>[<expr><name>SERVICE_MAX</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"org.kde.kwalletd5"</literal></expr>,
<expr><literal type="string">"org.kde.kwalletd"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_sPath</name><index>[<expr><name>SERVICE_MAX</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"/modules/kwalletd5"</literal></expr>,
<expr><literal type="string">"/modules/kwalletd"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>vlc_keystore_sys</name>
<block>{
<decl_stmt><decl><type><name>DBusConnection</name><modifier>*</modifier></type> <name>connection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_sid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_app_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_wallet</name></decl>;</decl_stmt>
}</block></struct></type> <name>vlc_keystore_sys</name>;</typedef>



<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>
<name>values2key</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>ppsz_values</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_search</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_b64_realm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_b64_auth</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_state</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <operator>!</operator><name><name>ppsz_values</name><index>[<expr><name>KEY_PROTOCOL</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>ppsz_values</name><index>[<expr><name>KEY_SERVER</name></expr>]</index></name> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name>b_search</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>ms</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PROTOCOL</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s://"</literal></expr></argument>, <argument><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PROTOCOL</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name>b_search</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"*://"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_USER</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s@"</literal></expr></argument>, <argument><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_USER</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name>b_search</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_SERVER</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_SERVER</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name>b_search</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PORT</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PORT</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name>b_search</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PATH</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PATH</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_PATH</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>b_search</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_REALM</name></expr>]</index></name> <operator>||</operator> <name><name>ppsz_values</name><index>[<expr><name>KEY_AUTHTYPE</name></expr>]</index></name> <operator>||</operator> <name>b_search</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_REALM</name></expr>]</index></name> <operator>||</operator> <name>b_search</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_REALM</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_b64_realm</name> <operator>=</operator> <call><name>vlc_b64_encode_binary</name><argument_list>( <argument><expr><operator>(</operator> <name>uint8_t</name><operator>*</operator> <operator>)</operator><name><name>ppsz_values</name><index>[<expr><name>KEY_REALM</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_REALM</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_b64_realm</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"realm=%s"</literal></expr></argument>, <argument><expr><name>psz_b64_realm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_AUTHTYPE</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_AUTHTYPE</name></expr>]</index></name> <operator>||</operator> <name>b_search</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>ppsz_values</name><index>[<expr><name>KEY_AUTHTYPE</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_b64_auth</name> <operator>=</operator> <call><name>vlc_b64_encode_binary</name><argument_list>( <argument><expr><operator>(</operator> <name>uint8_t</name><operator>*</operator> <operator>)</operator><name><name>ppsz_values</name><index>[<expr><name>KEY_AUTHTYPE</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ppsz_values</name><index>[<expr><name>KEY_AUTHTYPE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_b64_auth</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"authtype=%s"</literal></expr></argument>, <argument><expr><name>psz_b64_auth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_state</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_b64_realm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_b64_auth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_key</name> <init>= <expr><ternary><condition><expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>ms</name><operator>.</operator><name>ptr</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_state</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>psz_key</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>key2values</name><parameter_list>( <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_key</name></decl></parameter>, <parameter><decl><type><name>vlc_keystore_entry</name><modifier>*</modifier></type> <name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_ENOMEM</name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>inc</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr> ;</condition> <incr><expr><operator>++</operator><name>inc</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>inc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_PROTOCOL</name></expr>]</index></name> <operator>=</operator>
<call><name>strdup</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>url</name><operator>.</operator><name>psz_username</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_USER</name></expr>]</index></name> <operator>=</operator>
<call><name>strdup</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_username</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_SERVER</name></expr>]</index></name> <operator>=</operator>
<call><name>strdup</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>url</name><operator>.</operator><name>i_port</name></name> <operator>&amp;&amp;</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_PORT</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>url</name><operator>.</operator><name>psz_path</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_PATH</name></expr>]</index></name> <operator>=</operator>
<call><name>strdup</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>url</name><operator>.</operator><name>psz_option</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_savetpr</name></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_option</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_option</name></name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_savetpr</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>psz_option</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>psz_option</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_savetpr</name></expr></argument> )</argument_list></call></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>vlc_keystore_key</name></name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"realm="</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"realm="</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>KEY_REALM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>psz_option</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"realm="</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_option</name></expr></argument>, <argument><expr><literal type="string">"authtype="</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"authtype="</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>KEY_AUTHTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>psz_option</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"authtype="</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_b64_decode</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>key</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_PROTOCOL</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_USER</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_SERVER</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_PORT</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_PATH</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_REALM</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>KEY_AUTHTYPE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DBusMessage</name><modifier>*</modifier></type>
<name>vlc_dbus_new_method</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_method</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>dbus_message_new_method_call</name><argument_list>( <argument><expr><name><name>ppsz_sAddr</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sid</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ppsz_sPath</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sid</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>psz_kwallet_interface</name></expr></argument>,
<argument><expr><name>psz_method</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>msg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_new_method : Failed to create message"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>msg</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_WATCHES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<struct>struct <name>vlc_dbus_watch_data</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pollfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>short</name></type>
<name>vlc_dbus_watch_get_poll_events</name><parameter_list>( <parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_flags</name> <init>= <expr><call><name>dbus_watch_get_flags</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>i_events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>&amp;</operator> <name>DBUS_WATCH_READABLE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_events</name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>&amp;</operator> <name>DBUS_WATCH_WRITABLE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_events</name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_events</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_dbus_watch_data</name></name> <modifier>*</modifier></type>
<name>vlc_dbus_watch_get_data</name><parameter_list>( <parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_dbus_watch_data</name></name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_WATCHES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_watch</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_watch</name> <operator>==</operator> <name>p_watch</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_ctx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dbus_bool_t</name></type>
<name>vlc_dbus_watch_add_function</name><parameter_list>( <parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_dbus_watch_data</name></name> <modifier>*</modifier></type><name>p_ctx</name> <init>= <expr><call><name>vlc_dbus_watch_get_data</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>i_events</name> <init>= <expr><name>POLLHUP</name> <operator>|</operator> <name>POLLERR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_events</name> <operator>|=</operator> <call><name>vlc_dbus_watch_get_poll_events</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>pollfd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>dbus_watch_get_unix_fd</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>pollfd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>i_events</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_watch</name></name> <operator>=</operator> <name>p_watch</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_dbus_watch_toggled_function</name><parameter_list>( <parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_dbus_watch_data</name></name> <modifier>*</modifier></type><name>p_ctx</name> <init>= <expr><call><name>vlc_dbus_watch_get_data</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>i_events</name> <init>= <expr><call><name>vlc_dbus_watch_get_poll_events</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_watch_get_enabled</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>pollfd</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>i_events</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>pollfd</name><operator>.</operator><name>events</name></name> <operator>&amp;=</operator> <operator>~</operator><name>i_events</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vlc_dbus_pending_call_notify</name><parameter_list>( <parameter><decl><type><name>DBusPendingCall</name> <modifier>*</modifier></type><name>p_pending_call</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_repmsg</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_repmsg</name> <operator>=</operator> <call><name>dbus_pending_call_steal_reply</name><argument_list>( <argument><expr><name>p_pending_call</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DBusMessage</name><modifier>*</modifier></type>
<name>vlc_dbus_send_message</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>p_msg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>p_repmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusPendingCall</name> <modifier>*</modifier></type><name>p_pending_call</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_dbus_watch_data</name></name></type> <name><name>watch_ctx</name><index>[<expr><name>MAX_WATCHES</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_WATCHES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>watch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pollfd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_connection_set_watch_functions</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>,
<argument><expr><name>vlc_dbus_watch_add_function</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>vlc_dbus_watch_toggled_function</name></expr></argument>,
<argument><expr><name>watch_ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_connection_send_with_reply</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>p_msg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_pending_call</name></expr></argument>,
<argument><expr><name>DBUS_TIMEOUT_INFINITE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_pending_call_set_notify</name><argument_list>( <argument><expr><name>p_pending_call</name></expr></argument>,
<argument><expr><name>vlc_dbus_pending_call_notify</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_repmsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name>p_repmsg</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>pollfds</name><index>[<expr><name>MAX_WATCHES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nfds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_WATCHES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>watch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pollfd</name><operator>.</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>watch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pollfd</name><operator>.</operator><name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name><name>watch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pollfd</name><operator>.</operator><name>events</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nfds</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>nfds</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_send_message: watch functions not called"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_poll_i11e</name><argument_list>( <argument><expr><name>pollfds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_send_message: poll was interrupted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_send_message: poll failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>i_events</name> <init>= <expr><name><name>pollfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_events</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_events</name> <operator>&amp;</operator> <name>POLLIN</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>DBUS_WATCH_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_events</name> <operator>&amp;</operator> <name>POLLOUT</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>DBUS_WATCH_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_events</name> <operator>&amp;</operator> <name>POLLHUP</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>DBUS_WATCH_HANGUP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_events</name> <operator>&amp;</operator> <name>POLLERR</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>DBUS_WATCH_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_watch_handle</name><argument_list>( <argument><expr><name><name>watch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_watch</name></expr></argument>, <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>DBusDispatchStatus</name></type> <name>status</name></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>(</operator> <name>status</name> <operator>=</operator> <call><name>dbus_connection_dispatch</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name></expr></argument> )</argument_list></call> <operator>)</operator>
<operator>==</operator> <name>DBUS_DISPATCH_DATA_REMAINS</name></expr> )</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if<condition>( <expr><name>status</name> <operator>==</operator> <name>DBUS_DISPATCH_NEED_MEMORY</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>dbus_connection_set_watch_functions</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_pending_call</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_repmsg</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_pending_call_cancel</name><argument_list>( <argument><expr><name>p_pending_call</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dbus_pending_call_unref</name><argument_list>( <argument><expr><name>p_pending_call</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_repmsg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>kwallet_network_wallet</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>repmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>vlc_dbus_new_method</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"networkWallet"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>msg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_network_wallet : vlc_dbus_new_method failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>repmsg</name> <operator>=</operator> <call><name>vlc_dbus_send_message</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>repmsg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_network_wallet : vlc_dbus_send_message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>psz_reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_network_wallet : "</literal>
<literal type="string">"dbus_message_get_args failed\n%s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_wallet</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_reply</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_wallet</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>( <expr><name>msg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>repmsg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>kwallet_is_enabled</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sid</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>b_is_enabled</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>repmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>dbus_message_new_method_call</name><argument_list>( <argument><expr><literal type="string">"org.freedesktop.DBus"</literal></expr></argument>,
<argument><expr><literal type="string">"/"</literal></expr></argument>,
<argument><expr><literal type="string">"org.freedesktop.DBus"</literal></expr></argument>,
<argument><expr><literal type="string">"NameHasOwner"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>msg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_new_method : Failed to create message"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>( <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ppsz_sAddr</name><index>[<expr><name>i_sid</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>repmsg</name> <operator>=</operator> <call><name>vlc_dbus_send_message</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>repmsg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_is_enabled : vlc_dbus_send_message failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_is_enabled : "</literal>
<literal type="string">"dbus_message_get_args failed\n%s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>b_is_enabled</name> <operator>=</operator> <name>b_reply</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>( <expr><name>msg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>repmsg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_dbus_init</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <call><name>dbus_bus_get_private</name><argument_list>( <argument><expr><name>DBUS_BUS_SESSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_init : "</literal>
<literal type="string">"Connection error to session bus (%s)"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_init : connection is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">99</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name> <operator>==</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_dbus_name</name><index>[<expr><call><name>strlen</name><argument_list>( <argument><expr><name>KWALLET_APP_ID</name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>DBUS_INSTANCE_PREFIX</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>psz_dbus_name</name></expr></argument>, <argument><expr><literal type="string">"%s.%s_%02u"</literal></expr></argument>, <argument><expr><name>KWALLET_APP_ID</name></expr></argument>, <argument><expr><name>DBUS_INSTANCE_PREFIX</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>dbus_bus_request_name</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>psz_dbus_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_init : dbus_bus_request_name :"</literal>
<literal type="string">" error (%s)"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>==</operator> <name>DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_dbus_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_init : Too many kwallet instances"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SERVICE_MAX</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_is_enabled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>kwallet_is_enabled</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_is_enabled</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_init : kwallet_is_enabled failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>b_is_enabled</name> <operator>==</operator> <name>true</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>( <expr><name>i</name> <operator>==</operator> <name>SERVICE_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_init : No kwallet service enabled"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sid</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><call><name>kwallet_network_wallet</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_init : kwallet_network_wallet has failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_connection_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_connection_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>kwallet_has_folder</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_folder_name</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>b_has_folder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>repmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>vlc_dbus_new_method</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"hasFolder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>msg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_has_folder : vlc_dbus_new_method failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>( <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_folder_name</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>repmsg</name> <operator>=</operator> <call><name>vlc_dbus_send_message</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>repmsg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_has_folder : vlc_dbus_send_message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_has_folder :"</literal>
<literal type="string">" dbus_message_get_args failed\n%s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>b_has_folder</name> <operator>=</operator> <name>b_reply</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>( <expr><name>msg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>repmsg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>kwallet_create_folder</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_folder_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>repmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>vlc_dbus_new_method</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"createFolder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>msg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_create_folder : vlc_dbus_new_method failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>( <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_folder_name</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>repmsg</name> <operator>=</operator> <call><name>vlc_dbus_send_message</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>repmsg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_create_folder : vlc_dbus_send_message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_create_folder :"</literal>
<literal type="string">" dbus_message_get_args failed\n%s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_reply</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_create_folder : Could not create folder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>( <expr><name>msg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>repmsg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>kwallet_open</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>repmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull_win_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ui_reply</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_has_folder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>vlc_dbus_new_method</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>msg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_open : vlc_dbus_new_method failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_wallet</name></name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ull_win_id</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>repmsg</name> <operator>=</operator> <call><name>vlc_dbus_send_message</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>repmsg</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_open : vlc_dbus_send_message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT32</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ui_reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_open :"</literal>
<literal type="string">" dbus_message_get_args failed\n%s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name> <operator>=</operator> <name>ui_reply</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><call><name>kwallet_has_folder</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>psz_folder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_has_folder</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_has_folder</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>kwallet_create_folder</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>psz_folder</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_open : could not create folder %s"</literal></expr></argument>,
<argument><expr><name>psz_folder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>( <expr><name>msg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>repmsg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>kwallet_has_entry</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_entry_name</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>b_has_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>repmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <name>msg</name> <operator>=</operator> <call><name>vlc_dbus_new_method</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"hasEntry"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_has_entry : vlc_dbus_new_method failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>( <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_folder</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_entry_name</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <name>repmsg</name> <operator>=</operator> <call><name>vlc_dbus_send_message</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_has_entry : vlc_dbus_send_message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_has_entry :"</literal>
<literal type="string">" dbus_message_get_args failed\n%s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>b_has_entry</name> <operator>=</operator> <name>b_reply</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>( <expr><name>msg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>repmsg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>kwallet_write_password</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_entry_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_secret</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>repmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <name>msg</name> <operator>=</operator> <call><name>vlc_dbus_new_method</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"writePassword"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_write_password : vlc_dbus_new_method failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>( <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_folder</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_entry_name</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_secret</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <name>repmsg</name> <operator>=</operator> <call><name>vlc_dbus_send_message</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_write_password : vlc_dbus_send_message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT32</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_write_password :"</literal>
<literal type="string">" dbus_message_get_args failed\n%s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>( <expr><name>msg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>repmsg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>kwallet_remove_entry</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_entry_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>repmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_has_entry</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>kwallet_has_entry</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>psz_entry_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_has_entry</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_remove_entry : kwallet_has_entry failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_has_entry</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_remove_entry : there is no such entry :"</literal>
<literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_entry_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <name>msg</name> <operator>=</operator> <call><name>vlc_dbus_new_method</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"removeEntry"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_remove_entry : vlc_dbus_new_method failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>( <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_folder</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_entry_name</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <name>repmsg</name> <operator>=</operator> <call><name>vlc_dbus_send_message</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_remove_entry : vlc_dbus_send_message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT32</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_reply</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_remove entry :"</literal>
<literal type="string">" dbus_message_get_args failed\n%s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>( <expr><name>msg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>repmsg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_keystore_entry</name><modifier>*</modifier></type>
<name>kwallet_read_password_list</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_entry_name</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>pi_count</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore_sys</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name><modifier>*</modifier></type> <name>repmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>sub_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>dict_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>var_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_keystore_entry</name><modifier>*</modifier></type> <name>p_entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_secret_decoded</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p_reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p_secret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><name>pi_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <name>msg</name> <operator>=</operator> <call><name>vlc_dbus_new_method</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"readPasswordList"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_read_password_list : vlc_dbus_new_method failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>dbus_message_iter_init_append</name><argument_list>( <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_folder</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_entry_name</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <name>repmsg</name> <operator>=</operator> <call><name>vlc_dbus_send_message</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>msg</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_read_password_list : vlc_dbus_send_message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>dbus_message_iter_init</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_read_password_list : Message has no arguments"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_ARRAY</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_read_password_list : Wrong reply type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub_iter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sub_iter</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_DICT_ENTRY</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sub_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict_iter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict_iter</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_STRING</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dbus_message_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict_iter</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_VARIANT</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><operator>(</operator> <operator>*</operator><name>pi_count</name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>( <expr><call><name>dbus_message_iter_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sub_iter</name></expr></argument> )</argument_list></call></expr> )</condition>;</do>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>pi_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <name>p_entries</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><operator>*</operator><name>pi_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>vlc_keystore_entry</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_init</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub_iter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sub_iter</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_DICT_ENTRY</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"Wrong type not DBUS_TYPE_DICT_ENTRY"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sub_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict_iter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict_iter</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_STRING</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"First type of Dict-Entry is not a string"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_reply</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_message_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>dbus_message_iter_get_arg_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict_iter</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>DBUS_TYPE_VARIANT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"Second type of Dict-Entry is not a variant"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dict_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_iter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>var_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_secret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>vlc_b64_decode_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_secret_decoded</name></expr></argument>, <argument><expr><name>p_secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>key2values</name><argument_list>( <argument><expr><name>p_reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <call><name>vlc_keystore_entry_set_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>p_secret_decoded</name></expr></argument>,
<argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_secret_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>( <expr><call><name>dbus_message_iter_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sub_iter</name></expr></argument> )</argument_list></call></expr> )</condition>;</do>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_entries</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_secret_decoded</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>p_entries</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_keystore_release_entries</name><argument_list>( <argument><expr><name>p_entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>msg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>repmsg</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>( <argument><expr><name>repmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>Store</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p_secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_secret_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_label</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_b64_secret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>psz_label</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_key</name> <operator>=</operator> <call><name>values2key</name><argument_list>( <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_key</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_b64_secret</name> <operator>=</operator> <call><name>vlc_b64_encode_binary</name><argument_list>( <argument><expr><name>p_secret</name></expr></argument>, <argument><expr><name>i_secret_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_b64_secret</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>kwallet_write_password</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name>psz_b64_secret</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_b64_secret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_b64_secret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>Find</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>vlc_keystore_entry</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_entries</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_key</name> <operator>=</operator> <call><name>values2key</name><argument_list>( <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_key</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_count</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_entries</name> <operator>=</operator> <call><name>kwallet_read_password_list</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>*</operator><name>pp_entries</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_count</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>Remove</name><parameter_list>( <parameter><decl><type><name>vlc_keystore</name><modifier>*</modifier></type> <name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_keystore_entry</name><modifier>*</modifier></type> <name>p_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_key</name> <operator>=</operator> <call><name>values2key</name><argument_list>( <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_key</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_entries</name> <operator>=</operator> <call><name>kwallet_read_password_list</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_entries</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>psz_key</name> <operator>=</operator> <call><name>values2key</name><argument_list>( <argument><expr><operator>(</operator> <specifier>const</specifier> <name>char</name><operator>*</operator> <specifier>const</specifier><operator>*</operator> <operator>)</operator><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ppsz_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_key</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_keystore_release_entries</name><argument_list>( <argument><expr><name>p_entries</name></expr></argument>, <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>kwallet_remove_entry</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_keystore_release_entries</name><argument_list>( <argument><expr><name>p_entries</name></expr></argument>, <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>( <init><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>inc</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr> ;</condition> <incr><expr><operator>++</operator><name>inc</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ppsz_values</name><index>[<expr><name>inc</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_secret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_entries</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><operator>(</operator> <name>vlc_keystore</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_connection_close</name><argument_list>( <argument><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_connection_unref</name><argument_list>( <argument><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>connection</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_app_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>psz_wallet</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><operator>(</operator> <name>vlc_keystore</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>vlc_keystore_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_dbus_init</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"vlc_dbus_init failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>kwallet_open</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"kwallet_open failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_store</name></name> <operator>=</operator> <name>Store</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_find</name></name> <operator>=</operator> <name>Find</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_remove</name></name> <operator>=</operator> <name>Remove</name></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
