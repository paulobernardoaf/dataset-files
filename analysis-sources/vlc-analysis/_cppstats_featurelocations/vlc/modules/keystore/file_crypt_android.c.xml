<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\keystore\file_crypt_android.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file_crypt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>JNIEnv</name> <modifier>*</modifier></type> <name>android_getEnv</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ENV</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>android_getEnv(VLC_OBJECT(p_keystore), "android keystore")</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>jmethodID</name></type> <name>toString</name></decl>;</decl_stmt>
}</block> <decl><name>Object</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getEntry</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getSecretKey</name></decl>;</decl_stmt>
}</block> <decl><name>SecretKeyEntry</name></decl>;</struct>
}</block> <decl><name>KeyStore</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>jint</name></type> <name>PURPOSE_ENCRYPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jint</name></type> <name>PURPOSE_DECRYPT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>BLOCK_MODE_CBC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>ENCRYPTION_PADDING_PKCS7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>KEY_ALGORITHM_AES</name></decl>;</decl_stmt>
}</block> <decl><name>KeyProperties</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>generateKey</name></decl>;</decl_stmt>
}</block> <decl><name>KeyGenerator</name></decl>;</struct>
<struct>struct
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>ctor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>setKeySize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>setBlockModes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>setEncryptionPaddings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>build</name></decl>;</decl_stmt>
}</block> <decl><name>Builder</name></decl>;</struct>
}</block> <decl><name>KeyGenParameterSpec</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>ctor</name></decl>;</decl_stmt>
}</block> <decl><name>IvParameterSpec</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>doFinal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>getIV</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jint</name></type> <name>ENCRYPT_MODE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jint</name></type> <name>DECRYPT_MODE</name></decl>;</decl_stmt>
}</block> <decl><name>Cipher</name></decl>;</struct>
<decl_stmt><decl><type><name>jstring</name></type> <name>VLC_CIPHER</name></decl>;</decl_stmt>
}</block> <decl><name>fields</name></decl>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>jobject</name></type> <name>s_jkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL</name><parameter_list>(<parameter><type><name>caller</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*p_env)-&gt;caller(p_env, obj, fields.method, ##__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_VOID</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CALL(CallVoidMethod, obj, method, ##__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_OBJ</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CALL(CallObjectMethod, obj, method, ##__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_STATICOBJ</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CALL(CallStaticObjectMethod, fields.obj.clazz, method, ##__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_INT</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CALL(CallIntMethod, obj, method, ##__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_BOOL</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CALL(CallBooleanMethod, obj, method, ##__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_OBJECT</name><parameter_list>(<parameter><type><name>arg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*p_env)-&gt;NewObject(p_env, fields.arg.clazz, fields.arg.ctor, ##__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_GREF</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*p_env)-&gt;NewGlobalRef(p_env, obj)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEL_GREF</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*p_env)-&gt;DeleteGlobalRef(p_env, obj)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEL_LREF</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*p_env)-&gt;DeleteLocalRef(p_env, obj)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_STR</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*p_env)-&gt;NewStringUTF(p_env, str)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_expection</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jthrowable</name></type> <name>jex</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionOccurred</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>jex</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fields</name><operator>.</operator><name>Object</name><operator>.</operator><name>toString</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>jstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>jstr</name> <operator>=</operator> <operator>(</operator><name>jstring</name><operator>)</operator> <call><name>CALL_OBJ</name><argument_list>(<argument><expr><name>jex</name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>toString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_str</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jstr</name></expr></argument>, <argument><expr><name>psz_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><literal type="string">"unknown exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EXCEPTION</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>check_expection(p_keystore, p_env)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CLASS</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (clazz != NULL) DEL_LREF(clazz); clazz = (*p_env)-&gt;FindClass(p_env, (str)); if (CHECK_EXCEPTION()) return VLC_EGENERIC; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_GLOBAL_CLASS</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fields.id.clazz = (jclass) NEW_GREF(clazz); } while (0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ID</name><parameter_list>(<parameter><type><name>get</name></type></parameter>, <parameter><type><name>id</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fields.id = (*p_env)-&gt;get(p_env, clazz, (str), (args)); if (CHECK_EXCEPTION()) return VLC_EGENERIC; } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CONST_INT</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { jfieldID field = (*p_env)-&gt;GetStaticFieldID(p_env, clazz, (str), "I"); if (!CHECK_EXCEPTION()) { fields.id = (*p_env)-&gt;GetStaticIntField(p_env, clazz, field); if (CHECK_EXCEPTION()) return VLC_EGENERIC; } else { return VLC_EGENERIC; } } while(0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CONST_OBJ</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { jfieldID field = (*p_env)-&gt;GetStaticFieldID(p_env, clazz, (str), type); if (!CHECK_EXCEPTION()) { jobject jobj = (*p_env)-&gt;GetStaticObjectField(p_env, clazz, field); if (CHECK_EXCEPTION()) return VLC_EGENERIC; fields.id = NEW_GREF(jobj); DEL_LREF(jobj); } else { return VLC_EGENERIC; } } while(0)</cpp:value></cpp:define>
















<function><type><specifier>static</specifier> <name>int</name></type>
<name>InitJni</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>(<argument><expr><literal type="string">"java/lang/Object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>toString</name></name></expr></argument>, <argument><expr><literal type="string">"toString"</literal></expr></argument>, <argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>(<argument><expr><literal type="string">"java/security/KeyStore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_GLOBAL_CLASS</name><argument_list>(<argument><expr><name>KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetStaticMethodID</name></expr></argument>, <argument><expr><name><name>KeyStore</name><operator>.</operator><name>getInstance</name></name></expr></argument>, <argument><expr><literal type="string">"getInstance"</literal></expr></argument>,
<argument><expr><literal type="string">"(Ljava/lang/String;)Ljava/security/KeyStore;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>KeyStore</name><operator>.</operator><name>load</name></name></expr></argument>, <argument><expr><literal type="string">"load"</literal></expr></argument>,
<argument><expr><literal type="string">"(Ljava/security/KeyStore$LoadStoreParameter;)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>KeyStore</name><operator>.</operator><name>getEntry</name></name></expr></argument>, <argument><expr><literal type="string">"getEntry"</literal></expr></argument>,
<argument><expr><literal type="string">"(Ljava/lang/String;Ljava/security/KeyStore$ProtectionParameter;)"</literal>
<literal type="string">"Ljava/security/KeyStore$Entry;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>(<argument><expr><literal type="string">"java/security/KeyStore$SecretKeyEntry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>KeyStore</name><operator>.</operator><name>SecretKeyEntry</name><operator>.</operator><name>getSecretKey</name></name></expr></argument>, <argument><expr><literal type="string">"getSecretKey"</literal></expr></argument>,
<argument><expr><literal type="string">"()Ljavax/crypto/SecretKey;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>(<argument><expr><literal type="string">"javax/crypto/spec/IvParameterSpec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_GLOBAL_CLASS</name><argument_list>(<argument><expr><name>IvParameterSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>IvParameterSpec</name><operator>.</operator><name>ctor</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"([B)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>(<argument><expr><literal type="string">"javax/crypto/Cipher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_GLOBAL_CLASS</name><argument_list>(<argument><expr><name>Cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetStaticMethodID</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name></expr></argument>, <argument><expr><literal type="string">"getInstance"</literal></expr></argument>,
<argument><expr><literal type="string">"(Ljava/lang/String;)Ljavax/crypto/Cipher;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>init</name></name></expr></argument>, <argument><expr><literal type="string">"init"</literal></expr></argument>,
<argument><expr><literal type="string">"(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>doFinal</name></name></expr></argument>, <argument><expr><literal type="string">"doFinal"</literal></expr></argument>, <argument><expr><literal type="string">"([B)[B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>getIV</name></name></expr></argument>, <argument><expr><literal type="string">"getIV"</literal></expr></argument>, <argument><expr><literal type="string">"()[B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><literal type="string">"ENCRYPT_MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>, <argument><expr><literal type="string">"DECRYPT_MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>jstring</name></type> <name>VLC_CIPHER</name> <init>= <expr><call><name>NEW_STR</name><argument_list>(<argument><expr><literal type="string">"AES/CBC/PKCS7Padding"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fields</name><operator>.</operator><name>VLC_CIPHER</name></name> <operator>=</operator> <call><name>NEW_GREF</name><argument_list>(<argument><expr><name>VLC_CIPHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>VLC_CIPHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>InitJniGenKey</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>(<argument><expr><literal type="string">"android/security/keystore/KeyProperties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>(<argument><expr><name><name>KeyProperties</name><operator>.</operator><name>PURPOSE_ENCRYPT</name></name></expr></argument>, <argument><expr><literal type="string">"PURPOSE_ENCRYPT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>(<argument><expr><name><name>KeyProperties</name><operator>.</operator><name>PURPOSE_DECRYPT</name></name></expr></argument>, <argument><expr><literal type="string">"PURPOSE_DECRYPT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_CONST_OBJ</name><argument_list>(<argument><expr><name><name>KeyProperties</name><operator>.</operator><name>BLOCK_MODE_CBC</name></name></expr></argument>,
<argument><expr><literal type="string">"BLOCK_MODE_CBC"</literal></expr></argument>, <argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_CONST_OBJ</name><argument_list>(<argument><expr><name><name>KeyProperties</name><operator>.</operator><name>ENCRYPTION_PADDING_PKCS7</name></name></expr></argument>,
<argument><expr><literal type="string">"ENCRYPTION_PADDING_PKCS7"</literal></expr></argument>, <argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_CONST_OBJ</name><argument_list>(<argument><expr><name><name>KeyProperties</name><operator>.</operator><name>KEY_ALGORITHM_AES</name></name></expr></argument>,
<argument><expr><literal type="string">"KEY_ALGORITHM_AES"</literal></expr></argument>, <argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>(<argument><expr><literal type="string">"android/security/keystore/KeyGenParameterSpec$Builder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_GLOBAL_CLASS</name><argument_list>(<argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name><operator>.</operator><name>ctor</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>,
<argument><expr><literal type="string">"(Ljava/lang/String;I)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name><operator>.</operator><name>setKeySize</name></name></expr></argument>, <argument><expr><literal type="string">"setKeySize"</literal></expr></argument>,
<argument><expr><literal type="string">"(I)Landroid/security/keystore/KeyGenParameterSpec$Builder;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name><operator>.</operator><name>setBlockModes</name></name></expr></argument>, <argument><expr><literal type="string">"setBlockModes"</literal></expr></argument>,
<argument><expr><literal type="string">"([Ljava/lang/String;)"</literal>
<literal type="string">"Landroid/security/keystore/KeyGenParameterSpec$Builder;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name><operator>.</operator><name>setEncryptionPaddings</name></name></expr></argument>,
<argument><expr><literal type="string">"setEncryptionPaddings"</literal></expr></argument>, <argument><expr><literal type="string">"([Ljava/lang/String;)"</literal>
<literal type="string">"Landroid/security/keystore/KeyGenParameterSpec$Builder;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name><operator>.</operator><name>build</name></name></expr></argument>, <argument><expr><literal type="string">"build"</literal></expr></argument>,
<argument><expr><literal type="string">"()Landroid/security/keystore/KeyGenParameterSpec;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>(<argument><expr><literal type="string">"javax/crypto/KeyGenerator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_GLOBAL_CLASS</name><argument_list>(<argument><expr><name>KeyGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetStaticMethodID</name></expr></argument>, <argument><expr><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name></expr></argument>, <argument><expr><literal type="string">"getInstance"</literal></expr></argument>,
<argument><expr><literal type="string">"(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/KeyGenerator;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>KeyGenerator</name><operator>.</operator><name>init</name></name></expr></argument>, <argument><expr><literal type="string">"init"</literal></expr></argument>,
<argument><expr><literal type="string">"(Ljava/security/spec/AlgorithmParameterSpec;)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>(<argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>KeyGenerator</name><operator>.</operator><name>generateKey</name></name></expr></argument>, <argument><expr><literal type="string">"generateKey"</literal></expr></argument>,
<argument><expr><literal type="string">"()Ljavax/crypto/SecretKey;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>Process</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jcipher</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_src_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_iv</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_iv_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_dst_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jbyteArray</name></type> <name>jsrcArray</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>jdstArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>jsrcArray</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>NewByteArray</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>i_src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>SetByteArrayRegion</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jsrcArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_src_len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>p_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jdstArray</name> <operator>=</operator> <operator>(</operator><name>jbyteArray</name><operator>)</operator> <call><name>CALL_OBJ</name><argument_list>(<argument><expr><name>jcipher</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>doFinal</name></name></expr></argument>, <argument><expr><name>jsrcArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>jdstArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jsize</name></type> <name>dstSize</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jdstArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dstSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jbyte</name> <modifier>*</modifier></type><name>p_bytes</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayElements</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jdstArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <ternary><condition><expr><name>i_iv_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>malloc</name><argument_list>(<argument><expr><name>dstSize</name> <operator>+</operator> <name>i_iv_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>malloc</name><argument_list>(<argument><expr><name>dstSize</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseByteArrayElements</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jdstArray</name></expr></argument>, <argument><expr><name>p_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_iv_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_iv_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_dst</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p_iv</name></expr></argument>, <argument><expr><name>i_iv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_dst</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>i_iv_len</name></expr></argument>, <argument><expr><name>p_bytes</name></expr></argument>, <argument><expr><name>dstSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dst_size</name> <operator>=</operator> <name>dstSize</name> <operator>+</operator> <name>i_iv_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_bytes</name></expr></argument>, <argument><expr><name>dstSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dst_size</name> <operator>=</operator> <name>dstSize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseByteArrayElements</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jdstArray</name></expr></argument>, <argument><expr><name>p_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_dst</name> <operator>=</operator> <name>p_dst</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>jsrcArray</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jsrcArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jdstArray</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jdstArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_dst_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>AndroidEncrypt</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_src_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_ctx</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name> <init>= <expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_env</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>jcipher</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>jcipher</name> <operator>=</operator> <call><name>CALL_STATICOBJ</name><argument_list>(<argument><expr><name>Cipher</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>VLC_CIPHER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_dst_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CALL_VOID</name><argument_list>(<argument><expr><name>jcipher</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>init</name></name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><name>s_jkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>




<decl_stmt><decl><type><name>jarray</name></type> <name>jivArray</name> <init>= <expr><operator>(</operator><name>jarray</name><operator>)</operator> <call><name>CALL_OBJ</name><argument_list>(<argument><expr><name>jcipher</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>getIV</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>jivArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jsize</name></type> <name>i_iv_len</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jivArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_iv_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>jbyte</name> <modifier>*</modifier></type><name>p_iv_bytes</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayElements</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jivArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_dst_len</name> <operator>=</operator> <call><name>Process</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jcipher</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src_len</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p_iv_bytes</name></expr></argument>, <argument><expr><name>i_iv_len</name></expr></argument>, <argument><expr><name>pp_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseByteArrayElements</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jivArray</name></expr></argument>, <argument><expr><name>p_iv_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jivArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jcipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_dst_len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>AndroidDecrypt</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_src_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_ctx</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name> <init>= <expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_env</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>jivArray</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>jiv</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>jcipher</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>jcipher</name> <operator>=</operator> <call><name>CALL_STATICOBJ</name><argument_list>(<argument><expr><name>Cipher</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>VLC_CIPHER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_dst_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_iv_len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_src_len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_iv_len</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_iv_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_src_len</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>i_iv_len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jivArray</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>NewByteArray</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>i_iv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>SetByteArrayRegion</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jivArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_iv_len</name></expr></argument>,
<argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p_src</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jiv</name> <operator>=</operator> <call><name>NEW_OBJECT</name><argument_list>(<argument><expr><name>IvParameterSpec</name></expr></argument>, <argument><expr><name>jivArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>CALL_VOID</name><argument_list>(<argument><expr><name>jcipher</name></expr></argument>, <argument><expr><name><name>Cipher</name><operator>.</operator><name>init</name></name></expr></argument>, <argument><expr><name><name>fields</name><operator>.</operator><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>, <argument><expr><name>s_jkey</name></expr></argument>, <argument><expr><name>jiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_dst_len</name> <operator>=</operator> <call><name>Process</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jcipher</name></expr></argument>,
<argument><expr><name>p_src</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>i_iv_len</name></expr></argument>,
<argument><expr><name>i_src_len</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i_iv_len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pp_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jcipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jivArray</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jivArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jiv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_dst_len</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>jobject</name></type>
<name>GenerateKey</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>jstringAlias</name></decl></parameter>,
<parameter><decl><type><name>jstring</name></type> <name>jstringProvider</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>InitJniGenKey</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>jkey</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>jbuilder</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>jspec</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"/><name>jkeyGen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>jstringClass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobjectArray</name></type> <name>jarray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>jbuilder</name> <operator>=</operator> <call><name>NEW_OBJECT</name><argument_list>(<argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name></name></expr></argument>, <argument><expr><name>jstringAlias</name></expr></argument>,
<argument><expr><name><name>fields</name><operator>.</operator><name>KeyProperties</name><operator>.</operator><name>PURPOSE_ENCRYPT</name></name> <operator>|</operator>
<name><name>fields</name><operator>.</operator><name>KeyProperties</name><operator>.</operator><name>PURPOSE_DECRYPT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CALL_OBJ</name><argument_list>(<argument><expr><name>jbuilder</name></expr></argument>, <argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name><operator>.</operator><name>setKeySize</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jstringClass</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><literal type="string">"java/lang/String"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jarray</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>NewObjectArray</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>jstringClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>SetObjectArrayElement</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jarray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>fields</name><operator>.</operator><name>KeyProperties</name><operator>.</operator><name>BLOCK_MODE_CBC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CALL_OBJ</name><argument_list>(<argument><expr><name>jbuilder</name></expr></argument>, <argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name><operator>.</operator><name>setBlockModes</name></name></expr></argument>, <argument><expr><name>jarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>SetObjectArrayElement</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jarray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>fields</name><operator>.</operator><name>KeyProperties</name><operator>.</operator><name>ENCRYPTION_PADDING_PKCS7</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CALL_OBJ</name><argument_list>(<argument><expr><name>jbuilder</name></expr></argument>, <argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name><operator>.</operator><name>setEncryptionPaddings</name></name></expr></argument>, <argument><expr><name>jarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jspec</name> <operator>=</operator> <call><name>CALL_OBJ</name><argument_list>(<argument><expr><name>jbuilder</name></expr></argument>, <argument><expr><name><name>KeyGenParameterSpec</name><operator>.</operator><name>Builder</name><operator>.</operator><name>build</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jkeyGen</name> <operator>=</operator> <call><name>CALL_STATICOBJ</name><argument_list>(<argument><expr><name>KeyGenerator</name></expr></argument>, <argument><expr><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name></expr></argument>,
<argument><expr><name><name>fields</name><operator>.</operator><name>KeyProperties</name><operator>.</operator><name>KEY_ALGORITHM_AES</name></name></expr></argument>,
<argument><expr><name>jstringProvider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CALL_VOID</name><argument_list>(<argument><expr><name>jkeyGen</name></expr></argument>, <argument><expr><name><name>KeyGenerator</name><operator>.</operator><name>init</name></name></expr></argument>, <argument><expr><name>jspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jkey</name> <operator>=</operator> <call><name>CALL_OBJ</name><argument_list>(<argument><expr><name>jkeyGen</name></expr></argument>, <argument><expr><name><name>KeyGenerator</name><operator>.</operator><name>generateKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>jbuilder</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jbuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jstringClass</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jstringClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jarray</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jspec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jkeyGen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jkeyGen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>jkey</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>AndroidInit</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name> <init>= <expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_env</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>InitJni</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>jkeystore</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>jentry</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>jkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>jstringAlias</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>jstringProvider</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>jstringAlias</name> <operator>=</operator> <call><name>NEW_STR</name><argument_list>(<argument><expr><literal type="string">"LibVLCAndroid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jstringProvider</name> <operator>=</operator> <call><name>NEW_STR</name><argument_list>(<argument><expr><literal type="string">"AndroidKeyStore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jkeystore</name> <operator>=</operator> <call><name>CALL_STATICOBJ</name><argument_list>(<argument><expr><name>KeyStore</name></expr></argument>, <argument><expr><name><name>KeyStore</name><operator>.</operator><name>getInstance</name></name></expr></argument>, <argument><expr><name>jstringProvider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CALL_VOID</name><argument_list>(<argument><expr><name>jkeystore</name></expr></argument>, <argument><expr><name><name>KeyStore</name><operator>.</operator><name>load</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jentry</name> <operator>=</operator> <call><name>CALL_OBJ</name><argument_list>(<argument><expr><name>jkeystore</name></expr></argument>, <argument><expr><name><name>KeyStore</name><operator>.</operator><name>getEntry</name></name></expr></argument>, <argument><expr><name>jstringAlias</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jentry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>jkey</name> <operator>=</operator> <call><name>CALL_OBJ</name><argument_list>(<argument><expr><name>jentry</name></expr></argument>, <argument><expr><name><name>KeyStore</name><operator>.</operator><name>SecretKeyEntry</name><operator>.</operator><name>getSecretKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>jkey</name> <operator>=</operator> <call><name>GenerateKey</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>, <argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>jstringAlias</name></expr></argument>, <argument><expr><name>jstringProvider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jkey</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s_jkey</name> <operator>=</operator> <call><name>NEW_GREF</name><argument_list>(<argument><expr><name>jkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>jstringAlias</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jstringAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jstringProvider</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jstringProvider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jkeystore</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jkeystore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jentry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jkey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEL_LREF</name><argument_list>(<argument><expr><name>jkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>CryptInit</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>crypt</name></name> <modifier>*</modifier></type><name>p_crypt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>s_lock</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>s_init</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s_init</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AndroidInit</name><argument_list>(<argument><expr><name>p_keystore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s_jkey</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_crypt</name><operator>-&gt;</operator><name>pf_encrypt</name></name> <operator>=</operator> <name>AndroidEncrypt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_crypt</name><operator>-&gt;</operator><name>pf_decrypt</name></name> <operator>=</operator> <name>AndroidDecrypt</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
