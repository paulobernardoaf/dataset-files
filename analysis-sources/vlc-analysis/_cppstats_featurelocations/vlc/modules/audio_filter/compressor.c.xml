<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_filter\compressor.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_TBL</name></cpp:macro> <cpp:value>(256)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_TABLE_SIZE</name></cpp:macro> <cpp:value>(1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_MIN</name></cpp:macro> <cpp:value>(-60.0f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_MAX</name></cpp:macro> <cpp:value>(24.0f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIN_TABLE_SIZE</name></cpp:macro> <cpp:value>(1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIN_MIN</name></cpp:macro> <cpp:value>(0.0000000002f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIN_MAX</name></cpp:macro> <cpp:value>(9.0f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_DEFAULT_CUBE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMS_BUF_SIZE</name></cpp:macro> <cpp:value>(960)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKAHEAD_SIZE</name></cpp:macro> <cpp:value>((RMS_BUF_SIZE)&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIN_INTERP</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) + (f) * ( (b) - (a) ))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIMIT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v &lt; l ? l : ( v &gt; u ? u : v ))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>pf_buf</name><index>[<expr><name>RMS_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_sum</name></decl>;</decl_stmt>

}</block></struct></type> <name>rms_env</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>pf_vals</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_lev_in</name></decl>;</decl_stmt>

}</block> <decl><name><name>p_buf</name><index>[<expr><name>LOOKAHEAD_SIZE</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>lookahead</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>f_amp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pf_as</name><index>[<expr><name>A_TBL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_env_peak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_env_rms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_gain_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rms_env</name></type> <name>rms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lookahead</name></type> <name>la</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>pf_db_data</name><index>[<expr><name>DB_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pf_lin_data</name><index>[<expr><name>LIN_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_rms_peak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_attack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_release</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_knee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_makeup_gain</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<typedef>typedef <type><union>union
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>

}</block></union></type> <name>ls_pcast32</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DbInit</name> <parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>Db2Lin</name> <parameter_list>( <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>Lin2Db</name> <parameter_list>( <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DB_DEFAULT_CUBE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>CubeInterp</name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>float</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RoundToZero</name> <parameter_list>( <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>Max</name> <parameter_list>( <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>Clamp</name> <parameter_list>( <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Round</name> <parameter_list>( <parameter><decl><type><name>float</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>RmsEnvProcess</name> <parameter_list>( <parameter><decl><type><name>rms_env</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufferProcess</name> <parameter_list>( <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>lookahead</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>RMSPeakCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AttackCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ReleaseCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ThresholdCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>RatioCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>KneeCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MakeupGainCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMS_PEAK_TEXT</name></cpp:macro> <cpp:value>N_( "RMS/peak" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMS_PEAK_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the RMS/peak." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTACK_TEXT</name></cpp:macro> <cpp:value>N_( "Attack time" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTACK_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the attack time in milliseconds." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELEASE_TEXT</name></cpp:macro> <cpp:value>N_( "Release time" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELEASE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the release time in milliseconds." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THRESHOLD_TEXT</name></cpp:macro> <cpp:value>N_( "Threshold level" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THRESHOLD_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the threshold level in dB." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO_TEXT</name></cpp:macro> <cpp:value>N_( "Ratio" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the ratio (n:1)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KNEE_TEXT</name></cpp:macro> <cpp:value>N_( "Knee radius" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KNEE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the knee radius in dB." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKEUP_GAIN_TEXT</name></cpp:macro> <cpp:value>N_( "Makeup gain" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKEUP_GAIN_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the makeup gain in dB (0 ... 24)." )</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Compressor"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Dynamic range compressor"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AFILTER</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"compressor-rms-peak"</literal></argument>, <argument><literal type="number">0.2</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>,
<argument>RMS_PEAK_TEXT</argument>, <argument>RMS_PEAK_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"compressor-attack"</literal></argument>, <argument><literal type="number">25.0</literal></argument>, <argument><literal type="number">1.5</literal></argument>, <argument><literal type="number">400.0</literal></argument>,
<argument>ATTACK_TEXT</argument>, <argument>ATTACK_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"compressor-release"</literal></argument>, <argument><literal type="number">100.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>, <argument><literal type="number">800.0</literal></argument>,
<argument>RELEASE_TEXT</argument>, <argument>RELEASE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"compressor-threshold"</literal></argument>, <argument>-<literal type="number">11.0</literal></argument>, <argument>-<literal type="number">30.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>,
<argument>THRESHOLD_TEXT</argument>, <argument>THRESHOLD_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"compressor-ratio"</literal></argument>, <argument><literal type="number">4.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">20.0</literal></argument>,
<argument>RATIO_TEXT</argument>, <argument>RATIO_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"compressor-knee"</literal></argument>, <argument><literal type="number">5.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">10.0</literal></argument>,
<argument>KNEE_TEXT</argument>, <argument>KNEE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"compressor-makeup-gain"</literal></argument>, <argument><literal type="number">7.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">24.0</literal></argument>,
<argument>MAKEUP_GAIN_TEXT</argument>, <argument>MAKEUP_GAIN_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"compressor"</literal></argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>





<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_sample_rate</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_num</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_as</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>A_TBL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>expf</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator> <name>f_sample_rate</name> <operator>*</operator> <name>i</name> <operator>/</operator> <name>A_TBL</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>f_num</name> <operator>=</operator> <literal type="number">0.01f</literal> <operator>*</operator> <name>f_sample_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rms</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <call><name>Round</name><argument_list>( <argument><expr><call><name>Clamp</name><argument_list>( <argument><expr><literal type="number">0.5f</literal> <operator>*</operator> <name>f_num</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>RMS_BUF_SIZE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>la</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <call><name>Round</name><argument_list>( <argument><expr><call><name>Clamp</name><argument_list>( <argument><expr><name>f_num</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>LOOKAHEAD_SIZE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DbInit</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rms_peak</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-rms-peak"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_attack</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-attack"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_release</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-release"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_threshold</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-threshold"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_ratio</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-ratio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_knee</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-knee"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_makeup_gain</name></name> <operator>=</operator>
<call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-makeup-gain"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-rms-peak"</literal></expr></argument>, <argument><expr><name>RMSPeakCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-attack"</literal></expr></argument>, <argument><expr><name>AttackCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-release"</literal></expr></argument>, <argument><expr><name>ReleaseCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-threshold"</literal></expr></argument>, <argument><expr><name>ThresholdCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-ratio"</literal></expr></argument>, <argument><expr><name>RatioCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-knee"</literal></expr></argument>, <argument><expr><name>KneeCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-makeup-gain"</literal></expr></argument>, <argument><expr><name>MakeupGainCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"compressor successfully initialized"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-rms-peak"</literal></expr></argument>, <argument><expr><name>RMSPeakCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-attack"</literal></expr></argument>, <argument><expr><name>AttackCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-release"</literal></expr></argument>, <argument><expr><name>ReleaseCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-threshold"</literal></expr></argument>, <argument><expr><name>ThresholdCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-ratio"</literal></expr></argument>, <argument><expr><name>RatioCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-knee"</literal></expr></argument>, <argument><expr><name>KneeCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"compressor-makeup-gain"</literal></expr></argument>, <argument><expr><name>MakeupGainCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_samples</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_channels</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_buf</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_rms_peak</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rms_peak</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_attack</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_attack</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_release</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_release</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_threshold</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_threshold</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_ratio</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_ratio</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_knee</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_knee</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_makeup_gain</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_makeup_gain</name></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>f_amp</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_amp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_as</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_as</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_env</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_env</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_env_peak</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_env_peak</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_env_rms</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_env_rms</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_gain</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_gain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_gain_out</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_gain_out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rms_env</name> <modifier>*</modifier></type><name>p_rms</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rms</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_sum</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sum</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lookahead</name> <modifier>*</modifier></type><name>p_la</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>la</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>f_ga</name> <init>= <expr><ternary><condition><expr><name>f_attack</name> <operator>&lt;</operator> <literal type="number">2.0f</literal></expr> ?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>:
<expr><name><name>pf_as</name><index>[<expr><call><name>Round</name><argument_list>( <argument><expr><name>f_attack</name> <operator>*</operator> <literal type="number">0.001f</literal> <operator>*</operator> <operator>(</operator> <name>A_TBL</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_gr</name> <init>= <expr><name><name>pf_as</name><index>[<expr><call><name>Round</name><argument_list>( <argument><expr><name>f_release</name> <operator>*</operator> <literal type="number">0.001f</literal> <operator>*</operator> <operator>(</operator> <name>A_TBL</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_rs</name> <init>= <expr><operator>(</operator> <name>f_ratio</name> <operator>-</operator> <literal type="number">1.0f</literal> <operator>)</operator> <operator>/</operator> <name>f_ratio</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_mug</name> <init>= <expr><call><name>Db2Lin</name><argument_list>( <argument><expr><name>f_makeup_gain</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_knee_min</name> <init>= <expr><call><name>Db2Lin</name><argument_list>( <argument><expr><name>f_threshold</name> <operator>-</operator> <name>f_knee</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_knee_max</name> <init>= <expr><call><name>Db2Lin</name><argument_list>( <argument><expr><name>f_threshold</name> <operator>+</operator> <name>f_knee</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_ef_a</name> <init>= <expr><name>f_ga</name> <operator>*</operator> <literal type="number">0.25f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_ef_ai</name> <init>= <expr><literal type="number">1.0f</literal> <operator>-</operator> <name>f_ef_a</name></expr></init></decl>;</decl_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_lev_in_old</name></decl>, <decl><type ref="prev"/><name>f_lev_in_new</name></decl>;</decl_stmt>





<expr_stmt><expr><name>f_lev_in_old</name> <operator>=</operator> <name><name>p_la</name><operator>-&gt;</operator><name>p_buf</name><index>[<expr><name><name>p_la</name><operator>-&gt;</operator><name>i_pos</name></name></expr>]</index></name><operator>.</operator><name>f_lev_in</name></expr>;</expr_stmt>



<expr_stmt><expr><name>f_lev_in_new</name> <operator>=</operator> <call><name>fabs</name><argument_list>( <argument><expr><name><name>pf_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_chan</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_chan</name> <operator>&lt;</operator> <name>i_channels</name></expr>;</condition> <incr><expr><name>i_chan</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>f_lev_in_new</name> <operator>=</operator> <call><name>Max</name><argument_list>( <argument><expr><name>f_lev_in_new</name></expr></argument>, <argument><expr><call><name>fabs</name><argument_list>( <argument><expr><name><name>pf_buf</name><index>[<expr><name>i_chan</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_la</name><operator>-&gt;</operator><name>p_buf</name><index>[<expr><name><name>p_la</name><operator>-&gt;</operator><name>i_pos</name></name></expr>]</index></name><operator>.</operator><name>f_lev_in</name> <operator>=</operator> <name>f_lev_in_new</name></expr>;</expr_stmt>


<expr_stmt><expr><name>f_sum</name> <operator>+=</operator> <name>f_lev_in_new</name> <operator>*</operator> <name>f_lev_in_new</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>f_amp</name> <operator>&gt;</operator> <name>f_env_rms</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>f_env_rms</name> <operator>=</operator> <name>f_env_rms</name> <operator>*</operator> <name>f_ga</name> <operator>+</operator> <name>f_amp</name> <operator>*</operator> <operator>(</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>f_ga</name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>f_env_rms</name> <operator>=</operator> <name>f_env_rms</name> <operator>*</operator> <name>f_gr</name> <operator>+</operator> <name>f_amp</name> <operator>*</operator> <operator>(</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>f_gr</name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>RoundToZero</name><argument_list>( <argument><expr><operator>&amp;</operator><name>f_env_rms</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>f_lev_in_old</name> <operator>&gt;</operator> <name>f_env_peak</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>f_env_peak</name> <operator>=</operator> <name>f_env_peak</name> <operator>*</operator> <name>f_ga</name> <operator>+</operator> <name>f_lev_in_old</name> <operator>*</operator> <operator>(</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>f_ga</name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>f_env_peak</name> <operator>=</operator> <name>f_env_peak</name> <operator>*</operator> <name>f_gr</name> <operator>+</operator> <name>f_lev_in_old</name> <operator>*</operator> <operator>(</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>f_gr</name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>RoundToZero</name><argument_list>( <argument><expr><operator>&amp;</operator><name>f_env_peak</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_count</name></name><operator>++</operator> <operator>&amp;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name>f_amp</name> <operator>=</operator> <call><name>RmsEnvProcess</name><argument_list>( <argument><expr><name>p_rms</name></expr></argument>, <argument><expr><name>f_sum</name> <operator>*</operator> <literal type="number">0.25f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f_sum</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>isnan</name><argument_list>( <argument><expr><name>f_env_rms</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>f_env_rms</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>f_env</name> <operator>=</operator> <call><name>LIN_INTERP</name><argument_list>( <argument><expr><name>f_rms_peak</name></expr></argument>, <argument><expr><name>f_env_rms</name></expr></argument>, <argument><expr><name>f_env_peak</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>f_env</name> <operator>&lt;=</operator> <name>f_knee_min</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>f_gain_out</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>f_env</name> <operator>&lt;</operator> <name>f_knee_max</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_x</name> <init>= <expr><operator>-</operator><operator>(</operator> <name>f_threshold</name>
<operator>-</operator> <name>f_knee</name> <operator>-</operator> <call><name>Lin2Db</name><argument_list>( <argument><expr><name>f_env</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>/</operator> <name>f_knee</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>f_gain_out</name> <operator>=</operator> <call><name>Db2Lin</name><argument_list>( <argument><expr><operator>-</operator><name>f_knee</name> <operator>*</operator> <name>f_rs</name> <operator>*</operator> <name>f_x</name> <operator>*</operator> <name>f_x</name> <operator>*</operator> <literal type="number">0.25f</literal></expr></argument>,
<argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>f_gain_out</name> <operator>=</operator> <call><name>Db2Lin</name><argument_list>( <argument><expr><operator>(</operator> <name>f_threshold</name> <operator>-</operator> <call><name>Lin2Db</name><argument_list>( <argument><expr><name>f_env</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call> <operator>)</operator>
<operator>*</operator> <name>f_rs</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>f_gain</name> <operator>=</operator> <name>f_gain</name> <operator>*</operator> <name>f_ef_a</name> <operator>+</operator> <name>f_gain_out</name> <operator>*</operator> <name>f_ef_ai</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>BufferProcess</name><argument_list>( <argument><expr><name>pf_buf</name></expr></argument>, <argument><expr><name>i_channels</name></expr></argument>, <argument><expr><name>f_gain</name></expr></argument>, <argument><expr><name>f_mug</name></expr></argument>, <argument><expr><name>p_la</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pf_buf</name> <operator>+=</operator> <name>i_channels</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sum</name></name> <operator>=</operator> <name>f_sum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_amp</name></name> <operator>=</operator> <name>f_amp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_gain</name></name> <operator>=</operator> <name>f_gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_gain_out</name></name> <operator>=</operator> <name>f_gain_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_env</name></name> <operator>=</operator> <name>f_env</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_env_rms</name></name> <operator>=</operator> <name>f_env_rms</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_env_peak</name></name> <operator>=</operator> <name>f_env_peak</name></expr>;</expr_stmt>

<return>return <expr><name>p_in_buf</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>DbInit</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type> <name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_lin_data</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_lin_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_db_data</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_db_data</name></name></expr></init></decl>;</decl_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LIN_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pf_lin_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>powf</name><argument_list>( <argument><expr><literal type="number">10.0f</literal></expr></argument>, <argument><expr><operator>(</operator> <operator>(</operator> <name>DB_MAX</name> <operator>-</operator> <name>DB_MIN</name> <operator>)</operator> <operator>*</operator>
<operator>(</operator><name>float</name><operator>)</operator><name>i</name> <operator>/</operator> <name>LIN_TABLE_SIZE</name> <operator>+</operator> <name>DB_MIN</name> <operator>)</operator> <operator>/</operator> <literal type="number">20.0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pf_db_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">20.0f</literal> <operator>*</operator> <call><name>log10f</name><argument_list>( <argument><expr><operator>(</operator> <name>LIN_MAX</name> <operator>-</operator> <name>LIN_MIN</name> <operator>)</operator> <operator>*</operator>
<operator>(</operator><name>float</name><operator>)</operator><name>i</name> <operator>/</operator> <name>DB_TABLE_SIZE</name> <operator>+</operator> <name>LIN_MIN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>Db2Lin</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>f_db</name></decl></parameter>, <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type> <name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_scale</name> <init>= <expr><operator>(</operator> <name>f_db</name> <operator>-</operator> <name>DB_MIN</name> <operator>)</operator> <operator>*</operator> <name>LIN_TABLE_SIZE</name> <operator>/</operator> <operator>(</operator> <name>DB_MAX</name> <operator>-</operator> <name>DB_MIN</name> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_base</name> <init>= <expr><call><name>Round</name><argument_list>( <argument><expr><name>f_scale</name> <operator>-</operator> <literal type="number">0.5f</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_ofs</name> <init>= <expr><name>f_scale</name> <operator>-</operator> <name>i_base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_lin_data</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_lin_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_base</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0.0f</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_base</name> <operator>&gt;</operator> <name>LIN_TABLE_SIZE</name> <operator>-</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name><name>pf_lin_data</name><index>[<expr><name>LIN_TABLE_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DB_DEFAULT_CUBE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>CubeInterp</name><argument_list>( <argument><expr><name>f_ofs</name></expr></argument>, <argument><expr><name><name>pf_lin_data</name><index>[<expr><name>i_base</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>pf_lin_data</name><index>[<expr><name>i_base</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>pf_lin_data</name><index>[<expr><name>i_base</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>pf_lin_data</name><index>[<expr><name>i_base</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>f_ofs</name> <operator>)</operator> <operator>*</operator> <name><name>pf_lin_data</name><index>[<expr><name>i_base</name></expr>]</index></name>
<operator>+</operator> <name>f_ofs</name> <operator>*</operator> <name><name>pf_lin_data</name><index>[<expr><name>i_base</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>Lin2Db</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>f_lin</name></decl></parameter>, <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type> <name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_scale</name> <init>= <expr><operator>(</operator> <name>f_lin</name> <operator>-</operator> <name>LIN_MIN</name> <operator>)</operator> <operator>*</operator> <name>DB_TABLE_SIZE</name> <operator>/</operator> <operator>(</operator> <name>LIN_MAX</name> <operator>-</operator> <name>LIN_MIN</name> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_base</name> <init>= <expr><call><name>Round</name><argument_list>( <argument><expr><name>f_scale</name> <operator>-</operator> <literal type="number">0.5f</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_ofs</name> <init>= <expr><name>f_scale</name> <operator>-</operator> <name>i_base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_db_data</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_db_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_base</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name><name>pf_db_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f_scale</name> <operator>*</operator> <literal type="number">0.5f</literal> <operator>-</operator> <literal type="number">23.0f</literal> <operator>*</operator> <operator>(</operator> <literal type="number">2.0f</literal> <operator>-</operator> <name>f_scale</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_base</name> <operator>&gt;</operator> <name>DB_TABLE_SIZE</name> <operator>-</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name><name>pf_db_data</name><index>[<expr><name>DB_TABLE_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DB_DEFAULT_CUBE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>CubeInterp</name><argument_list>( <argument><expr><name>f_ofs</name></expr></argument>, <argument><expr><name><name>pf_db_data</name><index>[<expr><name>i_base</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>pf_db_data</name><index>[<expr><name>i_base</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>pf_db_data</name><index>[<expr><name>i_base</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>pf_db_data</name><index>[<expr><name>i_base</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>f_ofs</name> <operator>)</operator> <operator>*</operator> <name><name>pf_db_data</name><index>[<expr><name>i_base</name></expr>]</index></name>
<operator>+</operator> <name>f_ofs</name> <operator>*</operator> <name><name>pf_db_data</name><index>[<expr><name>i_base</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DB_DEFAULT_CUBE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>float</name></type> <name>CubeInterp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_fr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_inm1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_inp1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_inp2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name>f_in</name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>f_fr</name> <operator>*</operator> <operator>(</operator> <name>f_inp1</name> <operator>-</operator> <name>f_inm1</name> <operator>+</operator>
<name>f_fr</name> <operator>*</operator> <operator>(</operator> <literal type="number">4.0f</literal> <operator>*</operator> <name>f_inp1</name> <operator>+</operator> <literal type="number">2.0f</literal> <operator>*</operator> <name>f_inm1</name> <operator>-</operator> <literal type="number">5.0f</literal> <operator>*</operator> <name>f_in</name> <operator>-</operator> <name>f_inp2</name> <operator>+</operator>
<name>f_fr</name> <operator>*</operator> <operator>(</operator> <literal type="number">3.0f</literal> <operator>*</operator> <operator>(</operator> <name>f_in</name> <operator>-</operator> <name>f_inp1</name> <operator>)</operator> <operator>-</operator> <name>f_inm1</name> <operator>+</operator> <name>f_inp2</name> <operator>)</operator> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>void</name></type> <name>RoundToZero</name><parameter_list>( <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_x</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>f_anti_denormal</name> <init>= <expr><literal type="number">1e-18</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pf_x</name> <operator>+=</operator> <name>f_anti_denormal</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pf_x</name> <operator>-=</operator> <name>f_anti_denormal</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>float</name></type> <name>Max</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>f_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_a</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>f_x</name> <operator>-=</operator> <name>f_a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f_x</name> <operator>+=</operator> <call><name>fabsf</name><argument_list>( <argument><expr><name>f_x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f_x</name> <operator>*=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_x</name> <operator>+=</operator> <name>f_a</name></expr>;</expr_stmt>

<return>return <expr><name>f_x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>Clamp</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>f_x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_x1</name> <init>= <expr><call><name>fabsf</name><argument_list>( <argument><expr><name>f_x</name> <operator>-</operator> <name>f_a</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_x2</name> <init>= <expr><call><name>fabsf</name><argument_list>( <argument><expr><name>f_x</name> <operator>-</operator> <name>f_b</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_x</name> <operator>=</operator> <name>f_x1</name> <operator>+</operator> <name>f_a</name> <operator>+</operator> <name>f_b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f_x</name> <operator>-=</operator> <name>f_x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f_x</name> <operator>*=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<return>return <expr><name>f_x</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Round</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>f_x</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ls_pcast32</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>f</name></name> <operator>+=</operator> <operator>(</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal> <operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name><name>p</name><operator>.</operator><name>i</name></name> <operator>-</operator> <literal type="number">0x4b400000</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>float</name></type> <name>RmsEnvProcess</name><parameter_list>( <parameter><decl><type><name>rms_env</name> <modifier>*</modifier></type> <name>p_r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_x</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>p_r</name><operator>-&gt;</operator><name>f_sum</name></name> <operator>-=</operator> <name><name>p_r</name><operator>-&gt;</operator><name>pf_buf</name><index>[<expr><name><name>p_r</name><operator>-&gt;</operator><name>i_pos</name></name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_r</name><operator>-&gt;</operator><name>f_sum</name></name> <operator>+=</operator> <name>f_x</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_r</name><operator>-&gt;</operator><name>f_sum</name></name> <operator>&lt;</operator> <literal type="number">1.0e-6f</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_r</name><operator>-&gt;</operator><name>f_sum</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_r</name><operator>-&gt;</operator><name>pf_buf</name><index>[<expr><name><name>p_r</name><operator>-&gt;</operator><name>i_pos</name></name></expr>]</index></name> <operator>=</operator> <name>f_x</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_r</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_r</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>%</operator> <operator>(</operator> <name><name>p_r</name><operator>-&gt;</operator><name>i_count</name></name> <operator>)</operator></expr>;</expr_stmt>


<return>return <expr><call><name>sqrt</name><argument_list>( <argument><expr><name><name>p_r</name><operator>-&gt;</operator><name>f_sum</name></name> <operator>/</operator> <name><name>p_r</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>BufferProcess</name><parameter_list>( <parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>pf_buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_channels</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_gain</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>f_mug</name></decl></parameter>, <parameter><decl><type><name>lookahead</name> <modifier>*</modifier></type> <name>p_la</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_chan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_chan</name> <operator>&lt;</operator> <name>i_channels</name></expr>;</condition> <incr><expr><name>i_chan</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_x</name> <init>= <expr><name><name>pf_buf</name><index>[<expr><name>i_chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 


<expr_stmt><expr><name><name>pf_buf</name><index>[<expr><name>i_chan</name></expr>]</index></name> <operator>=</operator> <name><name>p_la</name><operator>-&gt;</operator><name>p_buf</name><index>[<expr><name><name>p_la</name><operator>-&gt;</operator><name>i_pos</name></name></expr>]</index></name><operator>.</operator><name><name>pf_vals</name><index>[<expr><name>i_chan</name></expr>]</index></name>
<operator>*</operator> <name>f_gain</name> <operator>*</operator> <name>f_mug</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_la</name><operator>-&gt;</operator><name>p_buf</name><index>[<expr><name><name>p_la</name><operator>-&gt;</operator><name>i_pos</name></name></expr>]</index></name><operator>.</operator><name><name>pf_vals</name><index>[<expr><name>i_chan</name></expr>]</index></name> <operator>=</operator> <name>f_x</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_la</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_la</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>%</operator> <operator>(</operator> <name><name>p_la</name><operator>-&gt;</operator><name>i_count</name></name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>RMSPeakCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rms_peak</name></name> <operator>=</operator> <call><name>Clamp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AttackCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_attack</name></name> <operator>=</operator> <call><name>Clamp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument>, <argument><expr><literal type="number">1.5f</literal></expr></argument>, <argument><expr><literal type="number">400.0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReleaseCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_release</name></name> <operator>=</operator> <call><name>Clamp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">800.0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ThresholdCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_threshold</name></name> <operator>=</operator> <call><name>Clamp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">30.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RatioCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_ratio</name></name> <operator>=</operator> <call><name>Clamp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">20.0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>KneeCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_knee</name></name> <operator>=</operator> <call><name>Clamp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">10.0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MakeupGainCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_makeup_gain</name></name> <operator>=</operator> <call><name>Clamp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">24.0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
