<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_filter\scaletempo.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> 




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PITCH_SHIFTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenPitch</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ClosePitch</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoPitchWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_DESC</name></cpp:macro> <cpp:value>N_("Pitch Shifter")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULES_SHORTNAME</name></cpp:macro> <cpp:value>N_("Audio pitch changer")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_DESC</name></cpp:macro> <cpp:value>N_("Audio tempo scaler synched with rate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULES_SHORTNAME</name></cpp:macro> <cpp:value>N_("Scaletempo")</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>MODULE_DESC</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>MODULES_SHORTNAME</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AFILTER</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"scaletempo-stride"</literal></argument>, <argument><literal type="number">30</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2000</literal></argument>,
<argument>N_(<literal type="string">"Stride Length"</literal>)</argument>, <argument>N_(<literal type="string">"Length in milliseconds to output each stride"</literal>)</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"scaletempo-overlap"</literal></argument>, <argument><literal type="number">.20</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>,
<argument>N_(<literal type="string">"Overlap Length"</literal>)</argument>, <argument>N_(<literal type="string">"Percentage of stride to overlap"</literal>)</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"scaletempo-search"</literal></argument>, <argument><literal type="number">14</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">200</literal></argument>,
<argument>N_(<literal type="string">"Search Length"</literal>)</argument>, <argument>N_(<literal type="string">"Length in milliseconds to search for best overlap position"</literal>)</argument>, <argument>true</argument> )</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PITCH_SHIFTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"pitch-shift"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">12</literal></argument>, <argument><literal type="number">12</literal></argument>,
<argument>N_(<literal type="string">"Pitch Shift"</literal>)</argument>, <argument>N_(<literal type="string">"Pitch shift in semitones."</literal>)</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenPitch</argument>, <argument>ClosePitch</argument> )</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

















<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>double</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ms_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>percent_overlap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ms_search</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>samples_per_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_per_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_per_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>frames_stride_scaled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>frames_stride_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>bytes_stride_scaled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_queue_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_queued</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_to_slide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>samples_overlap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>samples_standing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_overlap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_standing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf_overlap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>table_blend</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>output_overlap</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_out_buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bytes_off</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>unsigned</name></type> <name>frames_search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf_pre_corr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>table_window</name></decl>;</decl_stmt>
<function_decl><type><name>unsigned</name></type>(<modifier>*</modifier><name>best_overlap_offset</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PITCH_SHIFTER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>resampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>_Atomic</specifier> <name>float</name></type> <name>rate_shift</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>




<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>best_overlap_offset_float</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pw</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>po</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ppc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>search_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>best_corr</name> <init>= <expr><name>INT_MIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>best_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pw</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>table_window</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>po</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_overlap</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>po</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ppc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_pre_corr</name></name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_overlap</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppc</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pw</name><operator>++</operator> <operator>*</operator> <operator>*</operator><name>po</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>search_start</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>frames_search</name></name></expr>;</condition> <incr><expr><name>off</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>corr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name>search_start</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ppc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_pre_corr</name></name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_overlap</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<expr_stmt><expr><name>corr</name> <operator>+=</operator> <operator>*</operator><name>ppc</name><operator>++</operator> <operator>*</operator> <operator>*</operator><name>ps</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>corr</name> <operator>&gt;</operator> <name>best_corr</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>best_corr</name> <operator>=</operator> <name>corr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_off</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>search_start</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>best_off</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>output_overlap_float</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf_out</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>bytes_off</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pout</name> <init>= <expr><name>buf_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>table_blend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>po</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf_overlap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pin</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name> <operator>+</operator> <name>bytes_off</name> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_overlap</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pout</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>po</name> <operator>-</operator> <operator>*</operator><name>pb</name><operator>++</operator> <operator>*</operator> <operator>(</operator> <operator>*</operator><name>po</name> <operator>-</operator> <operator>*</operator><name>pin</name><operator>++</operator> <operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>po</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>size_t</name></type> <name>fill_queue</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_in</name> <init>= <expr><name>i_buffer</name> <operator>-</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset_unchanged</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_in_move</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name></expr></argument>,
<argument><expr><name>bytes_in_move</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>=</operator> <name>bytes_in_move</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_in_skip</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_in_skip</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name></expr></argument>, <argument><expr><name>bytes_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>-=</operator> <name>bytes_in_skip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>bytes_in_skip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_in</name> <operator>-=</operator> <name>bytes_in_skip</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>bytes_in</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_in_copy</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queue_max</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name></expr></argument>, <argument><expr><name>bytes_in</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name></expr></argument>,
<argument><expr><name>p_buffer</name> <operator>+</operator> <name>offset</name></expr></argument>,
<argument><expr><name>bytes_in_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>+=</operator> <name>bytes_in_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>bytes_in_copy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>offset</name> <operator>-</operator> <name>offset_unchanged</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>size_t</name></type> <name>transform_buffer</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pout</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_max_bytes_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_out</name></decl>, <decl><type ref="prev"/><name>bytes_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_max_bytes_out</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>output_overlap</name></name></expr> )</condition> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>best_overlap_offset</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes_off</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>best_overlap_offset</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>output_overlap</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>pout</name></expr></argument>, <argument><expr><name>bytes_off</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pout</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name> <operator>+</operator> <name>bytes_off</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_standing</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_out</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_overlap</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name> <operator>+</operator> <name>bytes_off</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>frames_to_slide</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>frames_stride_scaled</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>frames_stride_error</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frames_to_stride_whole</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>frames_to_slide</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>=</operator> <name>frames_to_stride_whole</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frames_stride_error</name></name> <operator>=</operator> <name>frames_to_slide</name> <operator>-</operator> <name>frames_to_stride_whole</name></expr>;</expr_stmt>

<return>return <expr><name>bytes_out</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>size_t</name></type> <name>calculate_output_buffer_size</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>bytes_in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_to_out</name> <init>= <expr><name>bytes_in</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>bytes_to_out</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>bytes_queue_max</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>bytes_out</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name> <operator>*</operator> <operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator>
<operator>(</operator> <name>bytes_to_out</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queue_max</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name> <operator>)</operator>
<operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride_scaled</name></name> <operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bytes_out</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>reinit_buffers</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>frames_stride</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>ms_stride</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name> <operator>=</operator> <name>frames_stride</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>frames_overlap</name> <init>= <expr><name>frames_stride</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>percent_overlap</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>frames_overlap</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content> 
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_standing</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>samples_standing</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_standing</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>output_overlap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>prev_overlap</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name> <operator>=</operator> <name>frames_overlap</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>samples_overlap</name></name> <operator>=</operator> <name>frames_overlap</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_standing</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>samples_standing</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_standing</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf_overlap</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>table_blend</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>samples_overlap</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>buf_overlap</name></name> <operator>||</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>table_blend</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name> <operator>&gt;</operator> <name>prev_overlap</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>buf_overlap</name></name> <operator>+</operator> <name>prev_overlap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name> <operator>-</operator> <name>prev_overlap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>table_blend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>frames_overlap</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>frames_overlap</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name>i</name> <operator>/</operator> <name>t</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pb</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>output_overlap</name></name> <operator>=</operator> <name>output_overlap_float</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frames_search</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>frames_overlap</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>ms_search</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">1000.0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>frames_search</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content> 
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>best_overlap_offset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_pre_corr</name> <init>= <expr><operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_overlap</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf_pre_corr</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>bytes_pre_corr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>table_window</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>bytes_pre_corr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_pre_corr</name></name> <operator>||</operator> <operator>!</operator> <name><name>p</name><operator>-&gt;</operator><name>table_window</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>table_window</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>frames_overlap</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name>i</name> <operator>*</operator> <operator>(</operator> <name>frames_overlap</name> <operator>-</operator> <name>i</name> <operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pw</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>best_overlap_offset</name></name> <operator>=</operator> <name>best_overlap_offset_float</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>new_size</name> <init>= <expr><operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>frames_search</name></name> <operator>+</operator> <name>frames_stride</name> <operator>+</operator> <name>frames_overlap</name> <operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>&gt;</operator> <name>new_size</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>new_queued</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>-</operator> <name>new_queued</name></expr></argument>,
<argument><expr><name>new_queued</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>=</operator> <name>new_queued</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queue_max</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queue_max</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_queue</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_stride_scaled</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frames_stride_scaled</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride_scaled</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%.3f scale, %.3f stride_in, %i stride_out, %i standing, %i overlap, %i search, %i queue, %s mode"</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>frames_stride_scaled</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name> <operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_standing</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name> <operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_overlap</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name> <operator>)</operator></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>frames_search</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queue_max</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name> <operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"fl32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bytes_per_sample</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bytes_per_frame</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bytes_per_sample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"format: %5i rate, %i nch, %i bps, %s"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bytes_per_sample</name></name></expr></argument>,
<argument><expr><literal type="string">"fl32"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ms_stride</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"scaletempo-stride"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>percent_overlap</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"scaletempo-overlap"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ms_search</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"scaletempo-search"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"params: %i stride, %.3f overlap, %i search"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ms_stride</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>percent_overlap</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ms_search</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buf_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buf_overlap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>table_blend</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buf_pre_corr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>table_window</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bytes_overlap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frames_stride_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>reinit_buffers</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PITCH_SHIFTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>PitchSetRateShift</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch_shift</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rate_shift</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>pitch_shift</name> <operator>/</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PitchCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>oldval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PitchSetRateShift</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>ResamplerCreate</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_resampler</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>filter_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_resampler</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_resampler</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resampler</name><operator>-&gt;</operator><name>fmt_in</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resampler</name><operator>-&gt;</operator><name>fmt_out</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resampler</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rate_shift</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_resampler</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_resampler</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name>p_resampler</name></expr></argument>, <argument><expr><literal type="string">"audio resampler"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_resampler</name><operator>-&gt;</operator><name>p_module</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Could not load resampler"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_resampler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_resampler</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenPitch</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>Open</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>err</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pitch_shift</name> <init>= <expr><call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"pitch-shift"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"pitch-shift"</literal></expr></argument>, <argument><expr><name>PitchCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PitchSetRateShift</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>pitch_shift</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator> <call><name>ResamplerCreate</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>resampler</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoPitchWork</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buf_queue</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buf_overlap</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>table_blend</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buf_pre_corr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>table_window</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PITCH_SHIFTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ClosePitch</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"pitch-shift"</literal></expr></argument>, <argument><expr><name>PitchCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"pitch-shift"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_in_buf</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>scale</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>scale</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_stride_scaled</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frames_stride_scaled</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride_scaled</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes_to_slide</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"%.3f scale, %.3f stride_in, %i stride_out rate: %u"</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>frames_stride_scaled</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_stride</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name> <operator>)</operator></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_outsize</name> <init>= <expr><call><name>calculate_output_buffer_size</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset_in</name> <init>= <expr><call><name>fill_queue</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_outsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_out_buf</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_outsize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_out_buf</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bytes_queued</name></name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_queue_max</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>bytes_out</name> <operator>+=</operator> <call><name>transform_buffer</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>bytes_out</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>bytes_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_in</name> <operator>+=</operator> <call><name>fill_queue</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>offset_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>bytes_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>bytes_out</name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_out_buf</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PITCH_SHIFTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoPitchWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate_shift</name> <init>= <expr><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rate_shift</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name>rate_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name>rate_shift</name></expr>;</expr_stmt>


<expr_stmt><expr><name>p_in_buf</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>pf_audio_filter</name></name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>resampler</name></name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>DoWork</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
