<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_filter\chorus_flanger.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>





<typedef>typedef <type><name><name>struct</name> <name>filter_sys_t</name></name></type> <name>filter_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>paramCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter> ,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter> , <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>reallocate_buffer</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<struct>struct <name>filter_sys_t</name>
<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_cumulative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_channels</name></decl>, <decl><type ref="prev"/><name>i_sampleRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_delayTime</name></decl>, <decl><type ref="prev"/><name>f_feedbackGain</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>f_wetLevel</name></decl>, <decl><type ref="prev"/><name>f_dryLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_sweepDepth</name></decl>, <decl><type ref="prev"/><name>f_sweepRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_sinMultiplier</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_bufferLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type> <name>p_delayLineStart</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>p_delayLineEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type> <name>p_write</name></decl>;</decl_stmt>
}</block>;</struct>






<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Sound Delay"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Delay"</literal>)</argument> )</argument_list></macro>
<macro><name>set_help</name><argument_list>( <argument>N_(<literal type="string">"Add a delay effect to the sound"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AFILTER</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"delay"</literal></argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument><literal type="string">"delay-time"</literal></argument>, <argument><literal type="number">20</literal></argument>, <argument>N_(<literal type="string">"Delay time"</literal>)</argument>,
<argument>N_(<literal type="string">"Time in milliseconds of the average delay. Note average"</literal>)</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument><literal type="string">"sweep-depth"</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument>N_(<literal type="string">"Sweep Depth"</literal>)</argument>,
<argument>N_(<literal type="string">"Time in milliseconds of the maximum sweep depth. Thus, the sweep "</literal>
<literal type="string">"range will be delay-time +/- sweep-depth."</literal>)</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument><literal type="string">"sweep-rate"</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument>N_(<literal type="string">"Sweep Rate"</literal>)</argument>,
<argument>N_(<literal type="string">"Rate of change of sweep depth in milliseconds shift per second "</literal>
<literal type="string">"of play"</literal>)</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"feedback-gain"</literal></argument>, <argument><literal type="number">0.5</literal></argument>, <argument>-<literal type="number">0.9</literal></argument>, <argument><literal type="number">0.9</literal></argument>,
<argument>N_(<literal type="string">"Feedback gain"</literal>)</argument>, <argument>N_(<literal type="string">"Gain on Feedback loop"</literal>)</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"wet-mix"</literal></argument>, <argument><literal type="number">0.4</literal></argument>, <argument>-<literal type="number">0.999</literal></argument>, <argument><literal type="number">0.999</literal></argument>,
<argument>N_(<literal type="string">"Wet mix"</literal>)</argument>, <argument>N_(<literal type="string">"Level of delayed signal"</literal>)</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"dry-mix"</literal></argument>, <argument><literal type="number">0.4</literal></argument>, <argument>-<literal type="number">0.999</literal></argument>, <argument><literal type="number">0.999</literal></argument>,
<argument>N_(<literal type="string">"Dry Mix"</literal>)</argument>, <argument>N_(<literal type="string">"Level of input signal"</literal>)</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>small_value</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><literal type="number">1.f</literal> <operator>/</operator> <literal type="number">16777216.f</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"delay-time"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"sweep-depth"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepRate</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"sweep-rate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_feedbackGain</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"feedback-gain"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_dryLevel</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dry-mix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_wetLevel</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"wet-mix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"delay-time"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"sweep-depth"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"sweep-rate"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"feedback-gain"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dry-mix"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"wet-mix"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Delay Time is invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Sweep Depth is invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepRate</name></name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Sweep Rate is invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>)</operator> <operator>*</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name><operator>/</operator><literal type="number">1000</literal> <operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> , <argument><expr><literal type="string">"Buffer length:%d, Channels:%d, Sweep Depth:%f, Delay "</literal>
<literal type="string">"time:%f, Sweep Rate:%f, Sample Rate: %d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepRate</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Delay-time, Sample rate or Channels was incorrect"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>float</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulative</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_step</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepRate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_temp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineEnd</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_write</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>&lt;</operator> <call><name>small_value</name><argument_list>()</argument_list></call> <operator>||</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&lt;</operator> <call><name>small_value</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sinMultiplier</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sinMultiplier</name></name> <operator>=</operator> <literal type="number">11</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepRate</name></name> <operator>/</operator>
<operator>(</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>*</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>)</operator></expr> ;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sampleRate</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sanitize</name><parameter_list>( <parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>f_value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>fabsf</name><argument_list>( <argument><expr><operator>*</operator><name>f_value</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <call><name>small_value</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f_value</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_sys_t</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_chan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_samples</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_maxOffset</name> <init>= <expr><call><name>floorf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sampleRate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_ptr</name></decl>, <decl><type ref="prev"/><name>f_temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_samples</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulative</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_step</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_offset</name></name> <operator>=</operator> <call><name>sinf</name><argument_list>( <argument><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulative</name></name><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sinMultiplier</name></name></expr></argument> )</argument_list></call>
<operator>*</operator> <call><name>floorf</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sampleRate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_step</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulative</name></name> <operator>&gt;=</operator> <call><name>floorf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>*</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_sampleRate</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepRate</name></name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_offset</name></name> <operator>=</operator> <name>i_maxOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_step</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>*</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_step</name></name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cumulative</name></name> <operator>&lt;=</operator> <call><name>floorf</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>*</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_sampleRate</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepRate</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_offset</name></name> <operator>=</operator> <operator>-</operator><name>i_maxOffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_step</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>*</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_step</name></name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>floorf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_offset</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_ptr</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_write</name></name> <operator>+</operator> <operator>(</operator> <name>i_maxOffset</name> <operator>-</operator> <name>offset</name> <operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>p_ptr</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_ptr</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>p_ptr</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineEnd</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_ptr</name> <operator>-=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><expr><name>i_chan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_chan</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>i_chan</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>





<expr_stmt><expr><name>f_temp</name> <operator>=</operator> <operator>(</operator> <operator>*</operator><operator>(</operator> <name>p_ptr</name> <operator>+</operator> <name>i_chan</name> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sanitize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_chan</name></expr>]</index></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_dryLevel</name></name> <operator>*</operator> <name><name>p_in</name><index>[<expr><name>i_chan</name></expr>]</index></name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>f_wetLevel</name></name> <operator>*</operator> <name>f_temp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_write</name></name> <operator>+</operator> <name>i_chan</name> <operator>)</operator> <operator>=</operator> <name><name>p_in</name><index>[<expr><name>i_chan</name></expr>]</index></name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>f_feedbackGain</name></name> <operator>*</operator> <name>f_temp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_write</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name></expr> )</condition><block type="pseudo"><block_content>
<for>for<control>( <init><expr><name>i_chan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_chan</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>i_chan</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineEnd</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>+</operator> <name>i_chan</name> <operator>)</operator>
<operator>=</operator> <operator>*</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name> <operator>+</operator> <name>i_chan</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_write</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_write</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineEnd</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_write</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
<return>return <expr><name>p_in_buf</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator> <name>filter_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"delay-time"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"sweep-depth"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"sweep-rate"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"feedback-gain"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"wet-mix"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dry-mix"</literal></expr></argument>, <argument><expr><name>paramCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"delay-time"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"sweep-depth"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"sweep-rate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"feedback-gain"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"wet-mix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dry-mix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>paramCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator> <name>p_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"delay-time"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>newval</name><operator>.</operator><name>f_float</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>reallocate_buffer</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name> <operator>=</operator> <name><name>oldval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>)</operator> <operator>*</operator> 
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name><operator>/</operator><literal type="number">1000</literal> <operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"sweep-depth"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>newval</name><operator>.</operator><name>f_float</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>reallocate_buffer</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>=</operator> <name><name>oldval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>)</operator> <operator>*</operator> 
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name><operator>/</operator><literal type="number">1000</literal> <operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"sweep-rate"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>newval</name><operator>.</operator><name>f_float</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepRate</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>&lt;</operator> <call><name>small_value</name><argument_list>()</argument_list></call> <operator>||</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&lt;</operator> <call><name>small_value</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sinMultiplier</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sinMultiplier</name></name> <operator>=</operator> <literal type="number">11</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepRate</name></name> <operator>/</operator>
<operator>(</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>*</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>)</operator></expr> ;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"feedback-gain"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_feedbackGain</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"wet-mix"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_wetLevel</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"dry-mix"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_dryLevel</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reallocate_buffer</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_delayTime</name></name>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_sweepDepth</name></name> <operator>)</operator> <operator>*</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name><operator>/</operator><literal type="number">1000</literal> <operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>temp</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Couldnt reallocate buffer for new delay."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineEnd</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_delayLineStart</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bufferLength</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
