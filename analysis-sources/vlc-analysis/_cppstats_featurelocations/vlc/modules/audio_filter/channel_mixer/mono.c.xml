<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_filter\channel_mixer\mono.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseFilter</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Convert</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>stereo_to_mono</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>mono</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>stereo2mono_downmix</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<struct>struct <name>atomic_operation_t</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_source_channel_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_dest_channel_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_amplitude_factor</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_downmix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_channels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_channel_selected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_bitspersample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_overflow_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>p_overflow_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_atomic_operations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>atomic_operation_t</name></name> <modifier>*</modifier></type> <name>p_atomic_operations</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MONO_DOWNMIX_TEXT</name></cpp:macro> <cpp:value>N_("Use downmix algorithm")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MONO_DOWNMIX_LONGTEXT</name></cpp:macro> <cpp:value>N_("This option selects a stereo to mono " "downmix algorithm that is used in the headphone channel mixer. It " "gives the effect of standing in a room full of speakers." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MONO_CHANNEL_TEXT</name></cpp:macro> <cpp:value>N_("Select channel to keep")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MONO_CHANNEL_LONGTEXT</name></cpp:macro> <cpp:value>N_("This option silences all other channels " "except the selected channel.")</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_pos_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_pos_descriptions</name><index>[]</index></name> <init>=
<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Rear left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Rear right"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Center"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Low-frequency effects"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Side left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Side right"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Rear center"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MONO_CFG</name></cpp:macro> <cpp:value>"sout-mono-"</cpp:value></cpp:define>



<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Stereo to mono downmixer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AFILTER</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenFilter</argument>, <argument>CloseFilter</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"Mono"</literal></argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>MONO_CFG <literal type="string">"downmix"</literal></argument>, <argument>true</argument>, <argument>MONO_DOWNMIX_TEXT</argument>,
<argument>MONO_DOWNMIX_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>MONO_CFG <literal type="string">"channel"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>MONO_CHANNEL_TEXT</argument>,
<argument>MONO_CHANNEL_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>pi_pos_values</argument>, <argument>ppsz_pos_descriptions</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

























<function><type><specifier>static</specifier> <name>void</name></type> <name>ComputeChannelOperations</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_next_atomic_operation</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_source_channel_offset</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d_x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d_z</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>d_compensation_length</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d_channel_amplitude_factor</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d_c</name> <init>= <expr><literal type="number">340</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>d_compensation_delay</name> <init>= <expr><operator>(</operator><name>d_compensation_length</name><operator>-</operator><literal type="number">0.1</literal><operator>)</operator> <operator>/</operator> <name>d_c</name> <operator>*</operator> <name>i_rate</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name></expr>]</index></name>
<operator>.</operator><name>i_source_channel_offset</name> <operator>=</operator> <name>i_source_channel_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name></expr>]</index></name>
<operator>.</operator><name>i_dest_channel_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name></expr>]</index></name>
<operator>.</operator><name>i_delay</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <call><name>sqrt</name><argument_list>( <argument><expr><operator>(</operator><operator>-</operator><literal type="number">0.1</literal><operator>-</operator><name>d_x</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>-</operator><literal type="number">0.1</literal><operator>-</operator><name>d_x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">0</literal><operator>-</operator><name>d_z</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">0</literal><operator>-</operator><name>d_z</name><operator>)</operator></expr></argument> )</argument_list></call>
<operator>/</operator> <name>d_c</name> <operator>*</operator> <name>i_rate</name> <operator>-</operator> <name>d_compensation_delay</name> <operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>d_x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name></expr>]</index></name>
<operator>.</operator><name>d_amplitude_factor</name> <operator>=</operator> <name>d_channel_amplitude_factor</name> <operator>*</operator> <literal type="number">1.1</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>d_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name></expr>]</index></name>
<operator>.</operator><name>d_amplitude_factor</name> <operator>=</operator> <name>d_channel_amplitude_factor</name> <operator>*</operator> <literal type="number">0.9</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name></expr>]</index></name>
<operator>.</operator><name>d_amplitude_factor</name> <operator>=</operator> <name>d_channel_amplitude_factor</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>.</operator><name>i_source_channel_offset</name> <operator>=</operator> <name>i_source_channel_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>.</operator><name>i_dest_channel_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>.</operator><name>i_delay</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <call><name>sqrt</name><argument_list>( <argument><expr><operator>(</operator><literal type="number">0.1</literal><operator>-</operator><name>d_x</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">0.1</literal><operator>-</operator><name>d_x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">0</literal><operator>-</operator><name>d_z</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">0</literal><operator>-</operator><name>d_z</name><operator>)</operator></expr></argument> )</argument_list></call>
<operator>/</operator> <name>d_c</name> <operator>*</operator> <name>i_rate</name> <operator>-</operator> <name>d_compensation_delay</name> <operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>d_x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>.</operator><name>d_amplitude_factor</name> <operator>=</operator> <name>d_channel_amplitude_factor</name> <operator>*</operator> <literal type="number">0.9</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>d_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>.</operator><name>d_amplitude_factor</name> <operator>=</operator> <name>d_channel_amplitude_factor</name> <operator>*</operator> <literal type="number">1.1</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i_next_atomic_operation</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>.</operator><name>d_amplitude_factor</name> <operator>=</operator> <name>d_channel_amplitude_factor</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Init</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type> <name>p_data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_channels</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_physical_channels</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d_x</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"headphone-dim"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_z</name> <init>= <expr><name>d_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_z_rear</name> <init>= <expr><operator>-</operator><name>d_x</name><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_next_atomic_operation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_source_channel_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"headphone-compensate"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_REARCENTER</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>d_min</name> <operator>=</operator> <name>d_z_rear</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>d_min</name> <operator>=</operator> <name>d_z</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_nb_atomic_operations</name></name> <operator>=</operator> <name>i_nb_channels</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_CENTER</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_nb_atomic_operations</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>atomic_operation_t</name></expr></argument>)</argument_list></sizeof>
<operator>*</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_nb_atomic_operations</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_source_channel_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_LEFT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ComputeChannelOperations</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> , <argument><expr><name>i_rate</name></expr></argument>
, <argument><expr><name>i_next_atomic_operation</name></expr></argument> , <argument><expr><name>i_source_channel_offset</name></expr></argument>
, <argument><expr><operator>-</operator><name>d_x</name></expr></argument> , <argument><expr><name>d_z</name></expr></argument> , <argument><expr><name>d_min</name></expr></argument> , <argument><expr><literal type="number">2.0</literal> <operator>/</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_source_channel_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_RIGHT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ComputeChannelOperations</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> , <argument><expr><name>i_rate</name></expr></argument>
, <argument><expr><name>i_next_atomic_operation</name></expr></argument> , <argument><expr><name>i_source_channel_offset</name></expr></argument>
, <argument><expr><name>d_x</name></expr></argument> , <argument><expr><name>d_z</name></expr></argument> , <argument><expr><name>d_min</name></expr></argument> , <argument><expr><literal type="number">2.0</literal> <operator>/</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_source_channel_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_MIDDLELEFT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ComputeChannelOperations</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> , <argument><expr><name>i_rate</name></expr></argument>
, <argument><expr><name>i_next_atomic_operation</name></expr></argument> , <argument><expr><name>i_source_channel_offset</name></expr></argument>
, <argument><expr><operator>-</operator><name>d_x</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>d_min</name></expr></argument> , <argument><expr><literal type="number">1.5</literal> <operator>/</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_source_channel_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ComputeChannelOperations</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> , <argument><expr><name>i_rate</name></expr></argument>
, <argument><expr><name>i_next_atomic_operation</name></expr></argument> , <argument><expr><name>i_source_channel_offset</name></expr></argument>
, <argument><expr><name>d_x</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>d_min</name></expr></argument> , <argument><expr><literal type="number">1.5</literal> <operator>/</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_source_channel_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_REARLEFT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ComputeChannelOperations</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> , <argument><expr><name>i_rate</name></expr></argument>
, <argument><expr><name>i_next_atomic_operation</name></expr></argument> , <argument><expr><name>i_source_channel_offset</name></expr></argument>
, <argument><expr><operator>-</operator><name>d_x</name></expr></argument> , <argument><expr><name>d_z_rear</name></expr></argument> , <argument><expr><name>d_min</name></expr></argument> , <argument><expr><literal type="number">1.5</literal> <operator>/</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_source_channel_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_REARRIGHT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ComputeChannelOperations</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> , <argument><expr><name>i_rate</name></expr></argument>
, <argument><expr><name>i_next_atomic_operation</name></expr></argument> , <argument><expr><name>i_source_channel_offset</name></expr></argument>
, <argument><expr><name>d_x</name></expr></argument> , <argument><expr><name>d_z_rear</name></expr></argument> , <argument><expr><name>d_min</name></expr></argument> , <argument><expr><literal type="number">1.5</literal> <operator>/</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_source_channel_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_REARCENTER</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ComputeChannelOperations</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> , <argument><expr><name>i_rate</name></expr></argument>
, <argument><expr><name>i_next_atomic_operation</name></expr></argument> , <argument><expr><name>i_source_channel_offset</name></expr></argument>
, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><operator>-</operator><name>d_z</name></expr></argument> , <argument><expr><name>d_min</name></expr></argument> , <argument><expr><literal type="number">1.5</literal> <operator>/</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_source_channel_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_CENTER</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>ComputeChannelOperations</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> , <argument><expr><name>i_rate</name></expr></argument>
, <argument><expr><name>i_next_atomic_operation</name></expr></argument> , <argument><expr><name>i_source_channel_offset</name></expr></argument>
, <argument><expr><name>d_x</name> <operator>/</operator> <literal type="number">5.0</literal></expr></argument> , <argument><expr><name>d_z</name></expr></argument> , <argument><expr><name>d_min</name></expr></argument> , <argument><expr><literal type="number">0.75</literal> <operator>/</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ComputeChannelOperations</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> , <argument><expr><name>i_rate</name></expr></argument>
, <argument><expr><name>i_next_atomic_operation</name></expr></argument> , <argument><expr><name>i_source_channel_offset</name></expr></argument>
, <argument><expr><operator>-</operator><name>d_x</name> <operator>/</operator> <literal type="number">5.0</literal></expr></argument> , <argument><expr><name>d_z</name></expr></argument> , <argument><expr><name>d_min</name></expr></argument> , <argument><expr><literal type="number">0.75</literal> <operator>/</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_source_channel_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_physical_channels</name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ComputeChannelOperations</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> , <argument><expr><name>i_rate</name></expr></argument>
, <argument><expr><name>i_next_atomic_operation</name></expr></argument> , <argument><expr><name>i_source_channel_offset</name></expr></argument>
, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>d_z_rear</name></expr></argument> , <argument><expr><name>d_min</name></expr></argument> , <argument><expr><literal type="number">5.0</literal> <operator>/</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_atomic_operation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_source_channel_offset</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_overflow_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_nb_atomic_operations</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_overflow_buffer_size</name></name>
<operator>&lt;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_delay</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_overflow_buffer_size</name></name>
<operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_delay</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_overflow_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_overflow_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>p_overflow_buffer</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_atomic_operations</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_overflow_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_overflow_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name><operator>)</operator></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_downmix</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>MONO_CFG</name> <literal type="string">"downmix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_selected</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>MONO_CFG</name> <literal type="string">"channel"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_channels</name></name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overflow_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_overflow_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_atomic_operations</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_atomic_operations</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>Init</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>,
<argument><expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_downmix</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"using stereo to mono downmix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"using pseudo mono"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>Convert</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"%4.4s-&gt;%4.4s, channels %d-&gt;%d, bits per sample: %i-&gt;%i"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_atomic_operations</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_overflow_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Convert</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_out_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name> <operator>||</operator> <operator>!</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_out_size</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bitspersample</name></name><operator>/</operator><literal type="number">8</literal> <operator>*</operator>
<call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_out_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't get output buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator>
<operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_channels</name></name><operator>)</operator> <operator>*</operator>
<call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
unsigned int i_in_size = in_buf.i_nb_samples * (p_sys-&gt;i_bitspersample/8) *
aout_FormatNbChannels( &amp;(p_filter-&gt;fmt_in.audio) );
if( (in_buf.i_buffer != i_in_size) &amp;&amp; ((i_in_size % 32) != 0) ) 
{
msg_Err( p_filter, "input buffer is not word aligned" );

}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_out_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_downmix</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>stereo2mono_downmix</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mono</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>stereo_to_mono</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_out</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>stereo2mono_downmix</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_input_nb</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_output_nb</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>p_in</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>p_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>p_overflow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>p_slide</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_overflow_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>i_out_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_source_channel_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_dest_channel_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_amplitude_factor</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <name>i_output_nb</name> <operator>/</operator> <name>i_input_nb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_out_size</name> <operator>=</operator> <name><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>p_overflow</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_overflow_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_overflow_size</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_overflow_buffer_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_out_size</name> <operator>&gt;</operator> <name>i_overflow_size</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_overflow</name></expr></argument>, <argument><expr><name>i_overflow_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_overflow</name></expr></argument>, <argument><expr><name>i_out_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_slide</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_overflow_buffer</name></name></expr>;</expr_stmt>
<while>while<condition>( <expr><name>p_slide</name> <operator>&lt;</operator> <name>p_overflow</name> <operator>+</operator> <name>i_overflow_size</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_slide</name> <operator>+</operator> <name>i_out_size</name> <operator>&lt;</operator> <name>p_overflow</name> <operator>+</operator> <name>i_overflow_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_slide</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_out_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_slide</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_out_size</name> <operator>&lt;</operator> <name>p_overflow</name> <operator>+</operator> <name>i_overflow_size</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_slide</name></expr></argument>, <argument><expr><name>p_slide</name> <operator>+</operator> <name>i_out_size</name></expr></argument>, <argument><expr><name>i_out_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_slide</name></expr></argument>, <argument><expr><name>p_slide</name> <operator>+</operator> <name>i_out_size</name></expr></argument>,
<argument><expr><name>p_overflow</name> <operator>+</operator> <name>i_overflow_size</name> <operator>-</operator> <operator>(</operator> <name>p_slide</name> <operator>+</operator> <name>i_out_size</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_slide</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_overflow</name> <operator>+</operator> <name>i_overflow_size</name> <operator>-</operator> <name>p_slide</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p_slide</name> <operator>+=</operator> <name>i_out_size</name></expr>;</expr_stmt>
</block_content>}</block></while>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_atomic_operations</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><name>i_source_channel_offset</name>
<operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_source_channel_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dest_channel_offset</name>
<operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_dest_channel_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_delay</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_delay</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_amplitude_factor</name>
<operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_atomic_operations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>d_amplitude_factor</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>&gt;</operator> <name>i_delay</name></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>-</operator> <name>i_delay</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>p_out</name><operator>)</operator><index>[ <expr><operator>(</operator><name>i_delay</name><operator>+</operator><name>j</name><operator>)</operator><operator>*</operator><name>i_output_nb</name> <operator>+</operator> <name>i_dest_channel_offset</name></expr> ]</index>
<operator>+=</operator> <name><name>p_in</name><index>[ <expr><name>j</name> <operator>*</operator> <name>i_input_nb</name> <operator>+</operator> <name>i_source_channel_offset</name></expr> ]</index></name>
<operator>*</operator> <name>d_amplitude_factor</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_delay</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>p_overflow</name><operator>)</operator><index>[ <expr><name>j</name><operator>*</operator><name>i_output_nb</name> <operator>+</operator> <name>i_dest_channel_offset</name></expr> ]</index>
<operator>+=</operator> <name><name>p_in</name><index>[ <expr><operator>(</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>-</operator> <name>i_delay</name> <operator>+</operator> <name>j</name><operator>)</operator>
<operator>*</operator> <name>i_input_nb</name> <operator>+</operator> <name>i_source_channel_offset</name></expr> ]</index></name>
<operator>*</operator> <name>d_amplitude_factor</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>p_overflow</name><operator>)</operator><index>[ <expr><operator>(</operator><name>i_delay</name> <operator>-</operator> <name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>+</operator> <name>j</name><operator>)</operator>
<operator>*</operator> <name>i_output_nb</name> <operator>+</operator> <name>i_dest_channel_offset</name></expr> ]</index>
<operator>+=</operator> <name><name>p_in</name><index>[ <expr><name>j</name> <operator>*</operator> <name>i_input_nb</name> <operator>+</operator> <name>i_source_channel_offset</name></expr> ]</index></name>
<operator>*</operator> <name>d_amplitude_factor</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>mono</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_output</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_channels</name></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_in</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <name><name>p_in</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>stereo_to_mono</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_output</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name><name>p_input</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_channels</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_selected</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>p_out</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_in</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <name><name>p_in</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name>n</name> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_channels</name></name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_selected</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>p_out</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_in</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
</unit>
