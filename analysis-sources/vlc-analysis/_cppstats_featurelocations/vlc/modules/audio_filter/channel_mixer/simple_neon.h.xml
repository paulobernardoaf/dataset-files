<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_filter\channel_mixer\simple_neon.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEON_WRAPPER</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void convert_##in##_to_##out##_neon_asm(float *dst, const float *src, int num, bool lfeChannel); static inline void DoWork_##in##_to_##out##_neon( filter_t *p_filter, block_t *p_in_buf, block_t *p_out_buf ) { const float *p_src = (const float *)p_in_buf-&gt;p_buffer; float *p_dest = (float *)p_out_buf-&gt;p_buffer; convert_##in##_to_##out##_neon_asm( p_dest, p_src, p_in_buf-&gt;i_nb_samples, p_filter-&gt;fmt_in.audio.i_physical_channels &amp; AOUT_CHAN_LFE ); } static inline void (*GET_WORK_##in##_to_##out##_neon())(filter_t*, block_t*, block_t*) { return vlc_CPU_ARM_NEON() ? DoWork_##in##_to_##out##_neon : DoWork_##in##_to_##out; }</cpp:value></cpp:define>













<macro><name>NEON_WRAPPER</name><argument_list>(<argument><literal type="number">7_x</literal></argument>,<argument><literal type="number">2_0</literal></argument>)</argument_list></macro>
<macro><name>NEON_WRAPPER</name><argument_list>(<argument><literal type="number">5_x</literal></argument>,<argument><literal type="number">2_0</literal></argument>)</argument_list></macro>
<macro><name>NEON_WRAPPER</name><argument_list>(<argument><literal type="number">4_0</literal></argument>,<argument><literal type="number">2_0</literal></argument>)</argument_list></macro>
<macro><name>NEON_WRAPPER</name><argument_list>(<argument><literal type="number">3_x</literal></argument>,<argument><literal type="number">2_0</literal></argument>)</argument_list></macro>
<macro><name>NEON_WRAPPER</name><argument_list>(<argument><literal type="number">7_x</literal></argument>,<argument><literal type="number">1_0</literal></argument>)</argument_list></macro>
<macro><name>NEON_WRAPPER</name><argument_list>(<argument><literal type="number">5_x</literal></argument>,<argument><literal type="number">1_0</literal></argument>)</argument_list></macro>
<macro><name>NEON_WRAPPER</name><argument_list>(<argument><literal type="number">7_x</literal></argument>,<argument><literal type="number">4_0</literal></argument>)</argument_list></macro>
<macro><name>NEON_WRAPPER</name><argument_list>(<argument><literal type="number">5_x</literal></argument>,<argument><literal type="number">4_0</literal></argument>)</argument_list></macro>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_WRAPPER</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void (*GET_WORK_##in##_to_##out##_neon())(filter_t*, block_t*, block_t*) { return DoWork_##in##_to_##out; }</cpp:value></cpp:define>





<macro><name>C_WRAPPER</name><argument_list>(<argument><literal type="number">4_0</literal></argument>,<argument><literal type="number">1_0</literal></argument>)</argument_list></macro>
<macro><name>C_WRAPPER</name><argument_list>(<argument><literal type="number">3_x</literal></argument>,<argument><literal type="number">1_0</literal></argument>)</argument_list></macro>
<macro><name>C_WRAPPER</name><argument_list>(<argument><literal type="number">2_x</literal></argument>,<argument><literal type="number">1_0</literal></argument>)</argument_list></macro>
<macro><name>C_WRAPPER</name><argument_list>(<argument><literal type="number">6_1</literal></argument>,<argument><literal type="number">2_0</literal></argument>)</argument_list></macro>
<macro><name>C_WRAPPER</name><argument_list>(<argument><literal type="number">7_x</literal></argument>,<argument><literal type="number">5_x</literal></argument>)</argument_list></macro>
<macro><name>C_WRAPPER</name><argument_list>(<argument><literal type="number">6_1</literal></argument>,<argument><literal type="number">5_x</literal></argument>)</argument_list></macro>
</unit>
