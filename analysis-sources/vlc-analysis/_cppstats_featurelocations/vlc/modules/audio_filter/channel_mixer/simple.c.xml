<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_filter\channel_mixer\simple.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Audio filter for simple channel mixing"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_MISC</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio converter"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<expr_stmt><expr><call><name>set_callback</name><argument_list>( <argument><expr><name>OpenFilter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_7_x_to_2_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ctr</name> <init>= <expr><name><name>p_src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.7071f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name>ctr</name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name>ctr</name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_6_1_to_2_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ctr</name> <init>= <expr><operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.7071f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>ctr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>ctr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_5_x_to_2_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.7071f</literal> <operator>*</operator> <operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.7071f</literal> <operator>*</operator> <operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_4_0_to_2_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_3_x_to_2_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_7_x_to_1_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_5_x_to_1_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <literal type="number">0.7071f</literal> <operator>*</operator> <operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
<operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_4_0_to_1_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_3_x_to_1_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_2_x_to_1_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_7_x_to_4_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">6</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">6</literal> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_5_x_to_4_0</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ctr</name> <init>= <expr><name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.7071f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>ctr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>ctr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_7_x_to_5_x</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name> <operator>&amp;&amp;</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoWork_6_1_to_5_x</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_out_buf</name></decl></parameter> )</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CAN_COMPILE_NEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_neon.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_WORK</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_WORK_##in##_to_##out##_neon()</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_WORK</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DoWork_##in##_to_##out</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>do_work</name>)<parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_FL32</name> <operator>||</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>||</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>||</operator>
<call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>input</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>output</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>input</name> <operator>==</operator> <name>output</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_input_6_1</name> <init>= <expr><name>input</name> <operator>==</operator> <name>AOUT_CHANS_6_1_MIDDLE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_input_4_center_rear</name> <init>= <expr><name>input</name> <operator>==</operator> <name>AOUT_CHANS_4_CENTER_REAR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>input</name> <operator>&amp;=</operator> <operator>~</operator><name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_input_7_x</name> <init>= <expr><name>input</name> <operator>==</operator> <name>AOUT_CHANS_7_0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_input_5_x</name> <init>= <expr><name>input</name> <operator>==</operator> <name>AOUT_CHANS_5_0</name>
<operator>||</operator> <name>input</name> <operator>==</operator> <name>AOUT_CHANS_5_0_MIDDLE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_input_3_x</name> <init>= <expr><name>input</name> <operator>==</operator> <name>AOUT_CHANS_3_0</name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if<condition>( <expr><name>output</name> <operator>==</operator> <name>AOUT_CHAN_CENTER</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_input_7_x</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">7_x</literal></expr></argument>,<argument><expr><literal type="number">1_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>b_input_5_x</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">5_x</literal></expr></argument>,<argument><expr><literal type="number">1_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>b_input_4_center_rear</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">4_0</literal></expr></argument>,<argument><expr><literal type="number">1_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>b_input_3_x</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">3_x</literal></expr></argument>,<argument><expr><literal type="number">1_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">2_x</literal></expr></argument>,<argument><expr><literal type="number">1_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>output</name> <operator>==</operator> <name>AOUT_CHANS_2_0</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_input_7_x</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">7_x</literal></expr></argument>,<argument><expr><literal type="number">2_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>b_input_6_1</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">6_1</literal></expr></argument>,<argument><expr><literal type="number">2_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>b_input_5_x</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">5_x</literal></expr></argument>,<argument><expr><literal type="number">2_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>b_input_4_center_rear</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">4_0</literal></expr></argument>,<argument><expr><literal type="number">2_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>b_input_3_x</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">3_x</literal></expr></argument>,<argument><expr><literal type="number">2_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>output</name> <operator>==</operator> <name>AOUT_CHANS_4_0</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_input_7_x</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">7_x</literal></expr></argument>,<argument><expr><literal type="number">4_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>b_input_5_x</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">5_x</literal></expr></argument>,<argument><expr><literal type="number">4_0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name>output</name> <operator>&amp;</operator> <operator>~</operator><name>AOUT_CHAN_LFE</name><operator>)</operator> <operator>==</operator> <name>AOUT_CHANS_5_0</name> <operator>||</operator>
<operator>(</operator><name>output</name> <operator>&amp;</operator> <operator>~</operator><name>AOUT_CHAN_LFE</name><operator>)</operator> <operator>==</operator> <name>AOUT_CHANS_5_0_MIDDLE</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_input_7_x</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">7_x</literal></expr></argument>,<argument><expr><literal type="number">5_x</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>b_input_6_1</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_work</name> <operator>=</operator> <call><name>GET_WORK</name><argument_list>(<argument><expr><literal type="number">6_1</literal></expr></argument>,<argument><expr><literal type="number">5_x</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>do_work</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>do_work</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>work</name>)<parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init>;</function_decl>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name> <operator>||</operator> <operator>!</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_out_size</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>*</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_out_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't get output buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_input_nb</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_output_nb</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <name>i_output_nb</name> <operator>/</operator> <name>i_input_nb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>work</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_out</name></expr>;</return>
</block_content>}</block></function>

</unit>
