<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_filter\channel_mixer\dolby.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Simple decoder for Dolby Surround encoded streams"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Dolby Surround decoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACODEC</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio converter"</literal></argument>, <argument><literal type="number">5</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_center</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_rear_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_rear_center</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_rear_right</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>!=</operator> <operator>(</operator><name>AOUT_CHAN_LEFT</name><operator>|</operator><name>AOUT_CHAN_RIGHT</name><operator>)</operator>
<operator>||</operator> <operator>!</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_chan_mode</name></name> <operator>&amp;</operator> <name>AOUT_CHANMODE_DOLBYSTEREO</name> <operator>)</operator>
<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&lt;=</operator> <literal type="number">2</literal>
<operator>||</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_chan_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AOUT_CHANMODE_DOLBYSTEREO</name> <operator>)</operator>
<operator>!=</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_chan_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AOUT_CHANMODE_DOLBYSTEREO</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_FL32</name>
<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_FL32</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_center</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_right</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_center</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_right</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>( <expr><name><name>pi_vlc_chan_order_wg4</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name><name>pi_vlc_chan_order_wg4</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<switch>switch <condition>( <expr><name><name>pi_vlc_chan_order_wg4</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AOUT_CHAN_LEFT</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_left</name></name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AOUT_CHAN_CENTER</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_center</name></name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AOUT_CHAN_RIGHT</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_right</name></name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AOUT_CHAN_REARLEFT</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_left</name></name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AOUT_CHAN_REARCENTER</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_center</name></name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AOUT_CHAN_REARRIGHT</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_right</name></name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>++</operator><name>i_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type> <name>p_in</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_samples</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_channels</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_rear</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out_buf</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_nb_samples</name> <operator>*</operator> <name>i_nb_channels</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out_buf</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type> <name>p_out</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator> <name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>i_nb_samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_left</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i_nb_rear</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_center</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i_nb_rear</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_right</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i_nb_rear</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_samples</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_left</name> <init>= <expr><name><name>p_in</name><index>[ <expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_right</name> <init>= <expr><name><name>p_in</name><index>[ <expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_rear</name> <init>= <expr><operator>(</operator> <name>f_left</name> <operator>-</operator> <name>f_right</name> <operator>)</operator> <operator>/</operator> <name>i_nb_rear</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_center</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_center</name> <init>= <expr><name>f_left</name> <operator>+</operator> <name>f_right</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>f_left</name> <operator>-=</operator> <name>f_center</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_right</name> <operator>-=</operator> <name>f_center</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><index>[ <expr><name>i</name> <operator>*</operator> <name>i_nb_channels</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_center</name></name></expr> ]</index></name> <operator>=</operator> <name>f_center</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_left</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><index>[ <expr><name>i</name> <operator>*</operator> <name>i_nb_channels</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_left</name></name></expr> ]</index></name> <operator>=</operator> <name>f_left</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_right</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><index>[ <expr><name>i</name> <operator>*</operator> <name>i_nb_channels</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_right</name></name></expr> ]</index></name> <operator>=</operator> <name>f_right</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_left</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><index>[ <expr><name>i</name> <operator>*</operator> <name>i_nb_channels</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_left</name></name></expr> ]</index></name> <operator>=</operator> <name>f_rear</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_center</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><index>[ <expr><name>i</name> <operator>*</operator> <name>i_nb_channels</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_center</name></name></expr> ]</index></name> <operator>=</operator> <name>f_rear</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_right</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><index>[ <expr><name>i</name> <operator>*</operator> <name>i_nb_channels</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rear_right</name></name></expr> ]</index></name> <operator>=</operator> <name>f_rear</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_out_buf</name></expr>;</return>
</block_content>}</block></function>
</unit>
