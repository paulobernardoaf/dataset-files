<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_filter\audiobargraph_a.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARGRAPH_TEXT</name></cpp:macro> <cpp:value>N_("Defines if BarGraph information should be sent")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARGRAPH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Defines if BarGraph information should be sent. ""1 if the information should be sent, 0 otherwise (default 1)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARGRAPH_REPETITION_TEXT</name></cpp:macro> <cpp:value>N_("Sends the barGraph information every n audio packets")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARGRAPH_REPETITION_LONGTEXT</name></cpp:macro> <cpp:value>N_("Defines how often the barGraph information should be sent. ""Sends the barGraph information every n audio packets (default 4)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SILENCE_TEXT</name></cpp:macro> <cpp:value>N_("Defines if silence alarm information should be sent")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SILENCE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Defines if silence alarm information should be sent. ""1 if the information should be sent, 0 otherwise (default 1)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_WINDOW_TEXT</name></cpp:macro> <cpp:value>N_("Time window to use in ms")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_WINDOW_LONGTEXT</name></cpp:macro> <cpp:value>N_("Time Window during when the audio level is measured in ms for silence detection. ""If the audio level is under the threshold during this time, ""an alarm is sent (default 5000)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALARM_THRESHOLD_TEXT</name></cpp:macro> <cpp:value>N_("Minimum Audio level to raise the alarm")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALARM_THRESHOLD_LONGTEXT</name></cpp:macro> <cpp:value>N_("Threshold to be attained to raise an alarm. ""If the audio level is under the threshold during this time, ""an alarm is sent (default 0.1)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPETITION_TIME_TEXT</name></cpp:macro> <cpp:value>N_("Time between two alarm messages in ms" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPETITION_TIME_LONGTEXT</name></cpp:macro> <cpp:value>N_("Time between two alarm messages in ms. ""This value is used to avoid alarm saturation (default 2000)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"audiobargraph_a-"</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Audio part of the BarGraph function"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Audiobar Graph"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AFILTER</argument> )</argument_list></macro>

<macro><name>add_obsolete_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"address"</literal></argument> )</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"port"</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bargraph"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>BARGRAPH_TEXT</argument>, <argument>BARGRAPH_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro> 
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"bargraph_repetition"</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument>BARGRAPH_REPETITION_TEXT</argument>, <argument>BARGRAPH_REPETITION_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"silence"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>SILENCE_TEXT</argument>, <argument>SILENCE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro> 
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"time_window"</literal></argument>, <argument><literal type="number">5000</literal></argument>, <argument>TIME_WINDOW_TEXT</argument>, <argument>TIME_WINDOW_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"alarm_threshold"</literal></argument>, <argument><literal type="number">0.02</literal></argument>, <argument>ALARM_THRESHOLD_TEXT</argument>, <argument>ALARM_THRESHOLD_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"repetition_time"</literal></argument>, <argument><literal type="number">2000</literal></argument>, <argument>REPETITION_TIME_TEXT</argument>, <argument>REPETITION_TIME_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"connection_reset"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct <name>ValueDate_t</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ValueDate_t</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>ValueDate_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>bargraph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bargraph_repetition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>silence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alarm_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>repetition_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueDate_t</name><modifier>*</modifier></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueDate_t</name><modifier>*</modifier></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>started</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>lastAlarm</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"bargraph"</literal></expr>, <expr><literal type="string">"bargraph_repetition"</literal></expr>, <expr><literal type="string">"silence"</literal></expr>, <expr><literal type="string">"time_window"</literal></expr>,
<expr><literal type="string">"alarm_threshold"</literal></expr>, <expr><literal type="string">"repetition_time"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bargraph</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>var_CreateGetInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bargraph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bargraph_repetition</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"bargraph_repetition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>silence</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>var_CreateGetInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"silence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>time_window</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_CreateGetInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"time_window"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>alarm_threshold</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"alarm_threshold"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>repetition_time</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_CreateGetInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"repetition_time"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastAlarm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"audiobargraph_v-alarm"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"audiobargraph_v-i_values"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SendValues</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbChannels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbChannels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%f:"</literal></expr></argument>, <argument><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"audiobargraph_v-i_values"</literal></expr></argument>,
<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_sample</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>i_value</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nbChannels</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbChannels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>i_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nbChannels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>p_sample</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name><name>i_value</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>i_value</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>silence</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ValueDate_t</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nbChannels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ch</name> <init>= <expr><name><name>i_value</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name><name>new</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>value</name></name> <operator>*=</operator> <name><name>new</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>last</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>date</name></name> <operator>&lt;</operator> <name><name>new</name><operator>-&gt;</operator><name>date</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>time_window</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>ValueDate_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>started</name></name> <operator>&amp;&amp;</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>lastAlarm</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>repetition_time</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>ValueDate_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>current</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>current</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>sum</name> <operator>/=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"audiobargraph_v-alarm"</literal></expr></argument>,
<argument><expr><name>sum</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>alarm_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lastAlarm</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>bargraph</name></name> <operator>&amp;&amp;</operator> <name>nbChannels</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>counter</name></name><operator>++</operator> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>bargraph_repetition</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SendValues</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_value</name></expr></argument>, <argument><expr><name>nbChannels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_in_buf</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"audiobargraph_v-i_values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"audiobargraph_v-alarm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ValueDate_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
