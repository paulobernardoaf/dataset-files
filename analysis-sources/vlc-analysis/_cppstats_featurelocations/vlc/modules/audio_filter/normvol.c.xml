<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\audio_filter\normvol.c">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_nb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_max</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFF_TEXT</name></cpp:macro> <cpp:value>N_("Number of audio buffers" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFF_LONGTEXT</name></cpp:macro> <cpp:value>N_("This is the number of audio buffers on which the " "power measurement is made. A higher number of buffers will " "increase the response time of the filter to a spike " "but will make it less sensitive to short variations." )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_TEXT</name></cpp:macro> <cpp:value>N_("Maximal volume level" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_LONGTEXT</name></cpp:macro> <cpp:value>N_("If the average power over the last N buffers " "is higher than this value, the volume will be normalized. " "This value is a positive floating point number. A value " "between 0.5 and 10 seems sensible." )</cpp:value></cpp:define>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Volume normalizer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Volume normalizer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AFILTER</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"volnorm"</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"norm-buff-size"</literal></argument>, <argument><literal type="number">20</literal></argument> ,<argument>BUFF_TEXT</argument>, <argument>BUFF_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument><literal type="string">"norm-max-level"</literal></argument>, <argument><literal type="number">2.0</literal></argument>, <argument>LEVEL_TEXT</argument>,
<argument>LEVEL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"norm-buff-size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_max</name></name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"norm-max-level"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_max</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_max</name></name> <operator>=</operator> <literal type="number">0.01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_channels</name> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_last</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_average</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_chan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_samples</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_channels</name> <init>= <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pf_sum</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pf_sum</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pf_gain</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pf_gain</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pf_sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>i_chan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_chan</name> <operator>&lt;</operator> <name>i_channels</name></expr>;</condition> <incr><expr><name>i_chan</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_sample</name> <init>= <expr><name><name>p_in</name><index>[<expr><name>i_chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pf_sum</name><index>[<expr><name>i_chan</name></expr>]</index></name> <operator>+=</operator> <name>f_sample</name> <operator>*</operator> <name>f_sample</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_channels</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for<control>( <init><expr><name>i_chan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_chan</name> <operator>&lt;</operator> <name>i_channels</name></expr>;</condition> <incr><expr><name>i_chan</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_last</name><index>[ <expr><name>i_chan</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_last</name><index>[<expr><name>i_chan</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>float</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_last</name><index>[ <expr><name>i_chan</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<call><name>sqrt</name><argument_list>( <argument><expr><name><name>pf_sum</name><index>[<expr><name>i_chan</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pf_sum</name><index>[<expr><name>i_chan</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>f_average</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>f_average</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_last</name><index>[ <expr><name>i_chan</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb</name></name> <operator>+</operator> <name>i</name></expr> ]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>f_average</name> <operator>=</operator> <name>f_average</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_max</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"norm-max-level"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>f_average</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_max</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pf_gain</name><index>[<expr><name>i_chan</name></expr>]</index></name> <operator>=</operator> <name>f_average</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_max</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>pf_gain</name><index>[<expr><name>i_chan</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>i_chan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_chan</name> <operator>&lt;</operator> <name>i_channels</name></expr>;</condition> <incr><expr><name>i_chan</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_chan</name></expr>]</index></name> <operator>/=</operator> <name><name>pf_gain</name><index>[<expr><name>i_chan</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_channels</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pf_sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pf_gain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_in_buf</name></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_last</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
