<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\lua\meta.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libs.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>p_reg</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>lua_State</name> <modifier>*</modifier></type> <name>init</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type> <name>p_item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type> <name>L</name> <init>= <expr><call><name>luaL_newstate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>L</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Could not create new Lua State"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlclua_set_this</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>luaL_openlibs</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>luaL_register_namespace</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument>, <argument><expr><name>p_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_msg</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaopen_stream</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaopen_strings</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaopen_variables</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaopen_object</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaopen_xml</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaopen_input_item</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlclua_add_modules_path</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Error while setting the module search path for %s"</literal></expr></argument>,
<argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>L</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>run</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_filename</name></decl></parameter>,
<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type> <name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luafunction</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>luabatch_context_t</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter> )</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>luafunction</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>vlclua_dofile</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Error loading script %s: %s"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>meta_fetcher_scope_t</name></type> <name>e_scope</name> <init>= <expr><name>FETCHER_SCOPE_NETWORK</name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>lua_isfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>lua_pcall</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"scope"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_scope</name> <init>= <expr><call><name>luaL_strdupornull</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>psz_scope</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_scope</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e_scope</name> <operator>=</operator> <name>FETCHER_SCOPE_LOCAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_scope</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_context</name> <operator>&amp;&amp;</operator> <name><name>p_context</name><operator>-&gt;</operator><name>pf_validator</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>p_context</name><operator>-&gt;</operator><name>pf_validator</name></name><argument_list>( <argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>e_scope</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"skipping script (unmatched scope) %s"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>luafunction</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Error while running script %s, "</literal>
<literal type="string">"function %s() not found"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>luafunction</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_pcall</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Error while running script %s, "</literal>
<literal type="string">"function %s(): %s"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>luafunction</name></expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>validate_scope</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>luabatch_context_t</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>, <parameter><decl><type><name>meta_fetcher_scope_t</name></type> <name>e_scope</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>e_scope</name></name> <operator>==</operator> <name>FETCHER_SCOPE_ANY</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator> <name><name>p_context</name><operator>-&gt;</operator><name>e_scope</name></name> <operator>==</operator> <name>e_scope</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fetch_art</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>luabatch_context_t</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><call><name>init</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>L</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>run</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"fetch_art"</literal></expr></argument>, <argument><expr><name>p_context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_value</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_value</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"setting arturl: %s"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_SetArtURL</name> <argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>lua_isnoneornil</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Lua art fetcher script %s: "</literal>
<literal type="string">"didn't return a string"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Script went completely foobar"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>read_meta</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>luabatch_context_t</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>demux_meta_t</name> <modifier>*</modifier></type><name>p_demux_meta</name> <init>= <expr><operator>(</operator><name>demux_meta_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><call><name>init</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>p_demux_meta</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>L</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>run</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"read_meta"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<return>return <expr><ternary><condition><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> ?</condition><then> <expr><name>VLC_EGENERIC</name></expr> </then><else>: <expr><name>i_ret</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>fetch_meta</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>luabatch_context_t</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><call><name>init</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>L</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>run</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"fetch_meta"</literal></expr></argument>, <argument><expr><name>p_context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>ReadMeta</name><parameter_list>( <parameter><decl><type><name>demux_meta_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>lua_Disabled</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlclua_scripts_batch_execute</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"meta"</literal><name>DIR_SEP</name><literal type="string">"reader"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>read_meta</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>FetchMeta</name><parameter_list>( <parameter><decl><type><name>meta_fetcher_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>lua_Disabled</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>luabatch_context_t</name></type> <name>context</name> <init>= <expr><block>{ <expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_item</name></name></expr>, <expr><name><name>p_finder</name><operator>-&gt;</operator><name>e_scope</name></name></expr>, <expr><name>validate_scope</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlclua_scripts_batch_execute</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_finder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"meta"</literal><name>DIR_SEP</name><literal type="string">"fetcher"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fetch_meta</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>context</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>FindArt</name><parameter_list>( <parameter><decl><type><name>meta_fetcher_t</name> <modifier>*</modifier></type><name>p_finder</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>lua_Disabled</name><argument_list>( <argument><expr><name>p_finder</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>luabatch_context_t</name></type> <name>context</name> <init>= <expr><block>{ <expr><name><name>p_finder</name><operator>-&gt;</operator><name>p_item</name></name></expr>, <expr><name><name>p_finder</name><operator>-&gt;</operator><name>e_scope</name></name></expr>, <expr><name>validate_scope</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlclua_scripts_batch_execute</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_finder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"meta"</literal><name>DIR_SEP</name><literal type="string">"art"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fetch_art</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>context</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
