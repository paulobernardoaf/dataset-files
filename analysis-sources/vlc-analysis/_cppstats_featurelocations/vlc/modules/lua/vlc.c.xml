<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\lua\vlc.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_services_discovery.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTF_TEXT</name></cpp:macro> <cpp:value>N_("Lua interface")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTF_LONGTEXT</name></cpp:macro> <cpp:value>N_("Lua interface module to load")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_TEXT</name></cpp:macro> <cpp:value>N_("Lua interface configuration")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_LONGTEXT</name></cpp:macro> <cpp:value>N_("Lua interface configuration string. Format is: '[\"&lt;interface module name&gt;\"] = { &lt;option&gt; = &lt;value&gt;, ...}, ...'.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_TEXT</name></cpp:macro> <cpp:value>N_( "Password" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "A single password restricts access " "to this interface." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_TEXT</name></cpp:macro> <cpp:value>N_( "Source directory" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Source directory" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_TEXT</name></cpp:macro> <cpp:value>N_( "Directory index" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allow to build directory index" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELNETHOST_TEXT</name></cpp:macro> <cpp:value>N_( "Host" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELNETHOST_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the host on which the " "interface will listen. It defaults to all network interfaces (0.0.0.0)." " If you want this interface to be available only on the local " "machine, enter \"127.0.0.1\"." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELNETPORT_TEXT</name></cpp:macro> <cpp:value>N_( "Port" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELNETPORT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the TCP port on which this " "interface will listen. It defaults to 4212." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELNETPWD_TEXT</name></cpp:macro> <cpp:value>N_( "Password" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELNETPWD_LONGTEXT</name></cpp:macro> <cpp:value>N_( "A single password restricts access " "to this interface." )</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlc_sd_probe_Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Lua"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Lua interpreter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INTERFACE</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INTERFACE_MAIN</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"lua-intf"</literal></argument>, <argument><literal type="string">"dummy"</literal></argument>, <argument>INTF_TEXT</argument>, <argument>INTF_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"lua-config"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>CONFIG_TEXT</argument>, <argument>CONFIG_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open_LuaIntf</argument>, <argument>Close_LuaIntf</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"luaintf"</literal></argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Lua HTTP"</literal>)</argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_password</name><argument_list>(<argument><literal type="string">"http-password"</literal></argument>, <argument>NULL</argument>, <argument>PASS_TEXT</argument>, <argument>PASS_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_string</name> <argument_list>( <argument><literal type="string">"http-src"</literal></argument>, <argument>NULL</argument>, <argument>SRC_TEXT</argument>, <argument>SRC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name> <argument_list>( <argument><literal type="string">"http-index"</literal></argument>, <argument>false</argument>, <argument>INDEX_TEXT</argument>, <argument>INDEX_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open_LuaHTTP</argument>, <argument>Close_LuaIntf</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"luahttp"</literal></argument>, <argument><literal type="string">"http"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Lua HTTP"</literal>)</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Lua Telnet"</literal>)</argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"telnet-host"</literal></argument>, <argument><literal type="string">"localhost"</literal></argument>, <argument>TELNETHOST_TEXT</argument>,
<argument>TELNETHOST_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"telnet-port"</literal></argument>, <argument>TELNETPORT_DEFAULT</argument>, <argument>TELNETPORT_TEXT</argument>,
<argument>TELNETPORT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">1</literal></argument>, <argument><literal type="number">65535</literal></argument> )</argument_list></macro>
<macro><name>add_password</name><argument_list>(<argument><literal type="string">"telnet-password"</literal></argument>, <argument>NULL</argument>, <argument>TELNETPWD_TEXT</argument>,
<argument>TELNETPWD_LONGTEXT</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open_LuaTelnet</argument>, <argument>Close_LuaIntf</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Lua Telnet"</literal>)</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"luatelnet"</literal></argument>, <argument><literal type="string">"telnet"</literal></argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Lua Meta Fetcher"</literal> )</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Fetch meta data using lua scripts"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"meta fetcher"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>set_callback</name><argument_list>( <argument>FetchMeta</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Lua Meta Reader"</literal> )</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Read meta data using lua scripts"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"meta reader"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>set_callback</name><argument_list>( <argument>ReadMeta</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"luaplaylist"</literal></argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Lua Playlist"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Lua Playlist Parser Interface"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"stream_filter"</literal></argument>, <argument><literal type="number">302</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Import_LuaPlaylist</argument>, <argument>Close_LuaPlaylist</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Lua Art"</literal> )</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Fetch artwork using lua scripts"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"art finder"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>set_callback</name><argument_list>( <argument>FindArt</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Lua Extension"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Lua Extension"</literal>)</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"luaextension"</literal></argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"extension"</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open_Extension</argument>, <argument>Close_Extension</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Lua SD Module"</literal>)</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"luasd"</literal></argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"services_discovery"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"lua-sd"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>NULL</argument>, <argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_volatile</name><argument_list>()</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open_LuaSD</argument>, <argument>Close_LuaSD</argument> )</argument_list></macro>

<expr_stmt><expr><name>VLC_SD_PROBE_SUBMODULE</name>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name><name>ppsz_lua_exts</name><index>[]</index></name> <operator>=</operator> <block>{ <expr><literal type="string">".luac"</literal></expr>, <expr><literal type="string">".lua"</literal></expr>, <expr><literal type="string">".vle"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>file_select</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ppsz_lua_exts</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>ppsz_lua_exts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>file</name><operator>+</operator><name>i</name><operator>-</operator><name>l</name></expr></argument>, <argument><expr><name><name>ppsz_lua_exts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>file_compare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>( <argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><operator>*</operator><name>b</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vlclua_dir_list_append</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>basedir</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luadirname</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>basedir</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>list</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>DIR_SEP</name><literal type="string">"lua"</literal><name>DIR_SEP</name><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name>basedir</name></expr></argument>, <argument><expr><name>luadirname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlclua_dir_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luadirname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>listp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>listp</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>


<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>vlclua_dir_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>config_GetUserDir</name><argument_list>(<argument><expr><name>VLC_USERDATA_DIR</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>luadirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libdir</name> <init>= <expr><call><name>config_GetSysPath</name><argument_list>(<argument><expr><name>VLC_PKG_LIBEXEC_DIR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datadir</name> <init>= <expr><call><name>config_GetSysPath</name><argument_list>(<argument><expr><name>VLC_PKG_DATA_DIR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>both</name> <init>= <expr><name>libdir</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>datadir</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>libdir</name></expr></argument>, <argument><expr><name>datadir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>vlclua_dir_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>libdir</name></expr></argument>, <argument><expr><name>luadirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>both</name> <operator>||</operator> <name>libdir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>vlclua_dir_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>datadir</name></expr></argument>, <argument><expr><name>luadirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlclua_dir_list_free</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dir_list</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dir</name> <init>= <expr><name>ppsz_dir_list</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ppsz_dir</name></expr>;</condition> <incr><expr><name>ppsz_dir</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>vlclua_scripts_batch_execute</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>luadirname</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>luabatch_context_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dir_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_ret</name> <operator>=</operator> <call><name>vlclua_dir_list</name><argument_list>( <argument><expr><name>luadirname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_dir_list</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dir</name> <init>= <expr><name>ppsz_dir_list</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ppsz_dir</name></expr>;</condition> <incr><expr><name>ppsz_dir</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_filelist</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Trying Lua scripts in %s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_files</name> <init>= <expr><call><name>vlc_scandir</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_filelist</name></expr></argument>, <argument><expr><name>file_select</name></expr></argument>,
<argument><expr><name>file_compare</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_files</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_file</name> <init>= <expr><name>ppsz_filelist</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_fileend</name> <init>= <expr><name>ppsz_filelist</name> <operator>+</operator> <name>i_files</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>ppsz_file</name> <operator>&lt;</operator> <name>ppsz_fileend</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_filename</name></expr></argument>,
<argument><expr><literal type="string">"%s"</literal> <name>DIR_SEP</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_dir</name></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_file</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>ppsz_file</name><operator>++</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>psz_filename</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Trying Lua playlist script %s"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>func</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<while>while<condition>( <expr><name>ppsz_file</name> <operator>&lt;</operator> <name>ppsz_fileend</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>ppsz_file</name><operator>++</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_filelist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlclua_dir_list_free</name><argument_list>( <argument><expr><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>vlclua_find_file</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_luadirname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dir_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlclua_dir_list</name><argument_list>( <argument><expr><name>psz_luadirname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dir</name> <init>= <expr><name>ppsz_dir_list</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ppsz_dir</name></expr>;</condition> <incr><expr><name>ppsz_dir</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_ext</name> <init>= <expr><name>ppsz_lua_exts</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ppsz_ext</name></expr>;</condition> <incr><expr><name>ppsz_ext</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_filename</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>DIR_SEP</name><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_dir</name></expr></argument>,
<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_ext</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlclua_dir_list_free</name><argument_list>( <argument><expr><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stat</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>S_ISREG</name><argument_list>( <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlclua_dir_list_free</name><argument_list>( <argument><expr><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_filename</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlclua_dir_list_free</name><argument_list>( <argument><expr><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlclua_read_meta_data</name></cpp:undef>
<function><type><name>void</name></type> <name>vlclua_read_meta_data</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_META</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>lua_getfield( L, -1, a ); if( lua_isstring( L, -1 ) &amp;&amp; strcmp( lua_tostring( L, -1 ), "" ) ) { char *psz_value = strdup( lua_tostring( L, -1 ) ); EnsureUTF8( psz_value ); msg_Dbg( p_this, #b ": %s", psz_value ); input_item_Set ##b ( p_input, psz_value ); free( psz_value ); } lua_pop( L, 1 );</cpp:value></cpp:define> 











<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>Title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"artist"</literal></expr></argument>, <argument><expr><name>Artist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"genre"</literal></expr></argument>, <argument><expr><name>Genre</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"copyright"</literal></expr></argument>, <argument><expr><name>Copyright</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"album"</literal></expr></argument>, <argument><expr><name>Album</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"tracknum"</literal></expr></argument>, <argument><expr><name>TrackNum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"description"</literal></expr></argument>, <argument><expr><name>Description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"rating"</literal></expr></argument>, <argument><expr><name>Rating</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"date"</literal></expr></argument>, <argument><expr><name>Date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"setting"</literal></expr></argument>, <argument><expr><name>Setting</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"url"</literal></expr></argument>, <argument><expr><name>URL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>Language</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"nowplaying"</literal></expr></argument>, <argument><expr><name>NowPlaying</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"publisher"</literal></expr></argument>, <argument><expr><name>Publisher</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"encodedby"</literal></expr></argument>, <argument><expr><name>EncodedBy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"arturl"</literal></expr></argument>, <argument><expr><name>ArtURL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"trackid"</literal></expr></argument>, <argument><expr><name>TrackID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"director"</literal></expr></argument>, <argument><expr><name>Director</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"season"</literal></expr></argument>, <argument><expr><name>Season</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"episode"</literal></expr></argument>, <argument><expr><name>Episode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"show_name"</literal></expr></argument>, <argument><expr><name>ShowName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRY_META</name><argument_list>( <argument><expr><literal type="string">"actors"</literal></expr></argument>, <argument><expr><name>Actors</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlclua_read_custom_meta_data</name></cpp:undef>
<function><type><name>void</name></type> <name>vlclua_read_custom_meta_data</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_istable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>lua_next</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"'meta' keys and values must be strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key</name> <init>= <expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlclua_read_options</name></cpp:undef>
<function><type><name>void</name></type> <name>vlclua_read_options</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_options</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppsz_options</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"options"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>lua_istable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><call><name>lua_next</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_option</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Option: %s"</literal></expr></argument>, <argument><expr><name>psz_option</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><operator>*</operator><name>pi_options</name></expr></argument>, <argument><expr><operator>*</operator><name>pppsz_options</name></expr></argument>, <argument><expr><name>psz_option</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Option should be a string"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<function><type><name>input_item_t</name> <modifier>*</modifier></type><name>vlclua_read_input_item</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_istable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Playlist item should be a table"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Playlist item's path should be a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Path: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Name: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>lua_isnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Playlist item name should be a string"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>duration</name> <init>= <expr><name>INPUT_DURATION_INDEFINITE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>lua_isnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Playlist item duration should be a number (seconds)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>optv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlclua_read_options</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>input_item_NewExt</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>,
<argument><expr><name>ITEM_TYPE_UNKNOWN</name></expr></argument>,
<argument><expr><name>ITEM_NET_UNKNOWN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_AddOptions</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>optc</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>optv</name></expr></argument>,
<argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>vlclua_read_meta_data</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>title</name> <init>= <expr><call><name>input_item_GetTitle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>title</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_SetTitle</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlclua_read_custom_meta_data</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<while>while <condition>(<expr><name>optc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>optv</name><index>[<expr><operator>--</operator><name>optc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>optv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_sd_probe_Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>lua_Disabled</name><argument_list>( <argument><expr><name>obj</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>name_d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dir_list</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlclua_dir_list</name><argument_list>( <argument><expr><literal type="string">"sd"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>name_d</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dir</name> <init>= <expr><name>ppsz_dir_list</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ppsz_dir</name></expr>;</condition> <incr><expr><name>ppsz_dir</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_filelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_files</name> <init>= <expr><call><name>vlc_scandir</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_filelist</name></expr></argument>, <argument><expr><name>file_select</name></expr></argument>,
<argument><expr><name>file_compare</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_files</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_file</name> <init>= <expr><name>ppsz_filelist</name></expr></init></decl>;</init>
<condition><expr><name>ppsz_file</name> <operator>&lt;</operator> <name>ppsz_filelist</name> <operator>+</operator> <name>i_files</name></expr>;</condition> <incr><expr><name>ppsz_file</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_file</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>temp</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>temp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_dictionary_has_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name>name_d</name></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_file</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>name_d</name></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_d</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_filelist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlclua_dir_list_free</name><argument_list>( <argument><expr><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>VLC_PROBE_CONTINUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name> <init>= <expr><call><name>vlc_dictionary_all_keys</name><argument_list>( <argument><expr><operator>&amp;</operator><name>name_d</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>names</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name> <init>= <expr><name>names</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>name</name></expr>;</condition> <incr><expr><operator>++</operator><name>name</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vlclua_probe_sd</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>*</operator><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>r</name> <operator>!=</operator> <name>VLC_PROBE_CONTINUE</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name> <init>= <expr><name>names</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>name</name></expr>;</condition> <incr><expr><operator>++</operator><name>name</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>names</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>name_d</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_add_modules_path_inner</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_ext</name> <init>= <expr><name>ppsz_lua_exts</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ppsz_ext</name></expr>;</condition> <incr><expr><name>ppsz_ext</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>DIR_SEP</name><literal type="string">"modules"</literal><name>DIR_SEP</name><literal type="string">"?%s;"</literal></expr></argument>,
<argument><expr><name>psz_path</name></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlclua_add_modules_path</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter> )</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_path</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_char</name> <init>= <expr><call><name>strrchr</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>DIR_SEP_CHAR</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_char</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>psz_char</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>psz_char</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>DIR_SEP_CHAR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_char</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>psz_char</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"package"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>vlclua_add_modules_path_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>psz_char</name> <operator>=</operator> <name>DIR_SEP_CHAR</name></expr>;</expr_stmt>


<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>vlclua_add_modules_path_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dir_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlclua_dir_list</name><argument_list>( <argument><expr><name>psz_char</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_dir</name> <init>= <expr><name>ppsz_dir_list</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><operator>*</operator><name>ppsz_dir</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_dir</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>ppsz_dir</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><operator>*</operator><name>ppsz_dir</name></expr>;</condition> <incr><expr><name>ppsz_dir</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>psz_path</name> <operator>=</operator> <operator>*</operator><name>ppsz_dir</name></expr>;</expr_stmt>


<expr_stmt><expr><name>psz_char</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>DIR_SEP_CHAR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_char</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlclua_dir_list_free</name><argument_list>( <argument><expr><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_char</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>vlclua_add_modules_path_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>psz_char</name> <operator>=</operator> <name>DIR_SEP_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>vlclua_add_modules_path_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>count</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>lua_concat</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlclua_dir_list_free</name><argument_list>( <argument><expr><name>ppsz_dir_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>vlclua_dofile</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curi</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>ToLocaleDup</name><argument_list>( <argument><expr><name>curi</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strstr</name><argument_list>( <argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>luaL_dofile</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"file://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>luaL_dofile</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>uri</name> <operator>+</operator> <literal type="number">7</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>i_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_buffer</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_read</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>i_read</name> <operator>==</operator> <name>i_size</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_ret</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>luaL_loadbuffer</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>i_size</name></expr></argument>, <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_ret</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>lua_pcall</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LUA_MULTRET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
