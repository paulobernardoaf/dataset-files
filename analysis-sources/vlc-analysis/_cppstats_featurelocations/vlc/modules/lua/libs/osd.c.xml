<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\lua\libs\osd.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_osd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_osd_icon_from_string</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_icon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
}</block> <decl><name><name>pp_icons</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{ <expr><name>OSD_PAUSE_ICON</name></expr>, <expr><literal type="string">"pause"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OSD_PLAY_ICON</name></expr>, <expr><literal type="string">"play"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OSD_SPEAKER_ICON</name></expr>, <expr><literal type="string">"speaker"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OSD_MUTE_ICON</name></expr>, <expr><literal type="string">"mute"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pp_icons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name><name>pp_icons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>pp_icons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_icon</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_osd_icon</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_icon</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_icon</name> <init>= <expr><call><name>vlc_osd_icon_from_string</name><argument_list>( <argument><expr><name>psz_icon</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_chan</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>luaL_optinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_icon</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" is not a valid osd icon."</literal></expr></argument>, <argument><expr><name>psz_icon</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><call><name>vlclua_get_vout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_vout</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_OSDIcon</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>i_chan</name></expr></argument>, <argument><expr><name>i_icon</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_osd_position_from_string</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
}</block> <decl><name><name>pp_icons</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"center"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>SUBPICTURE_ALIGN_LEFT</name></expr>, <expr><literal type="string">"left"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>SUBPICTURE_ALIGN_RIGHT</name></expr>, <expr><literal type="string">"right"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>SUBPICTURE_ALIGN_TOP</name></expr>, <expr><literal type="string">"top"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>SUBPICTURE_ALIGN_BOTTOM</name></expr>, <expr><literal type="string">"bottom"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>, <expr><literal type="string">"top-left"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator><name>SUBPICTURE_ALIGN_RIGHT</name></expr>, <expr><literal type="string">"top-right"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>SUBPICTURE_ALIGN_BOTTOM</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>, <expr><literal type="string">"bottom-left"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>SUBPICTURE_ALIGN_BOTTOM</name><operator>|</operator><name>SUBPICTURE_ALIGN_RIGHT</name></expr>, <expr><literal type="string">"bottom-right"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pp_icons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name><name>pp_icons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>pp_icons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_position</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_osd_message</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_message</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_chan</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>luaL_optinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_position</name> <init>= <expr><call><name>luaL_optstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"top-right"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>duration</name> <init>= <expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator><call><name>luaL_optinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><call><name>vlclua_get_vout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_vout</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_OSDText</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>i_chan</name></expr></argument>, <argument><expr><call><name>vlc_osd_position_from_string</name><argument_list>( <argument><expr><name>psz_position</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name>duration</name></expr></argument>, <argument><expr><name>psz_message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_osd_slider_type_from_string</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
}</block> <decl><name><name>pp_types</name><index>[]</index></name> <init>=
<expr><block>{ <expr><block>{ <expr><name>OSD_HOR_SLIDER</name></expr>, <expr><literal type="string">"horizontal"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OSD_VERT_SLIDER</name></expr>, <expr><literal type="string">"vertical"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pp_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name><name>pp_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>pp_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_osd_slider</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_position</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>vlc_osd_slider_type_from_string</name><argument_list>( <argument><expr><name>psz_type</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_chan</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>luaL_optinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>VOUT_SPU_CHANNEL_OSD</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_type</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" is not a valid slider type."</literal></expr></argument>,
<argument><expr><name>psz_type</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><call><name>vlclua_get_vout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_vout</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vout_OSDSlider</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>i_chan</name></expr></argument>, <argument><expr><name>i_position</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_spu_channel_register</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><call><name>vlclua_get_vout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_vout</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Unable to find vout."</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_chan</name> <init>= <expr><call><name>vout_RegisterSubpictureChannel</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_chan</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_spu_channel_clear</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_chan</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name> <init>= <expr><call><name>vlclua_get_vout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_vout</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Unable to find vout."</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_UnregisterSubpictureChannel</name><argument_list>( <argument><expr><name>p_vout</name></expr></argument>, <argument><expr><name>i_chan</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>p_vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_osd_reg</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"icon"</literal></expr>, <expr><name>vlclua_osd_icon</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"message"</literal></expr>, <expr><name>vlclua_osd_message</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"slider"</literal></expr>, <expr><name>vlclua_osd_slider</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"channel_register"</literal></expr>, <expr><name>vlclua_spu_channel_register</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"channel_clear"</literal></expr>, <expr><name>vlclua_spu_channel_clear</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>luaopen_osd</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_osd_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"osd"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
