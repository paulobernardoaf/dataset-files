<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\lua\libs\sd.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_services_discovery.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_sd_delete_common</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pp_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><operator>*</operator><name>pp_item</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_sd_remove_common</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pp_item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"expected item"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><operator>*</operator><name>pp_item</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp_item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"already removed item"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>services_discovery_RemoveItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_item</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_sd_item_delete</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_item</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"input_item_t"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlclua_sd_delete_common</name><argument_list>( <argument><expr><name>pp_item</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlclua_item_luareg</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ "set_" #a, vlclua_item_set_ ##a },</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlclua_item_meta</name><parameter_list>( <parameter><type><name>lowercase</name></type></parameter>, <parameter><type><name>normal</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>static int vlclua_item_set_ ##lowercase ( lua_State *L ){services_discovery_t *p_sd = (services_discovery_t *)vlclua_get_this( L );input_item_t **pp_node = (input_item_t **)luaL_checkudata( L, 1, "input_item_t" );if( *pp_node ){if( lua_isstring( L, -1 ) ){input_item_Set ##normal ( *pp_node, lua_tostring( L, -1 ) );} elsemsg_Err( p_sd, "Error parsing set_ " #lowercase " arguments" );}return 1;}</cpp:value></cpp:define>















<macro><name>vlclua_item_meta</name><argument_list>(<argument>title</argument>, <argument>Title</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>artist</argument>, <argument>Artist</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>genre</argument>, <argument>Genre</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>copyright</argument>, <argument>Copyright</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>album</argument>, <argument>Album</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>tracknum</argument>, <argument>TrackNum</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>description</argument>, <argument>Description</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>rating</argument>, <argument>Rating</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>date</argument>, <argument>Date</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>setting</argument>, <argument>Setting</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>url</argument>, <argument>URL</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>language</argument>, <argument>Language</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>nowplaying</argument>, <argument>NowPlaying</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>publisher</argument>, <argument>Publisher</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>encodedby</argument>, <argument>EncodedBy</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>arturl</argument>, <argument>ArtworkURL</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>trackid</argument>, <argument>TrackID</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>tracktotal</argument>, <argument>TrackTotal</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>director</argument>, <argument>Director</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>season</argument>, <argument>Season</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>episode</argument>, <argument>Episode</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>showname</argument>, <argument>ShowName</argument>)</argument_list></macro>
<macro><name>vlclua_item_meta</name><argument_list>(<argument>actors</argument>, <argument>Actors</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_item_reg</name><index>[]</index></name> <init>= <expr><block>{
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>title</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>artist</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>genre</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>copyright</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>album</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>tracknum</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>description</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>rating</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>date</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>setting</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>url</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>language</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>nowplaying</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>publisher</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>encodedby</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>arturl</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>trackid</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>tracktotal</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>director</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>season</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>episode</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>showname</argument>)</argument_list></macro>
<macro><name>vlclua_item_luareg</name><argument_list>(<argument>actors</argument>)</argument_list></macro>
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>input_item_t</name> <modifier>*</modifier></type><name>vlclua_sd_create_item</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>,
<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_istable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Error: argument must be table"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Error: \"%s\" parameter is required"</literal></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name> <init>= <expr><ternary><condition><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>
?</condition><then> <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>
</then><else>: <expr><name>psz_path</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><call><name>input_item_New</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_input</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlclua_read_options</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ppsz_options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_AddOptions</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>i_options</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ppsz_options</name></expr></argument>,
<argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><name>i_options</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ppsz_options</name><index>[<expr><operator>--</operator><name>i_options</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlclua_read_meta_data</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlclua_read_custom_meta_data</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>lua_isnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <call><name>llround</name><argument_list>(<argument><expr><call><name>lua_tonumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">1e6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>lua_isnil</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Item duration should be a number (in seconds)."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"uiddata"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>s</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>md5_s</name></name></type> <name>md5</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>s</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_AddInfo</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>, <argument><expr><literal type="string">"md5"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>udata</name> <init>= <expr><call><name>lua_newuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>udata</name> <operator>=</operator> <name>p_input</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>luaL_newmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"input_item_t"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_item_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_sd_item_delete</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__gc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"none of your business"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__metatable"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_input</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_sd_node_delete</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_item</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"node"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlclua_sd_delete_common</name><argument_list>( <argument><expr><name>pp_item</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_sd_add_sub_common</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_node</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_node</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_input</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>services_discovery_AddSubItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_node</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_node_add_subitem</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_node</name> <init>= <expr><operator>(</operator><name>input_item_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"node"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlclua_sd_add_sub_common</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>pp_node</name></expr></argument>,
<argument><expr><call><name>vlclua_sd_create_item</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_node_reg</name><index>[]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>input_item_t</name> <modifier>*</modifier></type><name>vlclua_sd_create_node</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>,
<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_istable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Error: argument must be table"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Error: \"%s\" parameter is required"</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><call><name>input_item_NewExt</name><argument_list>( <argument><expr><name>INPUT_ITEM_URI_NOP</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>,
<argument><expr><name>INPUT_DURATION_INDEFINITE</name></expr></argument>,
<argument><expr><name>ITEM_TYPE_NODE</name></expr></argument>,
<argument><expr><name>ITEM_NET_UNKNOWN</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_input</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"arturl"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"ArtURL: %s"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetArtURL</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>udata</name> <init>= <expr><call><name>lua_newuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>input_item_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>udata</name> <operator>=</operator> <name>p_input</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>luaL_newmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"node"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_node_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_sd_node_delete</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__gc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_input</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_node_add_subnode</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_node</name> <init>= <expr><operator>(</operator><name>input_item_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"node"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlclua_sd_add_sub_common</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>pp_node</name></expr></argument>,
<argument><expr><call><name>vlclua_sd_create_node</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_node_reg</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"add_subitem"</literal></expr>, <expr><name>vlclua_node_add_subitem</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add_subnode"</literal></expr>, <expr><name>vlclua_node_add_subnode</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_sd_add_common</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_input</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>services_discovery_AddItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_sd_add_item</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlclua_sd_add_common</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><call><name>vlclua_sd_create_item</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_sd_add_node</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlclua_sd_add_common</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><call><name>vlclua_sd_create_node</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_sd_remove_item</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_input</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"input_item_t"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlclua_sd_remove_common</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>pp_input</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_sd_remove_node</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_input</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"node"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlclua_sd_remove_common</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>pp_input</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_sd_sd_reg</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"add_item"</literal></expr>, <expr><name>vlclua_sd_add_item</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add_node"</literal></expr>, <expr><name>vlclua_sd_add_node</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"remove_item"</literal></expr>, <expr><name>vlclua_sd_remove_item</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"remove_node"</literal></expr>, <expr><name>vlclua_sd_remove_node</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>luaopen_sd_sd</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_sd_sd_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"sd"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
