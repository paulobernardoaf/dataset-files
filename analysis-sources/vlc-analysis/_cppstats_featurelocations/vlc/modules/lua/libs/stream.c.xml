<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\lua\libs\stream.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream_extractor.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_read</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_readline</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_delete</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_add_filter</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_readdir</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_getsize</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_seek</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_stream_reg</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"read"</literal></expr>, <expr><name>vlclua_stream_read</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"readline"</literal></expr>, <expr><name>vlclua_stream_readline</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"addfilter"</literal></expr>, <expr><name>vlclua_stream_add_filter</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"readdir"</literal></expr>, <expr><name>vlclua_stream_readdir</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getsize"</literal></expr>, <expr><name>vlclua_stream_getsize</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"seek"</literal></expr>, <expr><name>vlclua_stream_seek</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_new_inner</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Error when opening stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stream</name> <init>= <expr><call><name>lua_newuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>stream_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_stream</name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>luaL_newmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_stream_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_stream_delete</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__gc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_new</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_url</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewMRL</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlclua_stream_new_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_memory_stream_new</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_content</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_MemoryNew</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>psz_content</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_content</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlclua_stream_new_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_directory_stream_new</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_url</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_directory_Attach</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>vlclua_stream_new_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_read</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_read</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_read</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_read</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><operator>*</operator><name>pp_stream</name></expr></argument>, <argument><expr><name>p_read</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_read</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_readline</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name> <init>= <expr><call><name>vlc_stream_ReadLine</name><argument_list>( <argument><expr><operator>*</operator><name>pp_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_line</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_add_filter</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>lua_settop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pp_stream</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_filter</name> <operator>=</operator> <call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_filter</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>psz_filter</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"adding all automatic stream filters"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while<condition>( <expr><name>true</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_filtered</name> <init>= <expr><call><name>vlc_stream_FilterNew</name><argument_list>( <argument><expr><operator>*</operator><name>pp_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_filtered</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"inserted an automatic stream filter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_stream</name> <operator>=</operator> <name>p_filtered</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>luaL_getmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><call><name>vlc_stream_FilterNew</name><argument_list>( <argument><expr><operator>*</operator><name>pp_stream</name></expr></argument>, <argument><expr><name>psz_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_filter</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Unable to open requested stream filter '%s'"</literal></expr></argument>,
<argument><expr><name>psz_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_stream</name> <operator>=</operator> <name>p_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_getmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_readdir</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_show_hidden</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_filter</name> <operator>=</operator> <call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_show_hidden</name> <operator>=</operator> <call><name>lua_toboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_stream</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_stream</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><operator>(</operator><operator>*</operator><name>pp_stream</name><operator>)</operator><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><call><name>input_item_New</name><argument_list>( <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_stream</name><operator>)</operator><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_filter</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_opt</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_opt</name></expr></argument>, <argument><expr><literal type="string">":ignore-filetype=\"%s\""</literal></expr></argument>, <argument><expr><name>psz_filter</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_opt</name></expr></argument>, <argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_opt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"ignore-filetypes=\"\""</literal></expr></argument>,
<argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name>b_show_hidden</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"show-hiddenfiles"</literal></expr></argument>,
<argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_items</name> <init>= <expr><call><name>input_item_node_Create</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_items</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_ReadDir</name><argument_list>( <argument><expr><operator>*</operator><name>pp_stream</name></expr></argument>, <argument><expr><name>p_items</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_node_Delete</name><argument_list>( <argument><expr><name>p_items</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_items</name><operator>-&gt;</operator><name>i_children</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlclua_input_item_get</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_items</name><operator>-&gt;</operator><name>pp_children</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>input_item_node_Delete</name><argument_list>( <argument><expr><name>p_items</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_getsize</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_res</name> <init>= <expr><call><name>vlc_stream_GetSize</name><argument_list>( <argument><expr><operator>*</operator><name>pp_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_res</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Failed to get stream size"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_seek</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_Integer</name></type> <name>i_offset</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Invalid negative seek offset"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_res</name> <init>= <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><operator>*</operator><name>pp_stream</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>i_offset</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stream_delete</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><operator>*</operator><name>pp_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>luaopen_stream</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_stream_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_memory_stream_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"memory_stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_directory_stream_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"directory_stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
