<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\lua\libs\input.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../extension.h"</cpp:file></cpp:include>

<function><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>vlclua_get_player_internal</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vlclua_get_vout_internal</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>audio_output_t</name> <modifier>*</modifier></type><name>vlclua_get_aout_internal</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlc_player_aout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>input_item_t</name><modifier>*</modifier></type> <name>vlclua_input_item_get_internal</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_item_info</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>vlclua_input_item_get_internal</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name><name>p_item</name><operator>-&gt;</operator><name>i_categories</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_createtable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_cat</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>p_category</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>pp_categories</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>info_t</name> <modifier>*</modifier></type><name>p_info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_category</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>info_foreach</name><argument_list>(<argument>p_info</argument>, <argument>&amp;p_category-&gt;infos</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_is_playing</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>started</name> <init>= <expr><call><name>vlc_player_IsStarted</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>started</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_title_index</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>idx</name> <init>= <expr><call><name>vlc_player_GetSelectedTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_titles_count</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_title_list</name></name> <modifier>*</modifier></type><name>titles</name> <init>= <expr><call><name>vlc_player_GetTitleList</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><ternary><condition><expr><name>titles</name></expr> ?</condition><then> <expr><call><name>vlc_player_title_list_GetCount</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_title_next</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SelectNextTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_title_prev</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SelectPrevTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_title_goto</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SelectTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_chapter_index</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>idx</name> <init>= <expr><call><name>vlc_player_GetSelectedChapterIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_chapters_count</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_title</name></name> <modifier>*</modifier></type><name>current_title</name> <init>=
<expr><call><name>vlc_player_GetSelectedTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><ternary><condition><expr><name>current_title</name></expr> ?</condition><then> <expr><name><name>current_title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_chapter_next</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SelectNextChapter</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_chapter_prev</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SelectPrevChapter</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_chapter_goto</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SelectChapterIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_time</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time</name> <init>= <expr><call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>US_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_position</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pos</name> <init>= <expr><call><name>vlc_player_GetPosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_rate</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_set_rate</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_increment_rate</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_IncrementRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_decrement_rate</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_DecrementRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_tracks_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=
<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>track</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>selected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_video_tracks</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlclua_player_get_tracks_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_audio_tracks</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlclua_player_get_tracks_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_spu_tracks</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlclua_player_get_tracks_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type>
<name>FindTrack</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=
<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <call><name>vlc_es_id_GetInputId</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>track</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_toggle_track_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><call><name>FindTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>track</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_UnselectTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_player_SelectTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>VLC_PLAYER_SELECT_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_toggle_video_track</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlclua_player_toggle_track_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_toggle_audio_track</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlclua_player_toggle_track_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_toggle_spu_track</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vlclua_player_toggle_track_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_next_video_frame</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_NextVideoFrame</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_seek_by_pos_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>position</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SeekByPos</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>VLC_PLAYER_SEEK_PRECISE</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_seek_by_pos_absolute</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlclua_player_seek_by_pos_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_seek_by_pos_relative</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlclua_player_seek_by_pos_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>VLC_PLAYER_WHENCE_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_seek_by_time_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>usec</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time</name> <init>= <expr><call><name>VLC_TICK_FROM_US</name><argument_list>(<argument><expr><name>usec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SeekByTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>VLC_PLAYER_SEEK_PRECISE</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_seek_by_time_absolute</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlclua_player_seek_by_time_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_seek_by_time_relative</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlclua_player_seek_by_time_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>VLC_PLAYER_WHENCE_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_audio_delay</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><call><name>vlc_player_GetAudioDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>delay_sec</name> <init>= <expr><call><name>secf_from_vlc_tick</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_set_audio_delay</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>delay_sec</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>delay_sec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SetAudioDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_get_subtitle_delay</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><call><name>vlc_player_GetSubtitleDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>delay_sec</name> <init>= <expr><call><name>secf_from_vlc_tick</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_player_set_subtitle_delay</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>delay_sec</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>delay_sec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_SetSubtitleDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_metas_internal</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_item</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_meta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_uri</name> <init>= <expr><call><name>input_item_GetURI</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_filename</name> <init>= <expr><ternary><condition><expr><name>psz_uri</name></expr> ?</condition><then> <expr><call><name>strrchr</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_filename</name> <operator>&amp;&amp;</operator> <name><name>psz_filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>psz_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_filename</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_filename</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>psz_filename</name> <operator>=</operator> <call><name>vlc_uri_decode</name><argument_list>( <argument><expr><name>psz_filename</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_META</name><parameter_list>( <parameter><type><name>n</name></type></parameter>, <parameter><type><name>m</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>psz_meta = vlc_meta_Get( p_item-&gt;p_meta, vlc_meta_ ##n ); lua_pushstring( L, psz_meta ); lua_setfield( L, -2, m )</cpp:value></cpp:define>




<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Title</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Artist</name></expr></argument>, <argument><expr><literal type="string">"artist"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Genre</name></expr></argument>, <argument><expr><literal type="string">"genre"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Copyright</name></expr></argument>, <argument><expr><literal type="string">"copyright"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Album</name></expr></argument>, <argument><expr><literal type="string">"album"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>TrackNumber</name></expr></argument>, <argument><expr><literal type="string">"track_number"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Description</name></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Rating</name></expr></argument>, <argument><expr><literal type="string">"rating"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Date</name></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Setting</name></expr></argument>, <argument><expr><literal type="string">"setting"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>URL</name></expr></argument>, <argument><expr><literal type="string">"url"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Language</name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>NowPlaying</name></expr></argument>, <argument><expr><literal type="string">"now_playing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Publisher</name></expr></argument>, <argument><expr><literal type="string">"publisher"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>EncodedBy</name></expr></argument>, <argument><expr><literal type="string">"encoded_by"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>ArtworkURL</name></expr></argument>, <argument><expr><literal type="string">"artwork_url"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>TrackID</name></expr></argument>, <argument><expr><literal type="string">"track_id"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>TrackTotal</name></expr></argument>, <argument><expr><literal type="string">"track_total"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Director</name></expr></argument>, <argument><expr><literal type="string">"director"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Season</name></expr></argument>, <argument><expr><literal type="string">"season"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Episode</name></expr></argument>, <argument><expr><literal type="string">"episode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>ShowName</name></expr></argument>, <argument><expr><literal type="string">"show_name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_META</name><argument_list>( <argument><expr><name>Actors</name></expr></argument>, <argument><expr><literal type="string">"actors"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PUSH_META</name></cpp:undef>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name> <init>= <expr><call><name>vlc_meta_CopyExtraNames</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>vlc_meta_GetExtra</name><argument_list>(<argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_item_stats</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>vlclua_input_item_get_internal</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_item</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>input_stats_t</name> <modifier>*</modifier></type><name>p_stats</name> <init>= <expr><name><name>p_item</name><operator>-&gt;</operator><name>p_stats</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_stats</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_INT</name><parameter_list>( <parameter><type><name>n</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>lua_pushinteger( L, p_item-&gt;p_stats-&gt;i_ ##n ); lua_setfield( L, -2, #n );</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_FLOAT</name><parameter_list>( <parameter><type><name>n</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>lua_pushnumber( L, p_item-&gt;p_stats-&gt;f_ ##n ); lua_setfield( L, -2, #n );</cpp:value></cpp:define>

<macro><name>STATS_INT</name><argument_list>( <argument>read_packets</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>read_bytes</argument> )</argument_list></macro>
<macro><name>STATS_FLOAT</name><argument_list>( <argument>input_bitrate</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>demux_read_packets</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>demux_read_bytes</argument> )</argument_list></macro>
<macro><name>STATS_FLOAT</name><argument_list>( <argument>demux_bitrate</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>demux_corrupted</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>demux_discontinuity</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>decoded_audio</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>decoded_video</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>displayed_pictures</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>lost_pictures</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>played_abuffers</argument> )</argument_list></macro>
<macro><name>STATS_INT</name><argument_list>( <argument>lost_abuffers</argument> )</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STATS_INT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STATS_FLOAT</name></cpp:undef>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_add_subtitle</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlc.player.add_subtitle() usage: (path, autoselect=false)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>autoselect</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>autoselect</name> <operator>=</operator> <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mrl</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b_path</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mrl</name> <operator>=</operator> <call><name>vlc_path2uri</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><ternary><condition><expr><name>b_path</name></expr> ?</condition><then> <expr><name>mrl</name></expr> </then><else>: <expr><name>sub</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_player_AddAssociatedMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>autoselect</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b_path</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_add_subtitle_path</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlclua_input_add_subtitle</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_add_subtitle_mrl</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlclua_input_add_subtitle</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>input_item_t</name><modifier>*</modifier></type> <name>vlclua_input_item_get_internal</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_item</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"input_item"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><operator>*</operator><name>pp_item</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_item</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"script went completely foobar"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_item</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_item_delete</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_item</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"input_item"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><operator>*</operator><name>pp_item</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_item</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"script went completely foobar"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_item</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_item_get_current</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlclua_get_player_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>media</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlclua_input_item_get</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_item_metas</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlclua_input_metas_internal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>vlclua_input_item_get_internal</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_item_is_preparsed</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>input_item_IsPreparsed</name><argument_list>( <argument><expr><call><name>vlclua_input_item_get_internal</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_item_uri</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>input_item_GetURI</name><argument_list>( <argument><expr><call><name>vlclua_input_item_get_internal</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_item_name</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>input_item_GetName</name><argument_list>( <argument><expr><call><name>vlclua_input_item_get_internal</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_item_duration</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>duration</name> <init>= <expr><call><name>input_item_GetDuration</name><argument_list>( <argument><expr><call><name>vlclua_input_item_get_internal</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>secf_from_vlc_tick</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_input_item_set_meta</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>vlclua_input_item_get_internal</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META_TYPE</name><parameter_list>( <parameter><type><name>n</name></type></parameter>, <parameter><type><name>s</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ s, vlc_meta_ ##n },</cpp:value></cpp:define>
<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>psz_name</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
}</block> <decl><name><name>pp_meta_types</name><index>[]</index></name> <init>= <expr><block>{
<macro><name>META_TYPE</name><argument_list>( <argument>Title</argument>, <argument><literal type="string">"title"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Artist</argument>, <argument><literal type="string">"artist"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Genre</argument>, <argument><literal type="string">"genre"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Copyright</argument>, <argument><literal type="string">"copyright"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Album</argument>, <argument><literal type="string">"album"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>TrackNumber</argument>, <argument><literal type="string">"track_number"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Description</argument>, <argument><literal type="string">"description"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Rating</argument>, <argument><literal type="string">"rating"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Date</argument>, <argument><literal type="string">"date"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Setting</argument>, <argument><literal type="string">"setting"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>URL</argument>, <argument><literal type="string">"url"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Language</argument>, <argument><literal type="string">"language"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>NowPlaying</argument>, <argument><literal type="string">"now_playing"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>ESNowPlaying</argument>, <argument><literal type="string">"now_playing"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Publisher</argument>, <argument><literal type="string">"publisher"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>EncodedBy</argument>, <argument><literal type="string">"encoded_by"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>ArtworkURL</argument>, <argument><literal type="string">"artwork_url"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>TrackID</argument>, <argument><literal type="string">"track_id"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>TrackTotal</argument>, <argument><literal type="string">"track_total"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Director</argument>, <argument><literal type="string">"director"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Season</argument>, <argument><literal type="string">"season"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Episode</argument>, <argument><literal type="string">"episode"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>ShowName</argument>, <argument><literal type="string">"show_name"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>Actors</argument>, <argument><literal type="string">"actors"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>AlbumArtist</argument>, <argument><literal type="string">"album_artist"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>DiscNumber</argument>, <argument><literal type="string">"disc_number"</literal></argument> )</argument_list></macro>
<macro><name>META_TYPE</name><argument_list>( <argument>DiscTotal</argument>, <argument><literal type="string">"disc_total"</literal></argument> )</argument_list></macro>
}</block></expr></init></decl>;</struct>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>META_TYPE</name></cpp:undef>

<expr_stmt><expr><call><name>static_assert</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pp_meta_types</name></expr></argument>)</argument_list></sizeof>
<operator>==</operator> <name>VLC_META_TYPE_COUNT</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pp_meta_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Inconsistent meta data types"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_meta_type_t</name></type> <name>type</name> <init>= <expr><name>vlc_meta_Title</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLC_META_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>pp_meta_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>pp_meta_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_SetMeta</name><argument_list>( <argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_input_reg</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"is_playing"</literal></expr>, <expr><name>vlclua_input_is_playing</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"item"</literal></expr>, <expr><name>vlclua_input_item_get_current</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add_subtitle"</literal></expr>, <expr><name>vlclua_input_add_subtitle_path</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add_subtitle_mrl"</literal></expr>, <expr><name>vlclua_input_add_subtitle_mrl</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_title_index"</literal></expr>, <expr><name>vlclua_player_get_title_index</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_titles_count"</literal></expr>, <expr><name>vlclua_player_get_titles_count</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"title_next"</literal></expr>, <expr><name>vlclua_player_title_next</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"title_prev"</literal></expr>, <expr><name>vlclua_player_title_prev</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"title_goto"</literal></expr>, <expr><name>vlclua_player_title_goto</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_chapter_index"</literal></expr>, <expr><name>vlclua_player_get_chapter_index</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_chapters_count"</literal></expr>, <expr><name>vlclua_player_get_chapters_count</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chapter_next"</literal></expr>, <expr><name>vlclua_player_chapter_next</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chapter_prev"</literal></expr>, <expr><name>vlclua_player_chapter_prev</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chapter_goto"</literal></expr>, <expr><name>vlclua_player_chapter_goto</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_time"</literal></expr>, <expr><name>vlclua_player_get_time</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_position"</literal></expr>, <expr><name>vlclua_player_get_position</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_rate"</literal></expr>, <expr><name>vlclua_player_get_rate</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"set_rate"</literal></expr>, <expr><name>vlclua_player_set_rate</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"increment_rate"</literal></expr>, <expr><name>vlclua_player_increment_rate</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"decrement_rate"</literal></expr>, <expr><name>vlclua_player_decrement_rate</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_video_tracks"</literal></expr>, <expr><name>vlclua_player_get_video_tracks</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_audio_tracks"</literal></expr>, <expr><name>vlclua_player_get_audio_tracks</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_spu_tracks"</literal></expr>, <expr><name>vlclua_player_get_spu_tracks</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"toggle_video_track"</literal></expr>, <expr><name>vlclua_player_toggle_video_track</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"toggle_audio_track"</literal></expr>, <expr><name>vlclua_player_toggle_audio_track</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"toggle_spu_track"</literal></expr>, <expr><name>vlclua_player_toggle_spu_track</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"next_video_frame"</literal></expr>, <expr><name>vlclua_player_next_video_frame</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"seek_by_pos_absolute"</literal></expr>, <expr><name>vlclua_player_seek_by_pos_absolute</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"seek_by_pos_relative"</literal></expr>, <expr><name>vlclua_player_seek_by_pos_relative</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"seek_by_time_absolute"</literal></expr>, <expr><name>vlclua_player_seek_by_time_absolute</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"seek_by_time_relative"</literal></expr>, <expr><name>vlclua_player_seek_by_time_relative</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_audio_delay"</literal></expr>, <expr><name>vlclua_player_get_audio_delay</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"set_audio_delay"</literal></expr>, <expr><name>vlclua_player_set_audio_delay</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"get_subtitle_delay"</literal></expr>, <expr><name>vlclua_player_get_subtitle_delay</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"set_subtitle_delay"</literal></expr>, <expr><name>vlclua_player_set_subtitle_delay</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>luaopen_input</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_input_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"player"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_input_item_reg</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"is_preparsed"</literal></expr>, <expr><name>vlclua_input_item_is_preparsed</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"metas"</literal></expr>, <expr><name>vlclua_input_item_metas</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"set_meta"</literal></expr>, <expr><name>vlclua_input_item_set_meta</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uri"</literal></expr>, <expr><name>vlclua_input_item_uri</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"name"</literal></expr>, <expr><name>vlclua_input_item_name</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"duration"</literal></expr>, <expr><name>vlclua_input_item_duration</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stats"</literal></expr>, <expr><name>vlclua_input_item_stats</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"info"</literal></expr>, <expr><name>vlclua_input_item_info</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>vlclua_input_item_get</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><call><name>lua_newuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>input_item_t</name><operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p_item</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>luaL_newmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"input_item"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_input_item_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_input_item_delete</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__gc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaopen_input_item</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlclua_input_item_get</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"item"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
