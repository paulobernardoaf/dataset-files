<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\lua\libs\equalizer.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../audio_filter/equalizer_presets.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_WIN32</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xlocale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_preamp_get</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlclua_get_aout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_af</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_af</name> <operator>||</operator> <call><name>strstr</name> <argument_list>( <argument><expr><name>psz_af</name></expr></argument>, <argument><expr><literal type="string">"equalizer"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_af</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_af</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"equalizer-preamp"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_preamp_set</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlclua_get_aout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_af</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_af</name> <operator>||</operator> <call><name>strstr</name> <argument_list>( <argument><expr><name>psz_af</name></expr></argument>, <argument><expr><literal type="string">"equalizer"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_af</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_af</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"equalizer-preamp"</literal></expr></argument>, <argument><expr><call><name>luaL_checknumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_equalizer_get</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>bands</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlclua_get_aout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_af</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_af</name> <operator>||</operator> <call><name>strstr</name> <argument_list>( <argument><expr><name>psz_af</name></expr></argument>, <argument><expr><literal type="string">"equalizer"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_af</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_af</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_bands_origin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_bands</name></decl>;</decl_stmt>
<expr_stmt><expr><name>psz_bands_origin</name> <operator>=</operator> <name>psz_bands</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"equalizer-bands"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_bands</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>locale_t</name></type> <name>loc</name> <init>= <expr><call><name>newlocale</name> <argument_list>(<argument><expr><name>LC_NUMERIC_MASK</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>locale_t</name></type> <name>oldloc</name> <init>= <expr><call><name>uselocale</name> <argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>level</name> <init>= <expr><call><name>strtof</name><argument_list>( <argument><expr><name>psz_bands</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_bands</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>str</name></expr></argument> , <argument><expr><literal type="string">"%f"</literal></expr></argument> , <argument><expr><name>level</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>str</name></expr></argument> , <argument><expr><literal type="string">"band id=\"%u\""</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> , <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_bands_origin</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>loc</name> <operator>!=</operator> <operator>(</operator><name>locale_t</name><operator>)</operator><literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>uselocale</name> <argument_list>(<argument><expr><name>oldloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freelocale</name> <argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>error</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_equalizer_set</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bandid</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>bandid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>bandid</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlclua_get_aout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_af</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_af</name> <operator>||</operator> <call><name>strstr</name> <argument_list>( <argument><expr><name>psz_af</name></expr></argument>, <argument><expr><literal type="string">"equalizer"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_af</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_af</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>level</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bands</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"equalizer-bands"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>locale_t</name></type> <name>loc</name> <init>= <expr><call><name>newlocale</name> <argument_list>(<argument><expr><name>LC_NUMERIC_MASK</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>locale_t</name></type> <name>oldloc</name> <init>= <expr><call><name>uselocale</name> <argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>bands</name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>bandid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>dummy</name> <init>= <expr><call><name>strtof</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dummy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bandid</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>b</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dummy</name> <init>= <expr><call><name>strtof</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dummy</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>newstr</name></expr></argument>, <argument><expr><literal type="string">"%s %.1f%s"</literal></expr></argument>, <argument><expr><name>bands</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"equalizer-bands"</literal></expr></argument>, <argument><expr><name>newstr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>newstr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>loc</name> <operator>!=</operator> <operator>(</operator><name>locale_t</name><operator>)</operator><literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>uselocale</name> <argument_list>(<argument><expr><name>oldloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freelocale</name> <argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>bands</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_equalizer_setpreset</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>presetid</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>presetid</name> <operator>&gt;=</operator> <name>NB_PRESETS</name> <operator>||</operator> <name>presetid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlclua_get_aout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_aout</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_af</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_af</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strstr</name> <argument_list>( <argument><expr><name>psz_af</name></expr></argument>, <argument><expr><literal type="string">"equalizer"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument> , <argument><expr><literal type="string">"equalizer-preset"</literal></expr></argument> , <argument><expr><name><name>preset_list</name><index>[<expr><name>presetid</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_af</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_equalizer_enable</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>state</name> <init>= <expr><call><name>luaL_checkboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>vlclua_get_aout_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>aout</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>aout_EnableFilter</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"equalizer"</literal></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aout_Release</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_equalizer_get_presets</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PRESETS</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>preset_list_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>str</name></expr></argument> , <argument><expr><literal type="string">"preset id=\"%d\""</literal></expr></argument>,<argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> , <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_equalizer_reg</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"preampget"</literal></expr>, <expr><name>vlclua_preamp_get</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"preampset"</literal></expr>, <expr><name>vlclua_preamp_set</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"equalizerget"</literal></expr>, <expr><name>vlclua_equalizer_get</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"equalizerset"</literal></expr>, <expr><name>vlclua_equalizer_set</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"enable"</literal></expr>, <expr><name>vlclua_equalizer_enable</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"presets"</literal></expr>,<expr><name>vlclua_equalizer_get_presets</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"setpreset"</literal></expr>, <expr><name>vlclua_equalizer_setpreset</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>luaopen_equalizer</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_equalizer_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"equalizer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
