<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\lua\extension_thread.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assert.h"</cpp:file></cpp:include>

<struct>struct <name>thread_sys_t</name>
<block>{
<decl_stmt><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>Run</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FreeCommands</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>command_t</name></name> <modifier>*</modifier></type><name>command</name></decl></parameter> )</parameter_list>;</function_decl>







<function><type><name>int</name></type> <name>Activate</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>, <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_ext</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>extension_sys_t</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_sys</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>==</operator> <name>false</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>command</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>command_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>command</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>command</name><operator>-&gt;</operator><name>i_command</name></name> <operator>=</operator> <name>CMD_ACTIVATE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name> <operator>==</operator> <name>true</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Reactivating extension %s"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Activating extension '%s'"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_exiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Run</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call>
<operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_exiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeCommands</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>command_t</name></name> <modifier>*</modifier></type><name>command</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>command</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command_t</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>command</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>command</name><operator>-&gt;</operator><name>i_command</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>CMD_ACTIVATE</name></expr>:</case>
<case>case <expr><name>CMD_DEACTIVATE</name></expr>:</case>
<case>case <expr><name>CMD_CLICK</name></expr>:</case> 
<break>break;</break>

<case>case <expr><name>CMD_TRIGGERMENU</name></expr>:</case>
<case>case <expr><name>CMD_PLAYING_CHANGED</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>command</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeCommands</name><argument_list>( <argument><expr><name>next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>QueueDeactivateCommand</name><parameter_list>( <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command_t</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>command_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeCommands</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command</name><operator>-&gt;</operator><name>next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>i_command</name></name> <operator>=</operator> <name>CMD_DEACTIVATE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>Deactivate</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>, <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_exiting</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KillExtension</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_success</name> <init>= <expr><call><name>QueueDeactivateCommand</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>b_success</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_ENOMEM</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>KillExtension</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>, <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Killing extension now"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlclua_fd_interrupt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_exiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>PushCommand__</name><parameter_list>( <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_unique</name></decl></parameter>, <parameter><decl><type><name>command_type_e</name></type> <name>i_command</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>command_t</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>command_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>i_command</name></name> <operator>=</operator> <name>i_command</name></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name>i_command</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>CMD_CLICK</name></expr>:</case>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMD_TRIGGERMENU</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>int</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pi</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pi</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pi</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>CMD_PLAYING_CHANGED</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>int</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pi</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pi</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pi</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>CMD_CLOSE</name></expr>:</case>
<case>case <expr><name>CMD_SET_INPUT</name></expr>:</case>
<case>case <expr><name>CMD_UPDATE_META</name></expr>:</case>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_mgr</name></name></expr></argument>,
<argument><expr><literal type="string">"Unknown command send to extension: %d"</literal></expr></argument>, <argument><expr><name>i_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>command_t</name></name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>last</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_skip</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_unique</name> <operator>&amp;&amp;</operator> <name><name>last</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <name>i_command</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>b_skip</name> <operator>=</operator> <operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name><name>last</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>data</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_skip</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>FreeCommands</name><argument_list>( <argument><expr><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>Run</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name> <init>= <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_mgr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_exiting</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command_t</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_timer_schedule</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>WATCH_TIMER_PERIOD</name></expr></argument>,
<argument><expr><name>VLC_TIMER_FIRE_ONCE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>running_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name><name>cmd</name><operator>-&gt;</operator><name>i_command</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>CMD_ACTIVATE</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>lua_ExecuteFunction</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><literal type="string">"activate"</literal></expr></argument>, <argument><expr><name>LUA_END</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Could not activate extension!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QueueDeactivateCommand</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>CMD_DEACTIVATE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Deactivating '%s'"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>lua_ExtensionDeactivate</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Extension '%s' did not deactivate properly"</literal></expr></argument>,
<argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>CMD_CLOSE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_ExecuteFunction</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><name>LUA_END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>CMD_CLICK</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Clicking '%s': '%s'"</literal></expr></argument>,
<argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>lua_ExtensionWidgetClick</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Could not translate click"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>CMD_TRIGGERMENU</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_id</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pi_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Trigger menu %d of '%s'"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>pi_id</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_ExtensionTriggerMenu</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>CMD_SET_INPUT</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_ExecuteFunction</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><literal type="string">"input_changed"</literal></expr></argument>, <argument><expr><name>LUA_END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>CMD_UPDATE_META</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_ExecuteFunction</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><literal type="string">"meta_changed"</literal></expr></argument>, <argument><expr><name>LUA_END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>CMD_PLAYING_CHANGED</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>lua_ExecuteFunction</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><literal type="string">"playing_changed"</literal></expr></argument>,
<argument><expr><name>LUA_NUM</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>cmd</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>LUA_END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Unknown command in extension command queue: %d"</literal></expr></argument>,
<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>i_command</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>running_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeCommands</name><argument_list>( <argument><expr><name>cmd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_timer_disarm</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Extension thread end: '%s'"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
