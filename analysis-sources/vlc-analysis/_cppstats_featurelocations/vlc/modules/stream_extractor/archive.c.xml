<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_extractor\archive.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream_extractor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;archive.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;archive_entry.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">3002000</literal></expr></cpp:if>
<typedef>typedef <type><name>__LA_INT64_T</name></type> <name>la_int64_t</name>;</typedef>
<typedef>typedef <type><name>__LA_SSIZE_T</name></type> <name>la_ssize_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ExtractorOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ExtractorClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DirectoryOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DirectoryClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_STREAM_FILTER</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"stream_directory"</literal></argument>, <argument><literal type="number">99</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"libarchive based stream directory"</literal> )</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>set_callbacks</name><argument_list>( <argument><expr><name>DirectoryOpen</name></expr></argument>, <argument><expr><name>DirectoryClose</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"libarchive based stream extractor"</literal> )</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"stream_extractor"</literal></argument>, <argument><literal type="number">99</literal></argument> )</argument_list></macro>
<expr_stmt><expr><call><name>set_callbacks</name><argument_list>( <argument><expr><name>ExtractorOpen</name></expr></argument>, <argument><expr><name>ExtractorClose</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><name><name>struct</name> <name>libarchive_callback_t</name></name></type> <name>libarchive_callback_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>private_sys_t</name></name></type> <name>private_sys_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>archive</name></name></type> <name>libarchive_t</name>;</typedef>

<struct>struct <name>private_sys_t</name>
<block>{
<decl_stmt><decl><type><name>libarchive_t</name><modifier>*</modifier></type> <name>p_archive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>p_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_dead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[ <expr><literal type="number">8192</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable_archive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libarchive_callback_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_callback_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_callback_data</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>libarchive_callback_t</name> <block>{
<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_url</name></decl>;</decl_stmt>
}</block>;</struct>



<function><type><specifier>static</specifier> <name>int</name></type> <name>libarchive_exit_cb</name><parameter_list>( <parameter><decl><type><name>libarchive_t</name><modifier>*</modifier></type> <name>p_arc</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libarchive_callback_t</name><modifier>*</modifier></type> <name>p_cb</name> <init>= <expr><operator>(</operator><name>libarchive_callback_t</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cb</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name><name>p_cb</name><operator>-&gt;</operator><name>p_source</name></name></expr> )</condition>
<block>{<block_content> 
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cb</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name> <operator>&amp;&amp;</operator> <call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_cb</name><operator>-&gt;</operator><name>p_source</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_cb</name><operator>-&gt;</operator><name>p_source</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name><name>p_cb</name><operator>-&gt;</operator><name>p_source</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cb</name><operator>-&gt;</operator><name>p_source</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ARCHIVE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libarchive_jump_cb</name><parameter_list>( <parameter><decl><type><name>libarchive_t</name><modifier>*</modifier></type> <name>p_arc</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_obj_current</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_obj_next</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libarchive_callback_t</name><modifier>*</modifier></type> <name>p_current</name> <init>= <expr><operator>(</operator><name>libarchive_callback_t</name><operator>*</operator><operator>)</operator><name>p_obj_current</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libarchive_callback_t</name><modifier>*</modifier></type> <name>p_next</name> <init>= <expr><operator>(</operator><name>libarchive_callback_t</name><operator>*</operator><operator>)</operator><name>p_obj_next</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>libarchive_exit_cb</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument>, <argument><expr><name>p_current</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_next</name><operator>-&gt;</operator><name>p_source</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_next</name><operator>-&gt;</operator><name>p_source</name></name> <operator>=</operator> <call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name><name>p_next</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>,
<argument><expr><name><name>p_next</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>p_next</name><operator>-&gt;</operator><name>p_source</name></name></expr> ?</condition><then> <expr><name>ARCHIVE_OK</name></expr> </then><else>: <expr><name>ARCHIVE_FATAL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>la_int64_t</name></type> <name>libarchive_skip_cb</name><parameter_list>( <parameter><decl><type><name>libarchive_t</name><modifier>*</modifier></type> <name>p_arc</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter>,
<parameter><decl><type><name>off_t</name></type> <name>i_request</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libarchive_callback_t</name><modifier>*</modifier></type> <name>p_cb</name> <init>= <expr><operator>(</operator><name>libarchive_callback_t</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_source</name> <init>= <expr><name><name>p_cb</name><operator>-&gt;</operator><name>p_source</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_cb</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable_source</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name>p_source</name></expr></argument>, <argument><expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_source</name></expr></argument> )</argument_list></call> <operator>+</operator> <name>i_request</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>i_request</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_request</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>i_read</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_read</name></expr> </then><else>: <expr><name>ARCHIVE_FATAL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>la_int64_t</name></type> <name>libarchive_seek_cb</name><parameter_list>( <parameter><decl><type><name>libarchive_t</name><modifier>*</modifier></type> <name>p_arc</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter>,
<parameter><decl><type><name>la_int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libarchive_callback_t</name><modifier>*</modifier></type> <name>p_cb</name> <init>= <expr><operator>(</operator><name>libarchive_callback_t</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_source</name> <init>= <expr><name><name>p_cb</name><operator>-&gt;</operator><name>p_source</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>whence_pos</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>whence</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SEEK_SET</name></expr>:</case> <expr_stmt><expr><name>whence_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SEEK_CUR</name></expr>:</case> <expr_stmt><expr><name>whence_pos</name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SEEK_END</name></expr>:</case> <expr_stmt><expr><name>whence_pos</name> <operator>=</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name>p_source</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>whence_pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name>p_source</name></expr></argument>, <argument><expr><name>whence_pos</name> <operator>+</operator> <name>offset</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_source</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>la_ssize_t</name></type> <name>libarchive_read_cb</name><parameter_list>( <parameter><decl><type><name>libarchive_t</name><modifier>*</modifier></type> <name>p_arc</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_dst</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libarchive_callback_t</name><modifier>*</modifier></type> <name>p_cb</name> <init>= <expr><operator>(</operator><name>libarchive_callback_t</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_source</name> <init>= <expr><name><name>p_cb</name><operator>-&gt;</operator><name>p_source</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_cb</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument>, <argument><expr><name>ARCHIVE_FATAL</name></expr></argument>,
<argument><expr><literal type="string">"libarchive_read_cb failed = %zd"</literal></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ARCHIVE_FATAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>archive_push_resource</name><parameter_list>( <parameter><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name></decl></parameter>,
<parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_source</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>psz_url</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libarchive_callback_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_callback_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libarchive_callback_t</name><modifier>*</modifier></type> <name>p_callback_data</name></decl>;</decl_stmt>



<expr_stmt><expr><name>pp_callback_data</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_callback_data</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_callback_data</name></name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_callback_data</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>pp_callback_data</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name>p_callback_data</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_callback_data</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_callback_data</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>p_callback_data</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <ternary><condition><expr><name>psz_url</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_callback_data</name><operator>-&gt;</operator><name>p_source</name></name> <operator>=</operator> <name>p_source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_callback_data</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_callback_data</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>&amp;&amp;</operator> <name>psz_url</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_callback_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pp_callback_data</name><index>[ <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_callback_data</name></name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>p_callback_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_callback_data</name></name> <operator>=</operator> <name>pp_callback_data</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_callback_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archive_init</name><parameter_list>( <parameter><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name></decl></parameter>, <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>source</name></decl></parameter> )</parameter_list>
<block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"unable to create libarchive handle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable_archive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable_source</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"unable to query whether source stream can seek"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable_source</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable_source</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>archive_read_set_seek_callback</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument>,
<argument><expr><name>libarchive_seek_cb</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"archive_read_set_callback failed, aborting."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>archive_read_support_filter_all</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_read_support_format_all</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><call><name>archive_read_set_switch_callback</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument>,
<argument><expr><name>libarchive_jump_cb</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"archive_read_set_switch_callback failed, aborting."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_callback_data</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>archive_read_append_callback_data</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_callback_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if<condition>( <expr><call><name>archive_read_open2</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_callback_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>libarchive_read_cb</name></expr></argument>, <argument><expr><name>libarchive_skip_cb</name></expr></argument>, <argument><expr><name>libarchive_exit_cb</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"libarchive: %s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archive_clean</name><parameter_list>( <parameter><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libarchive_t</name><modifier>*</modifier></type> <name>p_arc</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_arc</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_read_free</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archive_seek_subentry</name><parameter_list>( <parameter><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>psz_subentry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libarchive_t</name><modifier>*</modifier></type> <name>p_arc</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>archive_status</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><operator>(</operator> <name>archive_status</name> <operator>=</operator> <call><name>archive_read_next_header</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>entry_path</name> <init>= <expr><call><name>archive_entry_pathname</name><argument_list>( <argument><expr><name>entry</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>entry_path</name></expr></argument>, <argument><expr><name>psz_subentry</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name> <operator>=</operator> <call><name>archive_entry_clone</name><argument_list>( <argument><expr><name>entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>archive_read_data_skip</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<switch>switch<condition>( <expr><name>archive_status</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ARCHIVE_WARN</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>,
<argument><expr><literal type="string">"libarchive: %s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ARCHIVE_EOF</name></expr>:</case>
<case>case <expr><name>ARCHIVE_FATAL</name></expr>:</case>
<case>case <expr><name>ARCHIVE_RETRY</name></expr>:</case>
<expr_stmt><expr><call><name>archive_set_error</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument>, <argument><expr><name>ARCHIVE_FATAL</name></expr></argument>,
<argument><expr><literal type="string">"archive does not contain &gt;&gt;&gt; %s &lt;&lt;&lt;"</literal></expr></argument>, <argument><expr><name>psz_subentry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>



<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable_source</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>archive_seek_data</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable_archive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archive_extractor_reset</name><parameter_list>( <parameter><decl><type><name>stream_extractor_t</name><modifier>*</modifier></type> <name>p_extractor</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_extractor</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call>
<operator>||</operator> <call><name>archive_clean</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call>
<operator>||</operator> <call><name>archive_init</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>source</name></name></expr></argument> )</argument_list></call>
<operator>||</operator> <call><name>archive_seek_subentry</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>private_sys_t</name><modifier>*</modifier></type> <name>setup</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>source</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_files</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"concat-list"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>archive_push_resource</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_files</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>char</name><modifier>*</modifier></type> <name>state</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type> <name>path</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name>psz_files</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>path</name></expr>;</condition> <incr><expr><name>path</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument> )</argument_list></call></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>path</name> <operator>==</operator> <name>psz_files</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>archive_push_resource</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_files</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<return>return <expr><name>p_sys</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_files</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>probe</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>source</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<struct>struct
<block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type> <name>p_bytes</name></decl>;</decl_stmt>
}</block> <decl>const <name><name>magicbytes</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">257</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"ustar"</literal></expr> }</block></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">3004000</literal></expr></cpp:if>
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="string">"Rar!\x1A\x07\x01"</literal></expr> }</block></expr>, 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="string">"Rar!\x1A\x07"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="string">"7z\xBC\xAF\x27\x1C"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"xar!"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"PK\x03\x04"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"PK\x05\x06"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"PK\x07\x08"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"-lh"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\x1f\x8b\x08"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"PAX"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="string">"070707"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="string">"070701"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="string">"070702"</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"MSCH"</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>,
<argument><expr><name><name>magicbytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>+</operator> <name><name>magicbytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>magicbytes</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_peek</name> <operator>&lt;</operator> <name><name>magicbytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>+</operator> <name><name>magicbytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_length</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p_peek</name> <operator>+</operator> <name><name>magicbytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr></argument>,
<argument><expr><name><name>magicbytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_bytes</name></expr></argument>, <argument><expr><name><name>magicbytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_length</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_extractor_t</name><modifier>*</modifier></type> <name>p_extractor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_extractor</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable_source</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>archive_entry_size_is_set</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name><operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><call><name>vlc_stream_vaControl</name><argument_list>( <argument><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDir</name><parameter_list>( <parameter><decl><type><name>stream_directory_t</name><modifier>*</modifier></type> <name>p_directory</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name><modifier>*</modifier></type> <name>p_node</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_directory</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libarchive_t</name><modifier>*</modifier></type> <name>p_arc</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name></type> <name>rdh</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_readdir_helper_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>p_directory</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name><modifier>*</modifier></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>archive_status</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><operator>(</operator> <name>archive_status</name> <operator>=</operator> <call><name>archive_read_next_header</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>archive_entry_filetype</name><argument_list>( <argument><expr><name>entry</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>AE_IFDIR</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>path</name> <init>= <expr><call><name>archive_entry_pathname</name><argument_list>( <argument><expr><name>entry</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>path</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>mrl</name> <init>= <expr><call><name>vlc_stream_extractor_CreateMRL</name><argument_list>( <argument><expr><name>p_directory</name></expr></argument>, <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>mrl</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_readdir_helper_additem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>mrl</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ITEM_TYPE_FILE</name></expr></argument>,
<argument><expr><name>ITEM_LOCAL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>archive_read_data_skip</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_readdir_helper_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>archive_status</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>archive_status</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_extractor_t</name> <modifier>*</modifier></type><name>p_extractor</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>dummy_buffer</name><index>[ <expr><literal type="number">8192</literal></expr> ]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_extractor</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libarchive_t</name><modifier>*</modifier></type> <name>p_arc</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>archive_read_data</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>p_data</name></expr> ?</condition><then> <expr><name>p_data</name></expr> </then><else>: <expr><name>dummy_buffer</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>p_data</name></expr> ?</condition><then> <expr><name>i_size</name></expr> </then><else>: <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>dummy_buffer</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_ret</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ARCHIVE_RETRY</name></expr>:</case>
<case>case <expr><name>ARCHIVE_FAILED</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_extractor</name></expr></argument>, <argument><expr><literal type="string">"libarchive: %s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>eof</name>;</goto>

<case>case <expr><name>ARCHIVE_WARN</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_extractor</name></expr></argument>, <argument><expr><literal type="string">"libarchive: %s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>eof</name>;</goto>

<case>case <expr><name>ARCHIVE_FATAL</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_extractor</name></expr></argument>, <argument><expr><literal type="string">"libarchive: %s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>( <argument><expr><name>p_arc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fatal_error</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>+=</operator> <name>i_ret</name></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>

<label><name>fatal_error</name>:</label>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>eof</name>:</label>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archive_skip_decompressed</name><parameter_list>( <parameter><decl><type><name>stream_extractor_t</name><modifier>*</modifier></type> <name>p_extractor</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_skip</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><name>i_skip</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name> <init>= <expr><call><name>Read</name><argument_list>( <argument><expr><name>p_extractor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_skip</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>-=</operator> <name>i_read</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_extractor_t</name><modifier>*</modifier></type> <name>p_extractor</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_req</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_extractor</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable_source</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>archive_entry_size_is_set</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>archive_entry_size</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_entry</name></name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <name>i_req</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable_archive</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name>
<operator>||</operator> <call><name>archive_seek_data</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument>, <argument><expr><name>i_req</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_extractor</name></expr></argument>,
<argument><expr><literal type="string">"intrinsic seek failed: '%s' (falling back to dumb seek)"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_archive</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_skip</name> <init>= <expr><name>i_req</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><name>i_req</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>archive_extractor_reset</name><argument_list>( <argument><expr><name>p_extractor</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_extractor</name></expr></argument>, <argument><expr><literal type="string">"unable to reset libarchive handle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>=</operator> <name>i_req</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>archive_skip_decompressed</name><argument_list>( <argument><expr><name>p_extractor</name></expr></argument>, <argument><expr><name>i_skip</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_extractor</name></expr></argument>, <argument><expr><literal type="string">"failed to skip to seek position"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <name>i_req</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>CommonClose</name><parameter_list>( <parameter><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_clean</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_callback_data</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_callback_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_callback_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_callback_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DirectoryClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_directory_t</name><modifier>*</modifier></type> <name>p_directory</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>CommonClose</name><argument_list>( <argument><expr><name><name>p_directory</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ExtractorClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_extractor_t</name><modifier>*</modifier></type> <name>p_extractor</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>CommonClose</name><argument_list>( <argument><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>private_sys_t</name><modifier>*</modifier></type> <name>CommonOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter>, <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>source</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>probe</name><argument_list>( <argument><expr><name>source</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><call><name>setup</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>source</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>archive_init</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>source</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CommonClose</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_sys</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DirectoryOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_directory_t</name><modifier>*</modifier></type> <name>p_directory</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><call><name>CommonOpen</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name><name>p_directory</name><operator>-&gt;</operator><name>source</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_directory</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_directory</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>ReadDir</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExtractorOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_extractor_t</name><modifier>*</modifier></type> <name>p_extractor</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>private_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><call><name>CommonOpen</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>source</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>archive_seek_subentry</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CommonClose</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>Read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_extractor</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>Seek</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
