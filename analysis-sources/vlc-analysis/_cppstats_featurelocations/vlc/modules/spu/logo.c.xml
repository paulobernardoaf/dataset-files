<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\spu\logo.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LoadImage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LoadImage</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_TEXT</name></cpp:macro> <cpp:value>N_("Logo filenames")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Full path of the image files to use. Format is " "&lt;image&gt;[,&lt;delay in ms&gt;[,&lt;alpha&gt;]][;&lt;image&gt;[,&lt;delay&gt;[,&lt;alpha&gt;]]][;...]. " "If you only have one file, simply enter its filename.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT_TEXT</name></cpp:macro> <cpp:value>N_("Logo animation #of loops")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of loops for the logo animation. " "-1 = continuous, 0 = disabled")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELAY_TEXT</name></cpp:macro> <cpp:value>N_("Logo individual image time in ms")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELAY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Individual image display time of 0 - 60000 ms.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSX_TEXT</name></cpp:macro> <cpp:value>N_("X coordinate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSX_LONGTEXT</name></cpp:macro> <cpp:value>N_("X coordinate of the logo. You can move the logo " "by left-clicking it." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSY_TEXT</name></cpp:macro> <cpp:value>N_("Y coordinate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Y coordinate of the logo. You can move the logo " "by left-clicking it." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPACITY_TEXT</name></cpp:macro> <cpp:value>N_("Opacity of the logo")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPACITY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Logo opacity value " "(from 0 for full transparency to 255 for full opacity)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_TEXT</name></cpp:macro> <cpp:value>N_("Logo position")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enforce the logo position on the video " "(0=center, 1=left, 2=right, 4=top, 8=bottom, you can " "also use combinations of these values, eg 6 = top-right).")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGO_HELP</name></cpp:macro> <cpp:value>N_("Use a local picture as logo on the video")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"logo-"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_pos_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_pos_descriptions</name><index>[]</index></name> <init>=
<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Center"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom-Left"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Bottom-Right"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenSub</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenVideo</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_SUBPIC</argument> )</argument_list></macro>
<macro><name>set_help</name><argument_list>(<argument>LOGO_HELP</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sub source"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenSub</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Logo sub source"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Logo overlay"</literal>)</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"logo"</literal></argument> )</argument_list></macro>

<macro><name>add_loadfile</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"file"</literal></argument>, <argument>NULL</argument>, <argument>FILE_TEXT</argument>, <argument>FILE_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"x"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>POSX_TEXT</argument>, <argument>POSX_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"y"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>POSY_TEXT</argument>, <argument>POSY_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"delay"</literal></argument>, <argument><literal type="number">1000</literal></argument>, <argument>DELAY_TEXT</argument>, <argument>DELAY_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"repeat"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>REPEAT_TEXT</argument>, <argument>REPEAT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"opacity"</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,
<argument>OPACITY_TEXT</argument>, <argument>OPACITY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"position"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>POS_TEXT</argument>, <argument>POS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>pi_pos_values</argument>, <argument>ppsz_pos_descriptions</argument> )</argument_list></macro>


<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenVideo</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Logo video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"logo"</literal></argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>










<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_delay</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_alpha</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

}</block></struct></type> <name>logo_t</name>;</typedef>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>logo_t</name> <modifier>*</modifier></type><name>p_logo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_repeat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_next_pic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_counter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_delay</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_alpha</name></decl>;</decl_stmt> 

}</block></struct></type> <name>logo_list_t</name>;</typedef>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_blender_t</name> <modifier>*</modifier></type><name>p_blend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>logo_list_t</name></type> <name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pos_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pos_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_absolute</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_spu_update</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_mouse_grab</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"file"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"delay"</literal></expr>, <expr><literal type="string">"repeat"</literal></expr>, <expr><literal type="string">"opacity"</literal></expr>, <expr><literal type="string">"position"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_callbacks</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"logo-file"</literal></expr>,
<expr><literal type="string">"logo-x"</literal></expr>,
<expr><literal type="string">"logo-y"</literal></expr>,
<expr><literal type="string">"logo-position"</literal></expr>,
<expr><literal type="string">"logo-opacity"</literal></expr>,
<expr><literal type="string">"logo-repeat"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_sub</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>FilterSub</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>FilterVideo</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mouse</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>LogoCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LogoListLoad</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>logo_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LogoListUnload</name><parameter_list>( <parameter><decl><type><name>logo_list_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>logo_t</name> <modifier>*</modifier></type><name>LogoListNext</name><parameter_list>( <parameter><decl><type><name>logo_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>logo_t</name> <modifier>*</modifier></type><name>LogoListCurrent</name><parameter_list>( <parameter><decl><type><name>logo_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenSub</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenVideo</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_sub</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_sub</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output format does not match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_sub</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name> <operator>=</operator> <call><name>filter_NewBlend</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>logo_list_t</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_filename</name> <operator>=</operator> <call><name>var_CreateGetStringCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"logo-file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_filename</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_DeleteBlend</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_filename</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"no logo file specified"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"logo-opacity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_alpha</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_delay</name></name> <operator>=</operator> <call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"logo-delay"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_repeat</name></name> <operator>=</operator> <call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"logo-repeat"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"logo-position"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"logo-x"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"logo-y"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_sub</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LogoListLoad</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_list</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_spu_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_grab</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_filter_callbacks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>ppsz_filter_callbacks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>LogoCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if<condition>( <expr><name>b_sub</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_sub_source</name></name> <operator>=</operator> <name>FilterSub</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>FilterVideo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_mouse</name></name> <operator>=</operator> <name>Mouse</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_filter_callbacks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>ppsz_filter_callbacks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>LogoCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_DeleteBlend</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LogoListUnload</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>list</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>FilterSub</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>logo_list_t</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>logo_t</name> <modifier>*</modifier></type><name>p_logo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_spu_update</name></name> <operator>&amp;&amp;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_next_pic</name></name> <operator>&gt;</operator> <name>date</name> <operator>)</operator> <operator>||</operator>
<operator>!</operator><name><name>p_list</name><operator>-&gt;</operator><name>i_repeat</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_logo</name> <operator>=</operator> <call><name>LogoListNext</name><argument_list>( <argument><expr><name>p_list</name></expr></argument>, <argument><expr><name>date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_spu_update</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <name><name>p_logo</name><operator>-&gt;</operator><name>p_pic</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>filter_NewSubpicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_absolute</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>i_repeat</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_counter</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_repeat</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>i_repeat</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name> <operator>||</operator> <operator>!</operator><name><name>p_logo</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>||</operator>
<operator>(</operator> <name><name>p_logo</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_list</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>transfer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>space</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>color_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_region</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate SPU region"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content> 
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_RIGHT</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> 
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name>p_region</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <operator>(</operator> <ternary><condition><expr><name><name>p_logo</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then>
<expr><name><name>p_logo</name><operator>-&gt;</operator><name>i_alpha</name></name></expr> </then><else>: <expr><name><name>p_list</name><operator>-&gt;</operator><name>i_alpha</name></name></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_spu</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>FilterVideo</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>logo_list_t</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_dst</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>logo_t</name> <modifier>*</modifier></type><name>p_logo</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>i_next_pic</name></name> <operator>&lt;</operator> <name><name>p_src</name><operator>-&gt;</operator><name>date</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_logo</name> <operator>=</operator> <call><name>LogoListNext</name><argument_list>( <argument><expr><name>p_list</name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_logo</name> <operator>=</operator> <call><name>LogoListCurrent</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name><name>p_logo</name><operator>-&gt;</operator><name>p_pic</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_w</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_h</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <name>i_dst_h</name> <operator>-</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <operator>(</operator> <name>i_dst_h</name> <operator>-</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <name>i_dst_w</name> <operator>-</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_LEFT</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <operator>(</operator> <name>i_dst_w</name> <operator>-</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,
<argument><expr><literal type="string">"logo(%ix%i) doesn't fit into video(%ix%i)"</literal></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><name>i_dst_w</name></expr></argument>,<argument><expr><name>i_dst_h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_alpha</name> <init>= <expr><ternary><condition><expr><name><name>p_logo</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>p_logo</name><operator>-&gt;</operator><name>i_alpha</name></name></expr> </then><else>: <expr><name><name>p_list</name><operator>-&gt;</operator><name>i_alpha</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>filter_ConfigureBlend</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr></argument>, <argument><expr><name>i_dst_w</name></expr></argument>, <argument><expr><name>i_dst_h</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>filter_Blend</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name></expr></argument>,
<argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>i_alpha</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"failed to blend a picture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mouse</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>logo_t</name> <modifier>*</modifier></type><name>p_logo</name> <init>= <expr><call><name>LogoListCurrent</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>list</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name><name>p_logo</name><operator>-&gt;</operator><name>p_pic</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_logo_w</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_logo_h</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_over</name> <init>= <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>&amp;&amp;</operator>
<name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>+</operator> <name>i_logo_w</name> <operator>&amp;&amp;</operator>
<name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>&amp;&amp;</operator>
<name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>+</operator> <name>i_logo_h</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_over</name> <operator>&amp;&amp;</operator> <call><name>vlc_mouse_HasPressed</name><argument_list>( <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_grab</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><call><name>vlc_mouse_HasReleased</name><argument_list>( <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_grab</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_grab</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_dx</name></decl>, <decl><type ref="prev"/><name>i_dy</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mouse_GetMotion</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_dx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dy</name></expr></argument>, <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>+</operator> <name>i_dx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>-</operator> <name>i_logo_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>+</operator> <name>i_dy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>-</operator> <name>i_logo_h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_grab</name></name> <operator>||</operator> <name>b_over</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_mouse</name> <operator>=</operator> <operator>*</operator><name>p_new</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>LogoCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>logo_list_t</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"logo-file"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LogoListUnload</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LogoListLoad</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_list</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"logo-x"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"logo-y"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"logo-position"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"logo-opacity"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"logo-repeat"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_repeat</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_spu_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>LoadImage</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_filename</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name> <init>= <expr><call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_image</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name> <init>= <expr><call><name>vlc_path2uri</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><call><name>image_ReadUrl</name><argument_list>( <argument><expr><name>p_image</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name>p_image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>LogoListLoad</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>logo_list_t</name> <modifier>*</modifier></type><name>p_logo_list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_list</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_original</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>logo_t</name> <modifier>*</modifier></type><name>p_logo</name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>p_logo_list</name><operator>-&gt;</operator><name>i_counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_logo_list</name><operator>-&gt;</operator><name>i_next_pic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_original</name> <operator>=</operator> <name>psz_list</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_list</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_logo_list</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_list</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>psz_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_logo_list</name><operator>-&gt;</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_logo_list</name><operator>-&gt;</operator><name>p_logo</name></name> <operator>=</operator>
<name>p_logo</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_logo_list</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_logo</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_logo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_logo_list</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_c</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_list</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_c2</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_list</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_logo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_alpha</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_logo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_delay</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>p_c2</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>p_c2</name> <operator>&lt;</operator> <name>p_c</name> <operator>||</operator> <operator>!</operator><name>p_c</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_c2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name><name>p_c2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <name><name>p_c2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_logo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_delay</name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>p_c2</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p_c2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_c2</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>p_c2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <name>p_c2</name> <operator>&lt;</operator> <name>p_c</name> <operator>||</operator> <operator>!</operator><name>p_c</name> <operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_c2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <name><name>p_c2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_logo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_alpha</name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>p_c2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_c</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_c</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"logo file name %s, delay %d, alpha %d"</literal></expr></argument>,
<argument><expr><name>psz_list</name></expr></argument>, <argument><expr><name><name>p_logo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_delay</name></expr></argument>, <argument><expr><name><name>p_logo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_alpha</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_logo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pic</name> <operator>=</operator> <call><name>LoadImage</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_logo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"error while loading logo %s, will be skipped"</literal></expr></argument>,
<argument><expr><name>psz_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_c</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_list</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_logo_list</name><operator>-&gt;</operator><name>i_counter</name></name> <operator>=</operator> <name><name>p_logo_list</name><operator>-&gt;</operator><name>i_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_original</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>LogoListUnload</name><parameter_list>( <parameter><decl><type><name>logo_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>logo_t</name> <modifier>*</modifier></type><name>p_logo</name> <init>= <expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>p_logo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_logo</name><operator>-&gt;</operator><name>p_pic</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_logo</name><operator>-&gt;</operator><name>p_pic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_logo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>logo_t</name> <modifier>*</modifier></type><name>LogoListNext</name><parameter_list>( <parameter><decl><type><name>logo_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_counter</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_counter</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>%</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>logo_t</name> <modifier>*</modifier></type><name>p_logo</name> <init>= <expr><call><name>LogoListCurrent</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_next_pic</name></name> <operator>=</operator> <name>i_date</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><ternary><condition><expr><name><name>p_logo</name><operator>-&gt;</operator><name>i_delay</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then>
<expr><name><name>p_logo</name><operator>-&gt;</operator><name>i_delay</name></name></expr> </then><else>: <expr><name><name>p_list</name><operator>-&gt;</operator><name>i_delay</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_logo</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>logo_t</name> <modifier>*</modifier></type><name>LogoListCurrent</name><parameter_list>( <parameter><decl><type><name>logo_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>p_logo</name><index>[<expr><name><name>p_list</name><operator>-&gt;</operator><name>i_counter</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

</unit>
