<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\spu\subsdelay.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSDELAY_HELP</name></cpp:macro> <cpp:value>N_("Change subtitle delay")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_TEXT</name></cpp:macro> <cpp:value>N_( "Delay calculation mode" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Absolute delay - add absolute delay to each subtitle. " "Relative to source delay - multiply subtitle delay. " "Relative to source content - determine subtitle delay from its content (text)." )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FACTOR_TEXT</name></cpp:macro> <cpp:value>N_( "Calculation factor" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FACTOR_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Calculation factor. " "In Absolute delay mode the factor represents seconds.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVERLAP_TEXT</name></cpp:macro> <cpp:value>N_( "Maximum overlapping subtitles" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVERLAP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Maximum number of subtitles allowed at the same time." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_ALPHA_TEXT</name></cpp:macro> <cpp:value>N_( "Minimum alpha value" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_ALPHA_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Alpha value of the earliest subtitle, where 0 is fully transparent and 255 is fully opaque." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_STOPS_INTERVAL_TEXT</name></cpp:macro> <cpp:value>N_( "Interval between two disappearances" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_STOPS_INTERVAL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Minimum time (in milliseconds) that subtitle should stay after its predecessor has disappeared " "(subtitle delay will be extended to meet this requirement)." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_STOP_START_INTERVAL_TEXT</name></cpp:macro> <cpp:value>N_( "Interval between disappearance and appearance" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_STOP_START_INTERVAL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Minimum time (in milliseconds) between subtitle disappearance and newer subtitle appearance " "(earlier subtitle delay will be extended to fill the gap)." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_START_STOP_INTERVAL_TEXT</name></cpp:macro> <cpp:value>N_( "Interval between appearance and disappearance" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_START_STOP_INTERVAL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Minimum time (in milliseconds) that subtitle should stay after newer subtitle has appeared " "(earlier subtitle delay will be shortened to avoid the overlap)." )</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_mode_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ppsz_mode_descriptions</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"Absolute delay"</literal></expr></argument> )</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"Relative to source delay"</literal></expr></argument> )</argument_list></call></expr>, <macro><name>N_</name><argument_list>(
<argument><literal type="string">"Relative to source content"</literal></argument> )</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"subsdelay-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_MODE</name></cpp:macro> <cpp:value>CFG_PREFIX "mode"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_FACTOR</name></cpp:macro> <cpp:value>CFG_PREFIX "factor"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_OVERLAP</name></cpp:macro> <cpp:value>CFG_PREFIX "overlap"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_MIN_ALPHA</name></cpp:macro> <cpp:value>CFG_PREFIX "min-alpha"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_MIN_STOPS_INTERVAL</name></cpp:macro> <cpp:value>CFG_PREFIX "min-stops"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_MIN_STOP_START_INTERVAL</name></cpp:macro> <cpp:value>CFG_PREFIX "min-stop-start"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_MIN_START_STOP_INTERVAL</name></cpp:macro> <cpp:value>CFG_PREFIX "min-start-stop"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSDELAY_MAX_ENTRIES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSDELAY_MODE_ABSOLUTE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSDELAY_MODE_RELATIVE_SOURCE_DELAY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSDELAY_MODE_RELATIVE_SOURCE_CONTENT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>






<typedef>typedef <type><name><name>struct</name> <name>subsdelay_heap_entry_t</name></name></type> <name>subsdelay_heap_entry_t</name>;</typedef>

<struct>struct <name>subsdelay_heap_entry_t</name>
<block>{
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_source</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_update_stop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_update_ephemer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_update_position</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_check_empty</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_new_stop</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>int</name></type> <name>i_last_region_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_region_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_region_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_last_region_saved</name></decl>;</decl_stmt>
}</block>;</struct>





<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name><name>p_list</name><index>[<expr><name>SUBSDELAY_MAX_ENTRIES</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_head</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt> 

}</block></struct></type> <name>subsdelay_heap_t</name>;</typedef>







<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>f_factor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_overlap</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_min_alpha</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_min_stops_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_min_stop_start_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_min_start_stop_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subsdelay_heap_t</name></type> <name>heap</name></decl>;</decl_stmt> 
}</block></struct></type> <name>filter_sys_t</name>;</typedef>






<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayCreate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayDestroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type> <name>SubsdelayFilter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name><modifier>*</modifier></type> <name>p_subpic</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayEnforceDelayRules</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>SubsdelayEstimateDelay</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayRecalculateDelays</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayCalculateAlpha</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlapping</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_source_alpha</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayGetTextRank</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>SubsdelayIsTextEmpty</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_segment_t</name><modifier>*</modifier></type> <name>p_segment</name></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SubpicValidateWrapper</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_src_changed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>has_dst_changed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubpicUpdateWrapper</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubpicDestroyWrapper</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubpicLocalUpdate</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name><modifier>*</modifier></type> <name>p_subpic</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>SubpicIsEmpty</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name><modifier>*</modifier></type> <name>p_subpic</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>SubpicClone</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>, <parameter><decl><type><name>subpicture_updater_t</name> <modifier>*</modifier></type><name>updater</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubpicDestroyClone</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayHeapInit</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayHeapDestroy</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>SubsdelayHeapPush</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>, <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayHeapRemove</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter>, <parameter><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayRebuildList</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayHeapLock</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayHeapUnlock</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type> <name>SubsdelayEntryCreate</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>, <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayEntryDestroy</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayHeapCountOverlap</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter>, <parameter><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayEntryNewStopValueUpdated</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>;</function_decl>





<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Subsdelay"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Subtitle delay"</literal>)</argument> )</argument_list></macro>
<macro><name>set_help</name><argument_list>( <argument>SUBSDELAY_HELP</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sub filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>SubsdelayCreate</argument>, <argument>SubsdelayDestroy</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_SUBPIC</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_MODE</argument>, <argument><literal type="number">1</literal></argument>, <argument>MODE_TEXT</argument>, <argument>MODE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>pi_mode_values</argument>, <argument>ppsz_mode_descriptions</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument>CFG_FACTOR</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">20</literal></argument>, <argument>FACTOR_TEXT</argument>, <argument>FACTOR_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_OVERLAP</argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument>OVERLAP_TEXT</argument>, <argument>OVERLAP_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_MIN_ALPHA</argument>, <argument><literal type="number">70</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>MIN_ALPHA_TEXT</argument>, <argument>MIN_ALPHA_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Overlap fix"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_MIN_STOPS_INTERVAL</argument>, <argument><literal type="number">1000</literal></argument>, <argument>MIN_STOPS_INTERVAL_TEXT</argument>, <argument>MIN_STOPS_INTERVAL_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_MIN_START_STOP_INTERVAL</argument>, <argument><literal type="number">1000</literal></argument>, <argument>MIN_START_STOP_INTERVAL_TEXT</argument>,
<argument>MIN_START_STOP_INTERVAL_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_MIN_STOP_START_INTERVAL</argument>, <argument><literal type="number">1000</literal></argument>, <argument>MIN_STOP_START_INTERVAL_TEXT</argument>,
<argument>MIN_STOP_START_INTERVAL_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"factor"</literal></expr>, <expr><literal type="string">"overlap"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayCreate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <operator>(</operator><name>filter_sys_t</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MODE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MODE</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_factor</name></name> <operator>=</operator> <call><name>var_CreateGetFloatCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_FACTOR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_FACTOR</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap</name></name> <operator>=</operator> <call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_OVERLAP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_OVERLAP</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_alpha</name></name> <operator>=</operator> <call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_ALPHA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_ALPHA</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_stops_interval</name></name>
<operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_STOPS_INTERVAL</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_STOPS_INTERVAL</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_stop_start_interval</name></name>
<operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_STOP_START_INTERVAL</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_STOP_START_INTERVAL</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_start_stop_interval</name></name>
<operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_START_STOP_INTERVAL</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_START_STOP_INTERVAL</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_sub_filter</name></name> <operator>=</operator> <name>SubsdelayFilter</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SubsdelayHeapInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>heap</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayDestroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SubsdelayHeapDestroy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>heap</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MODE</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MODE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_FACTOR</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_FACTOR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_OVERLAP</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_OVERLAP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_ALPHA</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_ALPHA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_STOPS_INTERVAL</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_STOPS_INTERVAL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_STOP_START_INTERVAL</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_STOP_START_INTERVAL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_START_STOP_INTERVAL</name></expr></argument>, <argument><expr><name>SubsdelayCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_MIN_START_STOP_INTERVAL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type> <name>SubsdelayFilter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name><modifier>*</modifier></type> <name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_subpic</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>p_subpic</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>SubpicIsEmpty</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_heap</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>heap</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>SubsdelayHeapLock</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <call><name>SubsdelayHeapPush</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument>, <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SubsdelayHeapUnlock</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Can't add subpicture to the heap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_subpic</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_subpic</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_subpic</name></name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_ephemer</name></name></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>SubsdelayEnforceDelayRules</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SubsdelayHeapUnlock</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_subpic</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator> <name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>oldval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SubsdelayHeapLock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>heap</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_MODE</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_FACTOR</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_factor</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_OVERLAP</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_MIN_ALPHA</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_alpha</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_MIN_STOPS_INTERVAL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_stops_interval</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_MIN_STOP_START_INTERVAL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_stop_start_interval</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_MIN_START_STOP_INTERVAL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_start_stop_interval</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SubsdelayRecalculateDelays</name><argument_list>( <argument><expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SubsdelayHeapUnlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>heap</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayHeapInit</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_heap</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_heap</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_heap</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayHeapDestroy</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SubsdelayHeapLock</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name><name>p_heap</name><operator>-&gt;</operator><name>p_head</name></name></expr></init></decl>;</init>
<condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_stop</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>SubsdelayHeapUnlock</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>SubsdelayHeapPush</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>, <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_last</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_new_entry</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_heap</name><operator>-&gt;</operator><name>i_count</name></name> <operator>&gt;=</operator> <name>SUBSDELAY_MAX_ENTRIES</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_new_entry</name> <operator>=</operator> <call><name>SubsdelayEntryCreate</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument>, <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_new_entry</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name><name>p_heap</name><operator>-&gt;</operator><name>p_head</name></name></expr></init></decl>;</init> <condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition>
<block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_last</name> <operator>=</operator> <name>p_entry</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_last</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_new_entry</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_new_entry</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_last</name><operator>-&gt;</operator><name>b_update_ephemer</name></name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>p_last</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_new_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_last</name><operator>-&gt;</operator><name>b_update_ephemer</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_new_entry</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_heap</name><operator>-&gt;</operator><name>p_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_heap</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name>p_new_entry</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>SubsdelayRebuildList</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_new_entry</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayHeapRemove</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter>, <parameter><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_prev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_curr</name> <init>= <expr><name><name>p_heap</name><operator>-&gt;</operator><name>p_head</name></name></expr></init></decl>;</init> <condition><expr><name>p_curr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_curr</name> <operator>=</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_curr</name> <operator>==</operator> <name>p_entry</name></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name>p_curr</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_prev</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_prev</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_heap</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SubsdelayRebuildList</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayRebuildList</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_curr</name> <init>= <expr><name><name>p_heap</name><operator>-&gt;</operator><name>p_head</name></name></expr></init></decl>;</init> <condition><expr><name>p_curr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_curr</name> <operator>=</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_heap</name><operator>-&gt;</operator><name>p_list</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <name>p_curr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_heap</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <name>i_index</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayHeapLock</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_heap</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayHeapUnlock</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_heap</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type> <name>SubsdelayEntryCreate</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>, <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_new_subpic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_updater_t</name></type> <name>updater</name></decl>;</decl_stmt>



<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <operator>(</operator><name>subsdelay_heap_entry_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>subsdelay_heap_entry_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>updater</name><operator>.</operator><name>p_sys</name></name> <operator>=</operator> <name>p_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>updater</name><operator>.</operator><name>pf_validate</name></name> <operator>=</operator> <name>SubpicValidateWrapper</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>updater</name><operator>.</operator><name>pf_update</name></name> <operator>=</operator> <name>SubpicUpdateWrapper</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>updater</name><operator>.</operator><name>pf_destroy</name></name> <operator>=</operator> <name>SubpicDestroyWrapper</name></expr>;</expr_stmt>



<expr_stmt><expr><name>p_new_subpic</name> <operator>=</operator> <call><name>SubpicClone</name><argument_list>( <argument><expr><name>p_source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>updater</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_new_subpic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_subpic</name></name> <operator>=</operator> <name>p_new_subpic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name></name> <operator>=</operator> <name>p_source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_filter</name></name> <operator>=</operator> <name>p_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_update_stop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_update_ephemer</name></name> <operator>=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>b_ephemer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_update_position</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_check_empty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_new_stop</name></name> <operator>=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>i_stop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_last_region_saved</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_last_region_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_last_region_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_last_region_align</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>p_entry</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayEntryDestroy</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SubpicDestroyClone</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayHeapCountOverlap</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl></parameter>, <parameter><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_overlaps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_overlaps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_curr</name> <init>= <expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</init> <condition><expr><name>p_curr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_curr</name> <operator>=</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_curr</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <name>i_date</name></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_curr</name><operator>-&gt;</operator><name>b_check_empty</name></name></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name>i_overlaps</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i_overlaps</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayEntryNewStopValueUpdated</name><parameter_list>( <parameter><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_entry</name><operator>-&gt;</operator><name>b_update_stop</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_new_stop</name></name> <operator>-</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayEnforceDelayRules</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>p_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>, <decl><type ref="prev"/><name>i_overlap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_min_stops_interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_min_stop_start_interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_min_start_stop_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_list</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>heap</name><operator>.</operator><name>p_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>heap</name><operator>.</operator><name>i_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_overlap</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_min_stops_interval</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_min_stops_interval</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_min_stop_start_interval</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_min_stop_start_interval</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_min_start_stop_interval</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_min_start_stop_interval</name></name></expr>;</expr_stmt>














<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_list</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>i_new_stop</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_list</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>i_new_stop</name></expr></argument>,
<argument><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_new_stop</name> <operator>+</operator> <name>i_min_stops_interval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>














<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i_overlap</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <name><name>p_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>-</operator> <name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_new_stop</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&lt;</operator> <name>i_min_stop_start_interval</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_new_stop</name> <operator>=</operator> <name><name>p_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></for>















<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i_overlap</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_new_stop</name> <operator>-</operator> <name><name>p_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&lt;</operator> <name>i_min_start_stop_interval</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_new_stop</name> <operator>=</operator> <name><name>p_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>















<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name> <operator>-</operator> <name>i_overlap</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_new_stop</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_new_stop</name></expr></argument>, <argument><expr><name><name>p_list</name><index>[<expr><name>i</name> <operator>+</operator> <name>i_overlap</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SubsdelayEntryNewStopValueUpdated</name><argument_list>( <argument><expr><name><name>p_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>SubsdelayRecalculateDelays</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_curr</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>heap</name><operator>.</operator><name>p_head</name></name></expr></init></decl>;</init>
<condition><expr><name>p_curr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_curr</name> <operator>=</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_curr</name><operator>-&gt;</operator><name>b_update_ephemer</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_curr</name><operator>-&gt;</operator><name>i_new_stop</name></name> <operator>=</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <call><name>SubsdelayEstimateDelay</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_curr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_curr</name><operator>-&gt;</operator><name>b_update_stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>SubsdelayEnforceDelayRules</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>SubpicValidateWrapper</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_src_changed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>has_dst_changed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_new_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_result</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>pf_validate</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_new_ts</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator>
<operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>i_ts</name> <operator>-</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator> <operator>)</operator> <operator>/</operator>
<operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_new_stop</name></name> <operator>-</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>pf_validate</name></name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name></name></expr></argument>, <argument><expr><name>has_src_changed</name></expr></argument>, <argument><expr><name>p_fmt_src</name></expr></argument>,
<argument><expr><name>has_dst_changed</name></expr></argument>, <argument><expr><name>p_fmt_dst</name></expr></argument>, <argument><expr><name>i_new_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_last_region_saved</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_last_region_x</name></name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_last_region_y</name></name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_last_region_align</name></name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_last_region_saved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_result</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>SubpicLocalUpdate</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument>, <argument><expr><name>i_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SubpicUpdateWrapper</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_new_ts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>pf_update</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_new_ts</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator>
<operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>i_ts</name> <operator>-</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator> <operator>)</operator> <operator>/</operator>
<operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_new_stop</name></name> <operator>-</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>pf_update</name></name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name></name></expr></argument>, <argument><expr><name>p_fmt_src</name></expr></argument>, <argument><expr><name>p_fmt_dst</name></expr></argument>, <argument><expr><name>i_new_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SubpicLocalUpdate</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument>, <argument><expr><name>i_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SubpicDestroyWrapper</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_entry</name></expr> )</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_filter</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_heap</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>heap</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SubsdelayHeapLock</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SubsdelayHeapRemove</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SubsdelayHeapUnlock</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SubsdelayEntryDestroy</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SubpicLocalUpdate</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name><modifier>*</modifier></type> <name>p_subpic</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subsdelay_heap_t</name> <modifier>*</modifier></type><name>p_heap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_overlapping</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_entry</name> <operator>||</operator> <operator>!</operator><name><name>p_entry</name><operator>-&gt;</operator><name>p_filter</name></name></expr> )</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_filter</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_filter</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_heap</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>heap</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SubsdelayHeapLock</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_check_empty</name></name> <operator>&amp;&amp;</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>SubsdelayIsTextEmpty</name><argument_list>( <argument><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SubsdelayHeapRemove</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SubsdelayHeapUnlock</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_check_empty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_update_stop</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_entry</name><operator>-&gt;</operator><name>b_update_ephemer</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_new_stop</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <call><name>SubsdelayEstimateDelay</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_update_stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SubsdelayEnforceDelayRules</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_overlapping</name> <operator>=</operator> <call><name>SubsdelayHeapCountOverlap</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument>, <argument><expr><name>i_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <call><name>SubsdelayCalculateAlpha</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_overlapping</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_alpha</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_update_position</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>&amp;</operator> <operator>(</operator> <operator>~</operator><name>SUBPICTURE_ALIGN_MASK</name> <operator>)</operator> <operator>)</operator>
<operator>|</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_update_position</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>b_last_region_saved</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_last_region_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_last_region_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_last_region_align</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SubsdelayHeapUnlock</name><argument_list>( <argument><expr><name>p_heap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>SubpicIsEmpty</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name><modifier>*</modifier></type> <name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>SubsdelayIsTextEmpty</name><argument_list>( <argument><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>SubpicClone</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>, <parameter><decl><type><name>subpicture_updater_t</name> <modifier>*</modifier></type><name>updater</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_updater_t</name></type> <name>subpic_updater</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_private_t</name> <modifier>*</modifier></type><name>p_subpic_private</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_subpic</name> <operator>=</operator> <call><name>subpicture_New</name><argument_list>( <argument><expr><name>updater</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_subpic</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>subpic_updater</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_subpic_private</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_private</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument>, <argument><expr><name>p_source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>subpicture_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name></name> <operator>=</operator> <name>subpic_updater</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_private</name></name> <operator>=</operator> <name>p_subpic_private</name></expr>;</expr_stmt>

<return>return <expr><name>p_subpic</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>SubpicDestroyClone</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>SubsdelayEstimateDelay</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>subsdelay_heap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_rank</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_mode</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_mode</name> <operator>==</operator> <name>SUBSDELAY_MODE_ABSOLUTE</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_factor</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_mode</name> <operator>==</operator> <name>SUBSDELAY_MODE_RELATIVE_SOURCE_CONTENT</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_subpic</name></name> <operator>&amp;&amp;</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_rank</name> <operator>=</operator> <call><name>SubsdelayGetTextRank</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_text</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_factor</name></name> <operator>*</operator> <name>i_rank</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_mode</name> <operator>=</operator> <name>SUBSDELAY_MODE_RELATIVE_SOURCE_DELAY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>i_mode</name> <operator>==</operator> <name>SUBSDELAY_MODE_RELATIVE_SOURCE_DELAY</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vlc_tick_t</name><operator>)</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_factor</name></name> <operator>*</operator> <operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_source</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayCalculateAlpha</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_overlapping</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_source_alpha</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_new_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_min_alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_min_alpha</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_min_alpha</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_overlapping</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_overlapping</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_overlap</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>i_new_alpha</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>i_new_alpha</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <name>i_overlapping</name> <operator>*</operator> <operator>(</operator> <literal type="number">255</literal> <operator>-</operator> <name>i_min_alpha</name> <operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>i_new_alpha</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <name>i_overlapping</name> <operator>*</operator> <operator>(</operator> <literal type="number">255</literal> <operator>-</operator> <name>i_min_alpha</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>i_new_alpha</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <name>i_overlapping</name> <operator>*</operator> <operator>(</operator> <literal type="number">255</literal> <operator>-</operator> <name>i_min_alpha</name> <operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator> <name>i_source_alpha</name> <operator>*</operator> <name>i_new_alpha</name> <operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayGetWordRank</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>p_rank</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">300</literal></expr>, <expr><literal type="number">300</literal></expr>, <expr><literal type="number">300</literal></expr>, <expr><literal type="number">330</literal></expr>, <expr><literal type="number">363</literal></expr>, <expr><literal type="number">399</literal></expr>, <expr><literal type="number">438</literal></expr>, <expr><literal type="number">481</literal></expr>, <expr><literal type="number">529</literal></expr>, <expr><literal type="number">581</literal></expr>,
<expr><literal type="number">639</literal></expr>, <expr><literal type="number">702</literal></expr>, <expr><literal type="number">772</literal></expr>, <expr><literal type="number">849</literal></expr>, <expr><literal type="number">933</literal></expr>, <expr><literal type="number">1026</literal></expr>, <expr><literal type="number">1128</literal></expr>, <expr><literal type="number">1240</literal></expr>, <expr><literal type="number">1364</literal></expr>, <expr><literal type="number">1500</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&gt;</operator> <literal type="number">20</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>p_rank</name><index>[<expr><name>i_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>SubsdelayGetTextRank</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_skip_esc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_skip_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_word_length</name></decl>, <decl><type ref="prev"/><name>i_rank</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_word_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_rank</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b_skip_esc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_skip_tag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<while>while <condition>( <expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_skip_esc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_skip_esc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_skip_tag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_skip_esc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_skip_tag</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'!'</literal></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_word_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_rank</name> <operator>+=</operator> <call><name>SubsdelayGetWordRank</name><argument_list>( <argument><expr><name>i_word_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_word_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_word_length</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_skip_esc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_skip_tag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_word_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_rank</name> <operator>+=</operator> <call><name>SubsdelayGetWordRank</name><argument_list>( <argument><expr><name>i_word_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_rank</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>SubsdelayIsTextEmpty</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while <condition>( <expr><name>p_segment</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><call><name>strspn</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name><index>[<expr><name>offset</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
