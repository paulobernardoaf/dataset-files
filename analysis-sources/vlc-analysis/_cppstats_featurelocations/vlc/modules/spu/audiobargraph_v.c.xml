<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\spu\audiobargraph_v.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSX_TEXT</name></cpp:macro> <cpp:value>N_("X coordinate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSX_LONGTEXT</name></cpp:macro> <cpp:value>N_("X coordinate of the bargraph.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSY_TEXT</name></cpp:macro> <cpp:value>N_("Y coordinate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Y coordinate of the bargraph.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_TEXT</name></cpp:macro> <cpp:value>N_("Transparency of the bargraph")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Bargraph transparency value " "(from 0 for full transparency to 255 for full opacity).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_TEXT</name></cpp:macro> <cpp:value>N_("Bargraph position")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Enforce the bargraph position on the video " "(0=center, 1=left, 2=right, 4=top, 8=bottom, you can " "also use combinations of these values, eg 6 = top-right).")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARWIDTH_TEXT</name></cpp:macro> <cpp:value>N_("Bar width in pixel")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARWIDTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Width in pixel of each bar in the BarGraph to be displayed." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARHEIGHT_TEXT</name></cpp:macro> <cpp:value>N_("Bar Height in pixel")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARHEIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Height in pixel of BarGraph to be displayed." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"audiobargraph_v-"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_pos_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_pos_descriptions</name><index>[]</index></name> <init>=
<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Center"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom-Left"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Bottom-Right"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenSub</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenVideo</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_SUBPIC</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"sub source"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>OpenSub</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Audio Bar Graph Video sub source"</literal>)</argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Audio Bar Graph Video"</literal>)</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"audiobargraph_v"</literal></argument>)</argument_list></macro>

<macro><name>add_obsolete_string</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"i_values"</literal></argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"x"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>POSX_TEXT</argument>, <argument>POSX_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"y"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>POSY_TEXT</argument>, <argument>POSY_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"transparency"</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,
<argument>TRANS_TEXT</argument>, <argument>TRANS_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"position"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>POS_TEXT</argument>, <argument>POS_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>(<argument>pi_pos_values</argument>, <argument>ppsz_pos_descriptions</argument>)</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"alarm"</literal></argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"barWidth"</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>BARWIDTH_TEXT</argument>, <argument>BARWIDTH_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"barHeight"</literal></argument>, <argument><literal type="number">400</literal></argument>, <argument>BARHEIGHT_TEXT</argument>, <argument>BARHEIGHT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>


<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>OpenVideo</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Audio Bar Graph Video sub source"</literal>)</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"audiobargraph_v"</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>









<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_alpha</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nbChannels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>i_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>alarm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>barWidth</name></decl>;</decl_stmt>

}</block></struct></type> <name>BarGraph_t</name>;</typedef>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_blender_t</name> <modifier>*</modifier></type><name>p_blend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BarGraph_t</name></type> <name>p_BarGraph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pos_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pos_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_absolute</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_spu_update</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"transparency"</literal></expr>, <expr><literal type="string">"position"</literal></expr>, <expr><literal type="string">"barWidth"</literal></expr>, <expr><literal type="string">"barHeight"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_callbacks</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"audiobargraph_v-x"</literal></expr>,
<expr><literal type="string">"audiobargraph_v-y"</literal></expr>,
<expr><literal type="string">"audiobargraph_v-transparency"</literal></expr>,
<expr><literal type="string">"audiobargraph_v-position"</literal></expr>,
<expr><literal type="string">"audiobargraph_v-barWidth"</literal></expr>,
<expr><literal type="string">"audiobargraph_v-barHeight"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>float</name></type> <name>iec_scale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>dB</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dB</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">70.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0.0f</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dB</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">60.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dB</name> <operator>+</operator> <literal type="number">70.0f</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.0025f</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dB</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">50.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dB</name> <operator>+</operator> <literal type="number">60.0f</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.005f</literal> <operator>+</operator> <literal type="number">0.025f</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dB</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">40.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dB</name> <operator>+</operator> <literal type="number">50.0f</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.0075f</literal> <operator>+</operator> <literal type="number">0.075f</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dB</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">30.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dB</name> <operator>+</operator> <literal type="number">40.0f</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.015f</literal> <operator>+</operator> <literal type="number">0.15f</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dB</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">20.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dB</name> <operator>+</operator> <literal type="number">30.0f</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.02f</literal> <operator>+</operator> <literal type="number">0.3f</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dB</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">0.001f</literal> <operator>||</operator> <name>dB</name></expr></argument> &gt;</argument_list></name> <literal type="number">0.001f</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>(</operator><name>dB</name> <operator>+</operator> <literal type="number">20.0f</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.025f</literal> <operator>+</operator> <literal type="number">0.5f</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1.0f</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_i_values</name><parameter_list>(<parameter><decl><type><name>BarGraph_t</name> <modifier>*</modifier></type><name>p_BarGraph</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>i_values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>delim</name><index>[]</index></name> <init>= <expr><literal type="string">":"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tok</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>nbChannels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>i_values</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>nbChannels</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_values</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_values</name></name></expr></argument>,
<argument><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>nbChannels</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>db</name> <init>= <expr><call><name>log10</name><argument_list>(<argument><expr><call><name>atof</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_values</name><index>[<expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>nbChannels</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><call><name>iec_scale</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>p_BarGraph</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>bright_red</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">76</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>black</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>white</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>bright_green</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">150</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>bright_yellow</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">226</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>green</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">74</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>yellow</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">112</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>red</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">37</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>DrawHLine</name><parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>line</name> <operator>*</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <name>col</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Draw2VLines</name><parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>scale</name> <operator>+</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawHLine</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawHLines</name><parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>line</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line</name> <operator>+</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawHLine</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawNumber</name><parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>x</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawHLine</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>Draw</name><parameter_list>(<parameter><decl><type><name>BarGraph_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nbChannels</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>nbChannels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>scale</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>barWidth</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>barWidth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nbChannels</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>nbChannels</name> <operator>*</operator> <name>barWidth</name> <operator>+</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>scale</name> <operator>+</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>level</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>iec_scale</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>p_pic</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>p_pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <call><name>picture_New</name><argument_list>(<argument><expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>p_pic</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>p_pic</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>*</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>Draw2VLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Draw2VLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>pixmap</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x17</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x77</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x77</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x57</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x77</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x77</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DrawHLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawHLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>level</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawNumber</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>pixmap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>minus8</name> <init>= <expr><call><name>iec_scale</name><argument_list>(<argument><expr><operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name> <operator>+</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minus18</name> <init>= <expr><call><name>iec_scale</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name> <operator>+</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>i_values</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_values</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>indicator_color</name> <init>= <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>alarm</name></name></expr> ?</condition><then> <expr><name>bright_red</name></expr> </then><else>: <expr><name>black</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbChannels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pi</name> <init>= <expr><literal type="number">30</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <name>barWidth</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawHLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">20</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pi</name></expr></argument>, <argument><expr><name>indicator_color</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>barWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name><name>i_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <name>minus18</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawHLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pi</name></expr></argument>, <argument><expr><name>bright_green</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>barWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>line</name> <operator>&lt;</operator> <name>minus8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawHLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pi</name></expr></argument>, <argument><expr><name>bright_yellow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>barWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawHLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pi</name></expr></argument>, <argument><expr><name>bright_red</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>barWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>line</name> <init>= <expr><name><name>i_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">20</literal></expr></init></decl>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>scale</name> <operator>+</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <name>minus18</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawHLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pi</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>barWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>line</name> <operator>&lt;</operator> <name>minus8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawHLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pi</name></expr></argument>, <argument><expr><name>yellow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>barWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DrawHLines</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>line</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pi</name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>barWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>BarGraphCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BarGraph_t</name> <modifier>*</modifier></type><name>p_BarGraph</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_BarGraph</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"position"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"transparency"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"i_values"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_i_values</name><argument_list>(<argument><expr><name>p_BarGraph</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Draw</name><argument_list>(<argument><expr><name>p_BarGraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"alarm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>alarm</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Draw</name><argument_list>(<argument><expr><name>p_BarGraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"barWidth"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>barWidth</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Draw</name><argument_list>(<argument><expr><name>p_BarGraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"barHeight"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Draw</name><argument_list>(<argument><expr><name>p_BarGraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_spu_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>FilterSub</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BarGraph_t</name> <modifier>*</modifier></type><name>p_BarGraph</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_BarGraph</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_spu_update</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <name><name>p_BarGraph</name><operator>-&gt;</operator><name>p_pic</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>filter_NewSubpicture</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_spu</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_absolute</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_pic</name> <operator>||</operator> <operator>!</operator><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_alpha</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_region</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_region</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate SPU region"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>(<argument><expr><name>p_spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>picture_Copy</name><argument_list>(<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_RIGHT</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name>p_region</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_alpha</name></name></expr> ;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_spu</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>FilterVideo</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BarGraph_t</name> <modifier>*</modifier></type><name>p_BarGraph</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_BarGraph</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>(<argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>p_pic</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_pic</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_w</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_h</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <name>i_dst_h</name> <operator>-</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <operator>(</operator><name>i_dst_h</name> <operator>-</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <name>i_dst_w</name> <operator>-</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <operator>(</operator><name>i_dst_w</name> <operator>-</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_alpha</name> <init>= <expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_alpha</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>filter_ConfigureBlend</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr></argument>, <argument><expr><name>i_dst_w</name></expr></argument>, <argument><expr><name>i_dst_h</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>filter_Blend</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name></expr></argument>,
<argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>i_alpha</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"failed to blend a picture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_dst</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_sub</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output format does not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_sub</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name> <operator>=</operator> <call><name>filter_NewBlend</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>BarGraph_t</name> <modifier>*</modifier></type><name>p_BarGraph</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_BarGraph</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"transparency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_alpha</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>i_values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<macro><name>parse_i_values</name><argument_list>(<argument>p_BarGraph</argument>, <argument>&amp;(char){ <literal type="number">0</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>alarm</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>barWidth</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"barWidth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_BarGraph</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"barHeight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_sub</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_x</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos_y</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"alarm"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"i_values"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"alarm"</literal></expr></argument>, <argument><expr><name>BarGraphCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"i_values"</literal></expr></argument>, <argument><expr><name>BarGraphCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"alarm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"i_values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_filter_callbacks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>ppsz_filter_callbacks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>BarGraphCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>b_sub</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_sub_source</name></name> <operator>=</operator> <name>FilterSub</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>FilterVideo</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenSub</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>OpenCommon</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenVideo</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>OpenCommon</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_filter_callbacks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>ppsz_filter_callbacks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>BarGraphCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"i_values"</literal></expr></argument>, <argument><expr><name>BarGraphCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"alarm"</literal></expr></argument>, <argument><expr><name>BarGraphCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"i_values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"alarm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_DeleteBlend</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_blend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BarGraph</name><operator>.</operator><name>p_pic</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BarGraph</name><operator>.</operator><name>p_pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BarGraph</name><operator>.</operator><name>i_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
