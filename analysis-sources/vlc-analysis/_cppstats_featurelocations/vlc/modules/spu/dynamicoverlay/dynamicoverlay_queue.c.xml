<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\spu\dynamicoverlay\dynamicoverlay_queue.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dynamicoverlay.h"</cpp:file></cpp:include>





<function><type><name>int</name></type> <name>QueueInit</name><parameter_list>( <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_queue</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_queue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>queue_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QueueDestroy</name><parameter_list>( <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_queue</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>command_t</name> <modifier>*</modifier></type><name>p_cur</name> <init>= <expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_temp</name></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_temp</name> <operator>=</operator> <name>p_cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_cur</name> <operator>=</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QueueEnqueue</name><parameter_list>( <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_queue</name></decl></parameter>, <parameter><decl><type><name>command_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_tail</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_cmd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name>p_cmd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>=</operator> <name>p_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cmd</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>command_t</name> <modifier>*</modifier></type><name>QueueDequeue</name><parameter_list>( <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_queue</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>command_t</name> <modifier>*</modifier></type><name>p_ret</name> <init>= <expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name></name> <operator>==</operator> <name><name>p_queue</name><operator>-&gt;</operator><name>p_tail</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name><name>p_queue</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name><name>p_queue</name><operator>-&gt;</operator><name>p_head</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>p_ret</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QueueTransfer</name><parameter_list>( <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_sink</name></decl></parameter>, <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_source</name><operator>-&gt;</operator><name>p_head</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sink</name><operator>-&gt;</operator><name>p_head</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sink</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sink</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p_tail</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p_sink</name><operator>-&gt;</operator><name>p_tail</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sink</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p_tail</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_source</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
