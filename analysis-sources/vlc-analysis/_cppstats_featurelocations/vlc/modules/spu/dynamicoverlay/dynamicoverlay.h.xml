<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\spu\dynamicoverlay\dynamicoverlay.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_OVERLAY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_OVERLAY_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_text_style.h&gt;</cpp:file></cpp:include>





<typedef>typedef <type><struct>struct <name>buffer_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>i_length</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_memory</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_begin</name></decl>;</decl_stmt> 
}</block></struct></type> <name>buffer_t</name>;</typedef>

<function_decl><type><name>int</name></type> <name>BufferInit</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>BufferDestroy</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>BufferAdd</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>BufferPrintf</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>BufferDel</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_len</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>BufferGetToken</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>;</function_decl>






<typedef>typedef <type><struct>struct <name>commandparams_t</name>
<block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_shmid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_x</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_alpha</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>text_style_t</name></type> <name>fontstyle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_visible</name></decl>;</decl_stmt> 
}</block></struct></type> <name>commandparams_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parser_func_t</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl></parameter>, <parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>execute_func_t</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>, <parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>unparse_func_t</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>, <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>commanddesc_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_atomic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>parser_func_t</name></type> <name>pf_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>execute_func_t</name></type> <name>pf_execute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unparse_func_t</name></type> <name>pf_unparse</name></decl>;</decl_stmt>
}</block></struct></type> <name>commanddesc_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>commanddesc_static_t</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_atomic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>parser_func_t</name></type> <name>pf_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>execute_func_t</name></type> <name>pf_execute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unparse_func_t</name></type> <name>pf_unparse</name></decl>;</decl_stmt>
}</block></struct></type> <name>commanddesc_static_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>command_t</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>commanddesc_t</name></name> <modifier>*</modifier></type><name>p_command</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>commandparams_t</name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>commandparams_t</name></type> <name>results</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command_t</name></name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>command_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>RegisterCommand</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UnregisterCommand</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>





<typedef>typedef <type><struct>struct <name>queue_t</name>
<block>{
<decl_stmt><decl><type><name>command_t</name> <modifier>*</modifier></type><name>p_head</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>command_t</name> <modifier>*</modifier></type><name>p_tail</name></decl>;</decl_stmt> 
}</block></struct></type> <name>queue_t</name>;</typedef>

<function_decl><type><name>int</name></type> <name>QueueInit</name><parameter_list>( <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_queue</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>QueueDestroy</name><parameter_list>( <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_queue</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>QueueEnqueue</name><parameter_list>( <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_queue</name></decl></parameter>, <parameter><decl><type><name>command_t</name> <modifier>*</modifier></type><name>p_cmd</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>command_t</name> <modifier>*</modifier></type><name>QueueDequeue</name><parameter_list>( <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_queue</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>QueueTransfer</name><parameter_list>( <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_sink</name></decl></parameter>, <parameter><decl><type><name>queue_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter> )</parameter_list>;</function_decl>





<typedef>typedef <type><struct>struct <name>overlay_t</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <name>i_y</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_fontstyle</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_text</name></decl>;</decl_stmt>
}</block> <decl><name>data</name></decl>;</union>
}</block></struct></type> <name>overlay_t</name>;</typedef>

<function_decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>OverlayCreate</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>OverlayDestroy</name><parameter_list>( <parameter><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name></decl></parameter> )</parameter_list>;</function_decl>





<typedef>typedef <type><struct>struct <name>list_t</name>
<block>{
<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_head</name></decl>, <modifier>*</modifier><modifier>*</modifier><name>pp_tail</name>;</decl_stmt>
}</block></struct></type> <name>list_t</name>;</typedef>

<function_decl><type><name>int</name></type> <name>do_ListInit</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>do_ListDestroy</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>ListAdd</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ListRemove</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>ListGet</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>ListWalk</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>;</function_decl>





<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>buffer_t</name></type> <name>input</name></decl>, <name>output</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_inputfd</name></decl>, <name>i_outputfd</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_inputfile</name></decl>, <modifier>*</modifier><name>psz_outputfile</name>;</decl_stmt>

<decl_stmt><decl><type><name>commanddesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_commands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>i_commands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_updated</name></decl>, <name>b_atomic</name>;</decl_stmt>
<decl_stmt><decl><type><name>queue_t</name></type> <name>atomic</name></decl>, <name>pending</name>, <name>processed</name>;</decl_stmt>
<decl_stmt><decl><type><name>list_t</name></type> <name>overlays</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
