<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\spu\dynamicoverlay\dynamicoverlay_buffer.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dynamicoverlay.h"</cpp:file></cpp:include>





<function><type><name>int</name></type> <name>BufferInit</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buffer_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_memory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>BufferDestroy</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_memory</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_memory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>BufferGetToken</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_char</name> <init>= <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><call><name>isspace</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>p_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>||</operator> <name><name>p_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_char</name> <operator>&lt;=</operator> <operator>(</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name> <operator>+</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_char</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>p_char</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>BufferAdd</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-</operator>
<operator>(</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name> <operator>-</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_memory</name></name> <operator>)</operator> <operator>)</operator> <operator>&lt;</operator> <name>i_len</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>)</operator> <operator>&gt;=</operator> <name>i_len</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_memory</name></name></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name></expr></argument>,
<argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_memory</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_newsize</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>i_newsize</name> <operator>&lt;</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+</operator> <name>i_len</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_newsize</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_newdata</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_newsize</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_newdata</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_newdata</name></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_memory</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_memory</name></name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name> <operator>=</operator> <name>p_newdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>i_newsize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name> <operator>+</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>BufferPrintf</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>va</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>vasprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_data</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>va</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>BufferAdd</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>psz_data</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>BufferDel</name><parameter_list>( <parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-=</operator> <name>i_len</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_memory</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_begin</name></name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
