<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\hw\vdpau\display.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_vdpau.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"VDPAU"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"VDPAU output"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>set_callback_display</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"vdpau"</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<struct>struct <name>vout_display_sys_t</name>
<block>{
<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VdpDevice</name></type> <name>device</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VdpPresentationQueueTarget</name></type> <name>target</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VdpPresentationQueue</name></type> <name>queue</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>height</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RenderRegion</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>VdpOutputSurface</name></type> <name>target</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpBitmapSurface</name></type> <name>surface</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VdpRGBAFormat</name></type> <name>fmt</name> <init>= <expr><name>VDP_RGBA_FORMAT_B8G8R8A8</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>VdpRGBAFormat</name></type> <name>fmt</name> <init>= <expr><name>VDP_RGBA_FORMAT_R8G8B8A8</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_bitmap_surface_create</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name><name>reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><name>VDP_FALSE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"%s creation failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"bitmap surface"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>p_picture</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pitch</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_bitmap_surface_put_bits_native</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pitch</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"subpicture upload failure: %s"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>VdpRect</name></type> <name>area</name> <init>= <expr><block>{
<expr><name><name>reg</name><operator>-&gt;</operator><name>i_x</name></name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>width</name></name>
<operator>/</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr>,
<expr><name><name>reg</name><operator>-&gt;</operator><name>i_y</name></name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>height</name></name>
<operator>/</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr>,
<expr><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>i_x</name></name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>width</name></name>
<operator>/</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr>,
<expr><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>height</name></name>
<operator>/</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpColor</name></type> <name>color</name> <init>= <expr><block>{ <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>,
<expr><name><name>reg</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>*</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>/</operator> <literal type="number">65025.f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceRenderBlendState</name></type> <name>state</name> <init>= <expr><block>{
<expr><operator>.</operator><name>struct_version</name> <operator>=</operator> <name>VDP_OUTPUT_SURFACE_RENDER_BLEND_STATE_VERSION</name></expr>,
<expr><operator>.</operator><name>blend_factor_source_color</name> <operator>=</operator>
<name>VDP_OUTPUT_SURFACE_RENDER_BLEND_FACTOR_SRC_ALPHA</name></expr>,
<expr><operator>.</operator><name>blend_factor_destination_color</name> <operator>=</operator>
<name>VDP_OUTPUT_SURFACE_RENDER_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA</name></expr>,
<expr><operator>.</operator><name>blend_factor_source_alpha</name> <operator>=</operator>
<name>VDP_OUTPUT_SURFACE_RENDER_BLEND_FACTOR_ZERO</name></expr>,
<expr><operator>.</operator><name>blend_factor_destination_alpha</name> <operator>=</operator>
<name>VDP_OUTPUT_SURFACE_RENDER_BLEND_FACTOR_ONE</name></expr>,
<expr><operator>.</operator><name>blend_equation_color</name> <operator>=</operator> <name>VDP_OUTPUT_SURFACE_RENDER_BLEND_EQUATION_ADD</name></expr>,
<expr><operator>.</operator><name>blend_equation_alpha</name> <operator>=</operator> <name>VDP_OUTPUT_SURFACE_RENDER_BLEND_EQUATION_ADD</name></expr>,
<expr><operator>.</operator><name>blend_constant</name> <operator>=</operator> <block>{ <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_output_surface_render_bitmap_surface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>,
<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"blending failure: %s"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>vdp_bitmap_surface_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Queue</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_vdp_output_surface_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurface</name></type> <name>surface</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpPresentationQueueStatus</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpTime</name></type> <name>ts</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_presentation_queue_query_surface_status</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>,
<argument><expr><name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>VDP_STATUS_OK</name> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>VDP_PRESENTATION_QUEUE_STATUS_IDLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"surface status: %u"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subpic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RenderRegion</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpTime</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_presentation_queue_get_time</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"presentation queue time failure: %s"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>= <expr><name>date</name> <operator>-</operator> <name>now</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>delay</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"picture date corrupt: delay of %"</literal><name>PRId64</name><literal type="string">" us"</literal></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pts</name> <operator>+=</operator> <call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_presentation_queue_display</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"presentation queue display failure: %s"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Wait</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xcb_generic_event_t</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>current</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_vdp_output_surface_t</name> <modifier>*</modifier></type><name>psys</name> <init>= <expr><name><name>current</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpTime</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_presentation_queue_block_until_surface_idle</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name><name>psys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"presentation queue blocking error: %s"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <call><name>picture_Hold</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>


<while>while <condition>(<expr><operator>(</operator><name>ev</name> <operator>=</operator> <call><name>xcb_poll_for_event</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VOUT_DISPLAY_RESET_PICTURES</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vout_display_cfg_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>video_format_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>src</name><init>= <expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_display_place_t</name></type> <name>place</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"resetting pictures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vout_display_PlacePicture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>place</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name><name>place</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name><name>src</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_height</name></name> <operator>*</operator> <name><name>place</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name><name>src</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>place</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>place</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>*</operator> <name><name>place</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name><name>src</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>*</operator> <name><name>place</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name><name>src</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>values</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>place</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>place</name><operator>.</operator><name>y</name></name></expr>,
<expr><name><name>place</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>place</name><operator>.</operator><name>height</name></name></expr>, }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xcb_configure_window</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,
<argument><expr><name>XCB_CONFIG_WINDOW_X</name><operator>|</operator><name>XCB_CONFIG_WINDOW_Y</name><operator>|</operator>
<name>XCB_CONFIG_WINDOW_WIDTH</name><operator>|</operator><name>XCB_CONFIG_WINDOW_HEIGHT</name></expr></argument>,
<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_SIZE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vout_display_cfg_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_display_place_t</name></type> <name>place</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_display_PlacePicture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>place</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>place</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name><name>vd</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name>
<operator>||</operator> <name><name>place</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name><name>vd</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>values</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>place</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>place</name><operator>.</operator><name>y</name></name></expr>,
<expr><name><name>place</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>place</name><operator>.</operator><name>height</name></name></expr>, }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xcb_configure_window</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,
<argument><expr><name>XCB_CONFIG_WINDOW_X</name><operator>|</operator><name>XCB_CONFIG_WINDOW_Y</name><operator>|</operator>
<name>XCB_CONFIG_WINDOW_WIDTH</name><operator>|</operator><name>XCB_CONFIG_WINDOW_HEIGHT</name></expr></argument>,
<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_FILLED</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_ZOOM</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_ASPECT</name></expr>:</case>
<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_CROP</name></expr>:</case>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"unknown control request %d"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>xcb_flush</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_xcb_parent_Create</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name> <init>= <expr><ternary><condition><expr><name>context</name></expr> ?</condition><then> <expr><call><name>vlc_video_context_HoldDevice</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dec_device</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_decoder</name> <init>= <expr><call><name>GetVDPAUOpaqueDevice</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vdpau_decoder</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name> <operator>=</operator> <name><name>vdpau_decoder</name><operator>-&gt;</operator><name>vdp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name><name>vdpau_decoder</name><operator>-&gt;</operator><name>device</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vdp_get_information_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"using back-end %s"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpChromaType</name></type> <name>chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpYCbCrFormat</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_ApplyRotation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>fmtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_VDPAU_VIDEO_420</name>
<operator>||</operator> <name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_VDPAU_VIDEO_422</name>
<operator>||</operator> <name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_VDPAU_VIDEO_444</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>vlc_fourcc_to_vdp_ycc</name><argument_list>(<argument><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chroma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpBool</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_surface_query_capabilities</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,
<argument><expr><name>chroma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"%s capabilities query failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"video surface"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>||</operator> <name>w</name> <operator>&lt;</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>||</operator> <name>h</name> <operator>&lt;</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"source video %s not supported"</literal></expr></argument>, <argument><expr><literal type="string">"chroma type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_surface_query_get_put_bits_y_cb_cr_capabilities</name><argument_list>(
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"%s capabilities query failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"video surface"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"source video %s not supported"</literal></expr></argument>, <argument><expr><literal type="string">"YCbCr format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></else></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_query_parameter_value_range</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>VDP_VIDEO_MIXER_PARAMETER_VIDEO_SURFACE_WIDTH</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"%s capabilities query failure: %s"</literal></expr></argument>,
<argument><expr><literal type="string">"video mixer surface width"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>||</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>&gt;</operator> <name>max</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"source video %s not supported"</literal></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_query_parameter_value_range</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>VDP_VIDEO_MIXER_PARAMETER_VIDEO_SURFACE_HEIGHT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"%s capabilities query failure: %s"</literal></expr></argument>,
<argument><expr><literal type="string">"video mixer surface height"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>||</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>&gt;</operator> <name>max</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"source video %s not supported"</literal></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_VDPAU_OUTPUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>fmtp</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>fmtp</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>xcb_pixmap_t</name></type> <name>pix</name> <init>= <expr><call><name>xcb_generate_id</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xcb_create_pixmap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>root_depth</name></name></expr></argument>, <argument><expr><name>pix</name></expr></argument>,
<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>=
<expr><name>XCB_CW_BACK_PIXMAP</name> <operator>|</operator> <name>XCB_CW_BACK_PIXEL</name> <operator>|</operator>
<name>XCB_CW_BORDER_PIXMAP</name> <operator>|</operator> <name>XCB_CW_BORDER_PIXEL</name> <operator>|</operator>
<name>XCB_CW_EVENT_MASK</name> <operator>|</operator> <name>XCB_CW_COLORMAP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>values</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>pix</name></expr>, <expr><name><name>screen</name><operator>-&gt;</operator><name>black_pixel</name></name></expr>, <expr><name>pix</name></expr>, <expr><name><name>screen</name><operator>-&gt;</operator><name>black_pixel</name></name></expr>,
<expr><name>XCB_EVENT_MASK_VISIBILITY_CHANGE</name></expr>, <expr><name><name>screen</name><operator>-&gt;</operator><name>default_colormap</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vout_display_place_t</name></type> <name>place</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_display_PlacePicture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>place</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_void_cookie_t</name></type> <name>c</name> <init>=
<expr><call><name>xcb_create_window_checked</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>root_depth</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>window</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>, <argument><expr><name><name>place</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>place</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>place</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>place</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XCB_WINDOW_CLASS_INPUT_OUTPUT</name></expr></argument>,
<argument><expr><name><name>screen</name><operator>-&gt;</operator><name>root_visual</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_xcb_error_Check</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"window creation failure"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"using X11 window 0x%08"</literal><name>PRIx32</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xcb_map_window</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>spu_chromas</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>subpicture_chromas</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>VLC_CODEC_ARGB</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>subpicture_chromas</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>VLC_CODEC_RGBA</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpBool</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_bitmap_surface_query_capabilities</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,
<argument><expr><name>VDP_RGBA_FORMAT_R8G8B8A8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"%s capabilities query failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"output surface"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>VDP_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spu_chromas</name> <operator>=</operator> <name>subpicture_chromas</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_presentation_queue_target_create_x11</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"%s creation failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"presentation queue target"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_presentation_queue_create</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>target</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"%s creation failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"presentation queue"</literal></expr></argument>,
<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vdp_presentation_queue_target_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>subpicture_chromas</name></name> <operator>=</operator> <name>spu_chromas</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fmtp</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>Queue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>Wait</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>xcb_disconnect</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vdp_presentation_queue_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vdp_presentation_queue_target_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_disconnect</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
