<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\hw\vdpau\vlc_vdpau.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_vdpau.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>visibility</name> <name>push</name><name>(</name><name>default</name><name>)</name></cpp:pragma>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>VdpGetErrorString</name> <modifier>*</modifier></type><name>get_error_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpGetProcAddress</name> <modifier>*</modifier></type><name>get_proc_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpGetApiVersion</name> <modifier>*</modifier></type><name>get_api_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpGetInformationString</name> <modifier>*</modifier></type><name>get_information_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpDeviceDestroy</name> <modifier>*</modifier></type><name>device_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpGenerateCSCMatrix</name> <modifier>*</modifier></type><name>generate_csc_matrix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoSurfaceQueryCapabilities</name> <modifier>*</modifier></type><name>video_surface_query_capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoSurfaceQueryGetPutBitsYCbCrCapabilities</name> <modifier>*</modifier></type><name>video_surface_query_get_put_bits_y_cb_cr_capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoSurfaceCreate</name> <modifier>*</modifier></type><name>video_surface_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoSurfaceDestroy</name> <modifier>*</modifier></type><name>video_surface_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoSurfaceGetParameters</name> <modifier>*</modifier></type><name>video_surface_get_parameters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoSurfaceGetBitsYCbCr</name> <modifier>*</modifier></type><name>video_surface_get_bits_y_cb_cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoSurfacePutBitsYCbCr</name> <modifier>*</modifier></type><name>video_surface_put_bits_y_cb_cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceQueryCapabilities</name> <modifier>*</modifier></type><name>output_surface_query_capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceQueryGetPutBitsNativeCapabilities</name> <modifier>*</modifier></type><name>output_surface_query_get_put_bits_native_capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceQueryPutBitsIndexedCapabilities</name> <modifier>*</modifier></type><name>output_surface_query_put_bits_indexed_capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceQueryPutBitsYCbCrCapabilities</name> <modifier>*</modifier></type><name>output_surface_query_put_bits_y_cb_cr_capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceCreate</name> <modifier>*</modifier></type><name>output_surface_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceDestroy</name> <modifier>*</modifier></type><name>output_surface_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceGetParameters</name> <modifier>*</modifier></type><name>output_surface_get_parameters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceGetBitsNative</name> <modifier>*</modifier></type><name>output_surface_get_bits_native</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfacePutBitsNative</name> <modifier>*</modifier></type><name>output_surface_put_bits_native</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfacePutBitsIndexed</name> <modifier>*</modifier></type><name>output_surface_put_bits_indexed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfacePutBitsYCbCr</name> <modifier>*</modifier></type><name>output_surface_put_bits_y_cb_cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpBitmapSurfaceQueryCapabilities</name> <modifier>*</modifier></type><name>bitmap_surface_query_capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpBitmapSurfaceCreate</name> <modifier>*</modifier></type><name>bitmap_surface_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpBitmapSurfaceDestroy</name> <modifier>*</modifier></type><name>bitmap_surface_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpBitmapSurfaceGetParameters</name> <modifier>*</modifier></type><name>bitmap_surface_get_parameters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpBitmapSurfacePutBitsNative</name> <modifier>*</modifier></type><name>bitmap_surface_put_bits_native</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy30</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy31</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceRenderOutputSurface</name> <modifier>*</modifier></type><name>output_surface_render_output_surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpOutputSurfaceRenderBitmapSurface</name> <modifier>*</modifier></type><name>output_surface_render_bitmap_surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>output_surface_render_video_surface_luma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpDecoderQueryCapabilities</name> <modifier>*</modifier></type><name>decoder_query_capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpDecoderCreate</name> <modifier>*</modifier></type><name>decoder_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpDecoderDestroy</name> <modifier>*</modifier></type><name>decoder_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpDecoderGetParameters</name> <modifier>*</modifier></type><name>decoder_get_parameters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpDecoderRender</name> <modifier>*</modifier></type><name>decoder_render</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerQueryFeatureSupport</name> <modifier>*</modifier></type><name>video_mixer_query_feature_support</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerQueryParameterSupport</name> <modifier>*</modifier></type><name>video_mixer_query_parameter_support</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerQueryAttributeSupport</name> <modifier>*</modifier></type><name>video_mixer_query_attribute_support</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerQueryParameterValueRange</name> <modifier>*</modifier></type><name>video_mixer_query_parameter_value_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerQueryAttributeValueRange</name> <modifier>*</modifier></type><name>video_mixer_query_attribute_value_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerCreate</name> <modifier>*</modifier></type><name>video_mixer_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerSetFeatureEnables</name> <modifier>*</modifier></type><name>video_mixer_set_feature_enables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerSetAttributeValues</name> <modifier>*</modifier></type><name>video_mixer_set_attribute_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerGetFeatureSupport</name> <modifier>*</modifier></type><name>video_mixer_get_feature_support</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerGetFeatureEnables</name> <modifier>*</modifier></type><name>video_mixer_get_feature_enables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerGetParameterValues</name> <modifier>*</modifier></type><name>video_mixer_get_parameter_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerGetAttributeValues</name> <modifier>*</modifier></type><name>video_mixer_get_attribute_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerDestroy</name> <modifier>*</modifier></type><name>video_mixer_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoMixerRender</name> <modifier>*</modifier></type><name>video_mixer_render</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPresentationQueueTargetDestroy</name> <modifier>*</modifier></type><name>presentation_queue_target_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPresentationQueueCreate</name> <modifier>*</modifier></type><name>presentation_queue_create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPresentationQueueDestroy</name> <modifier>*</modifier></type><name>presentation_queue_destroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPresentationQueueSetBackgroundColor</name> <modifier>*</modifier></type><name>presentation_queue_set_background_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPresentationQueueGetBackgroundColor</name> <modifier>*</modifier></type><name>presentation_queue_get_background_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy60</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy61</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPresentationQueueGetTime</name> <modifier>*</modifier></type><name>presentation_queue_get_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPresentationQueueDisplay</name> <modifier>*</modifier></type><name>presentation_queue_display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPresentationQueueBlockUntilSurfaceIdle</name> <modifier>*</modifier></type><name>presentation_queue_block_until_surface_idle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPresentationQueueQuerySurfaceStatus</name> <modifier>*</modifier></type><name>presentation_queue_query_surface_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPreemptionCallbackRegister</name> <modifier>*</modifier></type><name>preemption_callback_register</name></decl>;</decl_stmt>
}</block></struct></type> <name>vdp_vtable_t</name>;</typedef>

<struct>struct <name>vdp_s</name>
<block>{
<union>union
<block>{
<decl_stmt><decl><type><name>vdp_vtable_t</name></type> <name>vt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>funcs</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>vdp_vtable_t</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt> 
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_FUNC</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (unlikely(vdp-&gt;funcs[VDP_FUNC_ID_##id] == NULL)) return VDP_STATUS_NO_IMPLEMENTATION</cpp:value></cpp:define>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vdp_get_error_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpStatus</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>vdp</name><operator>-&gt;</operator><name>funcs</name><index>[<expr><name>VDP_FUNC_ID_GET_ERROR_STRING</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>VDP_STATUS_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Unknown error"</literal></expr> </then><else>: <expr><literal type="string">"No error"</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>get_error_string</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_get_proc_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>VdpFuncId</name></type> <name>func_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>func_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>GET_PROC_ADDRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>get_proc_address</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>func_id</name></expr></argument>, <argument><expr><name>func_ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_get_api_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>GET_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>get_api_version</name></name><argument_list>(<argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_get_information_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>GET_INFORMATION_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>get_information_string</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VdpStatus</name></type> <name>vdp_device_destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>DEVICE_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>device_destroy</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_generate_csc_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpProcamp</name> <modifier>*</modifier></type><name>procamp</name></decl></parameter>,
<parameter><decl><type><name>VdpColorStandard</name></type> <name>standard</name></decl></parameter>, <parameter><decl><type><name>VdpCSCMatrix</name> <modifier>*</modifier></type><name>csc_matrix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VdpProcamp</name></type> <name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>procamp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>*</operator><name>procamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>copy</name> <operator>=</operator> <operator>&amp;</operator><name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>GENERATE_CSC_MATRIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>generate_csc_matrix</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>standard</name></expr></argument>, <argument><expr><name>csc_matrix</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VdpStatus</name></type> <name>vdp_video_surface_query_capabilities</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>dev</name></decl></parameter>,
<parameter><decl><type><name>VdpChromaType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>mw</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>mh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_SURFACE_QUERY_CAPABILITIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_surface_query_capabilities</name></name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>, <argument><expr><name>mw</name></expr></argument>, <argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_surface_query_get_put_bits_y_cb_cr_capabilities</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VdpChromaType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VdpYCbCrFormat</name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_SURFACE_QUERY_GET_PUT_BITS_Y_CB_CR_CAPABILITIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_surface_query_get_put_bits_y_cb_cr_capabilities</name></name><argument_list>(
<argument><expr><name>device</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_surface_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>VdpChromaType</name></type> <name>chroma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>VdpVideoSurface</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_SURFACE_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_surface_create</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_surface_destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpVideoSurface</name></type> <name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_SURFACE_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_surface_destroy</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_surface_get_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VdpChromaType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_SURFACE_GET_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_surface_get_parameters</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_surface_get_bits_y_cb_cr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VdpYCbCrFormat</name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pitches</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_SURFACE_GET_BITS_Y_CB_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_surface_get_bits_y_cb_cr</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pitches</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_surface_put_bits_y_cb_cr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VdpYCbCrFormat</name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pitches</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_SURFACE_PUT_BITS_Y_CB_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_surface_put_bits_y_cb_cr</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pitches</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_query_capabilities</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VdpRGBAFormat</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>max_width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>max_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_QUERY_CAPABILITIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_query_capabilities</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>,
<argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>max_height</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_query_get_put_bits_native_capabilities</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VdpRGBAFormat</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_QUERY_GET_PUT_BITS_NATIVE_CAPABILITIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_query_get_put_bits_native_capabilities</name></name><argument_list>(
<argument><expr><name>device</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_query_put_bits_indexed_capabilities</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VdpRGBAFormat</name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><name>VdpIndexedFormat</name></type> <name>idxfmt</name></decl></parameter>, <parameter><decl><type><name>VdpColorTableFormat</name></type> <name>colfmt</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_QUERY_PUT_BITS_INDEXED_CAPABILITIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_query_put_bits_indexed_capabilities</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>idxfmt</name></expr></argument>, <argument><expr><name>colfmt</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_query_put_bits_y_cb_cr_capabilities</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>VdpRGBAFormat</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>VdpYCbCrFormat</name></type> <name>yccfmt</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_QUERY_PUT_BITS_Y_CB_CR_CAPABILITIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_query_put_bits_y_cb_cr_capabilities</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>yccfmt</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>VdpRGBAFormat</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>VdpOutputSurface</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_create</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_destroy</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_get_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VdpRGBAFormat</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_GET_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_get_parameters</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_get_bits_native</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pitches</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_GET_BITS_NATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_get_bits_native</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pitches</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_put_bits_native</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pitches</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_PUT_BITS_NATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_put_bits_native</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pitches</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_put_bits_indexed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VdpIndexedFormat</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>pitch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>VdpColorTableFormat</name></type> <name>tabfmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_PUT_BITS_INDEXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_put_bits_indexed</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tabfmt</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_put_bits_y_cb_cr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VdpYCbCrFormat</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>pitches</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpCSCMatrix</name> <modifier>*</modifier></type><name>mtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_PUT_BITS_Y_CB_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_put_bits_y_cb_cr</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
<argument><expr><name>pitches</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VdpStatus</name></type> <name>vdp_bitmap_surface_query_capabilities</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VdpRGBAFormat</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>BITMAP_SURFACE_QUERY_CAPABILITIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>bitmap_surface_query_capabilities</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_bitmap_surface_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>VdpRGBAFormat</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name></type> <name>fq</name></decl></parameter>,
<parameter><decl><type><name>VdpBitmapSurface</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>BITMAP_SURFACE_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>bitmap_surface_create</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>fq</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_bitmap_surface_destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpBitmapSurface</name></type> <name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>BITMAP_SURFACE_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>bitmap_surface_destroy</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_bitmap_surface_get_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpBitmapSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VdpRGBAFormat</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>fq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>BITMAP_SURFACE_GET_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>bitmap_surface_get_parameters</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_bitmap_surface_put_bits_native</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpBitmapSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>rect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>BITMAP_SURFACE_PUT_BITS_NATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>bitmap_surface_put_bits_native</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_render_output_surface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>dst_surface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>dst_rect</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>src_surface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>src_rect</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VdpColor</name> <modifier>*</modifier></type><name>colors</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VdpOutputSurfaceRenderBlendState</name> <modifier>*</modifier><specifier>const</specifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_RENDER_OUTPUT_SURFACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_render_output_surface</name></name><argument_list>(<argument><expr><name>dst_surface</name></expr></argument>, <argument><expr><name>dst_rect</name></expr></argument>,
<argument><expr><name>src_surface</name></expr></argument>, <argument><expr><name>src_rect</name></expr></argument>, <argument><expr><name>colors</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_output_surface_render_bitmap_surface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>dst_surface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>dst_rect</name></decl></parameter>,
<parameter><decl><type><name>VdpBitmapSurface</name></type> <name>src_surface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>src_rect</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VdpColor</name> <modifier>*</modifier></type><name>colors</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VdpOutputSurfaceRenderBlendState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>OUTPUT_SURFACE_RENDER_BITMAP_SURFACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>output_surface_render_bitmap_surface</name></name><argument_list>(<argument><expr><name>dst_surface</name></expr></argument>, <argument><expr><name>dst_rect</name></expr></argument>,
<argument><expr><name>src_surface</name></expr></argument>, <argument><expr><name>src_rect</name></expr></argument>, <argument><expr><name>colors</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VdpStatus</name></type> <name>vdp_decoder_query_capabilities</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>VdpDecoderProfile</name></type> <name>profile</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>DECODER_QUERY_CAPABILITIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>decoder_query_capabilities</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_decoder_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>VdpDecoderProfile</name></type> <name>profile</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>refs</name></decl></parameter>,
<parameter><decl><type><name>VdpDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>DECODER_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>decoder_create</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>, <argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_decoder_destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDecoder</name></type> <name>decoder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>DECODER_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>decoder_destroy</name></name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_decoder_get_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDecoder</name></type> <name>decoder</name></decl></parameter>,
<parameter><decl><type><name>VdpDecoderProfile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>DECODER_GET_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>decoder_get_parameters</name></name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_decoder_render</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDecoder</name></type> <name>decoder</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoSurface</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpPictureInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>bufv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpBitstreamBuffer</name> <modifier>*</modifier></type><name>bufc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>DECODER_RENDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>decoder_render</name></name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>bufv</name></expr></argument>, <argument><expr><name>bufc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_query_feature_support</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VdpVideoMixerFeature</name></type> <name>feature</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_QUERY_FEATURE_SUPPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_query_feature_support</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>feature</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_query_parameter_support</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VdpVideoMixerParameter</name></type> <name>parameter</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_QUERY_PARAMETER_SUPPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_query_parameter_support</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>parameter</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_query_attribute_support</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VdpVideoMixerAttribute</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_QUERY_ATTRIBUTE_SUPPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_query_attribute_support</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_query_parameter_value_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VdpVideoMixerParameter</name></type> <name>parameter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_QUERY_PARAMETER_VALUE_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_query_parameter_value_range</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>parameter</name></expr></argument>,
<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_query_attribute_value_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>VdpVideoMixerAttribute</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_QUERY_ATTRIBUTE_VALUE_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_query_attribute_value_range</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>attribute</name></expr></argument>,
<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>featc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpVideoMixerFeature</name> <modifier>*</modifier></type><name>featv</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>parmc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpVideoMixerParameter</name> <modifier>*</modifier></type><name>parmv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>parmvalv</name></decl></parameter>, <parameter><decl><type><name>VdpVideoMixer</name> <modifier>*</modifier></type><name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_create</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>featc</name></expr></argument>, <argument><expr><name>featv</name></expr></argument>, <argument><expr><name>parmc</name></expr></argument>, <argument><expr><name>parmv</name></expr></argument>,
<argument><expr><name>parmvalv</name></expr></argument>, <argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_set_feature_enables</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoMixer</name></type> <name>mixer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpVideoMixerFeature</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VdpBool</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_SET_FEATURE_ENABLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_set_feature_enables</name></name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_set_attribute_values</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoMixer</name></type> <name>mixer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VdpVideoMixerAttribute</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ids</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_SET_ATTRIBUTE_VALUES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_set_attribute_values</name></name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_get_feature_support</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoMixer</name></type> <name>mixer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpVideoMixerFeature</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>,
<parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_GET_FEATURE_SUPPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_get_feature_support</name></name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_get_feature_enables</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoMixer</name></type> <name>mixer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpVideoMixerFeature</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>,
<parameter><decl><type><name>VdpBool</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_GET_FEATURE_ENABLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_get_feature_enables</name></name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_get_parameter_values</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoMixer</name></type> <name>mixer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpVideoMixerParameter</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_GET_PARAMETER_VALUES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_get_parameter_values</name></name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_get_attribute_values</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoMixer</name></type> <name>mixer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpVideoMixerAttribute</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_GET_ATTRIBUTE_VALUES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_get_attribute_values</name></name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpVideoMixer</name></type> <name>mixer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_destroy</name></name><argument_list>(<argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_video_mixer_render</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpVideoMixer</name></type> <name>mixer</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>bgsurface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>bgrect</name></decl></parameter>,
<parameter><decl><type><name>VdpVideoMixerPictureStructure</name></type> <name>pic_struct</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>prev_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VdpVideoSurface</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>VdpVideoSurface</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>next_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VdpVideoSurface</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>src_rect</name></decl></parameter>,
<parameter><decl><type><name>VdpOutputSurface</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>dst_rect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpRect</name> <modifier>*</modifier></type><name>dst_v_rect</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>layerc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpLayer</name> <modifier>*</modifier></type><name>layerv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>VIDEO_MIXER_RENDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>video_mixer_render</name></name><argument_list>(<argument><expr><name>mixer</name></expr></argument>, <argument><expr><name>bgsurface</name></expr></argument>, <argument><expr><name>bgrect</name></expr></argument>, <argument><expr><name>pic_struct</name></expr></argument>,
<argument><expr><name>prev_count</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>next_count</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>src_rect</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_rect</name></expr></argument>,
<argument><expr><name>dst_v_rect</name></expr></argument>, <argument><expr><name>layerc</name></expr></argument>, <argument><expr><name>layerv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VdpStatus</name></type> <name>vdp_presentation_queue_target_destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpPresentationQueueTarget</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>PRESENTATION_QUEUE_TARGET_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>presentation_queue_target_destroy</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_presentation_queue_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>VdpPresentationQueueTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>VdpPresentationQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>PRESENTATION_QUEUE_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>presentation_queue_create</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_presentation_queue_destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpPresentationQueue</name></type> <name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>PRESENTATION_QUEUE_DESTROY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>presentation_queue_destroy</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_presentation_queue_set_background_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpPresentationQueue</name></type> <name>queue</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VdpColor</name></type> <name>bak</name> <init>= <expr><operator>*</operator><name>color</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>PRESENTATION_QUEUE_SET_BACKGROUND_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>presentation_queue_set_background_color</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bak</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_presentation_queue_get_background_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpPresentationQueue</name></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>VdpColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>PRESENTATION_QUEUE_GET_BACKGROUND_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>presentation_queue_get_background_color</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_presentation_queue_get_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpPresentationQueue</name></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>VdpTime</name> <modifier>*</modifier></type><name>current_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>PRESENTATION_QUEUE_GET_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>presentation_queue_get_time</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>current_time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_presentation_queue_display</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpPresentationQueue</name></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>VdpOutputSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>clip_width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>clip_height</name></decl></parameter>, <parameter><decl><type><name>VdpTime</name></type> <name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>PRESENTATION_QUEUE_DISPLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>presentation_queue_display</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>clip_width</name></expr></argument>,
<argument><expr><name>clip_height</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_presentation_queue_block_until_surface_idle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpPresentationQueue</name></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>VdpOutputSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VdpTime</name> <modifier>*</modifier></type><name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>PRESENTATION_QUEUE_BLOCK_UNTIL_SURFACE_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>presentation_queue_block_until_surface_idle</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>,
<argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_presentation_queue_query_surface_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpPresentationQueue</name></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>VdpOutputSurface</name></type> <name>surface</name></decl></parameter>,
<parameter><decl><type><name>VdpPresentationQueueStatus</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>VdpTime</name> <modifier>*</modifier></type><name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>PRESENTATION_QUEUE_QUERY_SURFACE_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>presentation_queue_query_surface_status</name></name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>,
<argument><expr><name>status</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VdpStatus</name></type> <name>vdp_preemption_callback_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>,
<parameter><decl><type><name>VdpPreemptionCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECK_FUNC</name><argument_list>(<argument><expr><name>PREEMPTION_CALLBACK_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>vdp</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>preemption_callback_register</name></name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vdpau/vdpau_x11.h&gt;</cpp:file></cpp:include>

<function><type><name>VdpStatus</name></type> <name>vdp_presentation_queue_target_create_x11</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,
<parameter><decl><type><name>VdpDevice</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>drawable</name></decl></parameter>, <parameter><decl><type><name>VdpPresentationQueueTarget</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name> <init>= <expr><call><name>vdp_get_proc_address</name><argument_list>(<argument><expr><name>vdp</name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><name>VDP_FUNC_ID_PRESENTATION_QUEUE_TARGET_CREATE_X11</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>VdpPresentationQueueTargetCreateX11</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>drawable</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vdp_create_x11</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>snum</name></decl></parameter>,
<parameter><decl><type><name>vdp_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>vdpp</name></decl></parameter>, <parameter><decl><type><name>VdpDevice</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>devp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>vdp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>vdp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VDP_STATUS_RESOURCES</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>vdpp</name> <operator>=</operator> <name>vdp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name> <init>= <expr><name>VDP_STATUS_NO_IMPLEMENTATION</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vdp</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"libvdpau.so.1"</literal></expr></argument>, <argument><expr><name>RTLD_LAZY</name><operator>|</operator><name>RTLD_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vdp</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VdpDeviceCreateX11</name> <modifier>*</modifier></type><name>create</name> <init>= <expr><call><name>dlsym</name><argument_list>(<argument><expr><name><name>vdp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"vdp_device_create_x11"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>create</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>VdpGetProcAddress</name> <modifier>*</modifier></type><name>gpa</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>create</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>snum</name></expr></argument>, <argument><expr><name>devp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gpa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>VdpFuncId</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>vdp</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>gpa</name><argument_list>(<argument><expr><operator>*</operator><name>devp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>vdp</name><operator>-&gt;</operator><name>funcs</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vdp</name><operator>-&gt;</operator><name>funcs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>VDP_STATUS_OK</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vdp_destroy_x11</name><argument_list>(<argument><expr><name>vdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vdp_destroy_x11</name><parameter_list>(<parameter><decl><type><name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>vdp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
