<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\hw\nvdec\nvdec_gl.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffnvcodec/dynlink_loader.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvdec_fmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_output/opengl/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_output/opengl/interop.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GLEW_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument><literal type="string">"NVDEC OpenGL surface converter"</literal></argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"glinterop"</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"nvdec"</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUcontext</name></type> <name>cuConverterCtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUgraphicsResource</name></type> <name><name>cu_res</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CUarray</name></type> <name><name>mappedArray</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>converter_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_CUDA</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CudaCheckErr(VLC_OBJECT(interop-&gt;gl), devsys-&gt;cudaFunctions, devsys-&gt;cudaFunctions-&gt;func(__VA_ARGS__), #func)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tc_nvdec_gl_allocate_texture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>converter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>device</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_device_nvdec_t</name> <modifier>*</modifier></type><name>devsys</name> <init>= <expr><call><name>GetNVDECOpaqueDevice</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuConverterCtx</name></name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuConverterCtx</name></name></expr> </then><else>: <expr><name><name>devsys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexImage2D</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>internal</name></expr></argument>,
<argument><expr><name><name>tex_width</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tex_height</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>,
<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetError</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>GL_NO_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"could not alloc PBO buffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuGraphicsGLRegisterImage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cu_res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name>CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuGraphicsMapResources</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cu_res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuGraphicsSubResourceGetMappedArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mappedArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cu_res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuGraphicsUnmapResources</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cu_res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tc_nvdec_gl_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name><name>textures</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>GLsizei</name> <specifier>const</specifier></type> <name><name>tex_widths</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <specifier>const</specifier></type> <name><name>tex_heights</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <specifier>const</specifier></type> <name><name>plane_offsets</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>plane_offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>textures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>converter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>device</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_device_nvdec_t</name> <modifier>*</modifier></type><name>devsys</name> <init>= <expr><call><name>GetNVDECOpaqueDevice</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pic_context_nvdec_t</name> <modifier>*</modifier></type><name>srcpic</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>pic_context_nvdec_t</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuConverterCtx</name></name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuConverterCtx</name></name></expr> </then><else>: <expr><name><name>devsys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>srcY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>CUDA_MEMCPY2D</name></type> <name>cu_cpy</name> <init>= <expr><block>{
<expr><operator>.</operator><name>srcMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_DEVICE</name></expr>,
<expr><operator>.</operator><name>srcDevice</name> <operator>=</operator> <name><name>srcpic</name><operator>-&gt;</operator><name>devicePtr</name></name></expr>,
<expr><operator>.</operator><name>srcPitch</name> <operator>=</operator> <name><name>srcpic</name><operator>-&gt;</operator><name>bufferPitch</name></name></expr>,
<expr><operator>.</operator><name>srcY</name> <operator>=</operator> <name>srcY</name></expr>,
<expr><operator>.</operator><name>dstMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_ARRAY</name></expr>,
<expr><operator>.</operator><name>dstArray</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>mappedArray</name><index>[<expr><name>i</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>WidthInBytes</name> <operator>=</operator> <name><name>tex_widths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>Height</name> <operator>=</operator> <name><name>tex_heights</name><index>[<expr><name>i</name></expr>]</index></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_NVDEC_OPAQUE</name> <operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_NVDEC_OPAQUE_444</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cu_cpy</name><operator>.</operator><name>WidthInBytes</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuMemcpy2DAsync</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu_cpy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>srcY</name> <operator>+=</operator> <name><name>srcpic</name><operator>-&gt;</operator><name>bufferHeight</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>converter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_nvdec_opaque</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><call><name>vlc_video_context_HoldDevice</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>device</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VLC_DECODER_DEVICE_NVDEC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>converter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cu_res</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cu_res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuConverterCtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>decoder_device_nvdec_t</name> <modifier>*</modifier></type><name>devsys</name> <init>= <expr><call><name>GetNVDECOpaqueDevice</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUdevice</name></type> <name>cuDecDevice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>device_count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuGLGetDevices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cuDecDevice</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CU_GL_DEVICE_LIST_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CUdevice</name></type> <name>cuConverterDevice</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><name><name>devsys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuCtxGetDevice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cuConverterDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cuConverterDevice</name> <operator>!=</operator> <name>cuDecDevice</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuCtxCreate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cuConverterCtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cuConverterDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>render_chroma</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_10B</name></expr>:</case> <expr_stmt><expr><name>render_chroma</name> <operator>=</operator> <name>VLC_CODEC_P010</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_16B</name></expr>:</case> <expr_stmt><expr><name>render_chroma</name> <operator>=</operator> <name>VLC_CODEC_P016</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_444</name></expr>:</case> <expr_stmt><expr><name>render_chroma</name> <operator>=</operator> <name>VLC_CODEC_I444</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_444_16B</name></expr>:</case> <expr_stmt><expr><name>render_chroma</name> <operator>=</operator> <name>VLC_CODEC_I444_16L</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE</name></expr>:</case>
<default>default:</default> <expr_stmt><expr><name>render_chroma</name> <operator>=</operator> <name>VLC_CODEC_NV12</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>render_chroma</name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop_ops</name></name></type> <name>ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>allocate_textures</name> <operator>=</operator> <name>tc_nvdec_gl_allocate_texture</name></expr>,
<expr><operator>.</operator><name>update_textures</name> <operator>=</operator> <name>tc_nvdec_gl_update</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
