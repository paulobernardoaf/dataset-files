<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\hw\mmal\mmal_cma.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_MMAL_MMAL_CMA_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MMAL_MMAL_CMA_H_</name></cpp:macro></cpp:define>


<struct_decl>struct <name>cma_pool_fixed_s</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>cma_pool_fixed_s</name></name></type> <name>cma_pool_fixed_t</name>;</typedef>

<struct_decl>struct <name>cma_buf_s</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>cma_buf_s</name></name></type> <name>cma_buf_t</name>;</typedef>

<function_decl><type><name>size_t</name></type> <name>cma_buf_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>cma_buf_vc_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cma_buf_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>cma_buf_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cma_buf_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>cma_buf_unref</name><parameter_list>(<parameter><decl><type><name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>cma_buf_t</name> <modifier>*</modifier></type> <name>cma_buf_ref</name><parameter_list>(<parameter><decl><type><name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>cma_buf_pool_s</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>cma_buf_pool_s</name></name></type> <name>cma_buf_pool_t</name>;</typedef>

<function_decl><type><name>cma_buf_t</name> <modifier>*</modifier></type> <name>cma_buf_pool_alloc_buf</name><parameter_list>(<parameter><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cma_buf_pool_delete</name><parameter_list>(<parameter><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier></type> <name>cma_buf_pool_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pool_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>flight_size</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_cma</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
