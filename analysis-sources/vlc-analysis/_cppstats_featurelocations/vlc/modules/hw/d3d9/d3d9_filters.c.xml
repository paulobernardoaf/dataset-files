<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\hw\d3d9\d3d9_filters.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d9.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxva2api.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/d3d9_fmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d9_filters.h"</cpp:file></cpp:include>

<struct>struct <name>filter_level</name>
<block>{
<decl_stmt><decl><type><name>atomic_long</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>default_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2_ValueRange</name></type> <name>Range</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hdecoder_dll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirectXVideoProcessor</name> <modifier>*</modifier></type><name>processor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>hw_surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_level</name></name></type> <name>Brightness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_level</name></name></type> <name>Contrast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_level</name></name></type> <name>Hue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>filter_level</name></name></type> <name>Saturation</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THRES_TEXT</name></cpp:macro> <cpp:value>N_("Brightness threshold")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THRES_LONGTEXT</name></cpp:macro> <cpp:value>N_("When this mode is enabled, pixels will be " "shown as black or white. The threshold value will be the brightness " "defined below." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_TEXT</name></cpp:macro> <cpp:value>N_("Image contrast (0-2)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the image contrast, between 0 and 2. Defaults to 1.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUE_TEXT</name></cpp:macro> <cpp:value>N_("Image hue (0-360)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the image hue, between 0 and 360. Defaults to 0.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAT_TEXT</name></cpp:macro> <cpp:value>N_("Image saturation (0-3)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the image saturation, between 0 and 3. Defaults to 1.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUM_TEXT</name></cpp:macro> <cpp:value>N_("Image brightness (0-2)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUM_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the image brightness, between 0 and 2. Defaults to 1.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAMMA_TEXT</name></cpp:macro> <cpp:value>N_("Image gamma (0-10)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAMMA_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the image gamma, between 0.01 and 10. Defaults to 1.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"contrast"</literal></expr>, <expr><literal type="string">"brightness"</literal></expr>, <expr><literal type="string">"hue"</literal></expr>, <expr><literal type="string">"saturation"</literal></expr>, <expr><literal type="string">"gamma"</literal></expr>,
<expr><literal type="string">"brightness-threshold"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillSample</name><parameter_list>( <parameter><decl><type><name>DXVA2_VideoSample</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>p_area</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_sys_src</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>SrcSurface</name></name> <operator>=</operator> <name><name>p_sys_src</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>SampleFormat</name><operator>.</operator><name>SampleFormat</name></name> <operator>=</operator> <name>DXVA2_SampleProgressiveFrame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>Start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>End</name></name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>SampleData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>DstRect</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>SrcRect</name></name> <operator>=</operator> <operator>*</operator><name>p_area</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>PlanarAlpha</name></name> <operator>=</operator> <call><name>DXVA2_Fixed32OpaqueAlpha</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>AllocPicture</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d3d9_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pic_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic_ctx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>d3d9_decoder</name> <init>= <expr><call><name>GetD3D9OpaqueContext</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>d3d9_video_context_t</name> <modifier>*</modifier></type><name>vctx_sys</name> <init>= <expr><call><name>GetD3D9ContextPrivate</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDirect3DDevice9_CreateOffscreenPlainSurface</name><argument_list>(<argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><name><name>vctx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,
<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name><operator>.</operator><name>surface</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AcquireD3D9PictureSys</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>(<argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>picture_context_t</name><operator>)</operator> <block>{
<expr><name>d3d9_pic_context_destroy</name></expr>, <expr><name>d3d9_pic_context_copy</name></expr>,
<expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<return>return <expr><name>pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_src_sys</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name> <init>= <expr><call><name>AllocPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_out_sys</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>p_outpic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out_sys</name> <operator>||</operator> <operator>!</operator><name><name>p_out_sys</name><operator>-&gt;</operator><name>surface</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>area</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DSURFACE_DESC</name></type> <name>srcDesc</name></decl>, <decl><type ref="prev"/><name>dstDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DSurface9_GetDesc</name><argument_list>( <argument><expr><name><name>p_src_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcDesc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DSurface9_GetDesc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstDesc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>area</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>area</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>srcDesc</name><operator>.</operator><name>Height</name></name></expr></argument>, <argument><expr><name><name>dstDesc</name><operator>.</operator><name>Height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>area</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>srcDesc</name><operator>.</operator><name>Width</name></name></expr></argument>, <argument><expr><name><name>dstDesc</name><operator>.</operator><name>Width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVA2_VideoProcessBltParams</name></type> <name>params</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2_VideoSample</name></type> <name>sample</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FillSample</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sample</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>ProcAmpValues</name><operator>.</operator><name>Brightness</name><operator>.</operator><name>ll</name></name> <operator>=</operator> <call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>Brightness</name><operator>.</operator><name>level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>ProcAmpValues</name><operator>.</operator><name>Contrast</name><operator>.</operator><name>ll</name></name> <operator>=</operator> <call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>Contrast</name><operator>.</operator><name>level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>ProcAmpValues</name><operator>.</operator><name>Hue</name><operator>.</operator><name>ll</name></name> <operator>=</operator> <call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>Hue</name><operator>.</operator><name>level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>ProcAmpValues</name><operator>.</operator><name>Saturation</name><operator>.</operator><name>ll</name></name> <operator>=</operator> <call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>Saturation</name><operator>.</operator><name>level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>TargetFrame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>TargetRect</name></name> <operator>=</operator> <name>area</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>DestData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>Alpha</name></name> <operator>=</operator> <call><name>DXVA2_Fixed32OpaqueAlpha</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>DestFormat</name><operator>.</operator><name>SampleFormat</name></name> <operator>=</operator> <name>DXVA2_SampleProgressiveFrame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>BackgroundColor</name><operator>.</operator><name>Alpha</name></name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>d3d9_decoder</name> <init>= <expr><call><name>GetD3D9OpaqueContext</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessor_VideoProcessBlt</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>processor</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sample</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_StretchRect</name><argument_list>( <argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>p_out_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>D3DTEXF_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_outpic</name></expr>;</return>
<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LONG</name></type> <name>StoreLevel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filter_level</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DXVA2_ValueRange</name> <modifier>*</modifier></type><name>Range</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LONG</name></type> <name>level</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name><name>range</name><operator>-&gt;</operator><name>default_val</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name><name>Range</name><operator>-&gt;</operator><name>MaxValue</name><operator>.</operator><name>ll</name></name> <operator>-</operator> <name><name>Range</name><operator>-&gt;</operator><name>DefaultValue</name><operator>.</operator><name>ll</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>val</name> <operator>-</operator> <name><name>range</name><operator>-&gt;</operator><name>default_val</name></name><operator>)</operator> <operator>/</operator>
<operator>(</operator><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <name><name>range</name><operator>-&gt;</operator><name>default_val</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name><name>range</name><operator>-&gt;</operator><name>default_val</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name><name>Range</name><operator>-&gt;</operator><name>MinValue</name><operator>.</operator><name>ll</name></name> <operator>-</operator> <name><name>Range</name><operator>-&gt;</operator><name>DefaultValue</name><operator>.</operator><name>ll</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>val</name> <operator>-</operator> <name><name>range</name><operator>-&gt;</operator><name>default_val</name></name><operator>)</operator> <operator>/</operator>
<operator>(</operator><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>-</operator> <name><name>range</name><operator>-&gt;</operator><name>default_val</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>level</name> <operator>+</operator> <name><name>Range</name><operator>-&gt;</operator><name>DefaultValue</name><operator>.</operator><name>ll</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetLevel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter_level</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><call><name>StoreLevel</name><argument_list>( <argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>Range</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitLevel</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>filter_level</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>def</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>module_config_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>config_FindConfig</name><argument_list>(<argument><expr><name>p_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>min</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>max</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>default_val</name></name> <operator>=</operator> <name>def</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name>var_CreateGetFloatCommand</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>p_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><call><name>StoreLevel</name><argument_list>( <argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>Range</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AdjustCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"contrast"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetLevel</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>Contrast</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"brightness"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetLevel</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>Brightness</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"hue"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetLevel</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>Hue</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><literal type="string">"saturation"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetLevel</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>Saturation</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>D3D9OpenAdjust</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hdecoder_dll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name> <modifier>*</modifier></type><name>processorGUIDs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name> <modifier>*</modifier></type><name>processorGUID</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirectXVideoProcessorService</name> <modifier>*</modifier></type><name>processor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE</name>
<operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>GetD3D9ContextPrivate</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>video_format_IsSimilar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hdecoder_dll</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"DXVA2.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdecoder_dll</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>d3d9_video_context_t</name> <modifier>*</modifier></type><name>vtcx_sys</name> <init>= <expr><call><name>GetD3D9ContextPrivate</name><argument_list>( <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>format</name> <init>= <expr><name><name>vtcx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>CreateVideoService</name>)<parameter_list>(<parameter><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppService</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>CreateVideoService</name> <operator>=</operator>
<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hdecoder_dll</name></expr></argument>, <argument><expr><literal type="string">"DXVA2CreateVideoService"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>CreateVideoService</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Can't create video service"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>d3d9_decoder</name> <init>= <expr><call><name>GetD3D9OpaqueContext</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CreateVideoService</name><argument_list>( <argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDirectXVideoProcessorService</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the video processor. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DXVA2_VideoDesc</name></type> <name>dsc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dsc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>SampleWidth</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>SampleHeight</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>InputSampleFreq</name><operator>.</operator><name>Numerator</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>InputSampleFreq</name><operator>.</operator><name>Denominator</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>InputSampleFreq</name><operator>.</operator><name>Numerator</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>InputSampleFreq</name><operator>.</operator><name>Denominator</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>OutputFrameFreq</name></name> <operator>=</operator> <name><name>dsc</name><operator>.</operator><name>InputSampleFreq</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVA2_ExtendedFormat</name> <modifier>*</modifier></type><name>pFormat</name> <init>= <expr><operator>&amp;</operator><name><name>dsc</name><operator>.</operator><name>SampleFormat</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pFormat</name><operator>-&gt;</operator><name>SampleFormat</name></name> <operator>=</operator> <name>DXVA2_SampleProgressiveFrame</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetVideoProcessorDeviceGuids</name><argument_list>( <argument><expr><name>processor</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>processorGUIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to get processor GUIDs. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>UINT</name></type> <name>neededCaps</name> <init>= <expr><name>DXVA2_ProcAmp_Brightness</name> <operator>|</operator>
<name>DXVA2_ProcAmp_Contrast</name> <operator>|</operator>
<name>DXVA2_ProcAmp_Hue</name> <operator>|</operator>
<name>DXVA2_ProcAmp_Saturation</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2_VideoProcessorCaps</name></type> <name>caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>best_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>UINT</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetVideoProcessorCaps</name><argument_list>( <argument><expr><name>processor</name></expr></argument>,
<argument><expr><name>processorGUIDs</name><operator>+</operator><name>i</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,
<argument><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>caps</name><operator>.</operator><name>ProcAmpControlCaps</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>score</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>caps</name><operator>.</operator><name>ProcAmpControlCaps</name></name> <operator>&amp;</operator> <name>neededCaps</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>best_score</name> <operator>&lt;</operator> <name>score</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>processorGUID</name> <operator>=</operator> <name>processorGUIDs</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>processorGUID</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Could not find a filter to output the required format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetProcAmpRange</name><argument_list>( <argument><expr><name>processor</name></expr></argument>, <argument><expr><name>processorGUID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,
<argument><expr><name>format</name></expr></argument>, <argument><expr><name>DXVA2_ProcAmp_Brightness</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>Brightness</name><operator>.</operator><name>Range</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to get the brightness range. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetProcAmpRange</name><argument_list>( <argument><expr><name>processor</name></expr></argument>, <argument><expr><name>processorGUID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,
<argument><expr><name>format</name></expr></argument>, <argument><expr><name>DXVA2_ProcAmp_Contrast</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>Contrast</name><operator>.</operator><name>Range</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to get the contrast range. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetProcAmpRange</name><argument_list>( <argument><expr><name>processor</name></expr></argument>, <argument><expr><name>processorGUID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,
<argument><expr><name>format</name></expr></argument>, <argument><expr><name>DXVA2_ProcAmp_Hue</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>Hue</name><operator>.</operator><name>Range</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to get the hue range. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetProcAmpRange</name><argument_list>( <argument><expr><name>processor</name></expr></argument>, <argument><expr><name>processorGUID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,
<argument><expr><name>format</name></expr></argument>, <argument><expr><name>DXVA2_ProcAmp_Saturation</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>Saturation</name><operator>.</operator><name>Range</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to get the saturation range. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitLevel</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>Contrast</name></name></expr></argument>, <argument><expr><literal type="string">"contrast"</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitLevel</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>Brightness</name></name></expr></argument>, <argument><expr><literal type="string">"brightness"</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitLevel</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>Hue</name></name></expr></argument>, <argument><expr><literal type="string">"hue"</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitLevel</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>Saturation</name></name></expr></argument>, <argument><expr><literal type="string">"saturation"</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"contrast"</literal></expr></argument>, <argument><expr><name>AdjustCallback</name></expr></argument>, <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"brightness"</literal></expr></argument>, <argument><expr><name>AdjustCallback</name></expr></argument>, <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"hue"</literal></expr></argument>, <argument><expr><name>AdjustCallback</name></expr></argument>, <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"saturation"</literal></expr></argument>, <argument><expr><name>AdjustCallback</name></expr></argument>, <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"gamma"</literal></expr></argument>, <argument><expr><name>AdjustCallback</name></expr></argument>, <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"brightness-threshold"</literal></expr></argument>,
<argument><expr><name>AdjustCallback</name></expr></argument>, <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_CreateVideoProcessor</name><argument_list>( <argument><expr><name>processor</name></expr></argument>,
<argument><expr><name>processorGUID</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,
<argument><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>processor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the video processor. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_CreateSurface</name><argument_list>( <argument><expr><name>processor</name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>format</name></expr></argument>,
<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>DXVA2_VideoProcessorRenderTarget</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the hardware surface. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>processorGUIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirectXVideoProcessorService_Release</name><argument_list>(<argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hdecoder_dll</name></name> <operator>=</operator> <name>hdecoder_dll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>=</operator> <call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>processorGUIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sys</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>processor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirectXVideoProcessor_Release</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>processor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirectXVideoProcessorService_Release</name><argument_list>(<argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hdecoder_dll</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hdecoder_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>D3D9CloseAdjust</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirectXVideoProcessor_Release</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdecoder_dll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Direct3D9 adjust filter"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VFILTER</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>D3D9OpenAdjust</argument>, <argument>D3D9CloseAdjust</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"adjust"</literal></argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"contrast"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>,
<argument>CONT_TEXT</argument>, <argument>CONT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"brightness"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>,
<argument>LUM_TEXT</argument>, <argument>LUM_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"hue"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">180.</literal></argument>, <argument>+<literal type="number">180.</literal></argument>,
<argument>HUE_TEXT</argument>, <argument>HUE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"saturation"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">3.0</literal></argument>,
<argument>SAT_TEXT</argument>, <argument>SAT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"gamma"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">10.0</literal></argument>,
<argument>GAMMA_TEXT</argument>, <argument>GAMMA_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"brightness-threshold"</literal></argument>, <argument>false</argument>,
<argument>THRES_TEXT</argument>, <argument>THRES_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Direct3D9 deinterlace filter"</literal>)</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>D3D9OpenDeinterlace</argument>, <argument>D3D9CloseDeinterlace</argument>)</argument_list></macro>
<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"deinterlace"</literal></argument>)</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>D3D9OpenConverter</argument>, <argument>D3D9CloseConverter</argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>D3D9OpenCPUConverter</argument>, <argument>D3D9CloseCPUConverter</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Direct3D9"</literal>)</argument>)</argument_list></macro>
<macro><name>set_callback_dec_device</name><argument_list>( <argument>D3D9OpenDecoderDevice</argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"dxva2"</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
