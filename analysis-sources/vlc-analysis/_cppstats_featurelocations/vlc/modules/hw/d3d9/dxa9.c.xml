<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\hw\d3d9\dxa9.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d9_filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/copy.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d9.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/d3d9_fmt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>copy_cache_t</name></type> <name>cache</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>staging</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>GetLock</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>d3d</name></decl></parameter>,
<parameter><decl><type><name>D3DLOCKED_RECT</name> <modifier>*</modifier></type><name>p_lock</name></decl></parameter>, <parameter><decl><type><name>D3DSURFACE_DESC</name> <modifier>*</modifier></type><name>p_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>( <argument><expr><call><name>IDirect3DSurface9_GetDesc</name><argument_list>(<argument><expr><name>d3d</name></expr></argument>, <argument><expr><name>p_desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirect3DSurface9_LockRect</name><argument_list>(<argument><expr><name>d3d</name></expr></argument>, <argument><expr><name>p_lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D3DLOCK_READONLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to lock surface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DXA9_YV12</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>copy_cache_t</name> <modifier>*</modifier></type><name>p_copy_cache</name> <init>= <expr><operator>(</operator><name>copy_cache_t</name><operator>*</operator><operator>)</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DSURFACE_DESC</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DLOCKED_RECT</name></type> <name>lock</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetLock</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I420</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_SwapUV</name><argument_list>( <argument><expr><name>dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>imc3</name> <init>= <expr><name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chroma_pitch</name> <init>= <expr><ternary><condition><expr><name>imc3</name></expr> ?</condition><then> <expr><name><name>lock</name><operator>.</operator><name>Pitch</name></name></expr> </then><else>: <expr><operator>(</operator><name><name>lock</name><operator>.</operator><name>Pitch</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>pitch</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>lock</name><operator>.</operator><name>Pitch</name></name></expr>,
<expr><name>chroma_pitch</name></expr>,
<expr><name>chroma_pitch</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>lock</name><operator>.</operator><name>pBits</name></name></expr>,
<expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>lock</name><operator>.</operator><name>pBits</name></name> <operator>+</operator> <name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>desc</name><operator>.</operator><name>Height</name></name></expr>,
<expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>lock</name><operator>.</operator><name>pBits</name></name> <operator>+</operator> <name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>desc</name><operator>.</operator><name>Height</name></name>
<operator>+</operator> <name><name>pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>desc</name><operator>.</operator><name>Height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>imc3</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>V</name> <init>= <expr><name><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>V</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Copy420_P_to_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name></expr></argument>, <argument><expr><name>p_copy_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I420</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_SwapUV</name><argument_list>( <argument><expr><name>dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>lock</name><operator>.</operator><name>pBits</name></name></expr>,
<expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>lock</name><operator>.</operator><name>pBits</name></name> <operator>+</operator> <name><name>lock</name><operator>.</operator><name>Pitch</name></name> <operator>*</operator> <name><name>desc</name><operator>.</operator><name>Height</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>pitch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>lock</name><operator>.</operator><name>Pitch</name></name></expr>,
<expr><name><name>lock</name><operator>.</operator><name>Pitch</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Copy420_SP_to_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,
<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>Height</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p_copy_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Copy420_16_SP_to_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,
<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>Height</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>p_copy_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_I420</name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_I420_10L</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_SwapUV</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported DXA9 conversion from 0x%08X to YV12"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>Format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>IDirect3DSurface9_UnlockRect</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DXA9_NV12</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>copy_cache_t</name> <modifier>*</modifier></type><name>p_copy_cache</name> <init>= <expr><operator>(</operator><name>copy_cache_t</name><operator>*</operator><operator>)</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DSURFACE_DESC</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DLOCKED_RECT</name></type> <name>lock</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetLock</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>lock</name><operator>.</operator><name>pBits</name></name></expr>,
<expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>lock</name><operator>.</operator><name>pBits</name></name> <operator>+</operator> <name><name>lock</name><operator>.</operator><name>Pitch</name></name> <operator>*</operator> <name><name>desc</name><operator>.</operator><name>Height</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>pitch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>lock</name><operator>.</operator><name>Pitch</name></name></expr>,
<expr><name><name>lock</name><operator>.</operator><name>Pitch</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Copy420_SP_to_SP</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,
<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>Height</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p_copy_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported DXA9 conversion from 0x%08X to NV12"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>Format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>IDirect3DSurface9_UnlockRect</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeleteFilter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>NewBuffer</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_parent</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_parent</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>staging</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>HoldD3D9DecoderDevice</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_this</name> <init>= <expr><name>sys</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>filter_HoldDecoderDevice</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>CreateFilter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>dst_chroma</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_filter</name> <operator>=</operator> <call><name>vlc_object_create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_filter</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>filter_video_callbacks</name></name></type> <name>cbs</name> <init>= <expr><block>{ <expr><name>NewBuffer</name></expr>, <expr><name>HoldD3D9DecoderDevice</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>video</name></name> <operator>=</operator> <operator>&amp;</operator><name>cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>sys</name></name> <operator>=</operator> <name>p_this</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_InitFromVideo</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_InitFromVideo</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>dst_chroma</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"video converter"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"no video converter found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteFilter</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>YV12_D3D9</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_dst_sys</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>D3DLOCKED_RECT</name></type> <name>d3drect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDirect3DSurface9_LockRect</name><argument_list>(<argument><expr><name><name>p_dst_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3drect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>dst_pic_ctx</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>picture_UpdatePlanes</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>d3drect</name><operator>.</operator><name>pBits</name></name></expr></argument>, <argument><expr><name><name>d3drect</name><operator>.</operator><name>Pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>dst_pic_ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_UnlockRect</name><argument_list>(<argument><expr><name><name>p_dst_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_staging_sys</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>staging</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DLOCKED_RECT</name></type> <name>d3drect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDirect3DSurface9_LockRect</name><argument_list>(<argument><expr><name><name>p_staging_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3drect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>picture_UpdatePlanes</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>staging</name></name></expr></argument>, <argument><expr><name><name>d3drect</name><operator>.</operator><name>pBits</name></name></expr></argument>, <argument><expr><name><name>d3drect</name><operator>.</operator><name>Pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>staging_pic_ctx</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>staging</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>staging</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>picture_Hold</name><argument_list>( <argument><expr><name>src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>staging</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>staging_pic_ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_UnlockRect</name><argument_list>(<argument><expr><name><name>p_staging_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>d3d9_decoder</name> <init>= <expr><call><name>GetD3D9OpaqueContext</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>visibleSource</name> <init>= <expr><block>{
<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_width</name></name></expr>, <expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>IDirect3DDevice9_StretchRect</name><argument_list>( <argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>,
<argument><expr><name><name>p_staging_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visibleSource</name></expr></argument>,
<argument><expr><name><name>p_dst_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visibleSource</name></expr></argument>,
<argument><expr><name>D3DTEXF_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>AllocateCPUtoGPUTexture</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>texture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_staging</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>devsys</name> <init>= <expr><call><name>GetD3D9OpaqueContext</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>D3DFORMAT</name></type> <name><name>outputFormats8</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>D3DFMT_UNKNOWN</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>D3DFORMAT</name></type> <name><name>outputFormats10</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>D3DFMT_UNKNOWN</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>format</name> <init>= <expr><name>D3DFMT_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>D3DFORMAT</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition> <block>{<block_content>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name>outputFormats8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_I420_10L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_P010</name></expr>:</case>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name>outputFormats10</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<while>while <condition>(<expr><operator>*</operator><name>list</name> <operator>!=</operator> <name>D3DFMT_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDirect3DDevice9_CreateOffscreenPlainSurface</name><argument_list>(<argument><expr><name><name>devsys</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><operator>*</operator><name>list</name></expr></argument>,
<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>texture</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"using pixel format %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>D3DFMT_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to find a usable pixel format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d9_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pic_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic_ctx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>picture_context_t</name><operator>)</operator> <block>{
<expr><name>d3d9_pic_context_destroy</name></expr>, <expr><name>d3d9_pic_context_copy</name></expr>,
<expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt_staging</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_staging</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><call><name>picture_NewFromFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt_staging</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to map create the temporary picture."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>picture_Setup</name><argument_list>(<argument><expr><name>p_dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <name>texture</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<return>return <expr><name>p_dst</name></expr>;</return>

<label><name>done</name>:</label>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>VIDEO_FILTER_WRAPPER</name> <argument_list>(<argument>DXA9_YV12</argument>)</argument_list></macro>
<macro><name>VIDEO_FILTER_WRAPPER</name> <argument_list>(<argument>DXA9_NV12</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>YV12_D3D9_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name> <init>= <expr><call><name>AllocateCPUtoGPUTexture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_outpic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>YV12_D3D9</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_outpic</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>D3D9OpenConverter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE</name> <operator>&amp;&amp;</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>GetD3D9ContextPrivate</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name>
<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pixel_bytes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition> <block>{<block_content>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>DXA9_YV12_Filter</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_I420_10L</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>DXA9_YV12_Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel_bytes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_NV12</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>DXA9_NV12_Filter</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_P010</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>DXA9_NV12_Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel_bytes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CopyInitCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name>pixel_bytes</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>D3D9OpenCPUConverter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE</name>
<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name>
<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition> <block>{<block_content>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_I420_10L</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_P010</name></expr>:</case>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>YV12_D3D9_Filter</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name> <init>= <expr><call><name>filter_HoldDecoderDeviceType</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>VLC_DECODER_DEVICE_DXVA2</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dec_device</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Missing decoder device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>devsys</name> <init>= <expr><call><name>GetD3D9OpaqueDevice</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>devsys</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Incompatible decoder device %d"</literal></expr></argument>, <argument><expr><name><name>dec_device</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>=</operator> <call><name>vlc_video_context_Create</name><argument_list>( <argument><expr><name>dec_device</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_DXVA2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d3d9_video_context_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>d3d9_vctx_ops</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the video context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <call><name>AllocateCPUtoGPUTexture</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>d3d9_video_context_t</name> <modifier>*</modifier></type><name>vctx_sys</name> <init>= <expr><call><name>GetD3D9ContextPrivate</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vctx_sys</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <call><name>CreateFilter</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>staging</name></name> <operator>=</operator> <name>p_dst</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>D3D9CloseConverter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CopyCleanCache</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cache</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>D3D9CloseCPUConverter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DeleteFilter</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>staging</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>staging</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
