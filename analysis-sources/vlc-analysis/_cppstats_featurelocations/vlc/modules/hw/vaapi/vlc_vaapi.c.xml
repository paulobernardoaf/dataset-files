<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\hw\vaapi\vlc_vaapi.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_vaapi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fourcc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture_pool.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>vlc_chroma_to_vaapi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_vlc_chroma</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>va_rt_format</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>va_fourcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>i_vlc_chroma</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_VAAPI_420</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>va_rt_format</name> <operator>=</operator> <name>VA_RT_FORMAT_YUV420</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>va_fourcc</name> <operator>=</operator> <name>VA_FOURCC_NV12</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_VAAPI_420_10BPP</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>va_rt_format</name> <operator>=</operator> <name>VA_RT_FORMAT_YUV420_10BPP</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>va_fourcc</name> <operator>=</operator> <name>VA_FOURCC_P010</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>VAContextID</name></type>
<name>vlc_vaapi_CreateContext</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VAConfigID</name></type> <name>conf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pic_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pic_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><name>VASurfaceID</name> <modifier>*</modifier></type><name>render_targets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_render_targets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAContextID</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaCreateContext</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>pic_w</name></expr></argument>, <argument><expr><name>pic_h</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>,
<argument><expr><name>render_targets</name></expr></argument>, <argument><expr><name>num_render_targets</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VA_INVALID_ID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VABufferID</name></type>
<name>vlc_vaapi_CreateBuffer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VAContextID</name></type> <name>ctx</name></decl></parameter>,
<parameter><decl><type><name>VABufferType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_elements</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VABufferID</name></type> <name>buf_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaCreateBuffer</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>, <argument><expr><name>num_elements</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf_id</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VA_INVALID_ID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_DeriveImage</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VASurfaceID</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>VAImage</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaDeriveImage</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_CreateImage</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VAImageFormat</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>VAImage</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaCreateImage</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_DestroyConfig</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VAConfigID</name></type> <name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaDestroyConfig</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_DestroyContext</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VAContextID</name></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaDestroyContext</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_DestroyBuffer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VABufferID</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaDestroyBuffer</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_DestroyImage</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VAImageID</name></type> <name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaDestroyImage</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>vlc_vaapi_MapBuffer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>,
<parameter><decl><type><name>VABufferID</name></type> <name>buf_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaMapBuffer</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_UnmapBuffer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VABufferID</name></type> <name>buf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaUnmapBuffer</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_AcquireBufferHandle</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VABufferID</name></type> <name>buf_id</name></decl></parameter>,
<parameter><decl><type><name>VABufferInfo</name> <modifier>*</modifier></type><name>buf_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaAcquireBufferHandle</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>buf_id</name></expr></argument>, <argument><expr><name>buf_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_ReleaseBufferHandle</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VABufferID</name></type> <name>buf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaReleaseBufferHandle</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>buf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>vlc_vaapi_IsVideoProcFilterAvailable</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>,
<parameter><decl><type><name>VAContextID</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>VAProcFilterType</name></type> <name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAProcFilterType</name></type> <name><name>filters</name><index>[<expr><name>VAProcFilterCount</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_filters</name> <init>= <expr><name>VAProcFilterCount</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaQueryVideoProcFilters</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_filters</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_QueryVideoProcFilterCaps</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>,
<parameter><decl><type><name>VAContextID</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>VAProcFilterType</name></type> <name>filter</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>p_num_caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaQueryVideoProcFilterCaps</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>caps</name></expr></argument>, <argument><expr><name>p_num_caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_QueryVideoProcPipelineCaps</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>,
<parameter><decl><type><name>VAContextID</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>VABufferID</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_filters</name></decl></parameter>,
<parameter><decl><type><name>VAProcPipelineCaps</name> <modifier>*</modifier></type><name>pipeline_caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaQueryVideoProcPipelineCaps</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>num_filters</name></expr></argument>, <argument><expr><name>pipeline_caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>vlc_vaapi_BeginPicture</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>,
<parameter><decl><type><name>VAContextID</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>VASurfaceID</name></type> <name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaBeginPicture</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_RenderPicture</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VAContextID</name></type> <name>ctx</name></decl></parameter>,
<parameter><decl><type><name>VABufferID</name> <modifier>*</modifier></type><name>buffers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_buffers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaRenderPicture</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buffers</name></expr></argument>, <argument><expr><name>num_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vlc_vaapi_EndPicture</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VAContextID</name></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaEndPicture</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type>
<name>IsVaProfileSupported</name><parameter_list>(<parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VAProfile</name></type> <name>i_profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_profile</name> <operator>==</operator> <name>VAProfileNone</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_profiles_nb</name> <init>= <expr><call><name>vaMaxNumProfiles</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_profiles_nb</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>VAProfile</name> <modifier>*</modifier></type><name>p_profiles_list</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>i_profiles_nb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VAProfile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_profiles_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_supported_profile</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>status</name> <init>=
<expr><call><name>vaQueryConfigProfiles</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>p_profiles_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_profiles_nb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_profiles_nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_profiles_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i_profile</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_supported_profile</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_profiles_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b_supported_profile</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>IsEntrypointAvailable</name><parameter_list>(<parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>VAProfile</name></type> <name>i_profile</name></decl></parameter>,
<parameter><decl><type><name>VAEntrypoint</name></type> <name>entrypoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAEntrypoint</name> <modifier>*</modifier></type> <name>entrypoints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_entrypoints</name> <init>= <expr><call><name>vaMaxNumEntrypoints</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_entrypoints</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>entrypoints</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name>num_entrypoints</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VAEntrypoint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entrypoints</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>status</name> <init>=
<expr><call><name>vaQueryConfigEntrypoints</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>i_profile</name></expr></argument>, <argument><expr><name>entrypoints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_entrypoints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_entrypoints</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>entrypoint</name> <operator>==</operator> <name><name>entrypoints</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entrypoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VAConfigID</name></type>
<name>vlc_vaapi_CreateConfigChecked</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>,
<parameter><decl><type><name>VAProfile</name></type> <name>i_profile</name></decl></parameter>, <parameter><decl><type><name>VAEntrypoint</name></type> <name>entrypoint</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_force_vlc_chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>va_force_fourcc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_force_vlc_chroma</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>unused</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_chroma_to_vaapi</name><argument_list>(<argument><expr><name>i_force_vlc_chroma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unused</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>va_force_fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsVaProfileSupported</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>i_profile</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"profile(%d) is not supported"</literal></expr></argument>, <argument><expr><name>i_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VA_INVALID_ID</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsEntrypointAvailable</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>i_profile</name></expr></argument>, <argument><expr><name>entrypoint</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"entrypoint(%d) is not available"</literal></expr></argument>, <argument><expr><name>entrypoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VA_INVALID_ID</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>VAConfigAttrib</name></type> <name>attrib</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VAConfigAttribRTFormat</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vaGetConfigAttributes</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>i_profile</name></expr></argument>, <argument><expr><name>entrypoint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"vaGetConfigAttributes failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VA_INVALID_ID</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>attrib</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <operator>(</operator><name>VA_RT_FORMAT_YUV420</name><operator>|</operator><name>VA_RT_FORMAT_YUV420_10BPP</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"config doesn't support VA_RT_FORMAT_YUV420*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VA_INVALID_ID</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_sattribs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceAttrib</name> <modifier>*</modifier></type><name>sattribs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAConfigID</name></type> <name>va_config_id</name> <init>= <expr><name>VA_INVALID_ID</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaCreateConfig</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>i_profile</name></expr></argument>, <argument><expr><name>entrypoint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>va_config_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>va_force_fourcc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>va_config_id</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vaQuerySurfaceAttributes</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>va_config_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_sattribs</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sattribs</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name>num_sattribs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sattribs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sattribs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vaQuerySurfaceAttributes</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>va_config_id</name></expr></argument>, <argument><expr><name>sattribs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_sattribs</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_sattribs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>VASurfaceAttrib</name> <modifier>*</modifier></type><name>sattrib</name> <init>= <expr><operator>&amp;</operator><name><name>sattribs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sattrib</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VASurfaceAttribPixelFormat</name>
<operator>&amp;&amp;</operator> <name><name>sattrib</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VA_SURFACE_ATTRIB_SETTABLE</name>
<operator>&amp;&amp;</operator> <name><name>sattrib</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name> <operator>==</operator> <name>va_force_fourcc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sattribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>va_config_id</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sattribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>va_config_id</name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"config doesn't support forced fourcc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_vaapi_DestroyConfig</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>va_config_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VA_INVALID_ID</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>vaapi_pic_ctx</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vaapi_pic_context</name></name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picref</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>pic_sys_vaapi_instance</name>
<block>{
<decl_stmt><decl><type><name>atomic_int</name></type> <name>pic_refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>num_render_targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name><name>render_targets</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>pic_sys_vaapi_instance</name></name> <modifier>*</modifier></type><name>instance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vaapi_pic_ctx</name></name></type> <name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>picture_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pool_pic_destroy_cb</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pic_sys_vaapi_instance</name></name> <modifier>*</modifier></type><name>instance</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>instance</name><operator>-&gt;</operator><name>pic_refcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vaDestroySurfaces</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ctx</name><operator>.</operator><name>va_dpy</name></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>render_targets</name></name></expr></argument>,
<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>num_render_targets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pic_ctx_destroy_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vaapi_pic_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>vaapi_pic_ctx</name> <operator>*</operator><operator>)</operator> <name>opaque</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>picref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type>
<name>pic_ctx_copy_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vaapi_pic_ctx</name></name> <modifier>*</modifier></type><name>src_ctx</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr>struct <name>vaapi_pic_ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vaapi_pic_ctx</name></name> <modifier>*</modifier></type><name>dst_ctx</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>dst_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_ctx</name> <operator>=</operator> <operator>*</operator><name>src_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>s</name><operator>.</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>s</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name>pic_ctx_destroy_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Hold</name><argument_list>(<argument><expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>picref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>dst_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>s</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pic_sys_ctx_destroy_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>opaque</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>picture_pool_t</name> <modifier>*</modifier></type>
<name>vlc_vaapi_PoolNew</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>,
<parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>VASurfaceID</name> <modifier>*</modifier><modifier>*</modifier></type><name>render_targets</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>va_rt_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>va_fourcc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_chroma_to_vaapi</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>va_rt_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>va_fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pic_sys_vaapi_instance</name></name> <modifier>*</modifier></type><name>instance</name> <init>=
<expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>instance</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VASurfaceID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>instance</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>instance</name><operator>-&gt;</operator><name>num_render_targets</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>instance</name><operator>-&gt;</operator><name>pic_refcount</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VASurfaceAttrib</name></type> <name><name>fourcc_attribs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VASurfaceAttribPixelFormat</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_SURFACE_ATTRIB_SETTABLE</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>VAGenericValueTypeInteger</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>va_fourcc</name></expr>,
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>pics</name><index>[<expr><name>count</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaCreateSurfaces</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>va_rt_format</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>render_targets</name></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>num_render_targets</name></name></expr></argument>,
<argument><expr><name>fourcc_attribs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>p_sys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<goto>goto <name>error_pic</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <name>instance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ctx</name><operator>.</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>picture_context_t</name><operator>)</operator> <block>{
<expr><name>pic_sys_ctx_destroy_cb</name></expr>, <expr><name>pic_ctx_copy_cb</name></expr>,
<expr><name>vctx</name></expr>, 
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ctx</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <name><name>instance</name><operator>-&gt;</operator><name>render_targets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ctx</name><operator>.</operator><name>va_dpy</name></name> <operator>=</operator> <name>dpy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>rsc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>p_sys</name></expr>,
<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>pool_pic_destroy_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>picture_NewFromResource</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<goto>goto <name>error_pic</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>picture_pool_New</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>pics</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_pic</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>instance</name><operator>-&gt;</operator><name>pic_refcount</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>render_targets</name> <operator>=</operator> <name><name>instance</name><operator>-&gt;</operator><name>render_targets</name></name></expr>;</expr_stmt>
<return>return <expr><name>pool</name></expr>;</return>

<label><name>error_pic</name>:</label>
<while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>pics</name><index>[<expr><operator>--</operator><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>VA_CALL</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>vaDestroySurfaces</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>render_targets</name></name></expr></argument>,
<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>num_render_targets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_VAAPI_CHROMA</name><parameter_list>(<parameter><type><name>pic</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert(vlc_vaapi_IsChromaOpaque(pic-&gt;format.i_chroma)); } while(0)</cpp:value></cpp:define>



<function><type><name>void</name></type>
<name>vlc_vaapi_PicSetContext</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vaapi_pic_context</name></name> <modifier>*</modifier></type><name>vaapi_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_VAAPI_CHROMA</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>vaapi_ctx</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>vaapi_ctx</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>vlc_vaapi_PicAttachContext</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_VAAPI_CHROMA</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picref</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_vaapi_PicSetContext</name><argument_list>(<argument><expr><name>pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VASurfaceID</name></type>
<name>vlc_vaapi_PicGetSurface</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_VAAPI_CHROMA</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator>struct <name>vaapi_pic_context</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>context</name></name><operator>)</operator><operator>-&gt;</operator><name>surface</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VADisplay</name></type>
<name>vlc_vaapi_PicGetDisplay</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_VAAPI_CHROMA</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vaapi_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><operator>(</operator>struct <name>vaapi_pic_context</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>va_dpy</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
