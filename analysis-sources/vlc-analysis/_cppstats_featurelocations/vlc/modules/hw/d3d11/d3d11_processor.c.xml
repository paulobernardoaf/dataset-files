<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\hw\d3d11\d3d11_processor.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11_processor.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ID3D11VideoContext_VideoProcessorBlt</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>LogProcessorSupport</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><name>ID3D11VideoProcessorEnumerator</name> <modifier>*</modifier></type><name>processorEnumerator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>format</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>format</name> <operator>&lt;</operator> <literal type="number">188</literal></expr>;</condition> <incr><expr><name>format</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoProcessorEnumerator_CheckVideoProcessorFormat</name><argument_list>(<argument><expr><name>processorEnumerator</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>support</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT</name><operator>|</operator><name>D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT</name><operator>)</operator><operator>)</operator>
<operator>==</operator> <operator>(</operator><name>D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT</name><operator>|</operator><name>D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>support</name> <operator>=</operator> <literal type="string">"input/output"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>support</name> <operator>=</operator> <literal type="string">"input"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>support</name> <operator>=</operator> <literal type="string">"output"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>support</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"processor format %s is supported for %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>support</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"processor format (%d) is supported for %s"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>support</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D3D11_CreateProcessor</name></cpp:undef>
<function><type><name>int</name></type> <name>D3D11_CreateProcessor</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>,
<parameter><decl><type><name>D3D11_VIDEO_FRAME_FORMAT</name></type> <name>srcFields</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter>,
<parameter><decl><type><name>d3d11_processor_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>d3d11_processor_t</name><operator>)</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_QueryInterface</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ID3D11VideoDevice</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>d3dviddev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Could not Query ID3D11VideoDevice Interface. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_QueryInterface</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ID3D11VideoContext</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>d3dvidctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Could not Query ID3D11VideoContext Interface. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D3D11_VIDEO_PROCESSOR_CONTENT_DESC</name></type> <name>processorDesc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>InputFrameFormat</name> <operator>=</operator> <name>srcFields</name></expr>,
<expr><operator>.</operator><name>InputFrameRate</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>Numerator</name> <operator>=</operator> <name><name>fmt_in</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>?</operator> <name><name>fmt_in</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>:</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>Denominator</name> <operator>=</operator> <name><name>fmt_in</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>InputWidth</name> <operator>=</operator> <name><name>fmt_in</name><operator>-&gt;</operator><name>i_width</name></name></expr>,
<expr><operator>.</operator><name>InputHeight</name> <operator>=</operator> <name><name>fmt_in</name><operator>-&gt;</operator><name>i_height</name></name></expr>,
<expr><operator>.</operator><name>OutputWidth</name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_width</name></name></expr>,
<expr><operator>.</operator><name>OutputHeight</name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_height</name></name></expr>,
<expr><operator>.</operator><name>OutputFrameRate</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>Numerator</name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>?</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>:</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>Denominator</name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>Usage</name> <operator>=</operator> <name>D3D11_VIDEO_USAGE_PLAYBACK_NORMAL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CreateVideoProcessorEnumerator</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3dviddev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processorDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>procEnumerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>procEnumerator</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Can't get a video processor for the video."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>LogProcessorSupport</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>procEnumerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>D3D11_ReleaseProcessor</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMOD</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>D3D11_ReleaseProcessor</name><parameter_list>(<parameter><decl><type><name>d3d11_processor_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>videoProcessor</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ID3D11VideoProcessor_Release</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>videoProcessor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>videoProcessor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>procEnumerator</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ID3D11VideoProcessorEnumerator_Release</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>procEnumerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>procEnumerator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>d3dviddev</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ID3D11VideoDevice_Release</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3dviddev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3dviddev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>d3dvidctx</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ID3D11VideoContext_Release</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3dvidctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3dvidctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D3D11_Assert_ProcessorInput</name></cpp:undef>
<function><type><name>HRESULT</name></type> <name>D3D11_Assert_ProcessorInput</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d11_processor_t</name> <modifier>*</modifier></type><name>d3d_proc</name></decl></parameter>, <parameter><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>processorInput</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>S_OK</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC</name></type> <name>inDesc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>FourCC</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>ViewDimension</name> <operator>=</operator> <name>D3D11_VPIV_DIMENSION_TEXTURE2D</name></expr>,
<expr><operator>.</operator><name><name>Texture2D</name><operator>.</operator><name>MipSlice</name></name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name><name>Texture2D</name><operator>.</operator><name>ArraySlice</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>slice_index</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CreateVideoProcessorInputView</name><argument_list>(<argument><expr><name><name>d3d_proc</name><operator>-&gt;</operator><name>d3dviddev</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>resource</name><index>[<expr><name>KNOWN_DXGI_INDEX</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>d3d_proc</name><operator>-&gt;</operator><name>procEnumerator</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>inDesc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>processorInput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><literal type="string">"Failed to create processor input for slice %d. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>slice_index</name></name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
