<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\hw\d3d11\d3d11_deinterlace.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11_processor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/d3d11_fmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_filter/deinterlace/common.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>d3d11_processor_t</name></type> <name>d3d_proc</name></decl>;</decl_stmt>

<union>union <block>{
<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>outTexture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11Resource</name> <modifier>*</modifier></type><name>outResource</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>ID3D11VideoProcessorOutputView</name> <modifier>*</modifier></type><name>processorOutput</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>deinterlace_ctx</name></name></type> <name>context</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<struct>struct <name>filter_mode_t</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS</name></type> <name>i_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deinterlace_algo</name></type> <name>settings</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>filter_mode_t</name></name></type> <name><name>filter_mode</name> <index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"blend"</literal></expr>, <expr><name>D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND</name></expr>,
<expr><block>{ <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bob"</literal></expr>, <expr><name>D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB</name></expr>,
<expr><block>{ <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><name>D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION</name></expr>,
<expr><block>{ <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ivtc"</literal></expr>, <expr><name>D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE</name></expr>,
<expr><block>{ <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yadif2x"</literal></expr>, <expr><name>D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE</name></expr>,
<expr><block>{ <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FlushDeinterlacing</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RenderPic</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_field</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>p_out_sys</name> <init>= <expr><call><name>ActiveD3D11PictureSys</name><argument_list>(<argument><expr><name>p_outpic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_prev</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_cur</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>D3D11_VIDEO_FRAME_FORMAT</name></type> <name>frameFormat</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>i_field</name></expr> ?</condition><then>
<expr><name>D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST</name></expr> </then><else>:
<expr><name>D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ID3D11VideoContext_VideoProcessorSetStreamFrameFormat</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>d3dvidctx</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frameFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11VideoContext_VideoProcessorSetStreamAutoProcessingMode</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>d3dvidctx</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D3D11_VIDEO_PROCESSOR_STREAM</name></type> <name>stream</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>Enable</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>InputFrameOrField</name></name> <operator>=</operator> <ternary><condition><expr><name>i_field</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_cur</name> <operator>&amp;&amp;</operator> <name>p_next</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>picsys_next</name> <init>= <expr><call><name>ActiveD3D11PictureSys</name><argument_list>(<argument><expr><name>p_next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>picsys_next</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FAILED</name><argument_list>(<argument><expr><call><name>D3D11_Assert_ProcessorInput</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name></name></expr></argument>, <argument><expr><name>picsys_next</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>picsys_cur</name> <init>= <expr><call><name>ActiveD3D11PictureSys</name><argument_list>(<argument><expr><name>p_cur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>picsys_cur</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FAILED</name><argument_list>( <argument><expr><call><name>D3D11_Assert_ProcessorInput</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name></name></expr></argument>, <argument><expr><name>picsys_cur</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_prev</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>picsys_prev</name> <init>= <expr><call><name>ActiveD3D11PictureSys</name><argument_list>(<argument><expr><name>p_prev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>picsys_prev</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FAILED</name><argument_list>( <argument><expr><call><name>D3D11_Assert_ProcessorInput</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name></name></expr></argument>, <argument><expr><name>picsys_prev</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>pInputSurface</name></name> <operator>=</operator> <name><name>picsys_cur</name><operator>-&gt;</operator><name>processorInput</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>ppFutureSurfaces</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>picsys_next</name><operator>-&gt;</operator><name>processorInput</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>ppPastSurfaces</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>picsys_prev</name><operator>-&gt;</operator><name>processorInput</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>PastFrames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>FutureFrames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>pInputSurface</name></name> <operator>=</operator> <name><name>picsys_next</name><operator>-&gt;</operator><name>processorInput</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>ppPastSurfaces</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>picsys_cur</name><operator>-&gt;</operator><name>processorInput</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>PastFrames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>p_sys_src</name> <init>= <expr><call><name>ActiveD3D11PictureSys</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys_src</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FAILED</name><argument_list>( <argument><expr><call><name>D3D11_Assert_ProcessorInput</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name></name></expr></argument>, <argument><expr><name>p_sys_src</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>pInputSurface</name></name> <operator>=</operator> <name><name>p_sys_src</name><operator>-&gt;</operator><name>processorInput</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>srcRect</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_x_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_y_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>srcRect</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>srcRect</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11VideoContext_VideoProcessorSetStreamSourceRect</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>d3dvidctx</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11VideoContext_VideoProcessorSetStreamDestRect</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>d3dvidctx</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoContext_VideoProcessorBlt</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>d3dvidctx</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>processorOutput</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>D3D11_BOX</name></type> <name>box</name> <init>= <expr><block>{
<expr><operator>.</operator><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name></expr>,
<expr><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_width</name></name></expr>,
<expr><operator>.</operator><name>back</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_CopySubresourceRegion</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>,
<argument><expr><name><name>p_out_sys</name><operator>-&gt;</operator><name>resource</name><index>[<expr><name>KNOWN_DXGI_INDEX</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_out_sys</name><operator>-&gt;</operator><name>slice_index</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>outResource</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RenderSinglePic</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RenderPic</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Deinterlace</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d3d11_device_lock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>DoDeinterlacing</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d3d11_device_unlock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>filter_mode_t</name></name> <modifier>*</modifier></type><name>GetFilterMode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>mode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>filter_mode</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>filter_mode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_mode</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>filter_mode</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>AllocPicture</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>d3d11_video_context_t</name> <modifier>*</modifier></type><name>vctx_sys</name> <init>= <expr><call><name>GetD3D11ContextPrivate</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>output_format</name> <init>= <expr><call><name>GetRenderFormatList</name><argument_list>()</argument_list></call></expr></init></decl>;</init>
<condition><expr><name><name>output_format</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>output_format</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output_format</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <name><name>vctx_sys</name><operator>-&gt;</operator><name>format</name></name> <operator>&amp;&amp;</operator>
<call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>output_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cfg</name> <operator>=</operator> <name>output_format</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>cfg</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>D3D11_AllocPicture</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr>struct <name>d3d11_pic_context</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>D3D11_AllocateResourceView</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name><operator>.</operator><name>renderSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>D3D11OpenDeinterlace</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>GetD3D11ContextPrivate</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>video_format_IsSimilar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>d3d11_video_context_t</name> <modifier>*</modifier></type><name>vtcx_sys</name> <init>= <expr><call><name>GetD3D11ContextPrivate</name><argument_list>( <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>dev_sys</name> <init>= <expr><call><name>GetD3D11OpaqueContext</name><argument_list>( <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>dev_sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>D3D11_CreateProcessor</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>flags</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoProcessorEnumerator_CheckVideoProcessorFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>procEnumerator</name></name></expr></argument>, <argument><expr><name><name>vtcx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"can't read processor support for %s"</literal></expr></argument>, <argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name><name>vtcx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"deinterlacing %s is not supported"</literal></expr></argument>, <argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name><name>vtcx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D3D11_VIDEO_PROCESSOR_CAPS</name></type> <name>processorCaps</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoProcessorEnumerator_GetVideoProcessorCaps</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>procEnumerator</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processorCaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mode</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filter_mode_t</name></name> <modifier>*</modifier></type><name>p_mode</name> <init>= <expr><call><name>GetFilterMode</name><argument_list>(<argument><expr><name>psz_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_mode</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"unknown mode %s, trying blend"</literal></expr></argument>, <argument><expr><name>psz_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_mode</name> <operator>=</operator> <call><name>GetFilterMode</name><argument_list>(<argument><expr><literal type="string">"blend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_mode</name><operator>-&gt;</operator><name>psz_mode</name></name></expr></argument>, <argument><expr><name>psz_mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"using %s deinterlacing mode"</literal></expr></argument>, <argument><expr><name><name>p_mode</name><operator>-&gt;</operator><name>psz_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS</name></type> <name>rateCaps</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>UINT</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <name><name>processorCaps</name><operator>.</operator><name>RateConversionCapsCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>type</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>ID3D11VideoProcessorEnumerator_GetVideoProcessorRateConversionCaps</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>procEnumerator</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rateCaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rateCaps</name><operator>.</operator><name>ProcessorCaps</name></name> <operator>&amp;</operator> <name><name>p_mode</name><operator>-&gt;</operator><name>i_mode</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CreateVideoProcessor</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>d3dviddev</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>procEnumerator</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name><operator>==</operator><name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>p_mode</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>!=</operator> <name>D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"mode %s not available, trying bob"</literal></expr></argument>, <argument><expr><name>psz_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_mode</name> <operator>=</operator> <call><name>GetFilterMode</name><argument_list>(<argument><expr><literal type="string">"bob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>UINT</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <name><name>processorCaps</name><operator>.</operator><name>RateConversionCapsCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>type</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>ID3D11VideoProcessorEnumerator_GetVideoProcessorRateConversionCaps</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>procEnumerator</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rateCaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rateCaps</name><operator>.</operator><name>ProcessorCaps</name></name> <operator>&amp;</operator> <name>D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CreateVideoProcessor</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>d3dviddev</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>procEnumerator</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>videoProcessor</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"couldn't find a deinterlacing filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>texDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>MipLevels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>SampleDesc</name><operator>.</operator><name>Count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>MiscFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <name>D3D11_USAGE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>CPUAccessFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name><name>vtcx_sys</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>BindFlags</name></name> <operator>=</operator> <name>D3D11_BIND_RENDER_TARGET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <name>D3D11_USAGE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>ArraySize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateTexture2D</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>outTexture</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"CreateTexture2D failed. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC</name></type> <name>outDesc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>ViewDimension</name> <operator>=</operator> <name>D3D11_VPOV_DIMENSION_TEXTURE2D</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CreateVideoProcessorOutputView</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>d3dviddev</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outResource</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name><operator>.</operator><name>procEnumerator</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>outDesc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>processorOutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>,<argument><expr><literal type="string">"Failed to create processor output. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>InitDeinterlacingContext</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name> <operator>=</operator> <name><name>p_mode</name><operator>-&gt;</operator><name>settings</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name><operator>.</operator><name>b_use_frame_history</name></name> <operator>=</operator> <name><name>rateCaps</name><operator>.</operator><name>PastFrames</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>rateCaps</name><operator>.</operator><name>FutureFrames</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name><operator>.</operator><name>b_use_frame_history</name></name> <operator>!=</operator> <name><name>p_mode</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_use_frame_history</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"deinterlacing not using frame history as requested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name><operator>.</operator><name>b_double_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pf_render_ordered</name></name> <operator>=</operator> <name>RenderPic</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pf_render_single_pic</name></name> <operator>=</operator> <name>RenderSinglePic</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>out_fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetDeinterlacingOutput</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name> <operator>&amp;&amp;</operator>
<name><name>out_fmt</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr> )</condition>
<block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name>out_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>=</operator> <call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Deinterlace</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>processorOutput</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11VideoProcessorOutputView_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processorOutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>outTexture</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outTexture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>D3D11_ReleaseProcessor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>D3D11CloseDeinterlace</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processorOutput</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11VideoProcessorOutputView_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processorOutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outTexture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D3D11_ReleaseProcessor</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d_proc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
